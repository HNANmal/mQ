{
  "Uuid": "1d6d431a-e8c4-48aa-8b91-a874ff2542a8",
  "IsCustomNode": false,
  "Description": "Auto Calculating the Quantities of each Element As per the Family List",
  "Name": "hCalc(pythonAIO)_rH(20231118)",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Name": "Family List 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": ".\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    },
    {
      "Id": "ecccb4f11a2543e29cb666423f4f697e",
      "Name": "Total BOQ sheet 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": ".\\Total BOQ_blank.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    },
    {
      "Id": "aae6ee369697433d96978d6f0a38227c",
      "Name": "건물명 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "Please enter Building Name before running ",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "739b18232b3647c3a93bc9903af06c1d",
      "Name": "토공 산출 모드 선택",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "개별 터파기",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [
    {
      "Id": "53192363f9da457ca86140d19351bdfb",
      "Name": "Export to Total BOQ",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "1250bd18102c4ebaac9950d60dac8849",
      "Inputs": [
        {
          "Id": "f2b7450af5914cbf8a28c2a092e6a190",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "912753a782b84f598e120e936fffbd58",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef get_all_BIC():\r\n\r\n    db = [\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Floors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Roofs,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Walls,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFoundation,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Doors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Windows,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Stairs,\r\n    #Autodesk.Revit.DB.BuiltInCategory.OST_Railings,\r\n    ]\r\n    return db\r\n    \r\ndef get_allElems(doc):\r\n    bics = get_all_BIC()\r\n    \r\n    def getElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType().ToElements()\r\n        return res\r\n\r\n    def getRailElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType()\r\n        return res\r\n\r\n    res = map(getElems, bics)\r\n#    res = getRailElems(Autodesk.Revit.DB.BuiltInCategory.OST_RailingSystemRail)\r\n    return res\r\n\r\n\r\nOUT = get_allElems(doc)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
      "Inputs": [
        {
          "Id": "08594b729317483fab0ab869358cdb3c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4d9d60debe6406cace5eb687f712858",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 441,
      "SelectedString": "OST_StairsRailing",
      "NodeType": "ExtensionNode",
      "Id": "d78f3dfc768541ab8490b53194e174c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdc68e6596d64c1bb2ad17af850a8a64",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
      "Inputs": [
        {
          "Id": "ae38fed72c0a434eb235268bfba22c03",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07eba95685e249a0a3188444eec253fe",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
      "Inputs": [
        {
          "Id": "efbd6851497a4681a114ca7842d95e6a",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2d45870ecc9f4742810ae2af861ad07b",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266640a8b58449a48603af36addb1282",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
      "Inputs": [
        {
          "Id": "c4d740fa206e4ab3b53ba148e9727e8f",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8871f8fef5b841e484fe65aa92aecb9c",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2e3869f91c64b06ab4cff0e2c816de0",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da624c3834b64df4a29198439fca082e",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16f6a93146ee4557a8eec29cac4eb344",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "caccad700bd84d8e8cb198c7fe1545aa",
      "Inputs": [
        {
          "Id": "8d8f529204cd48a5a2210b85d94be686",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb3a2510c5934129baf50771f5bb29a9",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\hecCalc\\2023\\documentum\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "InputValue": ".\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e3d41cbea388406e9b31fca8184f2a13",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "76e75c1cd00342eeb418e14c2410b8f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f98969ee45ea4cce8921b553ad57fbc0",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"WM-AR\"\n,\"물량Param\"\n,\"1.Floors\"\n,\"2.Roofs\"\n,\"3.Walls\"\n,\"4.St Fdn\"\n,\"5.St Col\"\n,\"6.St Framing\"\n,\"7.Ceilings\"\n,\"8.Doors\"\n,\"9.Windows\"\n,\"10.Stairs\"\n,\"11.Railings\"\n//,\"13.Generic\"\n];",
      "Id": "64985def907747329221585392bfc414",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "65f005d270e742a5906ad09029786a2e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ExportToExcel@string,string,int,int,var[][],bool,bool",
      "Id": "3a2291d54fa74970b0cacd8a3a8a08b8",
      "Inputs": [
        {
          "Id": "c2327385dc4d4427ad017aefe187b6f3",
          "Name": "filePath",
          "Description": "File representing the Excel workbook\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f39659b145d0462482073c7655fe3582",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "99b7a172bab04fcf9e908e78fd92eaf3",
          "Name": "startRow",
          "Description": "Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "26d7414229104d838c6c46f04092e46f",
          "Name": "startColumn",
          "Description": "Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "908bb9ba4c4445618470abf4e49c4100",
          "Name": "data",
          "Description": "Data to write to the spreadsheet\n\nvar[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "bc26711cf2d84b4faf73917768d70b24",
          "Name": "overWrite",
          "Description": "Toggle to clear spreadsheet before writing\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "457260c062b340eeaab5b5dedbfbc540",
          "Name": "writeAsString",
          "Description": "Toggle to switch between writing Excel file as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1543c714eb7542f6bf73df28c1912c26",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Write data to a Microsoft Excel spreadsheet. Data is written by row with sublists to be written in successive rows. Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell A1. Null values and empty lists are written to Excel as empty cells. This node requires Microsoft Excel to be installed.\n\nData.ExportToExcel (filePath: string, sheetName: string, startRow: int, startColumn: int, data: var[][], overWrite: bool = false, writeAsString: bool = false): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "d9de8a61787442ceb4b5e56fe75e7a1d",
      "Inputs": [
        {
          "Id": "c24104869fb5431bacfe98eac9722e96",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ddaee91b731249a990626eee2bce9ca4",
          "Name": "keys",
          "Description": "Keys of the dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "32031adf5ee64bc49ae7c3d65dc89ca3",
          "Name": "values",
          "Description": "Values of the dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "ae19779d3103471bb4993d2624fee3c8",
      "Inputs": [
        {
          "Id": "b4d9a9e2970e4ba7a0adf077ee9264e5",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        },
        {
          "Id": "c5bae2a161c44dbab17d406f3fc7e8d6",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8b75b3669acf47baab8e27b5432293d5",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "0e906b492e964f0388034bb3dba9715c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fbe496ff58b5496bab3d818170be9b90",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "file_path;",
      "Id": "e4bace56c16d462b8e637e17ad1a1046",
      "Inputs": [
        {
          "Id": "83e98e90705349c8b13048c1f1cfe7c0",
          "Name": "file_path",
          "Description": "file_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a3ef7f68ea224374834c39ddb549b2ca",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "43c850fe5b414baaa43fa6abbf66d41a",
      "Inputs": [
        {
          "Id": "9e003a398c744cf489ca6cf87328c986",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "6b9ac6c86e794528a8f432bda91bb2d7",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66334226642f44b19bfe040f61500a5c",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "6;\n31;",
      "Id": "2524f0f864744ce88dfa2ab2d9d3e61d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "724b257b6e404ed585ee188d157145ba",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bfa2bdde29b94030aa701b88ab3ca988",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_groupBy_Sheet_WM;",
      "Id": "92a5d0c5dcc842d7b250f2421b0731ad",
      "Inputs": [
        {
          "Id": "966c11318b8a4a43afa0e303f1b32ac8",
          "Name": "dict_groupBy_Sheet_WM",
          "Description": "dict_groupBy_Sheet_WM",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e09582488be4705b6ac572c258d018e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport operator\r\nfrom itertools import groupby\r\nimport copy\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n# Place your code below this line\r\ndef extractCalcResult_forTotalBOQ(elemDicts):\r\n    res = []\r\n    for d in elemDicts:\r\n        wms = d[\"wms\"]\r\n        for wm in wms:\r\n            keys = [\"SheetName\", \"rIDX\", \"Work Master Code\", \"Gauge Code\", \"wmSpecs\", \"Family Type Name\", \"calcResult\"]\r\n            vals = list(map(lambda x: wm[x],keys))\r\n            k_v = list(zip(keys, vals))\r\n            res_d = dict(k_v)\r\n            if \"Description\" in wm.Keys:\r\n                res_d[\"Description\"] = wm[\"Description\"]\r\n            else:\r\n                res_d[\"Description\"] = \"\"\r\n            res_d[\"wmcANDgauge\"] = \"\".join([wm[\"Work Master Code\"],wm[\"Gauge Code\"]])\r\n            res_d[\"UoM\"] = wm[\"Unit\"]\r\n            res.append(res_d)\r\n        \r\n    return res\r\n\r\ndef make_dict_groupBy_WM(elemDicts):\r\n    extractedDicts = extractCalcResult_forTotalBOQ(elemDicts)\r\n    sortedDicts_WMC = sorted(extractedDicts, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    grpDicts_WMC = groupby(sortedDicts_WMC, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    \r\n    res = []\r\n    for k, g in grpDicts_WMC: \r\n        wmCode = k\r\n        gg = copy.deepcopy(list(g))\r\n        calcSum = round(sum(map(lambda x: x[\"calcResult\"], gg)),3)\r\n        wmSpecs = gg[0][\"wmSpecs\"]\r\n        catStr = \"_\".join([wmSpecs[0],wmSpecs[1]])\r\n        specOnly = list(filter(lambda x: x!=0, wmSpecs))[3:]\r\n        addSpec = gg[0][\"Description\"]\r\n        dict_res = {\r\n            \"catStr\": catStr,\r\n            \"Work Master Code\": wmCode,\r\n            \"Gauge Code\": gg[0][\"Gauge Code\"],\r\n            \"Description\": wmSpecs[2],\r\n            \"Spec.\": \"\\n\".join(specOnly),\r\n            \"Additional Spec.\": addSpec,\r\n            \"calcVal\": calcSum,\r\n            \"UoM\": gg[0][\"UoM\"]\r\n            #\"wmSpecs\": wmSpecs,\r\n            }\r\n        res.append(dict_res)\r\n    \r\n    \r\n    return res\r\n\r\nextDicts = extractCalcResult_forTotalBOQ(elemDicts)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = make_dict_groupBy_WM(elemDicts)\r\n#OUT = sorted(set(map(lambda x: x[\"Work Master Code\"], extDicts)))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f12f2f24ce254bd0baef14f26c5d20e9",
      "Inputs": [
        {
          "Id": "eb38296ae8b4424f892c47d4c8380597",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d9f7652d7dcd49818455cfcb11afd4d5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\hecCalc\\2023\\documentum\\Total BOQ_blank.xlsx",
      "InputValue": ".\\Total BOQ_blank.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "ecccb4f11a2543e29cb666423f4f697e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "095ac27cee8044e7a2f1a3250bb3ef14",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "545bdda03ce34cbf8f380aa09996affe",
      "Inputs": [
        {
          "Id": "60314121b72e4091a067f4ad720e1648",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "809aab676bdd45759176cd7fc1b7287c",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e88f8bd2a3704b26b0a47f1a4af42085",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c46c0fce7ef4f3b9d77f0c79a6d570a",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5bac32700234c6d9ed167d8d9c8f586",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(AR) BOQ\";\nfalse;",
      "Id": "23c16e6f54c54461a94198d996b688b8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6d47b8f9ac240dfae1f3aa0b2ae6664",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c9727449e64f48e69788fef8ef486d53",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "cb8eb6bb001d4e018998c1f81063a7b3",
      "Inputs": [
        {
          "Id": "ca3839e498cc41deb8e9225ab7ab8210",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e30bb663437641e092989a1db00f22eb",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wm_sheetDatas;",
      "Id": "6689bfc92b614a86a2438579264ab559",
      "Inputs": [
        {
          "Id": "8c0251f3a93a45e3af2c10b715fdc9fc",
          "Name": "wm_sheetDatas",
          "Description": "wm_sheetDatas",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c8a37b2461841eebfd7ca01ff4cbbcb",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "dcbac945a42f4a5c9a9db85369fb5958",
      "Inputs": [
        {
          "Id": "c9e1a9717b414fb18cba11de5a217a51",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "15939b39f28f4e619a0eb5412fcc19b8",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8bd85b9cebae40d887ecf33249bfa9ea",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "3;",
      "Id": "abf63584b5df484fa09c861a33e2a423",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b56e73df83b44e3e99d4218e0c900f86",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "0a5e14b22e144bed8451ebf583eb117a",
      "Inputs": [
        {
          "Id": "e5be3df534fc4ffca7597213d53ae45a",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "524b1b7f02034b7e9f83fd908cc91185",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65c451db8acc4de497ba72e61d8cd1ed",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "6;",
      "Id": "0de826304a0c4eeb88bf431965d3fbff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "52e9ec6674db4af88586c7799cfe0b57",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "353906790eac4dbe9265acc4fd59f260",
      "Inputs": [
        {
          "Id": "a4bfa9cbcd0b41e78735db0e5ca3876c",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9e3824f6d5f54568850402f597fa43b7",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom functools import reduce\r\nfrom functools import partial\r\nfrom string import ascii_lowercase\r\nimport itertools\r\nfrom itertools import chain\r\nimport re\r\n    \r\n#################################Module For Functional Programing#############################################\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\ndef find_IsInStr(target, str):\r\n    if target == None or str == None:\r\n        pass\r\n    else:\r\n        res = target in str\r\n        return res\r\n        \r\ndef find_IsInList(List, str):\r\n    if str == None or List == None:\r\n        pass\r\n    else:\r\n        res = str in List\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    #endidxs_tmp= list(map(lambda x: x[0],res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n    \r\ndef find_range_by_columnItem_discrim(db, col_idx, 판별항목):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInList(판별항목, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    #endidxs_tmp= list(map(lambda x: x[0],res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nbd_name = IN[0]\r\ndescr판별항목 = IN[1]\r\n판별항목lv1 = descr판별항목[0]\r\n판별항목lv2 = descr판별항목[1]\r\ndb = IN[2]\r\n\r\n\r\n# Place your code below this line\r\ndef Is_newSheet(Sheet):\r\n    \r\n    hdrs_withIdx = dict(list(find_headersAtSheet(Sheet).items()) + list(find_headers_Building(Sheet, bd_name).items()))\r\n    datasOnWMCodeCol = list(map(lambda x: x[hdrs_withIdx[\"Work Master Code\"]], Sheet))\r\n    \r\n    p = re.compile('\\w{8}-\\w{5}')\r\n    IsNewSheet = not(any(list(map(lambda x: p.match(str(x)), datasOnWMCodeCol))))\r\n    \r\n    \r\n    return [IsNewSheet,datasOnWMCodeCol]\r\n    \r\ndef find_headersAtSheet(Sheet):\r\n    headers_Sheet = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(Sheet[2])))\r\n    res = dict(headers_Sheet)\r\n    del res[\"_\"]\r\n    \r\n    return res\r\n    \r\ndef find_headers_Building(Sheet, bd_name):\r\n    headers_bd = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(Sheet[3])))\r\n    headers_targetBD = list(filter(lambda x: x[0] == bd_name, headers_bd))\r\n    res = {}\r\n    res[\"targetBD\"] = headers_targetBD[0][1]\r\n    return res\r\n\r\ndef find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목):\r\n    return find_range_by_columnItem_discrim(Sheet, hdrs_withIdx[\"Description\"], 판별항목)\r\n\r\ndef get_DataOnRangesAtSheet(Sheet):\r\n    \r\n    hdrs_withIdx = dict(list(find_headersAtSheet(Sheet).items()) + list(find_headers_Building(Sheet, bd_name).items()))\r\n    rgs_v_lv1 = list(map(lambda x: x[1], find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목lv1).values()))\r\n    rgs_v_lv2 = list(map(lambda x: x[1], find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목lv2).values()))\r\n    \r\n    idxs_v_lv1 = list(map(lambda x: range(x[0],x[1]+1), rgs_v_lv1))\r\n\r\n    datas_lv1 = []\r\n    col_datas = list(map(lambda x: x[hdrs_withIdx[\"Description\"]], Sheet))\r\n    for rg in idxs_v_lv1:\r\n        lv1_str = col_datas[rg[0]-1]\r\n        tmp = []\r\n        for i in rg:\r\n            tmp.append([i, lv1_str, col_datas[i]])\r\n        \r\n        datas_lv1.append(tmp)\r\n\r\n    datas_lv2 = []\r\n    for rg in datas_lv1:\r\n        tmp = []\r\n        for idx,v in enumerate(rg):\r\n            if v[2] == None:\r\n                tmp.append([v[0],v[1],tmp[idx-1][2]])\r\n            else:\r\n                tmp.append(v)\r\n        datas_lv2.append(tmp)\r\n\r\n    flatten_res = list(chain(*datas_lv2))\r\n    rres = itertools.groupby(flatten_res, lambda x: [x[1], x[2]])\r\n    \r\n    res = {}\r\n    for k, g in rres:\r\n        #print(list(g))\r\n        removedfirstelem_g = list(g)[1:]\r\n        res[\"_\".join(k)] = [removedfirstelem_g[0][0],removedfirstelem_g[-1][0]]\r\n        #res[\"_\".join(k)] = removedfirstelem_g\r\n    \r\n    return res\r\n\r\n\r\nhdrs_withIdx = dict(list(find_headersAtSheet(db).items()) + list(find_headers_Building(db, bd_name).items()))\r\n\r\nif Is_newSheet(db)[0]:\r\n    OUT = hdrs_withIdx, [Is_newSheet(db)[0],get_DataOnRangesAtSheet(db)]\r\nelse:\r\n    OUT = hdrs_withIdx, Is_newSheet(db)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6d3257a7ae1544ba96260a2930df41a0",
      "Inputs": [
        {
          "Id": "e40fc391bb9543069e39578990171d11",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c86c20b170cf41b2b9cfee070d24dc41",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec0e917339cb4f81875e476c63e9f5d3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a21d79dc4e546c7a5d930f015a1ccf9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "description판별항목1;",
      "Id": "1d1c6adab25c4ce38795f6d70084638b",
      "Inputs": [
        {
          "Id": "4e559b0185dc4491b7280e9af4d25100",
          "Name": "description판별항목1",
          "Description": "description판별항목1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "75452394259f454aac6b7f0729e4e1f7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "86d4c756923b4ec5a7a76f44031313e3",
      "Inputs": [
        {
          "Id": "b6b668c063784cf0ba5e742521351658",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e51c34b755b4b5daebc49a04c834a02",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be1b029e33894bd0902651bb82065169",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "6;",
      "Id": "36b72e613f054f51ab44d4a659a11baf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "da8b6750c54241e4ae6ec824684ac955",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "522eba1415564c619ea3a722c3bfca63",
      "Inputs": [
        {
          "Id": "85ac0d8fca71462086880054318c5da1",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "1713810eee684d02934f951dc7ba675d",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b345d4e40bdc4e6593a996aa4cb30453",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "78f0730f98164cf88c95031451db6a2e",
      "Inputs": [
        {
          "Id": "830fdb6b17c24e5e9b88bcb80c215549",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fd49bd91c8404815a9c1a36fc411c667",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "5;",
      "Id": "f8862fff8dc647619582f6b8e6003793",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d4b321675a114235bf59cb7e5d0e3e28",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Please enter Building Name before running ",
      "Id": "aae6ee369697433d96978d6f0a38227c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2ecfaa19c334eddb1d809fd5b9c21b7",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "description판별항목2;",
      "Id": "6790ac16e9864c6282b9f0a28e4bac80",
      "Inputs": [
        {
          "Id": "42770b41a2d946509605b16ddcffe4ed",
          "Name": "description판별항목2",
          "Description": "description판별항목2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "112368b6347846d79c81bcc2f9ded6e3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "8066549a4a9b47df80e48559f550e5c6",
      "Inputs": [
        {
          "Id": "893113c989264cd19431bbb81823b560",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5241a20caa8f481a94fc7be2332e76fc",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f41c17b57dc4486791d293b996225179",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import groupby\r\nfrom itertools import chain\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\nIsNewSheet = IN[0][0]\r\ninputDatas = IN[0][1]\r\nwmsDicts = IN[1]\r\n# Place your code below this line\r\n\r\ndef get_wmsGrped_sorted_idxed(rangeDicts, wmsDicts):\r\n    wmsSorted = sorted(wmsDicts, key=lambda x: x[\"Work Master Code\"])\r\n    wmsGrped = groupby(wmsDicts, lambda x: x[\"catStr\"])\r\n    wmsGrped_sorted = []\r\n    \r\n    for k,v in wmsGrped:\r\n        grp_sorted = sorted(list(v), key=lambda x: x[\"Work Master Code\"])\r\n        stt_idx = rangeDicts[k][0]\r\n        length_grp = len(grp_sorted)\r\n        idxs = range(stt_idx, stt_idx+length_grp)\r\n        zip_grp_idxs = list(zip(idxs, grp_sorted))\r\n        for i in zip_grp_idxs:\r\n            d = i[1]\r\n            d[\"rIDX\"] = i[0]\r\n        \r\n        wmsGrped_sorted.append(grp_sorted)\r\n        \r\n    wmsGrped_sorted_idxed = list(chain(*wmsGrped_sorted))\r\n    return wmsGrped_sorted_idxed\r\n\r\ndef match_DictWithIdx(datasOnWMCodeCol, wmsDicts):\r\n    idxWithDatasOnWMCode = enumerate(datasOnWMCodeCol)\r\n    for d in wmsDicts:\r\n        d[\"rIDX\"] = datasOnWMCodeCol.index(d[\"Work Master Code\"])\r\n        \r\n    res = wmsDicts\r\n    return res\r\n\r\n# Assign your output to the OUT variable.\r\nif IsNewSheet:\r\n    rangeDicts = inputDatas\r\n    res = get_wmsGrped_sorted_idxed(rangeDicts, wmsDicts)\r\nelse:\r\n    datasOnWMCodeCol = inputDatas\r\n    res = match_DictWithIdx(datasOnWMCodeCol, wmsDicts)\r\n\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "cf52cd359968431c954ef0c1c105f09b",
      "Inputs": [
        {
          "Id": "c65df92cac4c49448f02fb3db90aca10",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d6a579e11fc46ff81e2a20afbd033ad",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fc0b74d5401541c0bc827a65e85ad1a1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import groupby\r\n\r\nimport DSOffice\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nfilePath = IN[0]\r\nsheetName = IN[1]\r\nhdrs_withIdx = IN[2]\r\nIsNewSheet = IN[3][0]\r\ndictList = IN[4]\r\n\r\n# Place your code below this line\r\nexportToExcel = DSOffice.Data.ExportToExcel\r\n#print(hdrs_withIdx)\r\n\r\nhdrsColIdxs = [\r\n        hdrs_withIdx[\"Work Master Code\"],\r\n        hdrs_withIdx[\"Gauge Code\"],\r\n        hdrs_withIdx[\"Description\"],\r\n        hdrs_withIdx[\"Spec.\"],\r\n        hdrs_withIdx[\"Additional Spec.(설계자 작성)\"],\r\n        hdrs_withIdx[\"Reference to(설계자 작성)\"],\r\n        hdrs_withIdx[\"UoM\"],\r\n        hdrs_withIdx[\"targetBD\"],\r\n            ]\r\n\r\ndef writeToNewSheet(dictList):\r\n    dictList_grped = groupby(dictList, lambda x: x[\"catStr\"])\r\n    \r\n    dictList_grpedList = []\r\n    for k,grp in dictList_grped:\r\n        dictList_grpedList.append(list(grp))\r\n    \r\n    def writeExcel(keys, startColhdr, grpedList):\r\n        for i in dictList_grpedList:\r\n            #keys = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n            startCol = hdrs_withIdx[startColhdr]\r\n            startRow = i[0][\"rIDX\"]\r\n    \r\n            datas = list(zip(*map(lambda y: map(lambda x: x.get(y), list(i)), keys)))\r\n            #res.append(datas)\r\n            exportToExcel(filePath, sheetName, startRow, startCol, datas)\r\n    \r\n    #keys1 = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n    keys1 = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", \"Reference to\", \"UoM\"]\r\n    #keys2 = [\"UoM\"]\r\n    keys3 = [\"calcVal\"]\r\n    \r\n    writeExcel(keys1,\"Work Master Code\", dictList_grpedList)\r\n    #writeExcel(keys2,\"UoM\", dictList_grpedList)\r\n    writeExcel(keys3,\"targetBD\", dictList_grpedList)\r\n    \r\n    return dictList_grpedList\r\n    \r\ndef writeToExistSheet(dictList):\r\n    dictList_grped = groupby(dictList, lambda x: x[\"catStr\"])\r\n    \r\n    dictList_grpedList = []\r\n    for k,grp in dictList_grped:\r\n        dictList_grpedList.append(list(grp))\r\n    \r\n    def writeExcel(keys,startColhdr, grpedList):\r\n        for i in dictList_grpedList:\r\n            #keys = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n            startCol = hdrs_withIdx[startColhdr]\r\n            startRow = i[0][\"rIDX\"]\r\n    \r\n            datas = list(zip(*map(lambda y: map(lambda x: x[y], list(i)), keys)))\r\n            #res.append(datas)\r\n            exportToExcel(filePath, sheetName, startRow, startCol, datas)\r\n    \r\n#    keys1 = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n#    keys2 = [\"UoM\"]\r\n    keys3 = [\"calcVal\"]\r\n    \r\n#    writeExcel(keys1,\"Work Master Code\", dictList_grpedList)\r\n#    writeExcel(keys2,\"UoM\", dictList_grpedList)\r\n    writeExcel(keys3,\"targetBD\", dictList_grpedList)\r\n    \r\n    return dictList_grpedList\r\n# Assign your output to the OUT variable.\r\n\r\nif IsNewSheet:\r\n    OUT = writeToNewSheet(dictList)\r\nelse:\r\n    OUT = writeToExistSheet(dictList)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "53192363f9da457ca86140d19351bdfb",
      "Inputs": [
        {
          "Id": "7d852923babc430fa1d5c8efa5cdde9f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a14711119634cb3be308f0f81f8e3c2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b24df086c9204ccd9af377fabb5536aa",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17c5e50fcdc64d49a30e6884d4f4a9e0",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1f9bfde3838746b5aef0d8d9f60bfcfe",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f86a6da172074bfd8722962d69214204",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "TotalBOQ_path;\nsheetName;",
      "Id": "29337ae8d2c94d488ebdc03de0a16ad6",
      "Inputs": [
        {
          "Id": "0d1482bbce624f8fbea7388248deb622",
          "Name": "TotalBOQ_path",
          "Description": "TotalBOQ_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e43e5fd406464b7f8978b0b2edd82a44",
          "Name": "sheetName",
          "Description": "sheetName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "515259ed271e44d49f5f06415f8a3968",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0fd8c607dd7f4c8ab5496470eb788c13",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];\ni[1];\n//구간 rIdx;",
      "Id": "008b88f58bd548188e4d5668e106d9e3",
      "Inputs": [
        {
          "Id": "8eccee2da9d44095b4a5a8165d65e5e9",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5910d662ad6e4a1087d938c1a9ce900a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b3480272d2ec471a96af2b99b4778507",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "5c6408d2dc324480ad293743e0e51f10",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "323f7caf7ca34686a14fb4e51c84e0ca",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "754f8c62f313424485c7342eacc1cd4a",
      "Inputs": [
        {
          "Id": "60cd8c44df3e49219b09c56a53c466de",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "970a442dbaf948f7a5500cce67b1c1e9",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "개별 터파기",
          "Item": "0"
        },
        {
          "Name": "온통 터파기",
          "Item": "1"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "개별 터파기",
      "NodeType": "ExtensionNode",
      "Id": "739b18232b3647c3a93bc9903af06c1d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cd0186c0110e45efbff32b76a9bb3a55",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "file_path;",
      "Id": "7f5e0c25b593402094aa786410d940b1",
      "Inputs": [
        {
          "Id": "cdd5b3ba3dca46d2903fdb0bb343ca4d",
          "Name": "file_path",
          "Description": "file_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ab25c5fd093e4ef88174429852daa320",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport operator\r\nfrom itertools import groupby\r\nfrom itertools import chain\r\nimport copy\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\nfamTypeDict = IN[1]\r\nwmDicts = list(chain(*famTypeDict.values()))\r\n# Place your code below this line\r\ndef merge_dicts(*dict_args):\r\n    \"\"\"\r\n    Given any number of dictionaries, shallow copy and merge into a new dict,\r\n    precedence goes to key-value pairs in latter dictionaries.\r\n    \"\"\"\r\n    result = {}\r\n    for dictionary in dict_args:\r\n        result.update(dictionary)\r\n    return result\r\n\r\ndef getUnique_wmDicts(wmDicts):\r\n    headers = wmDicts[0].Keys\r\n    wmspec_headers = list(filter(lambda x: \"Work C\" in x or \"Spec\" in x, headers))\r\n    noNeedKeys = [\"Family Type Name\", \"Quantity\", \"rIDX\", \"Dynamo 물량산출식\", \"SheetName\", \"Q'ty Cal Type Tag\"]\r\n    def refineDicts(dicts, noNeedKeys):\r\n        dicts_refined = []\r\n        for d in dicts:\r\n            new_d = {}\r\n            keys,vals = d.Keys,d.Values\r\n            keys_new = set(keys) - set(wmspec_headers)\r\n            items = zip(keys, vals)  \r\n            for k,v in items:\r\n                if k not in noNeedKeys+wmspec_headers:\r\n                    new_d[k] = v\r\n                    new_d[\"wmSpecs\"] = list(map(lambda x: d[x], wmspec_headers))\r\n            dicts_refined.append(new_d)\r\n        return dicts_refined\r\n    wmDicts_refined = refineDicts(wmDicts, noNeedKeys)\r\n        \r\n    allWMcodes = list(map(lambda x: x[\"Work Master Code\"], wmDicts_refined))\r\n    uniqueWMcodes = set(allWMcodes)\r\n    \r\n    def getUnique(dicts, tgt_key):\r\n        res = []\r\n        tmp = []\r\n        for d in dicts:\r\n            if d[tgt_key] not in tmp:\r\n                tmp.append(d[tgt_key])\r\n                res.append(d)\r\n        return res\r\n    \r\n    unique_wmDicts = getUnique(wmDicts_refined, \"Work Master Code\")\r\n\r\n        \r\n    return unique_wmDicts\r\n    \r\n\r\n    \r\ndef reformatDicts(wmDicts):\r\n    res = []\r\n\r\n    for wm in wmDicts:\r\n        keys = [\"Work Master Code\", \"Gauge Code\", \"wmSpecs\"]\r\n        vals = list(map(lambda x: wm[x],keys))\r\n        items = list(zip(keys, vals))\r\n        res_d = dict(items)\r\n        \r\n        if \"Description\" in wm.keys():\r\n            res_d[\"Description\"] = wm[\"Description\"]\r\n        else:\r\n            res_d[\"Description\"] = \"\"\r\n        res_d[\"wmcANDgauge\"] = \"\".join([wm[\"Work Master Code\"],wm[\"Gauge Code\"]])\r\n        res_d[\"UoM\"] = wm[\"Unit\"]\r\n        res.append(res_d)\r\n        \r\n    return res\r\n\r\ndef make_dict_groupBy_WM(wmDicts, elemDicts):\r\n    unique_wmDicts = getUnique_wmDicts(wmDicts)\r\n    reformated_dicts = reformatDicts(unique_wmDicts)\r\n    sortedDicts_WMC = sorted(reformated_dicts, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    grpDicts_WMC = groupby(sortedDicts_WMC, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    \r\n    wm_valDicts = {}\r\n    for x in elemDicts:\r\n        wm_valDicts[x[\"Work Master Code\"]] = x[\"calcVal\"]\r\n    \r\n    \r\n    res = []\r\n    for k, g in grpDicts_WMC: \r\n        wmCode = k\r\n        gg = copy.deepcopy(list(g))\r\n        wmSpecs = gg[0][\"wmSpecs\"]\r\n        catStr = \"_\".join([wmSpecs[0],wmSpecs[1]])\r\n        specOnly = list(filter(lambda x: x!=0, wmSpecs))[3:]\r\n        addSpec = gg[0][\"Description\"]\r\n        if wm_valDicts.get(k):\r\n            dict_res = {\r\n                \"catStr\": catStr,\r\n                \"Work Master Code\": wmCode,\r\n                \"Gauge Code\": gg[0][\"Gauge Code\"],\r\n                \"Description\": wmSpecs[2],\r\n                \"Spec.\": \"\\n\".join(specOnly),\r\n                \"Additional Spec.\": addSpec,\r\n                \"calcVal\": wm_valDicts[k],\r\n                \"UoM\": gg[0][\"UoM\"]\r\n                #\"wmSpecs\": wmSpecs,\r\n                }\r\n        else:\r\n            dict_res = {\r\n                \"catStr\": catStr,\r\n                \"Work Master Code\": wmCode,\r\n                \"Gauge Code\": gg[0][\"Gauge Code\"],\r\n                \"Description\": wmSpecs[2],\r\n                \"Spec.\": \"\\n\".join(specOnly),\r\n                \"Additional Spec.\": addSpec,\r\n                \"calcVal\": \"\",\r\n                \"UoM\": gg[0][\"UoM\"]\r\n                #\"wmSpecs\": wmSpecs,\r\n                }\r\n        res.append(dict_res)\r\n    \r\n    \r\n    return res\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = make_dict_groupBy_WM(wmsList)\r\nOUT = make_dict_groupBy_WM(wmDicts, elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "756a672a7cef4e9e91d11c4c0279ab0a",
      "Inputs": [
        {
          "Id": "22a14fba8f194143a2aaef45fb512ae7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc4ee34aba664fcb8efda003708f0790",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ae84853d9e043699e6f4ca77f9d976d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport datetime\r\nimport shutil\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\norigin_pathStr = IN[0]\r\nIsNewSheet = IN[1][0]\r\n# Place your code below this line\r\n\r\ndef copy_fromNewSheet():\r\n    now = datetime.datetime.now()\r\n    strList = origin_pathStr.split('.')\r\n    \r\n    add_str = now.strftime(\"%m%d-%I%M%S\")\r\n    add_res = \"\".join([\"_\",add_str,\".\"])\r\n    strList.insert(1, add_res)\r\n    res = \"\".join(strList)\r\n    \r\n    source = origin_pathStr\r\n    destination = res\r\n    shutil.copyfile(source, destination)\r\n    \r\n    return res\r\n\r\n# Assign your output to the OUT variable.\r\n\r\nif IsNewSheet:\r\n    OUT = copy_fromNewSheet()\r\nelse:\r\n    OUT = origin_pathStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "11184f601ab1440f92b47f1dcda08f3f",
      "Inputs": [
        {
          "Id": "3adefa72172f4d0e94c423abf3e4051d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81b00a4bed47445eb92bccff5549b468",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1afdad0b610045f49d9918563aa08dd5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Steam Turbine Building\";\n\"Gate House\";",
      "Id": "5b26f33fb50d4441b2dc495fc028521e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d6e8fda3a3534c2498635fa5767e1a26",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3161125627394bf8908a8d9b151334c9",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//레빗 프로젝트 단위 중 길이가 m 여야 한다",
      "Id": "b0d2ff2d9c5f4d63a07bfdf8b46f74bd",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nfrom functools import reduce\r\nfrom functools import partial\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport Revit\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\nfrom copy import deepcopy\r\nimport operator\r\nfrom itertools import groupby\r\nimport copy\r\n\r\ndef make_UnifiedDict(dictsList):\r\n    dicts_AllInOne = {}\r\n    for d in dictsList:\r\n        dict_k_v = d.items()\r\n        for k,v in dict_k_v:\r\n            dicts_AllInOne[k] = v\r\n    return dicts_AllInOne\r\n\r\ndef find_IsInStr(target, str):\r\n    if target == None or str == None:\r\n        pass\r\n    else:\r\n        res = target in str\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n\r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1])))\r\n    \r\n    return dict(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdx, trgt_hdr, trgt_str):\r\n    return find_range_by_columnItem(sheet, hdrs_withIdx[trgt_hdr], trgt_str)\r\n\r\ndef get_DataOnRangesAtParamSheet(sheet):\r\n    \r\n    hdrs_withIdx = find_headersAtSheet(sheet)\r\n    rangesATSheet = find_rangesAtSheet(sheet, hdrs_withIdx, \"Q'ty Cal Type Tag\", \"-\")\r\n    title_idx = map(lambda x: x[0], rangesATSheet.values())\r\n    calcType_colDatas = list(map(lambda x: x[hdrs_withIdx[\"Q'ty Cal Type Tag\"]], sheet))\r\n    calcTypes = list(map(lambda x: calcType_colDatas[x], title_idx))\r\n    rgs_v = list(map(lambda x: x[1], rangesATSheet.values()))\r\n    rgs_k = list(map(lambda x: x, rangesATSheet.keys()))\r\n    \r\n    hdrs_v = list(hdrs_withIdx.values())\r\n    hdrs_k = list(hdrs_withIdx.keys())\r\n    eff_hdrs_v = hdrs_v[2:]\r\n    eff_hdrs_k = hdrs_k[2:]\r\n    \r\n    datas_allCalType = list(map(lambda x: sheet[x[0]-1:x[1]], rgs_v))\r\n    \r\n    def setDict_OnEachCalType(data_calType):\r\n        paramName_lang = \"패밀리 매개변수(from Revit) 영문판\" if lang_mode is True else \"패밀리 매개변수(from Revit) 한글판\"\r\n        calcTypeName = data_calType[0][2]\r\n        data_calType_noneless = list(filter(lambda x: x[hdrs_withIdx[\"항목\"]] != None, data_calType))\r\n#        ## WM row 별 header명 과 짝짓기\r\n        data_withHdrsIdx = list(map(lambda y: list(map(lambda x: y[x], eff_hdrs_v)), data_calType_noneless))\r\n        dict_ = list(map(lambda x: dict(zip(eff_hdrs_k, x)), data_withHdrsIdx))\r\n        dicts_noneless = list(map(lambda y: dict(filter(lambda x: x[1]!=None, y.items())),dict_))\r\n#        ## dict_Cal Type 입력처리\r\n        targetColName = \"Q'ty Cal Type Tag\"\r\n        dicts_finalNoneless = []\r\n        for d in dicts_noneless:\r\n            d[\"Q'ty Cal Type Tag\"] = calcTypeName\r\n            \r\n            if \"입력값\" in d.keys():\r\n                d[\"applyForCalc\"] = d[\"입력값\"]\r\n                dicts_finalNoneless.append(d)\r\n            elif paramName_lang in d.keys():\r\n                d[\"applyForCalc\"] = d[paramName_lang]\r\n                dicts_finalNoneless.append(d)\r\n            else:\r\n                pass\r\n        \r\n        return {calcTypeName: dicts_finalNoneless}\r\n        \r\n    return map(setDict_OnEachCalType, datas_allCalType)\r\n\r\ndef get_SymValDict_PerCalcType(dic):\r\n    def findDictPerCalcType(dicList):\r\n            dic = {}\r\n            for i in dicList:\r\n                dic[i[\"산출수식 약자\"]] = i[\"applyForCalc\"]\r\n            return dic\r\n    \r\n    ks_forDic = list(dic.keys())\r\n    vs_forDic = list(map(findDictPerCalcType, dic.values()))\r\n    res = dict(zip(ks_forDic, vs_forDic))\r\n    return res\r\n\r\ndef get_DataOnRangesAtCatSheet(catSheet):\r\n    hdrs_withIdx = find_headersAtSheet(catSheet)\r\n    rangesATSheet = find_rangesAtSheet(catSheet, hdrs_withIdx, \"Family Type Name\", \"H_\")\r\n    title_idx = map(lambda x: x[0], rangesATSheet.values())\r\n    calcType_colDatas = list(map(lambda x: x[hdrs_withIdx[\"Q'ty Cal Type Tag\"]], catSheet))\r\n    calcTypes = list(map(lambda x: calcType_colDatas[x], title_idx))\r\n    rgs_v = list(map(lambda x: x[1], rangesATSheet.values()))\r\n    rgs_k = list(map(lambda x: x, rangesATSheet.keys()))\r\n    \r\n    hdrs_v = list(hdrs_withIdx.values())\r\n    hdrs_k = list(hdrs_withIdx.keys())\r\n    \r\n    datas_allFamType = list(map(lambda x: list(zip(catSheet[x[0]-1:x[1]], range(x[0]-1,x[1]))), rgs_v))\r\n    \r\n    def setDict_OnEachFamType(data_famType):  ## 최종적으로 산출식 없는 것 걸러내기 추가해야 함\r\n        titleData = list(data_famType).pop(0)[0]\r\n        \r\n        famTypeName = titleData[hdrs_withIdx[\"Family Type Name\"]]\r\n        calcTypeName = titleData[hdrs_withIdx[\"Q'ty Cal Type Tag\"]]\r\n        data_famType_noneless = list(filter(lambda x: x[0][5] != None, data_famType))\r\n        ## WM row 별 header명 과 짝짓기\r\n        data_withHdrsIdx = list(map(lambda y: [list(map(lambda x: y[0][x], hdrs_v)), y[1]], data_famType_noneless))\r\n        hdrs_k.append(\"rIDX\")\r\n        dict_ = list(map(lambda x: dict(zip(hdrs_k, x[0]+[x[1]])), data_withHdrsIdx))\r\n        dicts_noneless = list(map(lambda y: dict(filter(lambda x: x[1]!=None, y.items())),dict_))\r\n        ## dict_gauge, 물량산출식 없는 항목 처리\r\n        dicts_final = []\r\n        needDefault_ColName = \"Gauge Code\"\r\n        noneRemove_ColName = \"Dynamo 물량산출식\"\r\n        for d in dicts_noneless:\r\n            d[\"Family Type Name\"] = famTypeName\r\n            \r\n            if calcTypeName == None:\r\n                pass            \r\n            elif noneRemove_ColName in d.keys():\r\n                d[\"Q'ty Cal Type Tag\"] = calcTypeName\r\n                d[needDefault_ColName] = \"\"\r\n                dicts_final.append(d)\r\n\r\n        return dicts_final\r\n        \r\n    dicts_allFamType = list(map(lambda x: setDict_OnEachFamType(list(x)), datas_allFamType))\r\n    ds_famTypesAtCatSheet = dict(zip(rgs_k, dicts_allFamType))\r\n    ds_famTypesAtCatSheet_effCalcType = dict(filter(lambda x: all(list(map(lambda i: \"Q'ty Cal Type Tag\" in i, x[1]))), list(ds_famTypesAtCatSheet.items())))\r\n    ds_famTypesAtCatSheet_noneless = dict(filter(lambda x: len(list(x[1]))!=0, list(ds_famTypesAtCatSheet_effCalcType.items())))\r\n    \r\n    return  ds_famTypesAtCatSheet_noneless\r\n\r\ndef make_AIOdic(allCatSheets):\r\n\r\n    dataOnRanges_allCat = list(map(get_DataOnRangesAtCatSheet, allCatSheets))\r\n    dataOnRanges_allCat_WithCatNames = list(zip(allCatSheetsNames, dataOnRanges_allCat))\r\n    \r\n    AIOdic = {}\r\n    for d in dataOnRanges_allCat_WithCatNames:\r\n        catName = d[0]\r\n        dict_k_v = d[1].items()\r\n        for k,v in dict_k_v:\r\n            for wm in v:\r\n                wm[\"SheetName\"] = catName\r\n            AIOdic[k] = v\r\n    return AIOdic\r\n\r\ndef matchWith_paramDic(catSheetDic, paramSheetDic):\r\n    headers = list(catSheetDic.values())[0][0].keys()\r\n    wmspec_headers = list(filter(lambda x: \"Work C\" in x or \"Spec\" in x, headers))\r\n    res = {}\r\n    for famType,diclist in catSheetDic.items():\r\n        new_diclist = []\r\n        for d in diclist:\r\n            new_d = {}\r\n            keys = d.keys()\r\n            keys_new = set(keys) - set(wmspec_headers)\r\n            calcType = d[\"Q'ty Cal Type Tag\"]\r\n            new_d[\"Sym_Val Dict\"] = paramSheetDic[calcType]\r\n            new_d[\"wmSpecs\"] = list(map(lambda x: d[x],wmspec_headers))\r\n            for spec in keys_new:\r\n                new_d[spec] = d[spec]\r\n            new_diclist.append(new_d)\r\n        \r\n        res[famType] = new_diclist\r\n        \r\n    return res\r\n\r\ndef filterEffRevitElems(allRevitElemsFlatten, elemDicts):\r\n    allFamTypesInExcel = elemDicts.keys()\r\n    res = list(filter(lambda x: x.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\") in allFamTypesInExcel, allRevitElemsFlatten))\r\n    return res\r\n\r\ndef matchWith_Elem_Dict(famlist_dic,revitElems):\r\n    res = []\r\n    for i in revitElems:\r\n        tmp = {}\r\n        famTypeName = i.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\")\r\n        tmp[\"Elem\"] = i\r\n        tmp[\"wms\"] = famlist_dic[famTypeName]\r\n        \r\n        res.append(tmp)\r\n    return res\r\n\r\ndef update_sym_valDict(elemDicts):\r\n    \r\n    def make_newElemDict(elemDict):\r\n        new_elemDict = {}\r\n        elemDict_keys = elemDict.keys()\r\n        elemDict_vals = list(elemDict.values())\r\n        elemDict_items = list(elemDict.items())\r\n        \r\n        def get_newWMsWithcalculatedSymValSet(elemDict):\r\n            elem = elemDict[\"Elem\"]\r\n            wms = elemDict[\"wms\"]\r\n            new_wms = []\r\n            \r\n            for wm in wms:\r\n                new_wm ={}\r\n                sym_valDict = wm[\"Sym_Val Dict\"]\r\n                #wm_keys = wm.Keys\r\n                wm_keys = wm.keys()\r\n                #wm_vals = wm.Values\r\n                wm_vals = wm.values()\r\n                wm_items = list(zip(wm_keys,wm_vals))\r\n                \r\n                #sv_keys = sym_valDict.Keys\r\n                sv_keys = sym_valDict.keys()\r\n                #sv_vals = sym_valDict.Values\r\n                sv_vals = sym_valDict.values()\r\n                sv_items = list(zip(sv_keys, sv_vals))\r\n                sv_Dict = {}\r\n                for k,v in sv_items:\r\n                    if isinstance(v, str): ### 수정 필요 (굳이 v의 타입검사하는 이유?)\r\n                        if v == \"Level\":\r\n                            sv_Dict[k] = round(elem.GetParameterValueByName(\"Elevation at Bottom\"),2)\r\n                        elif elem.GetParameterValueByName(v):\r\n                            sv_Dict[k] = elem.GetParameterValueByName(v)\r\n                        elif elem.GetParameterValueByName(\"Type\").GetParameterValueByName(v):\r\n                            sv_Dict[k] = elem.GetParameterValueByName(\"Type\").GetParameterValueByName(v)\r\n                        else:\r\n                            sv_Dict[k] = v\r\n                    else:\r\n                        sv_Dict[k] = v\r\n                for k,v in wm_items:\r\n                    if k == \"Sym_Val Dict\":\r\n                        new_wm[k] = sv_Dict\r\n                    else:\r\n                        new_wm[k] = v\r\n                new_wms.append(new_wm)\r\n            return new_wms\r\n                \r\n                \r\n        for k,v in elemDict_items:\r\n            if k == \"wms\":\r\n                new_elemDict[k] = get_newWMsWithcalculatedSymValSet(elemDict)\r\n            else:\r\n                new_elemDict[k] = v\r\n                        \r\n        return new_elemDict\r\n    res = list(map(make_newElemDict, elemDicts))\r\n    \r\n    return res\r\n\r\ndef get_allElems(doc):\r\n    target_bic = Autodesk.Revit.DB.BuiltInCategory.OST_Levels\r\n    \r\n    def getElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType().ToElements()\r\n        return res\r\n\r\n    res = getElems(target_bic)\r\n\r\n    return res\r\n\r\ndef getGroundLevelElem(allLevelElems):\r\n    res = list(filter(lambda x: \"G.L\" in x.Name, allLevelElems))[0]\r\n    return res\r\n\r\ndef makeExcaShape(elem, sym_valDict, FL_GL_gap):\r\n    def findBtmCrv(geo, sym_valDict): ##btmOffset = d1 + d2\r\n        offSetDist = sym_valDict[\"D1\"] + sym_valDict[\"D2\"]\r\n        h = abs(sym_valDict[\"C1\"] + sym_valDict[\"C2\"] + sym_valDict[\"C3\"])\r\n        bdBox_fdn = BoundingBox.ByGeometry(geo).ToCuboid() ## 형상의 자그마한 요철 무시\r\n        srfs = bdBox_fdn.Explode() ## surface들\r\n        btmSrf = PolySurface.ByJoinedSurfaces(list(filter(lambda x: round(x.NormalAtParameter(0.5,0.5).Z, 3) == -1, srfs)))\r\n        btmCrvs = btmSrf.PerimeterCurves()\r\n        btmPolCrv = PolyCurve.ByJoinedCurves(btmCrvs)\r\n        offseted_btmPolCrv = btmPolCrv.Offset(offSetDist)\r\n        #h_modified_btmPolCrv = offseted_btmPolCrv.Translate(0,0,-h-Survey_Base_zGap)\r\n        h_modified_btmPolCrv = offseted_btmPolCrv.Translate(0,0,-h)\r\n        return h_modified_btmPolCrv\r\n    \r\n    def findUprCrv(_btmPolCrv, sym_valDict):\r\n        btmCrvZ = _btmPolCrv.StartPoint.Z\r\n        #test = (sym_valDict[\"C1\"] + sym_valDict[\"C2\"] + sym_valDict[\"C3\"])\r\n\r\n        H = abs(round(btmCrvZ,2))\r\n        G = sym_valDict[\"G\"]\r\n        offSetDist = (G * H)\r\n        \r\n        #uprPolCrv = _btmPolCrv.Translate(0,0,H).Offset(offSetDist)\r\n        uprPolCrv = _btmPolCrv.Translate(0,0,H + Survey_Base_zGap -FL_GL_gap).Offset(offSetDist)\r\n        #uprCrvZ = uprPolCrv.StartPoint.Z\r\n        return uprPolCrv\r\n\r\n\r\n    fdnsGeo = elem.Geometry()[0]\r\n    btmPolCrv = findBtmCrv(fdnsGeo, sym_valDict)\r\n    uprPolCrv = findUprCrv(btmPolCrv, sym_valDict)\r\n    res = Solid.ByLoft([btmPolCrv,uprPolCrv])#.Translate(0,0, Survey_Base_zGap - FL_GL_gap)\r\n    return res\r\n\r\ndef makeExcaShape_whole(elemDicts, paramSheetDic, wholeExca_CalcType, FL_GL_gap):\r\n    sym_valDict = paramSheetDic[wholeExca_CalcType]\r\n    def findBtmCrv(geo, sym_valDict): ##btmOffset = d1 + d2\r\n        offSetDist = sym_valDict[\"D1\"] + sym_valDict[\"D2\"]\r\n        \r\n        h = abs(sym_valDict[\"C1\"] + sym_valDict[\"C2\"] + sym_valDict[\"C3\"])\r\n        bdBox_fdn = BoundingBox.ByGeometry(geo).ToCuboid() ## 형상의 자그마한 요철 무시\r\n        srfs = bdBox_fdn.Explode() ## surface들\r\n        btmSrf = PolySurface.ByJoinedSurfaces(list(filter(lambda x: round(x.NormalAtParameter(0.5,0.5).Z, 3) == -1, srfs)))\r\n        btmCrvs = btmSrf.PerimeterCurves()\r\n        btmPolCrv = PolyCurve.ByJoinedCurves(btmCrvs)\r\n        offseted_btmPolCrv = btmPolCrv.Offset(offSetDist)\r\n        h_modified_btmPolCrv = offseted_btmPolCrv.Translate(0,0,-h)\r\n        return h_modified_btmPolCrv\r\n    \r\n    def findUprCrv(_btmPolCrv, sym_valDict):\r\n        btmCrvZ = _btmPolCrv.StartPoint.Z\r\n        test = (sym_valDict[\"C1\"] + sym_valDict[\"C2\"] + sym_valDict[\"C3\"])\r\n        \r\n        H = abs(round(btmCrvZ,2))\r\n        G = sym_valDict[\"G\"]\r\n        offSetDist = (G * H)\r\n        \r\n        uprPolCrv = _btmPolCrv.Translate(0,0,H + Survey_Base_zGap -FL_GL_gap).Offset(offSetDist)\r\n        uprCrvZ = uprPolCrv.StartPoint.Z\r\n        return uprPolCrv\r\n        \r\n    def findExcaShapeByColFnds():\r\n        all_ColFdnElems = list(map(lambda x: x[\"Elem\"].Geometry()[0], filter(lambda dic: \"ACF_W\" in dic[\"wms\"][0][\"Family Type Name\"], elemDicts)))\r\n        resBdBox = BoundingBox.ByGeometry(all_ColFdnElems).ToCuboid()\r\n        \r\n        btmPolCrv = findBtmCrv(resBdBox, sym_valDict)\r\n        uprPolCrv = findUprCrv(btmPolCrv, sym_valDict)\r\n        res = Solid.ByLoft([btmPolCrv,uprPolCrv])#.Translate(0,0,FL_GL_gap)\r\n        \r\n        return res\r\n\r\n    def findExcaShapeByMass():\r\n        all_MassElems = list(map(lambda x: x[\"Elem\"].Geometry()[0], filter(lambda dic: \"ACE_Mass\" in dic[\"wms\"][0][\"Family Type Name\"], elemDicts)))\r\n        if all_MassElems:\r\n            resBdBox = BoundingBox.ByGeometry(all_MassElems).ToCuboid()\r\n            btmPolCrv = findBtmCrv(resBdBox, sym_valDict)\r\n            uprPolCrv = findUprCrv(btmPolCrv, sym_valDict)\r\n            res = Solid.ByLoft([btmPolCrv,uprPolCrv])#.Translate(0,0,FL_GL_gap)\r\n        else:\r\n            res = []\r\n        \r\n        return res\r\n\r\n    def findExcaShapeByPit():\r\n        all_PitElems = list(map(lambda x: x[\"Elem\"].Geometry()[0], filter(lambda dic: \"ACP_Pit Slab\" in dic[\"wms\"][0][\"Family Type Name\"], elemDicts)))\r\n        if all_PitElems:\r\n            resBdBox = BoundingBox.ByGeometry(all_PitElems).ToCuboid()\r\n            \r\n            btmPolCrv = findBtmCrv(resBdBox, sym_valDict)\r\n            uprPolCrv = findUprCrv(btmPolCrv, sym_valDict)\r\n            res = Solid.ByLoft([btmPolCrv,uprPolCrv])#.Translate(0,0,FL_GL_gap)\r\n        else:\r\n            res = []\r\n        return res\r\n        \r\n    finalTarget = list(filter(lambda x: x!=[] ,[findExcaShapeByColFnds(),findExcaShapeByMass(),findExcaShapeByPit()]))\r\n    res = Solid.ByUnion(finalTarget)\r\n    \r\n    return res\r\n\r\ndef makeDispShape_whole(elemDicts, paramSheetDic, FL_GL_gap):\r\n    total_ExcaGeo = makeExcaShape_whole(elemDicts, paramSheetDic, wholeExca_CalcType, FL_GL_gap)\r\n    allGeo_UG_union = Solid.ByUnion(find_allGeo_UG_elems(elemDicts))\r\n    dispShape = allGeo_UG_union.Split(total_ExcaGeo)[-1]\r\n    backFillShape = total_ExcaGeo.Split(allGeo_UG_union)[0]\r\n    return [dispShape, backFillShape]\r\n\r\ndef addExcaInElemDicts(elemDicts, FL_GL_gap):\r\n    allExcas = []\r\n    for idx,dic in enumerate(elemDicts):\r\n        elem = dic[\"Elem\"]\r\n        wms = dic[\"wms\"]\r\n        excaBln = \"Exca\" in \"\".join(list(map(lambda x: x[\"Dynamo 물량산출식\"], wms)))\r\n        if excaBln:\r\n            sym_valDict = wms[0][\"Sym_Val Dict\"]\r\n            excaGeo = makeExcaShape(elem, sym_valDict, FL_GL_gap)\r\n            try:\r\n                allExcasUni = Solid.ByUnion(allExcas)\r\n                eff_excaGeo = excaGeo.Split(allExcasUni)[0]\r\n                allExcas.append(excaGeo)\r\n            except:\r\n                eff_excaGeo = excaGeo\r\n                allExcas.append(excaGeo)\r\n            dic[\"ExcaGeo\"] = eff_excaGeo\r\n\r\n    return elemDicts\r\n\r\ndef find_allGeo_UG_elems(elemDicts):\r\n    geoResult = []\r\n    for dic in elemDicts:\r\n        elem = dic[\"Elem\"]\r\n        wms = dic[\"wms\"]\r\n        excaBln = \"Exca\" in \"\".join(list(map(lambda x: x[\"Dynamo 물량산출식\"], wms)))\r\n        famType_ = wms[0][\"Family Type Name\"]\r\n            \r\n        if \"MAT_\" in famType_ or \"Mass_\" in famType_ or \"Pit\" in famType_ or \"Trench\" in famType_:\r\n            if \"Slab\" in famType_ or \"MAT_\" in famType_ or \"Mass_\" in famType_ : ## 내부 빈공간 있는 RC부재는 꽉채워서 공제 \r\n                srfs = elem.Geometry()[0].Explode() ## surface들\r\n                btmSrf = PolySurface.ByJoinedSurfaces(list(filter(lambda x: round(x.NormalAtParameter(0.5,0.5).Z, 3) == -1, srfs)))\r\n                btmCrvs = btmSrf.PerimeterCurves()\r\n                btmPolCrv = PolyCurve.ByJoinedCurves(btmCrvs)\r\n                btmCrvZ = btmPolCrv.StartPoint.Z\r\n                uprPolCrv = btmPolCrv.Translate(0,0,(0-btmCrvZ))\r\n                targetGeo = Solid.ByLoft([btmPolCrv,uprPolCrv])\r\n                geoResult.append(targetGeo)\r\n            else:\r\n                geoResult.append(elem.Geometry()[0])\r\n        elif \"PED_\" in famType_ or \"TG_\" in famType_ or \"SOG_\" in famType_ or \"UG\" in famType_:\r\n            geoResult.append(elem.Geometry()[0])\r\n            \r\n        elif excaBln:\r\n            geoResult.append(elem.Geometry()[0])\r\n\r\n    return geoResult\r\n\r\ndef add_effExcaInElemDicts(elemDicts):\r\n    \r\n    FL_GL_gap = 0-GL_zElev\r\n    allGeo_UG_RC_Elems = find_allGeo_UG_elems(elemDicts)\r\n    allUniGeo_UG_RC_Elems = Solid.ByUnion(allGeo_UG_RC_Elems)\r\n    elemDicts_excas = addExcaInElemDicts(elemDicts, FL_GL_gap)\r\n    \r\n    for dic in elemDicts_excas:\r\n        if \"ExcaGeo\" in dic.keys():\r\n            excaGeo = dic[\"ExcaGeo\"]\r\n\r\n            eff_excaGeo = excaGeo\r\n            splitResult = eff_excaGeo.Split(allUniGeo_UG_RC_Elems)\r\n            dic[\"effExcaGeo\"] = eff_excaGeo\r\n            dic[\"effBackfillGeo\"] = splitResult[0]\r\n\r\n        \r\n        wms = dic[\"wms\"]\r\n        for wm in wms:\r\n            if \"Exca\" in wm[\"Dynamo 물량산출식\"] or\\\r\n               \"Back\" in wm[\"Dynamo 물량산출식\"] or\\\r\n               \"Disp\" in wm[\"Dynamo 물량산출식\"]:\r\n                wm[\"Sym_Val Dict\"][\"Exca\"] = dic[\"effExcaGeo\"].Volume\r\n                wm[\"Sym_Val Dict\"][\"Back\"] = dic[\"effBackfillGeo\"].Volume\r\n                wm[\"Sym_Val Dict\"][\"Disp\"] = dic[\"effExcaGeo\"].Volume - dic[\"effBackfillGeo\"].Volume\r\n\r\n    return elemDicts_excas\r\n\r\ndef findBtmSrfs(geo):\r\n    srfs = geo.Explode()\r\n    btmSrf = PolySurface.ByJoinedSurfaces(list(filter(lambda x: round(x.NormalAtParameter(0.5,0.5).Z, 3) == -1, srfs)))\r\n    return btmSrf\r\n\r\ndef calc_EarthWorkValue_InElemDicts(elemDicts, GL_zElev, paramSheetDic, wholeExca_CalcType):\r\n    FL_GL_gap = 0 - GL_zElev\r\n    allEarthRelatedElemsBtmSrfs = list(\r\n        map(lambda x: findBtmSrfs(x[\"Elem\"].Geometry()[0]), \r\n            filter(lambda dic: \"ACF_W\" in dic[\"wms\"][0][\"Family Type Name\"] or \\\r\n                               \"ACB_TG\" in dic[\"wms\"][0][\"Family Type Name\"] or \\\r\n                               \"ACS_SOG\" in dic[\"wms\"][0][\"Family Type Name\"] or \\\r\n                               \"ACE_Mass\" in dic[\"wms\"][0][\"Family Type Name\"] or \\\r\n                               \"ACP_Pit Slab\" in dic[\"wms\"][0][\"Family Type Name\"], \\\r\n                elemDicts)))\r\n    total_btmSrfsArea = sum(map(lambda x: x.Area, allEarthRelatedElemsBtmSrfs))\r\n    total_Exca = makeExcaShape_whole(elemDicts, paramSheetDic, wholeExca_CalcType, FL_GL_gap)\r\n    total_ExcaVolume = total_Exca.Volume\r\n    total_Disp = makeDispShape_whole(elemDicts, paramSheetDic, FL_GL_gap)[0]\r\n    total_DispVolume = total_Disp.Volume\r\n    total_BackFill = makeDispShape_whole(elemDicts, paramSheetDic, FL_GL_gap)[1]\r\n    total_BackFillVolume = total_BackFill.Volume\r\n    \r\n    for dic in elemDicts:\r\n        elem = dic[\"Elem\"]\r\n        wms = dic[\"wms\"]\r\n        famType = wms[0][\"Family Type Name\"]\r\n        for wm in wms:\r\n            if \"Exca\" in wm[\"Dynamo 물량산출식\"] or\\\r\n               \"Back\" in wm[\"Dynamo 물량산출식\"] or\\\r\n               \"Disp\" in wm[\"Dynamo 물량산출식\"] : ### 토공 산출 대상 부재에는 Exca Back Disp 세트로 포함하도록\r\n                elem_btmSrfArea = findBtmSrfs(elem.Geometry()[0]).Area\r\n                wm[\"Sym_Val Dict\"][\"Exca\"] = total_ExcaVolume * (elem_btmSrfArea / total_btmSrfsArea)\r\n                wm[\"Sym_Val Dict\"][\"Back\"] = total_BackFillVolume * (elem_btmSrfArea / total_btmSrfsArea)\r\n                wm[\"Sym_Val Dict\"][\"Disp\"] = total_DispVolume * (elem_btmSrfArea / total_btmSrfsArea)\r\n    \r\n    return [elemDicts, [total_Exca, total_BackFill]]\r\n\r\ndef finalCalc_SymValDict(elemDicts):\r\n    for dic in elemDicts:\r\n        wms = dic[\"wms\"]\r\n        for wm in wms:\r\n            formula = wm[\"Dynamo 물량산출식\"]\r\n            SymValDicts = wm[\"Sym_Val Dict\"]\r\n            #SymValItems = list(zip(SymValDicts.Keys, SymValDicts.Values))\r\n            SymValItems = SymValDicts.items()\r\n            sym_val_keySets = []\r\n            sym_val_valSets = []\r\n            for k,v in SymValItems:\r\n                if k in formula:\r\n                    sym_val_keySets.append(k)\r\n                    sym_val_valSets.append(v)\r\n            #wm[\"Sym_Val Set\"] = [sym_val_keySets,sym_val_valSets]\r\n            wm[\"Sym_Val Set\"] = dict(zip(sym_val_keySets,sym_val_valSets))\r\n            formula_eqSymRemove = formula.lstrip(\"=\")\r\n            tmp = formula_eqSymRemove\r\n            for k in sym_val_keySets: ## 이 부분은 좀더 범용 처리 필요할수도\r\n                priorSymList = [\"Exca\", \"Back\", \"Disp\"]\r\n                #any(list(map(lambda x: x in tmp, priorList)))\r\n                #if \"Exca\" in tmp or \"Back\" in tmp or \"Disp\" in tmp:\r\n                if any(list(map(lambda x: x in tmp, priorSymList))):\r\n                    appliedSym = list(filter(lambda x: x in tmp, priorSymList))[0]\r\n                    #if len(k) > 1:\r\n                    if k == appliedSym:\r\n                        tmp = tmp.replace(k, str(wm[\"Sym_Val Set\"][k]))\r\n                else:\r\n                    tmp = tmp.replace(k, str(wm[\"Sym_Val Set\"][k]))\r\n                \r\n            \r\n            #wm[\"calcResult\"] = tmp.strip()\r\n            wm[\"calcResult\"] = round(eval(tmp.strip()),3)\r\n    \r\n    return elemDicts\r\n\r\ndef extractCalcResult(elemDicts):\r\n    res = []\r\n    for d in elemDicts:\r\n        wms = d[\"wms\"]\r\n        for wm in wms:\r\n            keys = [\"SheetName\", \"rIDX\", \"Work Master Code\", \"Family Type Name\", \"calcResult\"]\r\n            vals = list(map(lambda x: wm[x],keys))\r\n            k_v = list(zip(keys, vals))\r\n            res.append(dict(k_v))\r\n        \r\n    return res\r\n\r\ndef extractCalcResult_forTotalBOQ(elemDicts):\r\n    res = []\r\n    for d in elemDicts:\r\n        wms = d[\"wms\"]\r\n        for wm in wms:\r\n            keys = [\"SheetName\", \"rIDX\", \"Work Master Code\", \"Gauge Code\", \"wmSpecs\", \"Family Type Name\", \"calcResult\"]\r\n            vals = list(map(lambda x: wm[x],keys))\r\n            k_v = list(zip(keys, vals))\r\n            res_d = dict(k_v)\r\n            if \"Description\" in wm.Keys:\r\n                res_d[\"Description\"] = wm[\"Description\"]\r\n            else:\r\n                res_d[\"Description\"] = \"\"\r\n            res_d[\"wmcANDgauge\"] = \"\".join([wm[\"Work Master Code\"],wm[\"Gauge Code\"]])\r\n            res_d[\"UoM\"] = wm[\"Unit\"]\r\n            res.append(res_d)\r\n        \r\n    return res\r\n\r\ndef make_dict_groupBy_Sheet_WM(elemDicts):\r\n    extractedDicts = extractCalcResult(elemDicts)\r\n    sortedDicts_sheet = sorted(extractedDicts, key=operator.itemgetter(\"SheetName\"))\r\n    grpDicts_Sheet = groupby(sortedDicts_sheet, lambda x: x[\"SheetName\"])\r\n    \r\n    res = {}\r\n    for k, g in grpDicts_Sheet:\r\n        sorted_g = sorted(list(g), key=operator.itemgetter(\"rIDX\"))\r\n        grped_g = groupby(sorted_g, lambda x: x[\"rIDX\"])\r\n        tmp = []\r\n        for k_,g_ in grped_g:\r\n            gg = copy.deepcopy(list(g_))\r\n            calcSum = round(sum(map(lambda x: x[\"calcResult\"],gg)),3)\r\n            rIDX = gg[0][\"rIDX\"]\r\n            tmp.append((rIDX,calcSum))\r\n            \r\n        res[k] = tmp\r\n    return res\r\n\r\ndef fill_dict_emptySlot(dic):\r\n    tmp = []\r\n    for k, v in dic.items():\r\n        all_idxs = list(map(lambda x: x[0],v))\r\n        max_idx = max(all_idxs)\r\n        full_range = range(0, max_idx+1)\r\n        \r\n        for i in full_range:\r\n            if i not in all_idxs:\r\n                v.append([i, \"\"])\r\n        tmp.append(sorted(v, key=operator.itemgetter(0)))\r\n        \r\n    res = list(zip(dic.keys(),tmp))\r\n    return dict(res)\r\n\r\ndef make_dict_groupBy_WM(elemDicts):\r\n    extractedDicts = extractCalcResult_forTotalBOQ(elemDicts)\r\n    sortedDicts_WMC = sorted(extractedDicts, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    grpDicts_WMC = groupby(sortedDicts_WMC, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    \r\n    res = []\r\n    for k, g in grpDicts_WMC: \r\n        wmCode = k\r\n        gg = copy.deepcopy(list(g))\r\n        calcSum = round(sum(map(lambda x: x[\"calcResult\"], gg)),3)\r\n        wmSpecs = gg[0][\"wmSpecs\"]\r\n        catStr = \"_\".join([wmSpecs[0],wmSpecs[1]])\r\n        specOnly = list(filter(lambda x: x!=0, wmSpecs))[3:]\r\n        addSpec = gg[0][\"Description\"]\r\n        dict_res = {\r\n            \"catStr\": catStr,\r\n            \"Work Master Code\": wmCode,\r\n            \"Gauge Code\": gg[0][\"Gauge Code\"],\r\n            \"Description\": wmSpecs[2],\r\n            \"Spec.\": \"\\n\".join(specOnly),\r\n            \"Additional Spec.\": addSpec,\r\n            \"calcVal\": calcSum,\r\n            \"UoM\": gg[0][\"UoM\"]\r\n            #\"wmSpecs\": wmSpecs,\r\n            }\r\n        res.append(dict_res)\r\n    \r\n    \r\n    return res\r\n\r\n\r\n\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\nearthWork_calcMode = IN[1]\r\nwholeDatas = IN[2]\r\n\r\nallCatSheetsNames = IN[3][2:]\r\n\r\nallRevitElemsFlatten = IN[4]\r\nGL_zElev = IN[5]\r\nwholeExca_CalcType = IN[6]\r\n\r\n# Place your code below this line\r\ndb = wholeDatas[1:]\r\nparamSheet = db[0]\r\nallCatSheets = db[1:]\r\nSurvey_Base_zGap = Revit.Elements.Coordinates.BasePoint().Z - Revit.Elements.Coordinates.SurveyPoint().Z\r\n\r\ncalcTypeDictsList = get_DataOnRangesAtParamSheet(paramSheet)\r\ncalcTypeDict = make_UnifiedDict(calcTypeDictsList)\r\nparamSheetDic = get_SymValDict_PerCalcType(calcTypeDict) \r\n\r\ncatSheetDic = make_AIOdic(allCatSheets)\r\ncatFam_paramDic = matchWith_paramDic(catSheetDic, paramSheetDic)\r\n\r\nfilteredEffRevitElems = filterEffRevitElems(allRevitElemsFlatten, catSheetDic)\r\n\r\nelemDicts_updated_sym_valDict = update_sym_valDict(matchWith_Elem_Dict(catFam_paramDic,filteredEffRevitElems))\r\n\r\n\r\ndef getCompleteDicts_earth(elemDicts):\r\n    if earthWork_calcMode:\r\n        return calc_EarthWorkValue_InElemDicts(elemDicts, GL_zElev, paramSheetDic, wholeExca_CalcType)\r\n    else:\r\n        return [add_effExcaInElemDicts(elemDicts),0]\r\n\r\n\r\nelemDicts_updated_Earthwork = getCompleteDicts_earth(elemDicts_updated_sym_valDict)\r\nelemDicts_finalCalculated = finalCalc_SymValDict(elemDicts_updated_Earthwork[0])\r\ndict_groupBy_Sheet_WM = make_dict_groupBy_Sheet_WM(elemDicts_finalCalculated)\r\nresultForFamList = fill_dict_emptySlot(dict_groupBy_Sheet_WM)\r\nresultForTotalBOQ = dict_groupBy_Sheet_WM\r\n\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = elemDicts_updated_Earthwork\r\nOUT = [resultForFamList, resultForTotalBOQ]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "63fbb93d87a844fbbac1080821f5f180",
      "Inputs": [
        {
          "Id": "21faa835358f45ab900e85cae4434eab",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d111cae14d0b4ca191177a7c4b6e5914",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d345e415287f4d9bb8b5809f532cdace",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b620040f1dbf435393f137b7cdd87ee5",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "971c49fd32144a5c953218909c77b71c",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c818e5a870543ae882ce86f9443cfbf",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "232575f4bf3f457ab2a31d447d27a162",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bbc5d8b7de0f4400b03d98915cd57120",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "55bb494892834c5ab404391b99483ed2",
      "Inputs": [
        {
          "Id": "bc527cafc27940be89affefe03ec5054",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54ecbfa8d3b64a7fbe25daa6add37fc0",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7e1ae2bcbc224dafbae256e634257ce4",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.Elevation",
      "Id": "5d6276188c154ad9b683fbece6f2c630",
      "Inputs": [
        {
          "Id": "9185e6808b67447793aaf3dd18afbb9d",
          "Name": "level",
          "Description": "Revit.Elements.Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "afd19d0535764329874102e8a3d426a4",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The elevation of the level above ground level\n\nLevel.Elevation: double"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "a16523d3e4ff4488a28e95dbc2c75a0a",
      "Inputs": [
        {
          "Id": "ecb875d8bb844b02a9890d8d62964355",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f198a379ab64e2f8e5f18d21d9c687a",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 287,
      "SelectedString": "OST_Levels",
      "NodeType": "ExtensionNode",
      "Id": "265e7c3045514b0885bd3aafa3c020aa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3b1aac9a2e1446458df93f85dfba212e",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.Name",
      "Id": "20137012b6604e04bea74af353edfa36",
      "Inputs": [
        {
          "Id": "5f2f4dc508624b2db556c5e9bcc849eb",
          "Name": "level",
          "Description": "Revit.Elements.Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db68a6f01b5949b69db9bf6c0f98aa27",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The name of the level\n\nLevel.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Contains@string,string,bool",
      "Id": "009ae0e082d3477c8e68feaaa8e1c2d1",
      "Inputs": [
        {
          "Id": "faeee94ec11b4423af85640b4e3aa68c",
          "Name": "string",
          "Description": "String to search in\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c67baeae7e64255a90ab8b39f03624a",
          "Name": "searchFor",
          "Description": "Substring to search for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7ea584785e36469f8b4086b5ebe02000",
          "Name": "ignoreCase",
          "Description": "Whether or not comparison takes case into account\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f45bab1fab649509b97b0d76298e3e1",
          "Name": "bool",
          "Description": "Whether the string contains the substring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given string contains the given substring.\n\nString.Contains (string: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"G.L\";",
      "Id": "af6546d7ff044c62af14248adb86f4b9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c2967b02ecf547709e3be133d8ab511a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "c0738bf5251b46c594a752dfca8a862f",
      "Inputs": [
        {
          "Id": "632af2876b8d4f7590caffd373cab574",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "22d4c03dbab04e428cbb1341894a3bcb",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6328eed93bad46fc822b4b17fa8d6f66",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ac7d620e15f041439aa4f2c62cf25d39",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "32a7c4f13eac43ae918bc55fc7c52899",
      "Inputs": [
        {
          "Id": "9bd8a215b7c14b39bf5bef0ce7ca3a5e",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bd8ac986d7a6418b8d0c5434e8e2d401",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SF-Q0\";",
      "Id": "9072a401ee7b4d5ea611f6c798813b99",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "db19ad1d588d4ad7a271c1d192da2346",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "TotalBOQ_path;",
      "Id": "a1aa28f5a2bc45279387e45d95f5e23e",
      "Inputs": [
        {
          "Id": "3bcfb02953874e55934e6741a68f8240",
          "Name": "TotalBOQ_path",
          "Description": "TotalBOQ_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae1ff1df1bee479abae6cefcd17b8af3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "description판별항목1;\ndescription판별항목2;",
      "Id": "7b8e1cf122fb45fcbfa268fff5af8092",
      "Inputs": [
        {
          "Id": "0ebfa4e61b684cd29f1b56548ad20a7f",
          "Name": "description판별항목1",
          "Description": "description판별항목1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "067cea70fca44b7e8884f49dd7f817bc",
          "Name": "description판별항목2",
          "Description": "description판별항목2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6879374005aa49d286aa848e9c817b64",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3a1bc04419048b3bf619de36834d961",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "hCalc_FullCode_result;",
      "Id": "574870fac935414eb7176c0959ed684f",
      "Inputs": [
        {
          "Id": "f7fba81998194e59980e07caeec92dc1",
          "Name": "hCalc_FullCode_result",
          "Description": "hCalc_FullCode_result",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02b229e1d986480c9d2478ec78a285c4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.DirectShape.ByGeometry@Autodesk.DesignScript.Geometry.Geometry,Revit.Elements.Category,Revit.Elements.Material,string",
      "Id": "16188751f78d4b1fb05a47ef8123ff28",
      "Inputs": [
        {
          "Id": "c222bd1167444afc969cc43c9b64aa59",
          "Name": "geometry",
          "Description": "A Solid or Surface that will be tessellated and placed in the Revit model as a DirectShape\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "714f152d5a1047038555b887444d9166",
          "Name": "category",
          "Description": "Must be a top level Built-in Category\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5c7a2076a8c940dd933864bf49195f46",
          "Name": "material",
          "Description": "A Material to apply to the faces of the DirectShape\n\nMaterial\nDefault value : Revit.Elements.DirectShape.DynamoPreviewMaterial",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6f3aed1b6ff043acb5de6e1274b2bf55",
          "Name": "name",
          "Description": "A string name for the DirectShape\n\nstring\nDefault value : \"DirectShape\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e235722ae2ad4d46b0b0d031533d78f0",
          "Name": "DirectShape",
          "Description": "A DirectShape Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit DirectShape given some geometry, a name for the shape, a Category, and Material. The geometry will be tessellated before being placed in the Revit model The category of a DirectShape cannot be changed after creation, so a new DirectShape will be generated if the category input is changed.\n\nDirectShape.ByGeometry (geometry: Geometry, category: Category, material: Material = Revit.Elements.DirectShape.DynamoPreviewMaterial, name: string = \"DirectShape\"): DirectShape"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 264,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "2782b47365a6469d94f00890dea84277",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d881b5daebc14ecca59fa0ab33ffdb3b",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 20,
        "B": 147,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "00f448c9b2744231a5f328b0d3804b00",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca6e893276c14fdf870055d0d431214a",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.OverrideColorInView@DSCore.Color",
      "Id": "6f061ee9c5f745958cb880f2bd8516b9",
      "Inputs": [
        {
          "Id": "8f8400f34a7942aab0896435ca7f933e",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3bef997357914863a9e525edfc2661e7",
          "Name": "color",
          "Description": "The color to apply to a solid fill on the element.\n\nColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2095e244245d49e5aa3e35421bb0352c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Override the element's color in the active view.\n\nElement.OverrideColorInView (color: Color): Element"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport Revit\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\ntgt_key = IN[0]\r\n\r\nelemDicts_eachEarth = IN[1]\r\nshape_wholeEarth = IN[2]\r\ndirectShapeCat = IN[3]\r\n\r\n# Place your code below this line\r\n\r\ndef CreateDirectShapeByGeometry(geo, category):\r\n    doc = DocumentManager.Instance.CurrentDBDocument\r\n    uidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    Revit.Elements.DirectShape.ByGeometry(geo, category)\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n\r\ndef createEarthWorkShape(tgt_key, elemDicts_eachEarth, shape_wholeEarth):\r\n    dict_for_shape_wholeEarth = {\r\n        \"effExcaGeo\": 0,\r\n        \"effBackfillGeo\": 1\r\n        }\r\n    \r\n    if shape_wholeEarth:\r\n        res = shape_wholeEarth[dict_for_shape_wholeEarth[tgt_key]]\r\n    else:\r\n        onlyExcaDicts = list(filter(lambda x: tgt_key in x.keys(), elemDicts_eachEarth))\r\n        res = Solid.ByUnion(list(map(lambda x: x[tgt_key], onlyExcaDicts)))\r\n    return res\r\n\r\n\r\n\r\n    \r\nresult = createEarthWorkShape(tgt_key, elemDicts_eachEarth, shape_wholeEarth)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = result#CreateDirectShapeByGeometry(res, directShapeCat)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7505b535d9e645f6bd7438be03d63311",
      "Inputs": [
        {
          "Id": "11d8c9f98f974603890836aadc791508",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "172dd6ba705d4737abd7e3c1ab87c665",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "69f3e444d3ef4fca92a3357bbe4b45ba",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a478bbce1134a63a458316bef603fbc",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "18fbe7d934cf41ca9f7249827fadb998",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "터파기 형상",
          "Item": "effExcaGeo"
        },
        {
          "Name": "되메우기 형상",
          "Item": "effBackfillGeo"
        }
      ],
      "SelectedIndex": 1,
      "SelectedString": "되메우기 형상",
      "NodeType": "ExtensionNode",
      "Id": "ba4e0ac89fd34da4935313ff73ed1abd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "913fea0c03654d0cb6341ca91543b9b6",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0][0];\ni[0][1];",
      "Id": "61b580640adb40d4b1c449c7323ac2c3",
      "Inputs": [
        {
          "Id": "f82cae12d6514b0cae1ce34eabb766ee",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "686d0044c68c4f66b0db017c6d6c43d3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3d391021148433e916abfccd8145d84",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "aa4ea45f35c945c9be7b2ce84ff8eacb",
      "Inputs": [
        {
          "Id": "94ce619409ea4b6c9d5d8fb7df4b3f26",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "03596c8b91cd40b49188bf78a450cc46",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "eb06cf7c48f545b9bd4d2d5b0b2762a5",
      "Inputs": [
        {
          "Id": "6fa451d66072408187b6efaa960d0300",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a24ec60f5e8444b2ab32094182334c6b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "buildingName;",
      "Id": "184da1cadfb54021ae8ad1408d6cf7f3",
      "Inputs": [
        {
          "Id": "4cc4fc583b01445db26c4fc4d4219be0",
          "Name": "buildingName",
          "Description": "buildingName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "75eff7ff7c0d4223903576f351ffe0c9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "buildingName;",
      "Id": "8a9b13906cda4c75a071b7aae6309d9c",
      "Inputs": [
        {
          "Id": "2e20dfef219646f8bf3f5bc5c23e507f",
          "Name": "buildingName",
          "Description": "buildingName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a01616eb71b49bb924827618ec78fca",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "912753a782b84f598e120e936fffbd58",
      "End": "ae38fed72c0a434eb235268bfba22c03",
      "Id": "2f9fd4adb6444d8e9c24cd4a536bbbf2",
      "IsHidden": "False"
    },
    {
      "Start": "e4d9d60debe6406cace5eb687f712858",
      "End": "efbd6851497a4681a114ca7842d95e6a",
      "Id": "2483c846c22f4026a33d2bffb611b5e1",
      "IsHidden": "False"
    },
    {
      "Start": "bdc68e6596d64c1bb2ad17af850a8a64",
      "End": "f2b7450af5914cbf8a28c2a092e6a190",
      "Id": "e1261a8d8e0640709812536bf93bfcb4",
      "IsHidden": "False"
    },
    {
      "Start": "07eba95685e249a0a3188444eec253fe",
      "End": "2d45870ecc9f4742810ae2af861ad07b",
      "Id": "9aeb66891ebe4d4ca89e07933da9a02d",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "bc527cafc27940be89affefe03ec5054",
      "Id": "a02dcbd289844f5fa14026b266be368e",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "60cd8c44df3e49219b09c56a53c466de",
      "Id": "5408529dfc524323b2da4501cda2de5d",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "d345e415287f4d9bb8b5809f532cdace",
      "Id": "e01c61e89d4f4e87a9f30f2f758f64eb",
      "IsHidden": "False"
    },
    {
      "Start": "eb3a2510c5934129baf50771f5bb29a9",
      "End": "c4d740fa206e4ab3b53ba148e9727e8f",
      "Id": "0708e80f5c0f475aa73809bfc8d71053",
      "IsHidden": "False"
    },
    {
      "Start": "e3d41cbea388406e9b31fca8184f2a13",
      "End": "8d8f529204cd48a5a2210b85d94be686",
      "Id": "aea2bbf0844a421eac38d674664254a7",
      "IsHidden": "False"
    },
    {
      "Start": "e3d41cbea388406e9b31fca8184f2a13",
      "End": "cdd5b3ba3dca46d2903fdb0bb343ca4d",
      "Id": "b28e3f7ce6784cf6bab2cc8a2931024f",
      "IsHidden": "False"
    },
    {
      "Start": "f98969ee45ea4cce8921b553ad57fbc0",
      "End": "da624c3834b64df4a29198439fca082e",
      "Id": "056e91bb2fca4d81af853578b822a2fa",
      "IsHidden": "False"
    },
    {
      "Start": "65f005d270e742a5906ad09029786a2e",
      "End": "8871f8fef5b841e484fe65aa92aecb9c",
      "Id": "494aee2559f04a46b0d8c7ee9e733d67",
      "IsHidden": "False"
    },
    {
      "Start": "65f005d270e742a5906ad09029786a2e",
      "End": "b620040f1dbf435393f137b7cdd87ee5",
      "Id": "f3a92beaa6884226812f8fe4cf6cd97e",
      "IsHidden": "False"
    },
    {
      "Start": "ddaee91b731249a990626eee2bce9ca4",
      "End": "f39659b145d0462482073c7655fe3582",
      "Id": "bb10b8b155574fc1b28d8e50bdb1ec9d",
      "IsHidden": "False"
    },
    {
      "Start": "32031adf5ee64bc49ae7c3d65dc89ca3",
      "End": "b4d9a9e2970e4ba7a0adf077ee9264e5",
      "Id": "5ee870b4a1c24e509f74c3a382712baa",
      "IsHidden": "False"
    },
    {
      "Start": "8b75b3669acf47baab8e27b5432293d5",
      "End": "9e003a398c744cf489ca6cf87328c986",
      "Id": "fe94b593700f427ab2952453c3ad657b",
      "IsHidden": "False"
    },
    {
      "Start": "fbe496ff58b5496bab3d818170be9b90",
      "End": "c5bae2a161c44dbab17d406f3fc7e8d6",
      "Id": "ef473d909f8f47ec8564e892527483d8",
      "IsHidden": "False"
    },
    {
      "Start": "a3ef7f68ea224374834c39ddb549b2ca",
      "End": "c2327385dc4d4427ad017aefe187b6f3",
      "Id": "13de535de37b4fd4b9cd3f6c03cf65b2",
      "IsHidden": "False"
    },
    {
      "Start": "66334226642f44b19bfe040f61500a5c",
      "End": "908bb9ba4c4445618470abf4e49c4100",
      "Id": "628f0fc69ff44a33aa30b4dc5dcc1d83",
      "IsHidden": "False"
    },
    {
      "Start": "724b257b6e404ed585ee188d157145ba",
      "End": "99b7a172bab04fcf9e908e78fd92eaf3",
      "Id": "9340680534104457a1394df00fe0b8c3",
      "IsHidden": "False"
    },
    {
      "Start": "724b257b6e404ed585ee188d157145ba",
      "End": "6b9ac6c86e794528a8f432bda91bb2d7",
      "Id": "9a391cab697f4f719602fc3d68579349",
      "IsHidden": "False"
    },
    {
      "Start": "bfa2bdde29b94030aa701b88ab3ca988",
      "End": "26d7414229104d838c6c46f04092e46f",
      "Id": "a6a3a45e5f85428cab6f2525462d295a",
      "IsHidden": "False"
    },
    {
      "Start": "1e09582488be4705b6ac572c258d018e",
      "End": "eb38296ae8b4424f892c47d4c8380597",
      "Id": "f4af9c3841ea48c08f2e8550c5297d8e",
      "IsHidden": "False"
    },
    {
      "Start": "d9f7652d7dcd49818455cfcb11afd4d5",
      "End": "22a14fba8f194143a2aaef45fb512ae7",
      "Id": "626bf182effb482b80a7dc640f56561c",
      "IsHidden": "False"
    },
    {
      "Start": "095ac27cee8044e7a2f1a3250bb3ef14",
      "End": "3bcfb02953874e55934e6741a68f8240",
      "Id": "50df8ac05f824039abb1e26c5f7aab28",
      "IsHidden": "False"
    },
    {
      "Start": "e5bac32700234c6d9ed167d8d9c8f586",
      "End": "ec0e917339cb4f81875e476c63e9f5d3",
      "Id": "e612ac9c5b1e4f5da9953e4e986bda04",
      "IsHidden": "False"
    },
    {
      "Start": "b6d47b8f9ac240dfae1f3aa0b2ae6664",
      "End": "809aab676bdd45759176cd7fc1b7287c",
      "Id": "4e0adf6fd2e74ea2ad154da17bb893e5",
      "IsHidden": "False"
    },
    {
      "Start": "b6d47b8f9ac240dfae1f3aa0b2ae6664",
      "End": "e43e5fd406464b7f8978b0b2edd82a44",
      "Id": "8ceb163aa45249e0b7523e2ef31befea",
      "IsHidden": "False"
    },
    {
      "Start": "c9727449e64f48e69788fef8ef486d53",
      "End": "1c46c0fce7ef4f3b9d77f0c79a6d570a",
      "Id": "9ee29338d6ee42e98abcfe2d8389b171",
      "IsHidden": "False"
    },
    {
      "Start": "e30bb663437641e092989a1db00f22eb",
      "End": "60314121b72e4091a067f4ad720e1648",
      "Id": "0483fec52e294191a9fbc53fac0015c9",
      "IsHidden": "False"
    },
    {
      "Start": "8c8a37b2461841eebfd7ca01ff4cbbcb",
      "End": "c9e1a9717b414fb18cba11de5a217a51",
      "Id": "2841eaf5dd4a4786a970acde91428eac",
      "IsHidden": "False"
    },
    {
      "Start": "8c8a37b2461841eebfd7ca01ff4cbbcb",
      "End": "85ac0d8fca71462086880054318c5da1",
      "Id": "2b4898dd04724928bceda9e8c8f653cf",
      "IsHidden": "False"
    },
    {
      "Start": "8bd85b9cebae40d887ecf33249bfa9ea",
      "End": "e5be3df534fc4ffca7597213d53ae45a",
      "Id": "8c4ae19e61304e3989e225276fea049e",
      "IsHidden": "False"
    },
    {
      "Start": "b56e73df83b44e3e99d4218e0c900f86",
      "End": "15939b39f28f4e619a0eb5412fcc19b8",
      "Id": "d0ac131505264be1bed92a0be74ebc1f",
      "IsHidden": "False"
    },
    {
      "Start": "65c451db8acc4de497ba72e61d8cd1ed",
      "End": "a4bfa9cbcd0b41e78735db0e5ca3876c",
      "Id": "9d557bbd38024f47ba36d72731a3ebc8",
      "IsHidden": "False"
    },
    {
      "Start": "52e9ec6674db4af88586c7799cfe0b57",
      "End": "524b1b7f02034b7e9f83fd908cc91185",
      "Id": "a70c0bd1baa7405cb1189ae877b879ec",
      "IsHidden": "False"
    },
    {
      "Start": "9e3824f6d5f54568850402f597fa43b7",
      "End": "4e559b0185dc4491b7280e9af4d25100",
      "Id": "144a89029f714c0890c1d469d4130e31",
      "IsHidden": "False"
    },
    {
      "Start": "2a21d79dc4e546c7a5d930f015a1ccf9",
      "End": "8eccee2da9d44095b4a5a8165d65e5e9",
      "Id": "a9bdcb89a0024e8ba280143b36aba394",
      "IsHidden": "False"
    },
    {
      "Start": "75452394259f454aac6b7f0729e4e1f7",
      "End": "0ebfa4e61b684cd29f1b56548ad20a7f",
      "Id": "146872e235064de3b6207faecff3206e",
      "IsHidden": "False"
    },
    {
      "Start": "be1b029e33894bd0902651bb82065169",
      "End": "830fdb6b17c24e5e9b88bcb80c215549",
      "Id": "ac1869ea88b4484a9596e5e99fd6b4a6",
      "IsHidden": "False"
    },
    {
      "Start": "da8b6750c54241e4ae6ec824684ac955",
      "End": "1e51c34b755b4b5daebc49a04c834a02",
      "Id": "bb9f914f2d8d4be8b6adf873f6a885f3",
      "IsHidden": "False"
    },
    {
      "Start": "b345d4e40bdc4e6593a996aa4cb30453",
      "End": "b6b668c063784cf0ba5e742521351658",
      "Id": "92c82fdcb7fb4d06884c1529dea1e794",
      "IsHidden": "False"
    },
    {
      "Start": "fd49bd91c8404815a9c1a36fc411c667",
      "End": "42770b41a2d946509605b16ddcffe4ed",
      "Id": "2ac2633bc8ad4cb99eb6c9d0c456b5d9",
      "IsHidden": "False"
    },
    {
      "Start": "d4b321675a114235bf59cb7e5d0e3e28",
      "End": "1713810eee684d02934f951dc7ba675d",
      "Id": "af0f1438995945a1881c2781b1ada32c",
      "IsHidden": "False"
    },
    {
      "Start": "a2ecfaa19c334eddb1d809fd5b9c21b7",
      "End": "4cc4fc583b01445db26c4fc4d4219be0",
      "Id": "ecabeb86c6a1427687765bfb0850b97a",
      "IsHidden": "False"
    },
    {
      "Start": "112368b6347846d79c81bcc2f9ded6e3",
      "End": "067cea70fca44b7e8884f49dd7f817bc",
      "Id": "0cb8b025ab0d43f39ad29d246ca88fa8",
      "IsHidden": "False"
    },
    {
      "Start": "f41c17b57dc4486791d293b996225179",
      "End": "c86c20b170cf41b2b9cfee070d24dc41",
      "Id": "1ed0bc4a9cc74263a323881f163c065e",
      "IsHidden": "False"
    },
    {
      "Start": "fc0b74d5401541c0bc827a65e85ad1a1",
      "End": "1f9bfde3838746b5aef0d8d9f60bfcfe",
      "Id": "b8bc0ae49f734faf98daf04bb3999559",
      "IsHidden": "False"
    },
    {
      "Start": "515259ed271e44d49f5f06415f8a3968",
      "End": "3adefa72172f4d0e94c423abf3e4051d",
      "Id": "798e6ba3a0cb43709da06dbfe3e7d951",
      "IsHidden": "False"
    },
    {
      "Start": "0fd8c607dd7f4c8ab5496470eb788c13",
      "End": "2a14711119634cb3be308f0f81f8e3c2",
      "Id": "6adb0e0b551140fcb35cf046c6ae9f90",
      "IsHidden": "False"
    },
    {
      "Start": "5910d662ad6e4a1087d938c1a9ce900a",
      "End": "b24df086c9204ccd9af377fabb5536aa",
      "Id": "fb977e719284480cbbae5e552c205f32",
      "IsHidden": "False"
    },
    {
      "Start": "b3480272d2ec471a96af2b99b4778507",
      "End": "c65df92cac4c49448f02fb3db90aca10",
      "Id": "90440f99732b45c0ac5dfdcd596cffbf",
      "IsHidden": "False"
    },
    {
      "Start": "b3480272d2ec471a96af2b99b4778507",
      "End": "81b00a4bed47445eb92bccff5549b468",
      "Id": "3964c033df0f41dabdf1a52c055e9ff1",
      "IsHidden": "False"
    },
    {
      "Start": "b3480272d2ec471a96af2b99b4778507",
      "End": "17c5e50fcdc64d49a30e6884d4f4a9e0",
      "Id": "42a10f4a2369486fa9a078670588ab6a",
      "IsHidden": "False"
    },
    {
      "Start": "323f7caf7ca34686a14fb4e51c84e0ca",
      "End": "21faa835358f45ab900e85cae4434eab",
      "Id": "88b2116525e243afa5d6517bbee1a109",
      "IsHidden": "False"
    },
    {
      "Start": "970a442dbaf948f7a5500cce67b1c1e9",
      "End": "8c0251f3a93a45e3af2c10b715fdc9fc",
      "Id": "f50b73fd722e4b74bf5e6dbf29c63d03",
      "IsHidden": "False"
    },
    {
      "Start": "cd0186c0110e45efbff32b76a9bb3a55",
      "End": "d111cae14d0b4ca191177a7c4b6e5914",
      "Id": "4f2c529edff143b78d8ca8cdef34f6cf",
      "IsHidden": "False"
    },
    {
      "Start": "2ae84853d9e043699e6f4ca77f9d976d",
      "End": "5d6a579e11fc46ff81e2a20afbd033ad",
      "Id": "5648294224774922b634fe87d59f3a44",
      "IsHidden": "False"
    },
    {
      "Start": "1afdad0b610045f49d9918563aa08dd5",
      "End": "7d852923babc430fa1d5c8efa5cdde9f",
      "Id": "226d9684561f479592641fc389395bf6",
      "IsHidden": "False"
    },
    {
      "Start": "bbc5d8b7de0f4400b03d98915cd57120",
      "End": "f82cae12d6514b0cae1ce34eabb766ee",
      "Id": "f06b113834544a2dbac29085343e8f68",
      "IsHidden": "False"
    },
    {
      "Start": "bbc5d8b7de0f4400b03d98915cd57120",
      "End": "f7fba81998194e59980e07caeec92dc1",
      "Id": "3c538faa171548cf94aea79f2f86b498",
      "IsHidden": "False"
    },
    {
      "Start": "7e1ae2bcbc224dafbae256e634257ce4",
      "End": "971c49fd32144a5c953218909c77b71c",
      "Id": "de6c074017094a3b981630014b7d1637",
      "IsHidden": "False"
    },
    {
      "Start": "afd19d0535764329874102e8a3d426a4",
      "End": "1c818e5a870543ae882ce86f9443cfbf",
      "Id": "5f2a1d52de8148c1bb84bb8b8be8691a",
      "IsHidden": "False"
    },
    {
      "Start": "9f198a379ab64e2f8e5f18d21d9c687a",
      "End": "5f2f4dc508624b2db556c5e9bcc849eb",
      "Id": "456d5dba6e1e496c93a43f731b97635f",
      "IsHidden": "False"
    },
    {
      "Start": "9f198a379ab64e2f8e5f18d21d9c687a",
      "End": "632af2876b8d4f7590caffd373cab574",
      "Id": "26691fdc78c044df827e0142c1a767ab",
      "IsHidden": "False"
    },
    {
      "Start": "3b1aac9a2e1446458df93f85dfba212e",
      "End": "ecb875d8bb844b02a9890d8d62964355",
      "Id": "7163d94c8beb49f48245c72160ca14e5",
      "IsHidden": "False"
    },
    {
      "Start": "db68a6f01b5949b69db9bf6c0f98aa27",
      "End": "faeee94ec11b4423af85640b4e3aa68c",
      "Id": "b682218efb4e4d5399f4c4b9199bf2d6",
      "IsHidden": "False"
    },
    {
      "Start": "9f45bab1fab649509b97b0d76298e3e1",
      "End": "22d4c03dbab04e428cbb1341894a3bcb",
      "Id": "ae8ebf6346364966a09dd04deeab0374",
      "IsHidden": "False"
    },
    {
      "Start": "c2967b02ecf547709e3be133d8ab511a",
      "End": "1c67baeae7e64255a90ab8b39f03624a",
      "Id": "18942c27a9e4434689a8d64502319f51",
      "IsHidden": "False"
    },
    {
      "Start": "6328eed93bad46fc822b4b17fa8d6f66",
      "End": "9bd8a215b7c14b39bf5bef0ce7ca3a5e",
      "Id": "2260efe845574ad192fd8593e43c8dcc",
      "IsHidden": "False"
    },
    {
      "Start": "bd8ac986d7a6418b8d0c5434e8e2d401",
      "End": "9185e6808b67447793aaf3dd18afbb9d",
      "Id": "e7c5c0fc8139496fac32348cb29d6df3",
      "IsHidden": "False"
    },
    {
      "Start": "db19ad1d588d4ad7a271c1d192da2346",
      "End": "232575f4bf3f457ab2a31d447d27a162",
      "Id": "f4dca8a4dd4345a2a951eeac44344739",
      "IsHidden": "False"
    },
    {
      "Start": "ae1ff1df1bee479abae6cefcd17b8af3",
      "End": "0d1482bbce624f8fbea7388248deb622",
      "Id": "9e22045dd1de416bbfc8eb8ebcab7715",
      "IsHidden": "False"
    },
    {
      "Start": "ae1ff1df1bee479abae6cefcd17b8af3",
      "End": "ca3839e498cc41deb8e9225ab7ab8210",
      "Id": "099acab005a94dd79996b2d6991baa18",
      "IsHidden": "False"
    },
    {
      "Start": "6879374005aa49d286aa848e9c817b64",
      "End": "893113c989264cd19431bbb81823b560",
      "Id": "21532de360dd41feb53561f738d0edb6",
      "IsHidden": "False"
    },
    {
      "Start": "c3a1bc04419048b3bf619de36834d961",
      "End": "5241a20caa8f481a94fc7be2332e76fc",
      "Id": "fbef460cf7844ec7b32297d65b9add2a",
      "IsHidden": "False"
    },
    {
      "Start": "02b229e1d986480c9d2478ec78a285c4",
      "End": "94ce619409ea4b6c9d5d8fb7df4b3f26",
      "Id": "d54697ae8a7d4c489d24f2fbb4adbeaa",
      "IsHidden": "False"
    },
    {
      "Start": "02b229e1d986480c9d2478ec78a285c4",
      "End": "6fa451d66072408187b6efaa960d0300",
      "Id": "de39a5c73a9a42b2bb96c9957e1bd73a",
      "IsHidden": "False"
    },
    {
      "Start": "e235722ae2ad4d46b0b0d031533d78f0",
      "End": "8f8400f34a7942aab0896435ca7f933e",
      "Id": "568326aed188497688c42b18f2c5c4f9",
      "IsHidden": "False"
    },
    {
      "Start": "d881b5daebc14ecca59fa0ab33ffdb3b",
      "End": "714f152d5a1047038555b887444d9166",
      "Id": "eb87e5cd75984a49855fa7f49652bd87",
      "IsHidden": "False"
    },
    {
      "Start": "d881b5daebc14ecca59fa0ab33ffdb3b",
      "End": "2a478bbce1134a63a458316bef603fbc",
      "Id": "07efe4253fc444569445642a19aa14c8",
      "IsHidden": "False"
    },
    {
      "Start": "ca6e893276c14fdf870055d0d431214a",
      "End": "3bef997357914863a9e525edfc2661e7",
      "Id": "386666e465f847318b91c7c70853d245",
      "IsHidden": "False"
    },
    {
      "Start": "18fbe7d934cf41ca9f7249827fadb998",
      "End": "c222bd1167444afc969cc43c9b64aa59",
      "Id": "76f828afbdf04f659e57d126ff0fa1dd",
      "IsHidden": "False"
    },
    {
      "Start": "913fea0c03654d0cb6341ca91543b9b6",
      "End": "11d8c9f98f974603890836aadc791508",
      "Id": "8beea87e672a4e268cad16dc0ebeb2a8",
      "IsHidden": "False"
    },
    {
      "Start": "686d0044c68c4f66b0db017c6d6c43d3",
      "End": "172dd6ba705d4737abd7e3c1ab87c665",
      "Id": "0c57d5218d5f4fb38101446f29b393a1",
      "IsHidden": "False"
    },
    {
      "Start": "a3d391021148433e916abfccd8145d84",
      "End": "69f3e444d3ef4fca92a3357bbe4b45ba",
      "Id": "ddf3c9d2f1da4e8b9cd445df1e326666",
      "IsHidden": "False"
    },
    {
      "Start": "03596c8b91cd40b49188bf78a450cc46",
      "End": "c24104869fb5431bacfe98eac9722e96",
      "Id": "511bf8f5ff42467bb99b87d5869f60c2",
      "IsHidden": "False"
    },
    {
      "Start": "a24ec60f5e8444b2ab32094182334c6b",
      "End": "966c11318b8a4a43afa0e303f1b32ac8",
      "Id": "d37e1f82314c4979aa573b42aee2f785",
      "IsHidden": "False"
    },
    {
      "Start": "75eff7ff7c0d4223903576f351ffe0c9",
      "End": "2e20dfef219646f8bf3f5bc5c23e507f",
      "Id": "c628e887eb454d45852f2c4e47945932",
      "IsHidden": "False"
    },
    {
      "Start": "2a01616eb71b49bb924827618ec78fca",
      "End": "e40fc391bb9543069e39578990171d11",
      "Id": "125cec09b32e4d6faa4070b46351cb5d",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "51b4738620874fe885b1b5ecce1e49b7",
        "7f5e0c25b593402094aa786410d940b1"
      ]
    },
    {
      "Name": "Total BOQ_blank.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "ecccb4f11a2543e29cb666423f4f697e"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "MK Jang",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -21.611804962158203,
      "EyeY": 14.538795471191406,
      "EyeZ": -47.822319030761719,
      "LookX": 48.681819915771484,
      "LookY": -46.708827972412109,
      "LookZ": 29.469367980957031,
      "UpX": 0.388374924659729,
      "UpY": 0.89100521802902222,
      "UpZ": 0.23510585725307465
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "1250bd18102c4ebaac9950d60dac8849",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6686.03769649431,
        "Y": 1457.949976022423
      },
      {
        "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "All ElementsExceptRails",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6329.03769649431,
        "Y": 1309.949976022423
      },
      {
        "Id": "d78f3dfc768541ab8490b53194e174c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Categories",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -7022.03769649431,
        "Y": 1457.949976022423
      },
      {
        "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6329.03769649431,
        "Y": 1457.949976022423
      },
      {
        "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Join",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5976.03769649431,
        "Y": 1366.949976022423
      },
      {
        "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5757.06922431888,
        "Y": 2131.7582392556637
      },
      {
        "Id": "caccad700bd84d8e8cb198c7fe1545aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "File From Path",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6051.06922431888,
        "Y": 2028.7582392556637
      },
      {
        "Id": "51b4738620874fe885b1b5ecce1e49b7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Family List 경로 입력",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6694.06922431888,
        "Y": 2028.7582392556637
      },
      {
        "Id": "76e75c1cd00342eeb418e14c2410b8f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6051.06922431888,
        "Y": 2324.7582392556637
      },
      {
        "Id": "64985def907747329221585392bfc414",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6262.5495444632525,
        "Y": 2202.8910767088364
      },
      {
        "Id": "3a2291d54fa74970b0cacd8a3a8a08b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.ExportToExcel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3802.0092787614649,
        "Y": 618.73349494653667
      },
      {
        "Id": "d9de8a61787442ceb4b5e56fe75e7a1d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.Components",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2441.2414262995626,
        "Y": 683.38567320265929
      },
      {
        "Id": "ae19779d3103471bb4993d2624fee3c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2788.2414262995626,
        "Y": 805.88567320265929
      },
      {
        "Id": "0e906b492e964f0388034bb3dba9715c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2441.2414262995626,
        "Y": 865.71317320265962
      },
      {
        "Id": "e4bace56c16d462b8e637e17ad1a1046",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2461.6201031874189,
        "Y": 428.91333488791088
      },
      {
        "Id": "43c850fe5b414baaa43fa6abbf66d41a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3111.2414262995626,
        "Y": 754.88567320265929
      },
      {
        "Id": "2524f0f864744ce88dfa2ab2d9d3e61d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2788.2414262995626,
        "Y": 647.36817320265936
      },
      {
        "Id": "92a5d0c5dcc842d7b250f2421b0731ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3172.7134622327935,
        "Y": 2937.4672786745969
      },
      {
        "Id": "f12f2f24ce254bd0baef14f26c5d20e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "WM별 계산결과 및 spec 정리 from Element",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 3693.7134622327935,
        "Y": 2820.6397786745974
      },
      {
        "Id": "ecccb4f11a2543e29cb666423f4f697e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Total BOQ sheet 경로 입력",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6893.1888688755234,
        "Y": 3812.1129746796464
      },
      {
        "Id": "545bdda03ce34cbf8f380aa09996affe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3172.7134622327935,
        "Y": 2689.2947786745972
      },
      {
        "Id": "23c16e6f54c54461a94198d996b688b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2846.7134622327935,
        "Y": 2780.1222786745975
      },
      {
        "Id": "cb8eb6bb001d4e018998c1f81063a7b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "File From Path",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 2846.7134622327935,
        "Y": 2632.2947786745972
      },
      {
        "Id": "6689bfc92b614a86a2438579264ab559",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4490.64455548503,
        "Y": 943.63502035351746
      },
      {
        "Id": "dcbac945a42f4a5c9a9db85369fb5958",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3371.1506323017793,
        "Y": 745.57869505203769
      },
      {
        "Id": "abf63584b5df484fa09c861a33e2a423",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3625.1506323017793,
        "Y": 779.406195052038
      },
      {
        "Id": "0a5e14b22e144bed8451ebf583eb117a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3048.1506323017793,
        "Y": 817.57869505203769
      },
      {
        "Id": "0de826304a0c4eeb88bf431965d3fbff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3371.1506323017793,
        "Y": 923.406195052038
      },
      {
        "Id": "353906790eac4dbe9265acc4fd59f260",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2753.1506323017793,
        "Y": 817.57869505203769
      },
      {
        "Id": "6d3257a7ae1544ba96260a2930df41a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Total BOQ 데이터 파싱_(AR) BOQ시트",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3693.7134622327935,
        "Y": 2608.2947786745972
      },
      {
        "Id": "1d1c6adab25c4ce38795f6d70084638b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2453.1506323017793,
        "Y": 817.57869505203769
      },
      {
        "Id": "86d4c756923b4ec5a7a76f44031313e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3048.6506323017793,
        "Y": 1144.5786950520383
      },
      {
        "Id": "36b72e613f054f51ab44d4a659a11baf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3371.6506323017793,
        "Y": 1250.4061950520374
      },
      {
        "Id": "522eba1415564c619ea3a722c3bfca63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3371.6506323017793,
        "Y": 1072.5786950520383
      },
      {
        "Id": "78f0730f98164cf88c95031451db6a2e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2753.6506323017793,
        "Y": 1144.5786950520383
      },
      {
        "Id": "f8862fff8dc647619582f6b8e6003793",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3625.6506323017793,
        "Y": 1106.4061950520377
      },
      {
        "Id": "aae6ee369697433d96978d6f0a38227c",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "건물명 입력",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6864.68374297798,
        "Y": 4030.61946489477
      },
      {
        "Id": "6790ac16e9864c6282b9f0a28e4bac80",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2453.6506323017793,
        "Y": 1144.5786950520383
      },
      {
        "Id": "8066549a4a9b47df80e48559f550e5c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3172.7134622327935,
        "Y": 2512.2947786745972
      },
      {
        "Id": "cf52cd359968431c954ef0c1c105f09b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data formatting for Excel Export___________________________",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4593.713462232794,
        "Y": 2694.6397786745974
      },
      {
        "Id": "53192363f9da457ca86140d19351bdfb",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "Export to Total BOQ",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5267.713462232794,
        "Y": 2537.6397786745974
      },
      {
        "Id": "29337ae8d2c94d488ebdc03de0a16ad6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4178.713462232794,
        "Y": 2449.7947786745972
      },
      {
        "Id": "008b88f58bd548188e4d5668e106d9e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4178.713462232794,
        "Y": 2627.2947786745972
      },
      {
        "Id": "5c6408d2dc324480ad293743e0e51f10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "lang_mode(영/한) select",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6988.8227003133625,
        "Y": 2775.654329306717
      },
      {
        "Id": "754f8c62f313424485c7342eacc1cd4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FirstItem",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4829.7282534544147,
        "Y": 1132.6664716233126
      },
      {
        "Id": "739b18232b3647c3a93bc9903af06c1d",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "토공 산출 모드 선택",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -6981.4370048973215,
        "Y": 3380.4048433568673
      },
      {
        "Id": "7f5e0c25b593402094aa786410d940b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3985.5449627693988,
        "Y": 1477.5828669570449
      },
      {
        "Id": "756a672a7cef4e9e91d11c4c0279ab0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "WM별 spec 정리 from Family List",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4178.713462232794,
        "Y": 2801.6397786745974
      },
      {
        "Id": "11184f601ab1440f92b47f1dcda08f3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Total BOQ복사 및 경로 반환",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4593.713462232794,
        "Y": 2516.6397786745974
      },
      {
        "Id": "5b26f33fb50d4441b2dc495fc028521e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2480.6536795024713,
        "Y": 2940.8507485025852
      },
      {
        "Id": "b0d2ff2d9c5f4d63a07bfdf8b46f74bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5204.5430723209665,
        "Y": 1128.6270929909683
      },
      {
        "Id": "63fbb93d87a844fbbac1080821f5f180",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "hCalc_FullCode___________________________",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3400.6304912603473,
        "Y": 2019.8146875009738
      },
      {
        "Id": "55bb494892834c5ab404391b99483ed2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5724.03769649431,
        "Y": 1366.949976022423
      },
      {
        "Id": "5d6276188c154ad9b683fbece6f2c630",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Level.Elevation",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4048.7435603944059,
        "Y": 2951.4670356445263
      },
      {
        "Id": "a16523d3e4ff4488a28e95dbc2c75a0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5631.7435603944041,
        "Y": 2939.9670356445263
      },
      {
        "Id": "265e7c3045514b0885bd3aafa3c020aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Categories",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5967.7435603944041,
        "Y": 2939.9670356445263
      },
      {
        "Id": "20137012b6604e04bea74af353edfa36",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Level.Name",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5274.7435603944059,
        "Y": 2928.4670356445263
      },
      {
        "Id": "009ae0e082d3477c8e68feaaa8e1c2d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Contains",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4980.7435603944059,
        "Y": 2985.4670356445263
      },
      {
        "Id": "af6546d7ff044c62af14248adb86f4b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5274.7435603944059,
        "Y": 3076.2945356445275
      },
      {
        "Id": "c0738bf5251b46c594a752dfca8a862f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4659.7435603944059,
        "Y": 2951.4670356445263
      },
      {
        "Id": "32a7c4f13eac43ae918bc55fc7c52899",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FirstItem",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4324.7435603944059,
        "Y": 2951.4670356445263
      },
      {
        "Id": "9072a401ee7b4d5ea611f6c798813b99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "wholeExca_CalcType",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -4753.7585763220141,
        "Y": 2568.2340333354223
      },
      {
        "Id": "a1aa28f5a2bc45279387e45d95f5e23e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1768.0869454853209,
        "Y": 1807.8570385709036
      },
      {
        "Id": "7b8e1cf122fb45fcbfa268fff5af8092",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "description판별항목",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1752.3872326436604,
        "Y": 1950.4224968637186
      },
      {
        "Id": "574870fac935414eb7176c0959ed684f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": false,
        "Excluded": false,
        "X": -1206.9146303830771,
        "Y": 1675.1253864070395
      },
      {
        "Id": "16188751f78d4b1fb05a47ef8123ff28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "DirectShape.ByGeometry",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 642.949747041011,
        "Y": 3690.6434493068591
      },
      {
        "Id": "2782b47365a6469d94f00890dea84277",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Categories",
        "ShowGeometry": true,
        "Excluded": true,
        "X": -108.16418904730517,
        "Y": 3904.9782983323885
      },
      {
        "Id": "00f448c9b2744231a5f328b0d3804b00",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 642.9497470410156,
        "Y": 3938.6434493068582
      },
      {
        "Id": "6f061ee9c5f745958cb880f2bd8516b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.OverrideColorInView",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1002.9497470410156,
        "Y": 3797.6434493068582
      },
      {
        "Id": "7505b535d9e645f6bd7438be03d63311",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "토공 형상 검토",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 306.9497470410156,
        "Y": 3601.6434493068582
      },
      {
        "Id": "ba4e0ac89fd34da4935313ff73ed1abd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Custom Selection",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -115.0502529589844,
        "Y": 3601.6434493068582
      },
      {
        "Id": "61b580640adb40d4b1c449c7323ac2c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": true,
        "X": -829.65670700912415,
        "Y": 3670.363181754823
      },
      {
        "Id": "aa4ea45f35c945c9be7b2ce84ff8eacb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1292.3176505753872,
        "Y": 904.04391199539145
      },
      {
        "Id": "eb06cf7c48f545b9bd4d2d5b0b2762a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1182.9635069332126,
        "Y": 2055.5287516416083
      },
      {
        "Id": "184da1cadfb54021ae8ad1408d6cf7f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2850.2137282594758,
        "Y": 4013.0638236779755
      },
      {
        "Id": "8a9b13906cda4c75a071b7aae6309d9c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 220.48842628688908,
        "Y": 2506.8405329569432
      }
    ],
    "Annotations": [
      {
        "Id": "f70bf264fa0749c79027f550865f41ad",
        "Title": "All Elements in Revit",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1250bd18102c4ebaac9950d60dac8849",
          "c790cfc4c7d943cdb05ca3a612d673c4",
          "d78f3dfc768541ab8490b53194e174c5",
          "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
          "bf37a72db0e847dba5e3d1c2ed14c8bd",
          "55bb494892834c5ab404391b99483ed2"
        ],
        "HasNestedGroups": false,
        "Left": -7032.03769649431,
        "Top": 1164.949976022423,
        "Width": 1513.0,
        "Height": 425.0,
        "FontSize": 96.0,
        "InitialTop": 1309.949976022423,
        "InitialHeight": 293.0,
        "TextblockHeight": 135.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "845648042f7a44b3b450cfa23ec8d632",
        "Title": "All Data in Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1eac1f1717ab40c98ea2a8a9b59421d3",
          "caccad700bd84d8e8cb198c7fe1545aa",
          "51b4738620874fe885b1b5ecce1e49b7",
          "76e75c1cd00342eeb418e14c2410b8f4",
          "64985def907747329221585392bfc414"
        ],
        "HasNestedGroups": false,
        "Left": -6704.06922431888,
        "Top": 1883.7582392556637,
        "Width": 1195.0,
        "Height": 689.13283745317267,
        "FontSize": 96.0,
        "InitialTop": 2028.7582392556637,
        "InitialHeight": 441.0,
        "TextblockHeight": 135.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "bc0cee792c2f42f5b7feff7ccbb98290",
        "Title": "Family List엑셀파일 물량 기입 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "3a2291d54fa74970b0cacd8a3a8a08b8",
          "d9de8a61787442ceb4b5e56fe75e7a1d",
          "ae19779d3103471bb4993d2624fee3c8",
          "0e906b492e964f0388034bb3dba9715c",
          "e4bace56c16d462b8e637e17ad1a1046",
          "43c850fe5b414baaa43fa6abbf66d41a",
          "2524f0f864744ce88dfa2ab2d9d3e61d"
        ],
        "HasNestedGroups": false,
        "Left": 2431.2414262995626,
        "Top": 283.91333488791088,
        "Width": 1615.7678524619023,
        "Height": 713.79983831474874,
        "FontSize": 96.0,
        "InitialTop": 428.91333488791088,
        "InitialHeight": 581.79983831474874,
        "TextblockHeight": 135.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "687f7420ca1d42b789e3f2697ffb8cfe",
        "Title": "[WM-AR] 시트 데이터 정리",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "6689bfc92b614a86a2438579264ab559",
          "dcbac945a42f4a5c9a9db85369fb5958",
          "abf63584b5df484fa09c861a33e2a423",
          "0a5e14b22e144bed8451ebf583eb117a",
          "0de826304a0c4eeb88bf431965d3fbff",
          "353906790eac4dbe9265acc4fd59f260",
          "1d1c6adab25c4ce38795f6d70084638b",
          "86d4c756923b4ec5a7a76f44031313e3",
          "36b72e613f054f51ab44d4a659a11baf",
          "522eba1415564c619ea3a722c3bfca63",
          "78f0730f98164cf88c95031451db6a2e",
          "f8862fff8dc647619582f6b8e6003793",
          "6790ac16e9864c6282b9f0a28e4bac80"
        ],
        "HasNestedGroups": false,
        "Left": -4500.64455548503,
        "Top": 600.57869505203769,
        "Width": 2434.9939231832504,
        "Height": 781.82749999999976,
        "FontSize": 96.0,
        "InitialTop": 745.57869505203769,
        "InitialHeight": 649.82749999999976,
        "TextblockHeight": 135.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "75a4f3a4d6094b6bbe1e9826bd99fb2d",
        "Title": "Total BOQ 엑셀파일 물량 기입 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "92a5d0c5dcc842d7b250f2421b0731ad",
          "f12f2f24ce254bd0baef14f26c5d20e9",
          "545bdda03ce34cbf8f380aa09996affe",
          "23c16e6f54c54461a94198d996b688b8",
          "cb8eb6bb001d4e018998c1f81063a7b3",
          "6d3257a7ae1544ba96260a2930df41a0",
          "8066549a4a9b47df80e48559f550e5c6",
          "cf52cd359968431c954ef0c1c105f09b",
          "53192363f9da457ca86140d19351bdfb",
          "29337ae8d2c94d488ebdc03de0a16ad6",
          "008b88f58bd548188e4d5668e106d9e3",
          "756a672a7cef4e9e91d11c4c0279ab0a",
          "5b26f33fb50d4441b2dc495fc028521e",
          "11184f601ab1440f92b47f1dcda08f3f",
          "63669713819d404bae525815fc170901"
        ],
        "HasNestedGroups": false,
        "Left": 2470.6536795024713,
        "Top": 2304.7947786745972,
        "Width": 3027.0597827303227,
        "Height": 778.05596982798806,
        "FontSize": 96.0,
        "InitialTop": 2449.7947786745972,
        "InitialHeight": 636.05596982798806,
        "TextblockHeight": 135.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "b0cc419deb0643f38ec119c227f9b92c",
        "Title": "기준 그라운드레벨 선택",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "5d6276188c154ad9b683fbece6f2c630",
          "a16523d3e4ff4488a28e95dbc2c75a0a",
          "265e7c3045514b0885bd3aafa3c020aa",
          "20137012b6604e04bea74af353edfa36",
          "009ae0e082d3477c8e68feaaa8e1c2d1",
          "af6546d7ff044c62af14248adb86f4b9",
          "c0738bf5251b46c594a752dfca8a862f",
          "32a7c4f13eac43ae918bc55fc7c52899"
        ],
        "HasNestedGroups": false,
        "Left": -5977.7435603944041,
        "Top": 2855.4670356445263,
        "Width": 2137.9999999999982,
        "Height": 352.82750000000124,
        "FontSize": 36.0,
        "InitialTop": 2928.4670356445263,
        "InitialHeight": 292.82750000000124,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "605470a0209e424497f3787f8e236ad4",
        "Title": "토공 형상 검토 및 DirectShape Revit 생성",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "16188751f78d4b1fb05a47ef8123ff28",
          "2782b47365a6469d94f00890dea84277",
          "00f448c9b2744231a5f328b0d3804b00",
          "6f061ee9c5f745958cb880f2bd8516b9",
          "7505b535d9e645f6bd7438be03d63311",
          "ba4e0ac89fd34da4935313ff73ed1abd"
        ],
        "HasNestedGroups": false,
        "Left": -125.0502529589844,
        "Top": 3528.6434493068582,
        "Width": 1432.0,
        "Height": 542.0,
        "FontSize": 36.0,
        "InitialTop": 3601.6434493068582,
        "InitialHeight": 482.0,
        "TextblockHeight": 63.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "63669713819d404bae525815fc170901",
        "Title": "Work Master Code\r\nGauge Code\r\nDescription : (L03)\r\nSpec. : (L04~L11)\r\nAdditional Spec : (Description 항목 값)",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 2846.7134622327935,
        "Top": 2535.2947786745972,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 1877.2507253981103,
    "Y": -1854.8410349569726,
    "Zoom": 1.2172028869388705
  }
}