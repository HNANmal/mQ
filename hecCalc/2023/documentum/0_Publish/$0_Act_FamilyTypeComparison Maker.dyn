{
  "Uuid": "6dd683a2-424b-4af7-8e2f-902c210d0c3e",
  "IsCustomNode": false,
  "Description": "",
  "Name": "HTMLexportTest",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "99dc7cb1566d41bbacd757279acdee59",
      "Name": "File Path : Family List ",
      "Type": "string",
      "Type2": "string",
      "Value": "..\\..\\..\\..\\hecCalc\\2023\\documentum\\0_Publish\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [
    {
      "Id": "def80b8d6fdf4fd48ee0b710f759aa00",
      "Name": "Data.ExportToExcel",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Write data to a Microsoft Excel spreadsheet. Data is written by row with sublists to be written in successive rows. Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell A1. Null values and empty lists are written to Excel as empty cells. This node requires Microsoft Excel to be installed.\n\nData.ExportToExcel (filePath: string, sheetName: string, startRow: int, startColumn: int, data: var[][], overWrite: bool = false, writeAsString: bool = false): var[][]"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncontents = IN[0]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\ncwd = find_cwd()\r\n\r\ndef make_resultHTML(htmlStr,title,cwd):\r\n    folderPath = f\"{cwd}\\\\.dynLog\"\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    filePath = f\"{folderPath}\\\\htmlResult_{title}.html\"\r\n    f = open(filePath, 'w')\r\n    timeStamp = time.strftime('%Y-%m-%d | %H:%M:%S', time.localtime(time.time()))\r\n    #f.write('End :::'+timeStamp+'::: \\n')\r\n    #for i in lst:\r\n    #    f.write(str(i)+'\\n')\r\n    f.write(htmlStr)\r\n    f.close()\r\n    return f\"htmlResult_{title}.html\"\r\n\r\ndef execute_file(fileName):\r\n    cwd = find_cwd()\r\n    folderPath = f\"{cwd}\\\\.dynLog\"\r\n    os.chdir(folderPath)\r\n    subprocess.run(args=[fileName], shell=True)\r\n    \r\n\r\nfileName = make_resultHTML(contents,\"test\",cwd)\r\n\r\nresult = execute_file(fileName)\r\n\r\n#subprocess.run(args=[\"aaa.html\"], shell=True)\r\n# Assign your output to the OUT variable.\r\nOUT = result",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "2cabe6edaa864378b8e899ddf0c9c539",
      "Inputs": [
        {
          "Id": "5b3de8a4f66b4d548013255a179a98ec",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "beebe286ce1d47d5ae7c50b21d8880df",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n1,\n2,\n3,\n4,\n\"aa\",\n\"bb\"\n];",
      "Id": "01be586fcd5d4ddda88249f45cefe4ee",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "362256c0b13d4d1591061d41ca87ed0a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nstrr = '''\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n<html>\r\n<head>\r\n<meta charset=\"EUC-KR\">\r\n<title>Compare RVT and Excel</title>\r\n</head>\r\n<body>\r\n<table border=\"1\" bordercolor=\"blue\" width =\"500\" height=\"300\" align = \"center\" >\r\n    <tr bgcolor=\"blue\" align =\"center\">\r\n\t<p><td colspan = \"3\" span style=\"color:white\">오늘의 수입/지출</td></p>\r\n    </tr>\r\n    <tr align = \"center\" bgcolor=\"skybule\">\r\n\t<td>내용</td>\r\n\t<td>수입</td>\r\n\t<td>지출</td>\r\n    </tr>\r\n    <tr>\r\n\t<td>월급!</td>\r\n\t<td>1,000,000</td>\r\n\t<td></td>\r\n    </tr>\r\n    <tr>\r\n\t<td>점심값</td>\r\n\t<td></td>\r\n\t<td>5,000</td>\r\n    </tr>\r\n    <tr>\r\n\t<td>부모님선물</td>\r\n\t<td></td>\r\n\t<td>30,000</td>\r\n    </tr>\r\n    <tr>\r\n\t<td rowspan=\"3\" align = \"center\" bgcolor=\"skyblue\">총계</td>\r\n\t<td>수입</td>\r\n\t<td>지출</td>\r\n    </tr>\r\n    <tr>\r\n\t<td>1,000,000</td>\r\n\t<td>35,000</td>\t\r\n    </tr>\r\n    <tr>\r\n\t<td>남은돈</td>\r\n\t<td>965,000</td>\t\r\n    </tr>\r\n</table>\r\n</body>\r\n</html>\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = strr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a913887f8e4045b1be829bfeb6a36cf7",
      "Inputs": [
        {
          "Id": "5817ae8173fe4c1787d71826440e2773",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "20682df398b14ec6b5f548107c2abd14",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "78239378beaf436f827b1dcd0caf5cbf",
      "Inputs": [
        {
          "Id": "0b958ef3ebe344e0b24322f1252ffa84",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "087f2a4e41f34547a13595f5a1bae333",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 441,
      "SelectedString": "OST_StairsRailing",
      "NodeType": "ExtensionNode",
      "Id": "7e20c2e7e60d487cab5bf3217e8de243",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "be7f7d9cd92d4d5ab2be44c2c76df9a7",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport DSRevitNodesUI\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\ncollector = FilteredElementCollector(doc)\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n#res = collector.OfCategory(BuiltInCategory.OST_Floors).WhereElementIsElementType().ToElements()\r\n\r\n\r\ndef getAllTypes(n):\r\n    collector = FilteredElementCollector(doc)\r\n    bics = [\r\n        BuiltInCategory.OST_Floors, BuiltInCategory.OST_Roofs,\r\n        BuiltInCategory.OST_Walls, BuiltInCategory.OST_StructuralFoundation,\r\n        BuiltInCategory.OST_StructuralColumns, BuiltInCategory.OST_StructuralFraming,\r\n        BuiltInCategory.OST_Ceilings, BuiltInCategory.OST_Doors,\r\n        BuiltInCategory.OST_Windows, BuiltInCategory.OST_Stairs,\r\n        #BuiltInCategory.OST_Railings,\r\n        BuiltInCategory.OST_GenericModel\r\n        ]\r\n        \r\n        \r\n    allFamTypes = collector.OfCategory(bics[n]).WhereElementIsElementType().ToElements()\r\n    \r\n    return allFamTypes\r\n    \r\ndef getAllRailingTypes():\r\n    collector = FilteredElementCollector(doc)      \r\n    allFamTypes = collector.OfCategory(BuiltInCategory.OST_Railings)  #.ToElements()\r\n    \r\n    return dir(allFamTypes)\r\n    \r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = dir(Elements.FloorType)\r\n#OUT = list(map(lambda x: x.WhereElementIsElementType().ToElements(), allCollector))\r\nrgs = range(11)\r\nres = list(map(getAllTypes, rgs))\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9d4e07eb84a24d9daeabaa773966ebf0",
      "Inputs": [
        {
          "Id": "d34ca087fd8d458dad337581491c4df0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a10159c82195438692246b852d894688",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.Name",
      "Id": "2d983678cd124be49367b4e573ce56bc",
      "Inputs": [
        {
          "Id": "bd030c3c2da042ac82dd1b91587fb8c4",
          "Name": "familyType",
          "Description": "Revit.Elements.FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6464e2fdda041b3a792a283d403f13c",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the name of this Family Type\n\nFamilyType.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "9d650c2f7d944978bf91568a2d2b91e4",
      "Inputs": [
        {
          "Id": "67117d428908412db4185f8e8d943948",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "70962f8e2d54435ba3f1b9f0ef03d31e",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7806cc2db3a9448ca76d02e4ad330d8a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Family and Type\";",
      "Id": "adcf4bcceee24e15a87f7a637ebffaa8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8475d9fc1524454595707c926da083f9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type Name\";",
      "Id": "2f02036c70f748088ea8dcf78d78dcea",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "55aeb4bed93440cd9adafb3a8ead0ff0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "b4adf57542fb42e3bb0ee14a3958d489",
      "Inputs": [
        {
          "Id": "c73e4a76402240a080c2daa3c61745d5",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1a72abec3f64a9a94ba1267ff97c0a6",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba38b804dd4c4fac8e9eae43b9218240",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "d95e73e372a2449abb29dd7fb1d0af3e",
      "Inputs": [
        {
          "Id": "22e9c05fd3c7435287754a2f60f8f4e6",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "865e711a82b3439c8fb6629e30a4659e",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Insert@var[]..[],var[]..[],int",
      "Id": "3b262fe8a4af4b8c8eb5c5290d635bfa",
      "Inputs": [
        {
          "Id": "a444f8f5b1274da899d0f685b29878d1",
          "Name": "list",
          "Description": "The list the element will be inserted to\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0fda215480bf4b40a6f61a4b5fe51a0b",
          "Name": "element",
          "Description": "The element to be inserted\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4390e5e48dfb41fc8e18ce45271e944c",
          "Name": "index",
          "Description": "Specifies the location in the list of the element to be inserted\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a439b0804e604ebda57bb9d244b142ec",
          "Name": "list",
          "Description": "List with the element inserted",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Inserts an element into a list at specified index.\n\nList.Insert (list: var[]..[], element: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "10;",
      "Id": "cea7b8bc0c854de4b65dea024b706054",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "65644454da584ba69f8756bbd37d5b91",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "7fad48ce1b7741439ec401e93078e09b",
      "Inputs": [
        {
          "Id": "e46c97369418404b91ec2dc28ea194e2",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86ace141cad14b3d88a90240a4d78b1d",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "57c96f1f6e224bcfa1b3104ce552bd07",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "546e33535cea41c68f996e801ec48d53",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6e3e0e0b3d84a0ab6fc245878d83462",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6668770721804c3abd6de4a533d22aaa",
      "Inputs": [
        {
          "Id": "9bb5b2bae5f244bb93a47b5b33da7b78",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "483ccb9b3a134d85855ee74d20f649cc",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\hecCalc\\2023\\documentum\\0_Publish\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "InputValue": "..\\..\\..\\..\\hecCalc\\2023\\documentum\\0_Publish\\플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "99dc7cb1566d41bbacd757279acdee59",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9d798c5a2c8f4d3fbab7ce32c65b90cc",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"WM-AR\"\n,\"물량Param\"\n,\"1.Floors\"\n,\"2.Roofs\"\n,\"3.Walls\"\n,\"4.St Fdn\"\n,\"5.St Col\"\n,\"6.St Framing\"\n,\"7.Ceilings\"\n,\"8.Doors\"\n,\"9.Windows\"\n,\"10.Stairs\"\n,\"11.Railings\"\n,\"13.Generic\"\n];",
      "Id": "4867f297ec224bdbad1d7dde516ece8c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2baab4688c9049caa749a0b334fdacf2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "25a03f510ca64886924d3f6ab1429684",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5ccf85d76279493db62d1233e77d81d5",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom functools import reduce\r\nfrom functools import partial\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\nwholeDatas = IN[1]\r\ndb = wholeDatas[1:]\r\nallCatSheetsNames = IN[2][2:]\r\n\r\nparamSheet = db[0]\r\nallCatSheets = db[1:]\r\n\r\n#db\r\n# Place your code below this line\r\ndef make_UnifiedDict(dictsList):\r\n    dicts_AllInOne = {}\r\n    for d in dictsList:\r\n        dict_k_v = d.items()\r\n        for k,v in dict_k_v:\r\n            dicts_AllInOne[k] = v\r\n    return dicts_AllInOne\r\n\r\ndef find_IsInStr(target, str):\r\n    if target == None or str == None:\r\n        pass\r\n    else:\r\n        res = target in str\r\n        return res\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n    \r\n    \r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1])))\r\n    \r\n    return dict(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdx, trgt_hdr, trgt_str):\r\n    return find_range_by_columnItem(sheet, hdrs_withIdx[trgt_hdr], trgt_str)\r\n\r\n\r\ndef get_DataOnRangesAtParamSheet(sheet):\r\n    \r\n    hdrs_withIdx = find_headersAtSheet(sheet)\r\n    rangesATSheet = find_rangesAtSheet(sheet, hdrs_withIdx, \"Q'ty Cal Type Tag\", \"-\")\r\n    title_idx = map(lambda x: x[0], rangesATSheet.values())\r\n    calcType_colDatas = list(map(lambda x: x[hdrs_withIdx[\"Q'ty Cal Type Tag\"]], sheet))\r\n    calcTypes = list(map(lambda x: calcType_colDatas[x], title_idx))\r\n    rgs_v = list(map(lambda x: x[1], rangesATSheet.values()))\r\n    rgs_k = list(map(lambda x: x, rangesATSheet.keys()))\r\n    \r\n    hdrs_v = list(hdrs_withIdx.values())\r\n    hdrs_k = list(hdrs_withIdx.keys())\r\n    eff_hdrs_v = hdrs_v[2:]\r\n    eff_hdrs_k = hdrs_k[2:]\r\n    \r\n    datas_allCalType = list(map(lambda x: sheet[x[0]-1:x[1]], rgs_v))\r\n    \r\n    def setDict_OnEachCalType(data_calType):\r\n        paramName_lang = \"패밀리 매개변수(from Revit) 영문판\" if lang_mode is True else \"패밀리 매개변수(from Revit) 한글판\"\r\n        calcTypeName = data_calType[0][2]\r\n        data_calType_noneless = list(filter(lambda x: x[hdrs_withIdx[\"항목\"]] != None, data_calType))\r\n#        ## WM row 별 header명 과 짝짓기\r\n        data_withHdrsIdx = list(map(lambda y: list(map(lambda x: y[x], eff_hdrs_v)), data_calType_noneless))\r\n        dict_ = list(map(lambda x: dict(zip(eff_hdrs_k, x)), data_withHdrsIdx))\r\n        dicts_noneless = list(map(lambda y: dict(filter(lambda x: x[1]!=None, y.items())),dict_))\r\n#        ## dict_Cal Type 입력처리\r\n        targetColName = \"Q'ty Cal Type Tag\"\r\n        dicts_finalNoneless = []\r\n        for d in dicts_noneless:\r\n            d[\"Q'ty Cal Type Tag\"] = calcTypeName\r\n            \r\n            if \"입력값\" in d.keys():\r\n                d[\"applyForCalc\"] = d[\"입력값\"]\r\n                dicts_finalNoneless.append(d)\r\n            elif paramName_lang in d.keys():\r\n                d[\"applyForCalc\"] = d[paramName_lang]\r\n                dicts_finalNoneless.append(d)\r\n            else:\r\n                pass\r\n        \r\n        return {calcTypeName: dicts_finalNoneless}\r\n        \r\n    return map(setDict_OnEachCalType, datas_allCalType)\r\n    \r\n\r\n\r\ndef get_SymValDict_PerCalcType(dic):\r\n    def findDictPerCalcType(dicList):\r\n            dic = {}\r\n            for i in dicList:\r\n                dic[i[\"산출수식 약자\"]] = i[\"applyForCalc\"]\r\n            return dic\r\n    \r\n    ks_forDic = list(dic.keys())\r\n    vs_forDic = list(map(findDictPerCalcType, dic.values()))\r\n    res = dict(zip(ks_forDic, vs_forDic))\r\n    return res\r\n\r\n\r\ndef get_DataOnRangesAtCatSheet(catSheet):\r\n    hdrs_withIdx = find_headersAtSheet(catSheet)\r\n    rangesATSheet = find_rangesAtSheet(catSheet, hdrs_withIdx, \"Family Type Name\", \"H_\")\r\n    title_idx = map(lambda x: x[0], rangesATSheet.values())\r\n    calcType_colDatas = list(map(lambda x: x[hdrs_withIdx[\"Q'ty Cal Type Tag\"]], catSheet))\r\n    calcTypes = list(map(lambda x: calcType_colDatas[x], title_idx))\r\n    rgs_v = list(map(lambda x: x[1], rangesATSheet.values()))\r\n    rgs_k = list(map(lambda x: x, rangesATSheet.keys()))\r\n    \r\n    hdrs_v = list(hdrs_withIdx.values())\r\n    hdrs_k = list(hdrs_withIdx.keys())\r\n    \r\n    datas_allFamType = list(map(lambda x: list(zip(catSheet[x[0]-1:x[1]], range(x[0]-1,x[1]))), rgs_v))\r\n    \r\n    def setDict_OnEachFamType(data_famType):  ## 최종적으로 산출식 없는 것 걸러내기 추가해야 함\r\n        titleData = list(data_famType).pop(0)[0]\r\n        \r\n        famTypeName = titleData[hdrs_withIdx[\"Family Type Name\"]]\r\n        calcTypeName = titleData[hdrs_withIdx[\"Q'ty Cal Type Tag\"]]\r\n        data_famType_noneless = list(filter(lambda x: x[0][5] != None, data_famType))\r\n        ## WM row 별 header명 과 짝짓기\r\n        data_withHdrsIdx = list(map(lambda y: [list(map(lambda x: y[0][x], hdrs_v)), y[1]], data_famType_noneless))\r\n        hdrs_k.append(\"rIDX\")\r\n        dict_ = list(map(lambda x: dict(zip(hdrs_k, x[0]+[x[1]])), data_withHdrsIdx))\r\n        dicts_noneless = list(map(lambda y: dict(filter(lambda x: x[1]!=None, y.items())),dict_))\r\n        ## dict_gauge, 물량산출식 없는 항목 처리\r\n        dicts_final = []\r\n        needDefault_ColName = \"Gauge Code\"\r\n        noneRemove_ColName = \"Dynamo 물량산출식\"\r\n        for d in dicts_noneless:\r\n            d[\"Family Type Name\"] = famTypeName\r\n            \r\n            if calcTypeName == None:\r\n                pass            \r\n            elif noneRemove_ColName in d.keys():\r\n                d[\"Q'ty Cal Type Tag\"] = calcTypeName\r\n                d[needDefault_ColName] = \"\"\r\n                dicts_final.append(d)\r\n\r\n        return dicts_final\r\n        \r\n    dicts_allFamType = list(map(lambda x: setDict_OnEachFamType(list(x)), datas_allFamType))\r\n    ds_famTypesAtCatSheet = dict(zip(rgs_k, dicts_allFamType))\r\n    ds_famTypesAtCatSheet_effCalcType = dict(filter(lambda x: all(list(map(lambda i: \"Q'ty Cal Type Tag\" in i, x[1]))), list(ds_famTypesAtCatSheet.items())))\r\n    ds_famTypesAtCatSheet_noneless = dict(filter(lambda x: len(list(x[1]))!=0, list(ds_famTypesAtCatSheet_effCalcType.items())))\r\n    \r\n    return  ds_famTypesAtCatSheet_noneless\r\n\r\ndef make_AIOdic(allCatSheets):\r\n\r\n    dataOnRanges_allCat = list(map(get_DataOnRangesAtCatSheet, allCatSheets))\r\n    dataOnRanges_allCat_WithCatNames = list(zip(allCatSheetsNames, dataOnRanges_allCat))\r\n    \r\n    AIOdic = {}\r\n    for d in dataOnRanges_allCat_WithCatNames:\r\n        catName = d[0]\r\n        dict_k_v = d[1].items()\r\n        for k,v in dict_k_v:\r\n            for wm in v:\r\n                wm[\"SheetName\"] = catName\r\n            AIOdic[k] = v\r\n    return AIOdic\r\n\r\n\r\n\r\ndef matchWith_paramDic(catSheetDic, paramSheetDic):\r\n    headers = list(catSheetDic.values())[0][0].keys()\r\n    wmspec_headers = list(filter(lambda x: \"Work C\" in x or \"Spec\" in x, headers))\r\n    res = {}\r\n    for famType,diclist in catSheetDic.items():\r\n        new_diclist = []\r\n        for d in diclist:\r\n            new_d = {}\r\n            keys = d.keys()\r\n            keys_new = set(keys) - set(wmspec_headers)\r\n            calcType = d[\"Q'ty Cal Type Tag\"]\r\n            new_d[\"Sym_Val Dict\"] = paramSheetDic[calcType]\r\n            new_d[\"wmSpecs\"] = list(map(lambda x: d[x],wmspec_headers))\r\n            for spec in keys_new:\r\n                new_d[spec] = d[spec]\r\n            new_diclist.append(new_d)\r\n        \r\n        res[famType] = new_diclist\r\n        \r\n    return res\r\n\r\ncalcTypeDictsList = get_DataOnRangesAtParamSheet(paramSheet)\r\ncalcTypeDict = make_UnifiedDict(calcTypeDictsList)\r\nparamSheetDic = get_SymValDict_PerCalcType(calcTypeDict) \r\n\r\ncatSheetDic = make_AIOdic(allCatSheets)\r\ncatFam_paramDic = matchWith_paramDic(catSheetDic, paramSheetDic)\r\n\r\n# Assign your output to the OUT variable.\r\n\r\n#OUT = [catFam_paramDic,paramSheetDic, catSheetDic]\r\nOUT = catSheetDic",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f83769bfe6844213876c8e52b05e82d3",
      "Inputs": [
        {
          "Id": "064a450ad05c46aab51ff9aa1601d756",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3cb2e640e28f4519b8dc1bb4a3e7530e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b86793a0932406db6456f5924d88fce",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9e53f14ae5f84a15b347d01465630dcd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "5ae4707de2a1481897939bcfadee129c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "37cf834b2aeb4880bb2384d5e3feb73a",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Keys",
      "Id": "c25ac96ef9a54c4a930ad2cc791a44f0",
      "Inputs": [
        {
          "Id": "aa4c440562024ba097e327cfa1fc45f6",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cca54cf900a14b3cbf6f9d0d5e5a0fe8",
          "Name": "keys",
          "Description": "Keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the keys in a Dictionary.\n\nDictionary.Keys: string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Values",
      "Id": "7adba81c4ee944d3a55f1bca9648780a",
      "Inputs": [
        {
          "Id": "bcc8aaf477cf47338fbab080fd349784",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b0da1ff58b7e4bb1ad04a4cbc17e3147",
          "Name": "values",
          "Description": "Values of the dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the values in a Dictionary.\n\nDictionary.Values: var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "41119b47edeb4934bdd60a072611d385",
      "Inputs": [
        {
          "Id": "7966e83631c9435da8d76221d0bdfb1e",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a2a8474549a4c99921984f9c9c06bf2",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain value for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "488fd513221242a3b4c7e17dcf795dc3",
          "Name": "value",
          "Description": "Value at the specified key or null if it is not set",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SheetName\";",
      "Id": "757dd99937764674a9423b9adafd1385",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cb6dccd9a8544091999ddabc8d4b65fa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "dea307190fc74a64b3f72a5497a03bfd",
      "Inputs": [
        {
          "Id": "3d7891c6bf534333a23623cf739c5dcc",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "07d3a87a2e9e44989c4f5943e6225cd7",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0cadfe8963c04b7bad9f25afb57599b1",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "768b4404f7b549f18e38d2b8bc6a5cae",
      "Inputs": [
        {
          "Id": "da3f4c63dc09462bbab464aceb0e0e88",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "96233ca2c59a4aa58542d27f096447fa",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7169b3604d2446bdbed559fca481d5af",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ba60a94efa814a06b42ed87831c3ab72",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "cb017ec627dd4b8aad9c57efb9595d6c",
      "Inputs": [
        {
          "Id": "3ede4f514d3b496096cf1e432c73c1f7",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30c04a9c3fb940fcbc50e85c592b1f34",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "aef9b0def95242d3b0c134278f7eca57",
      "Inputs": [
        {
          "Id": "eeb8df5d03ac4a268d061fdd220aac13",
          "Name": "keys",
          "Description": "Keys of dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d382b8856a4e46e2ae4e00de8756f81d",
          "Name": "values",
          "Description": "Values of dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "77f841e9c9c44e8ab07b65e608fd7b86",
          "Name": "dictionary",
          "Description": "Dictionary from keys and values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "05adeb1cfa6e4a91bebfa3f1d4b71c70",
      "Inputs": [
        {
          "Id": "75ffada4739a4b538b93b831b3bbf723",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9baed5e0d954e9e9b0f1fe60b9c6664",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "956c0971229d4f62a6de05cbd39af66f",
      "Inputs": [
        {
          "Id": "7381e991a59a4b548651cbb8d6f3924f",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d3cd57e3be214dbbae9d32ef5ef3e278",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "50eb3f2ae6c640dbb3ccac4fcc630729",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".\";",
      "Id": "466a9d5a12c645a7bc9ae4fa14926a83",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "762630721afb4e9ebbf219f7e3c42007",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "63c10ffd123442fc81bedb3496122ebb",
      "Inputs": [
        {
          "Id": "93872fc711a24831a5c64433dbe123c6",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "85ab738ed5a7435cb74bb228bc1bc17c",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "21fb33c4e5354ba5878ba5e8eb5d2683",
      "Inputs": [
        {
          "Id": "470482bcef124d3894361b99e958f7cf",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c7793deda3074a329139eca631f84700",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SortByKey@var[]..[],var[]..[]",
      "Id": "aae00f786dc34be4b43a6292153a902f",
      "Inputs": [
        {
          "Id": "c95aea66a3014750b29c1c0e5d7f496d",
          "Name": "list",
          "Description": "list to be sorted\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "db533377ec07420a9227564ea3e45512",
          "Name": "keys",
          "Description": "list of keys, keys have to be sortable (e.g. numbers,strings)\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4fb4f4c901e14ab595b52b77313afa81",
          "Name": "sortedList",
          "Description": "type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "380c90c81d034bdc8824535d8f639fa9",
          "Name": "sortedKeys",
          "Description": "type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Sort list based on its keys\n\nList.SortByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "b66e9c308f364b25879cbc0155b3c577",
      "Inputs": [
        {
          "Id": "a55a2e4c044647fba5355444381eb825",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "05fb3fa453854ff99abadbfb84831c5a",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain value for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3fc25d02876a45c3a61176f9f6f8f9ee",
          "Name": "value",
          "Description": "Value at the specified key or null if it is not set",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "c0266473b27f4a7d9b98927dc317a14f",
      "Inputs": [
        {
          "Id": "da7e972521e749f098b0de680aebbfb2",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ef4745deff0542b29db05e9d6ab8d482",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "j;",
      "Id": "0cb63f541748456e8ad7ce4c9141d77b",
      "Inputs": [
        {
          "Id": "916d689bf5a34f739d854634ac8ff12e",
          "Name": "j",
          "Description": "j",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eeea992743a147d4820ea649232a52f0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nrvtTypesGrps = IN[0]\r\nexlTypesGrps = IN[1]\r\n# Place your code below this line\r\n\r\ndef chk_sameTypes_byCat(rvtTypes,exlTypes):\r\n    rvtOnly = list(filter(lambda x: x not in exlTypes, rvtTypes))\r\n    both = list(filter(lambda x: x in exlTypes, rvtTypes))\r\n    return {\"RvtOnly\": rvtOnly, \"Both\": both}\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = map(lambda x: chk_sameTypes_byCat(*x), list(zip(rvtTypesGrps,exlTypesGrps)))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b3941999ff4c4b48a5ed73f559d18577",
      "Inputs": [
        {
          "Id": "d20b2194a614499aa4873d46069b1900",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c0ae990663134301b636cbd6a0ce1b5a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9d816bf87274266b00b64339ced3181",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\npairDictsList = IN[0]\r\n# Place your code below this line\r\n\r\ndef makeTypesList(pairDictsList):\r\n    res = []\r\n    for catD in pairDictsList:\r\n        if catD[\"Both\"] == []:\r\n            tmpBoth = list(map(lambda x: None, range(len(catD[\"RvtOnly\"]))))\r\n            pair = list(zip(catD[\"RvtOnly\"], tmpBoth))\r\n            res.append(pair)\r\n        elif catD[\"RvtOnly\"] == []:\r\n            tmpRvt = list(map(lambda x: None, range(len(catD[\"Both\"]))))\r\n            pair = list(zip(tmpRvt, catD[\"Both\"]))\r\n            res.append(pair)\r\n        else:\r\n            if len(catD[\"RvtOnly\"]) > len(catD[\"Both\"]):\r\n                cntRvt = len(catD[\"RvtOnly\"])\r\n                cntBoth = len(catD[\"Both\"])\r\n                gap = cntRvt-cntBoth\r\n                tmpBoth = catD[\"Both\"] + list(map(lambda x: None, range(gap)))\r\n                pair = list(zip(catD[\"RvtOnly\"], tmpBoth))\r\n                res.append(pair)\r\n            else:\r\n                cntRvt = len(catD[\"RvtOnly\"])\r\n                cntBoth = len(catD[\"Both\"])\r\n                gap = cntBoth - cntRvt\r\n                tmpRvt = catD[\"RvtOnly\"] + list(map(lambda x: None, range(gap)))\r\n                pair = list(zip(tmpRvt, catD[\"Both\"]))\r\n                \r\n                res.append(pair)\r\n        \r\n    return res\r\n\r\ndef format_byRow(typeListGrps):\r\n    max_cnt = max(list(map(len,typeListGrps)))\r\n    res = []\r\n    for grp in typeListGrps:\r\n        if len(grp) < max_cnt:\r\n            gap = max_cnt - len(grp)\r\n            tmpGrp = grp + list(map(lambda x: [None,None], range(gap)))\r\n            res.append(tmpGrp)\r\n        else:\r\n            res.append(grp)\r\n        \r\n    return list(zip(*res))\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = format_byRow(makeTypesList(pairDictsList))\r\nOUT = makeTypesList(pairDictsList)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "99e65a4157b44f768cddfc74ab4bfa94",
      "Inputs": [
        {
          "Id": "a1f78a947bd64d35a1ebfff645849c30",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21bf16626f284385b3af808bc9db3e40",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ExportToExcel@string,string,int,int,var[][],bool,bool",
      "Id": "def80b8d6fdf4fd48ee0b710f759aa00",
      "Inputs": [
        {
          "Id": "4274e0ade80b447a89a4a20dec9701f7",
          "Name": "filePath",
          "Description": "File representing the Excel workbook\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "96d556dbe55f405bae4d21e9c078221b",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2089e0ca984b43a0b5c6ade0be4d89a5",
          "Name": "startRow",
          "Description": "Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "705039360917491089724d1eaad5c062",
          "Name": "startColumn",
          "Description": "Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "081c3162c1014f70a9cc0bf15af935ca",
          "Name": "data",
          "Description": "Data to write to the spreadsheet\n\nvar[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2cedfbbc66d443f89538d676ab9c3ba6",
          "Name": "overWrite",
          "Description": "Toggle to clear spreadsheet before writing\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "552bf9e66eaa44daaa5b4b70cbe5b42f",
          "Name": "writeAsString",
          "Description": "Toggle to switch between writing Excel file as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "297e045d327e4152a323ca590007860a",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Write data to a Microsoft Excel spreadsheet. Data is written by row with sublists to be written in successive rows. Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell A1. Null values and empty lists are written to Excel as empty cells. This node requires Microsoft Excel to be installed.\n\nData.ExportToExcel (filePath: string, sheetName: string, startRow: int, startColumn: int, data: var[][], overWrite: bool = false, writeAsString: bool = false): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Sheet1\";",
      "Id": "97e0a90cf4dc4b2cbecb8f16f2abf5dc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1218da5b226b48629808bedadd23e7ea",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "3;\n1;",
      "Id": "0f9a66c5651a4ea8afb78864104a2e33",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d5f58fbb51c74e37bf1eec8233e862d4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4e6bf7f34ac34720bd9b42473af107ba",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "sortedCatNames;",
      "Id": "2d08d2c2788a454f876bb43a7a09dd57",
      "Inputs": [
        {
          "Id": "6e24ba0ca2b244cd9ef285eaef665cf2",
          "Name": "sortedCatNames",
          "Description": "sortedCatNames",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "71ac4ad0d94f4068a22278299e346bfd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToEnd@var[]..[],var[]..[]",
      "Id": "a1b7e2d21af34b06bdecbf261d9e179f",
      "Inputs": [
        {
          "Id": "819aa3941eec44329159f8f5e2cf03be",
          "Name": "item",
          "Description": "Item to be added.Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f0b93aa5dd49479b909efdd2d94a3277",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7565228283b54a24a5466ec3d4f2fc25",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the end of a list.\n\nList.AddItemToEnd (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "null;",
      "Id": "b8ef1fcb8a0c45f5a765b2554fe1942f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "327235b48a8e42e3a03e7a7982134ddf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "f4b8d6618c974c6a99864aa06964a1b6",
      "Inputs": [
        {
          "Id": "b66a4cbfa4134a3a927cdccbdb5d1a2e",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "f345471837e44e5b808302fd31ca8a3c",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5289cdb5d5d94bb8bbcb74770befda17",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "64c3b4e33a52400696df80523bf1e591",
      "Inputs": [
        {
          "Id": "fffadde0834c4a4aa33390374c6623ae",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "ee3fe048da5c49099a914f60b611bb3d",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c3e03aeaa1bf49db8319d562610ab5c0",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "a40a7d2d764c4e1a9f5b69b3211765a5",
      "Inputs": [
        {
          "Id": "8bebbbad5c6d4f32993fc2062cbecefc",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "051188353c8b4eb2b5bffb18880981a4",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db82447a1853463ea732a2b395d78c71",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"Revit Only\",\n\"Both Exist\"\n];",
      "Id": "c737b55046464c2baf66770f12e22a41",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "31a66f3a1d264d1ba8d08e102238c2bf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "5194d65da09f4c56b28347d41d4e7a27",
      "Inputs": [
        {
          "Id": "19d69605f3b0494183046600773f2d6f",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f605ff92f18e4fa5837bb4b59dc855f8",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "004aa90a8d25440b85b0822862242aae",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[null,null];",
      "Id": "2b0ad83288324919bcc88d28f7755ec4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2772b6d9110f42d28833000fa0b97e8d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ntitle = IN[0]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\ncwd = find_cwd()\r\n\r\ndef make_resultFilePath(title,cwd):\r\n    folderPath = f\"{cwd}\\\\.dynLog\"\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    filePath = f\"{folderPath}\\\\{title}.xlsx\"\r\n\r\n    return filePath\r\n\r\n\r\n\r\nresult = make_resultFilePath(title, cwd)\r\n\r\n#subprocess.run(args=[\"aaa.html\"], shell=True)\r\n# Assign your output to the OUT variable.\r\nOUT = result",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "737a3265420c49f09598017510ceb4bb",
      "Inputs": [
        {
          "Id": "07d2d13978e24977b466e94e29ed1b71",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4206089bcf084019a131285b13d1a394",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Family Types Comparison\";",
      "Id": "9d694f09acfe47e18520ac15f08a9c0c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "527b3d12815c4c76bf4b7d1735a06659",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "362256c0b13d4d1591061d41ca87ed0a",
      "End": "5817ae8173fe4c1787d71826440e2773",
      "Id": "4c0292c05f884a1d8fef6945616b3b47",
      "IsHidden": "False"
    },
    {
      "Start": "20682df398b14ec6b5f548107c2abd14",
      "End": "5b3de8a4f66b4d548013255a179a98ec",
      "Id": "d9de7e8ef45d4467add9d72e8913b1b4",
      "IsHidden": "False"
    },
    {
      "Start": "087f2a4e41f34547a13595f5a1bae333",
      "End": "67117d428908412db4185f8e8d943948",
      "Id": "dddd26dc4657492192e766eba921b087",
      "IsHidden": "False"
    },
    {
      "Start": "be7f7d9cd92d4d5ab2be44c2c76df9a7",
      "End": "0b958ef3ebe344e0b24322f1252ffa84",
      "Id": "a5bf44f98cc14636ab1aceebe772a8fc",
      "IsHidden": "False"
    },
    {
      "Start": "a10159c82195438692246b852d894688",
      "End": "bd030c3c2da042ac82dd1b91587fb8c4",
      "Id": "2276a4936f2744fbba7ab969eb7e38bd",
      "IsHidden": "False"
    },
    {
      "Start": "c6464e2fdda041b3a792a283d403f13c",
      "End": "a444f8f5b1274da899d0f685b29878d1",
      "Id": "56bb80ee7c524bc3bcca44efa2ae3fc2",
      "IsHidden": "False"
    },
    {
      "Start": "7806cc2db3a9448ca76d02e4ad330d8a",
      "End": "22e9c05fd3c7435287754a2f60f8f4e6",
      "Id": "0c31ac4807f646228376bbc9f7294390",
      "IsHidden": "False"
    },
    {
      "Start": "8475d9fc1524454595707c926da083f9",
      "End": "70962f8e2d54435ba3f1b9f0ef03d31e",
      "Id": "91653961e22348dab46959a0f8794343",
      "IsHidden": "False"
    },
    {
      "Start": "55aeb4bed93440cd9adafb3a8ead0ff0",
      "End": "d1a72abec3f64a9a94ba1267ff97c0a6",
      "Id": "4cfa4a4ba7cf4bb592b78143828a97cd",
      "IsHidden": "False"
    },
    {
      "Start": "ba38b804dd4c4fac8e9eae43b9218240",
      "End": "0fda215480bf4b40a6f61a4b5fe51a0b",
      "Id": "bcd37186b7114d08b52332d264e2bfc6",
      "IsHidden": "False"
    },
    {
      "Start": "865e711a82b3439c8fb6629e30a4659e",
      "End": "c73e4a76402240a080c2daa3c61745d5",
      "Id": "7a4901fc01e7479e880e608870f9b2ea",
      "IsHidden": "False"
    },
    {
      "Start": "a439b0804e604ebda57bb9d244b142ec",
      "End": "da7e972521e749f098b0de680aebbfb2",
      "Id": "b1b3132616ce438c90e6d354dff880ff",
      "IsHidden": "False"
    },
    {
      "Start": "65644454da584ba69f8756bbd37d5b91",
      "End": "4390e5e48dfb41fc8e18ce45271e944c",
      "Id": "ce499ee23f6f4821ae1a0b1ce44f4bf9",
      "IsHidden": "False"
    },
    {
      "Start": "c6e3e0e0b3d84a0ab6fc245878d83462",
      "End": "3cb2e640e28f4519b8dc1bb4a3e7530e",
      "Id": "17ec04a27e8c4d4184275ce3488297e5",
      "IsHidden": "False"
    },
    {
      "Start": "483ccb9b3a134d85855ee74d20f649cc",
      "End": "e46c97369418404b91ec2dc28ea194e2",
      "Id": "227f7e12d7404ce3a9c5d689c8b77fb5",
      "IsHidden": "False"
    },
    {
      "Start": "9d798c5a2c8f4d3fbab7ce32c65b90cc",
      "End": "9bb5b2bae5f244bb93a47b5b33da7b78",
      "Id": "fca74fdecce84df3b06fa2ad85677a81",
      "IsHidden": "False"
    },
    {
      "Start": "2baab4688c9049caa749a0b334fdacf2",
      "End": "86ace141cad14b3d88a90240a4d78b1d",
      "Id": "aa9bfacf5ea54f258dd8f53d71d733b2",
      "IsHidden": "False"
    },
    {
      "Start": "2baab4688c9049caa749a0b334fdacf2",
      "End": "4b86793a0932406db6456f5924d88fce",
      "Id": "b7ad9469e7a64f9397611cc385dc76a8",
      "IsHidden": "False"
    },
    {
      "Start": "5ccf85d76279493db62d1233e77d81d5",
      "End": "546e33535cea41c68f996e801ec48d53",
      "Id": "d03d546b7b45425a92250abc33923f40",
      "IsHidden": "False"
    },
    {
      "Start": "9e53f14ae5f84a15b347d01465630dcd",
      "End": "aa4c440562024ba097e327cfa1fc45f6",
      "Id": "ec776e856b7143e38b6e3af794ec9115",
      "IsHidden": "False"
    },
    {
      "Start": "9e53f14ae5f84a15b347d01465630dcd",
      "End": "bcc8aaf477cf47338fbab080fd349784",
      "Id": "5492d3c48fdb4225aba3010696e93b80",
      "IsHidden": "False"
    },
    {
      "Start": "37cf834b2aeb4880bb2384d5e3feb73a",
      "End": "064a450ad05c46aab51ff9aa1601d756",
      "Id": "4bd483825d9a49aab2d18f83a750bf3c",
      "IsHidden": "False"
    },
    {
      "Start": "cca54cf900a14b3cbf6f9d0d5e5a0fe8",
      "End": "da3f4c63dc09462bbab464aceb0e0e88",
      "Id": "fcf3a5e796ad4e15ae507b3a6dde3d8e",
      "IsHidden": "False"
    },
    {
      "Start": "b0da1ff58b7e4bb1ad04a4cbc17e3147",
      "End": "7966e83631c9435da8d76221d0bdfb1e",
      "Id": "8581a1effb1c49f7b1f5e48182cf77a7",
      "IsHidden": "False"
    },
    {
      "Start": "488fd513221242a3b4c7e17dcf795dc3",
      "End": "3ede4f514d3b496096cf1e432c73c1f7",
      "Id": "d0b81fb1ef6c4563b52644d5411e6217",
      "IsHidden": "False"
    },
    {
      "Start": "cb6dccd9a8544091999ddabc8d4b65fa",
      "End": "9a2a8474549a4c99921984f9c9c06bf2",
      "Id": "e72dc92930944ac49ae779ac71c17c99",
      "IsHidden": "False"
    },
    {
      "Start": "0cadfe8963c04b7bad9f25afb57599b1",
      "End": "96233ca2c59a4aa58542d27f096447fa",
      "Id": "03003c690d8a45768bb8a6e13ef9eb3f",
      "IsHidden": "False"
    },
    {
      "Start": "0cadfe8963c04b7bad9f25afb57599b1",
      "End": "75ffada4739a4b538b93b831b3bbf723",
      "Id": "ccbbb2cc49104d8ab0fdd8c02a411129",
      "IsHidden": "False"
    },
    {
      "Start": "7169b3604d2446bdbed559fca481d5af",
      "End": "d382b8856a4e46e2ae4e00de8756f81d",
      "Id": "07ac4bab87234921a71caa614456c000",
      "IsHidden": "False"
    },
    {
      "Start": "ba60a94efa814a06b42ed87831c3ab72",
      "End": "eeb8df5d03ac4a268d061fdd220aac13",
      "Id": "bd5d600b1e9f4228b3eee47421ead01b",
      "IsHidden": "False"
    },
    {
      "Start": "30c04a9c3fb940fcbc50e85c592b1f34",
      "End": "3d7891c6bf534333a23623cf739c5dcc",
      "Id": "b4c5e4d71ace467bbbe49f29afb19ee7",
      "IsHidden": "False"
    },
    {
      "Start": "77f841e9c9c44e8ab07b65e608fd7b86",
      "End": "a55a2e4c044647fba5355444381eb825",
      "Id": "e1d7d9013d8240bba879bd55e178e0bf",
      "IsHidden": "False"
    },
    {
      "Start": "b9baed5e0d954e9e9b0f1fe60b9c6664",
      "End": "7381e991a59a4b548651cbb8d6f3924f",
      "Id": "423d3e5ab5da41c49595ed2070c3b9f3",
      "IsHidden": "False"
    },
    {
      "Start": "b9baed5e0d954e9e9b0f1fe60b9c6664",
      "End": "c95aea66a3014750b29c1c0e5d7f496d",
      "Id": "88d706a1d16b406b80e74778f23d631a",
      "IsHidden": "False"
    },
    {
      "Start": "50eb3f2ae6c640dbb3ccac4fcc630729",
      "End": "93872fc711a24831a5c64433dbe123c6",
      "Id": "e8c258e21db7434c98960a353496aaaf",
      "IsHidden": "False"
    },
    {
      "Start": "762630721afb4e9ebbf219f7e3c42007",
      "End": "d3cd57e3be214dbbae9d32ef5ef3e278",
      "Id": "4d4240f9b2004393922e3abd58655080",
      "IsHidden": "False"
    },
    {
      "Start": "85ab738ed5a7435cb74bb228bc1bc17c",
      "End": "470482bcef124d3894361b99e958f7cf",
      "Id": "c10ab33d0a60484098da83ac77572d62",
      "IsHidden": "False"
    },
    {
      "Start": "c7793deda3074a329139eca631f84700",
      "End": "db533377ec07420a9227564ea3e45512",
      "Id": "98d99cbe62e845a29394d67b367c24df",
      "IsHidden": "False"
    },
    {
      "Start": "4fb4f4c901e14ab595b52b77313afa81",
      "End": "05fb3fa453854ff99abadbfb84831c5a",
      "Id": "23b9dce7d82c42c3b947bb3de871e55a",
      "IsHidden": "False"
    },
    {
      "Start": "4fb4f4c901e14ab595b52b77313afa81",
      "End": "6e24ba0ca2b244cd9ef285eaef665cf2",
      "Id": "86646c0777934ffa934bf0fdb86b30e9",
      "IsHidden": "False"
    },
    {
      "Start": "3fc25d02876a45c3a61176f9f6f8f9ee",
      "End": "916d689bf5a34f739d854634ac8ff12e",
      "Id": "7224a49418a341dfbcf06119559dc0be",
      "IsHidden": "False"
    },
    {
      "Start": "ef4745deff0542b29db05e9d6ab8d482",
      "End": "d20b2194a614499aa4873d46069b1900",
      "Id": "9d33b9e50a81476b85860c9c4132043f",
      "IsHidden": "False"
    },
    {
      "Start": "eeea992743a147d4820ea649232a52f0",
      "End": "c0ae990663134301b636cbd6a0ce1b5a",
      "Id": "eb94cd9cf3654cff87894ceabb1c00e6",
      "IsHidden": "False"
    },
    {
      "Start": "a9d816bf87274266b00b64339ced3181",
      "End": "a1f78a947bd64d35a1ebfff645849c30",
      "Id": "9689fde53b3141c88ae7fc11649043df",
      "IsHidden": "False"
    },
    {
      "Start": "21bf16626f284385b3af808bc9db3e40",
      "End": "f345471837e44e5b808302fd31ca8a3c",
      "Id": "234b41a6d9a74c6f8dbcb6ed4ed77b57",
      "IsHidden": "False"
    },
    {
      "Start": "1218da5b226b48629808bedadd23e7ea",
      "End": "96d556dbe55f405bae4d21e9c078221b",
      "Id": "e7c81f6f5bbd4ef18b236226453ad456",
      "IsHidden": "False"
    },
    {
      "Start": "d5f58fbb51c74e37bf1eec8233e862d4",
      "End": "2089e0ca984b43a0b5c6ade0be4d89a5",
      "Id": "217f6623cdff40ac8ca3b6a373c8e96d",
      "IsHidden": "False"
    },
    {
      "Start": "4e6bf7f34ac34720bd9b42473af107ba",
      "End": "705039360917491089724d1eaad5c062",
      "Id": "a8fc38de1219466d99336510699e07cb",
      "IsHidden": "False"
    },
    {
      "Start": "71ac4ad0d94f4068a22278299e346bfd",
      "End": "f0b93aa5dd49479b909efdd2d94a3277",
      "Id": "4f3613571a8f4c20aab3db7a8d7b8853",
      "IsHidden": "False"
    },
    {
      "Start": "7565228283b54a24a5466ec3d4f2fc25",
      "End": "b66a4cbfa4134a3a927cdccbdb5d1a2e",
      "Id": "14882996b73549acba052673a68ebcbc",
      "IsHidden": "False"
    },
    {
      "Start": "327235b48a8e42e3a03e7a7982134ddf",
      "End": "819aa3941eec44329159f8f5e2cf03be",
      "Id": "f62d51abf285466586f5d6a447077ce3",
      "IsHidden": "False"
    },
    {
      "Start": "5289cdb5d5d94bb8bbcb74770befda17",
      "End": "f605ff92f18e4fa5837bb4b59dc855f8",
      "Id": "e65269c76bd649c29b24e27d19c7e2e0",
      "IsHidden": "False"
    },
    {
      "Start": "c3e03aeaa1bf49db8319d562610ab5c0",
      "End": "051188353c8b4eb2b5bffb18880981a4",
      "Id": "fd67c51f648b4b7c940fee0eda78c1ee",
      "IsHidden": "False"
    },
    {
      "Start": "db82447a1853463ea732a2b395d78c71",
      "End": "081c3162c1014f70a9cc0bf15af935ca",
      "Id": "d2b2f10823674c029cf115e3ce7b532f",
      "IsHidden": "False"
    },
    {
      "Start": "31a66f3a1d264d1ba8d08e102238c2bf",
      "End": "8bebbbad5c6d4f32993fc2062cbecefc",
      "Id": "44909136f5724a119bf81ebc4d4fed87",
      "IsHidden": "False"
    },
    {
      "Start": "004aa90a8d25440b85b0822862242aae",
      "End": "fffadde0834c4a4aa33390374c6623ae",
      "Id": "2fd4c0bc921c407ab3be2d7b6a13863b",
      "IsHidden": "False"
    },
    {
      "Start": "2772b6d9110f42d28833000fa0b97e8d",
      "End": "19d69605f3b0494183046600773f2d6f",
      "Id": "a0b0770880d2436ba29046f140c2f62e",
      "IsHidden": "False"
    },
    {
      "Start": "4206089bcf084019a131285b13d1a394",
      "End": "4274e0ade80b447a89a4a20dec9701f7",
      "Id": "ce36a74981f64bb294d7d7c050accd93",
      "IsHidden": "False"
    },
    {
      "Start": "527b3d12815c4c76bf4b7d1735a06659",
      "End": "07d2d13978e24977b466e94e29ed1b71",
      "Id": "059e793381a44daf9a608f479491a6b2",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "플랜트건축팀_BIM_팀 표준 Family List_Rev.0_시연용_20231107.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "99dc7cb1566d41bbacd757279acdee59"
      ]
    },
    {
      "Name": "Family Types Comparison.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "737a3265420c49f09598017510ceb4bb"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "2cabe6edaa864378b8e899ddf0c9c539",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3265.4387842240139,
        "Y": 276.80085332179203
      },
      {
        "Id": "01be586fcd5d4ddda88249f45cefe4ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2331.5874887157179,
        "Y": 216.48115107443152
      },
      {
        "Id": "a913887f8e4045b1be829bfeb6a36cf7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "make_htmlStr",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 2710.0843842979029,
        "Y": 511.44762348556242
      },
      {
        "Id": "78239378beaf436f827b1dcd0caf5cbf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 226.0327881986168,
        "Y": 1419.7518381928444
      },
      {
        "Id": "7e20c2e7e60d487cab5bf3217e8de243",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Categories",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -109.9672118013832,
        "Y": 1419.7518381928444
      },
      {
        "Id": "9d4e07eb84a24d9daeabaa773966ebf0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "allFamilyTypesPerCat",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1029.0327881986168,
        "Y": 1328.7518381928444
      },
      {
        "Id": "2d983678cd124be49367b4e573ce56bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "FamilyType.Name",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1362.0327881986168,
        "Y": 1366.7518381928444
      },
      {
        "Id": "9d650c2f7d944978bf91568a2d2b91e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 583.0327881986168,
        "Y": 1476.7518381928444
      },
      {
        "Id": "adcf4bcceee24e15a87f7a637ebffaa8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 226.0327881986168,
        "Y": 1567.5793381928443
      },
      {
        "Id": "2f02036c70f748088ea8dcf78d78dcea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1029.0327881986168,
        "Y": 1624.5793381928443
      },
      {
        "Id": "b4adf57542fb42e3bb0ee14a3958d489",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1362.0327881986168,
        "Y": 1514.7518381928444
      },
      {
        "Id": "d95e73e372a2449abb29dd7fb1d0af3e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1029.0327881986168,
        "Y": 1476.7518381928444
      },
      {
        "Id": "3b262fe8a4af4b8c8eb5c5290d635bfa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Insert",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1808.0327881986168,
        "Y": 1490.7518381928444
      },
      {
        "Id": "cea7b8bc0c854de4b65dea024b706054",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1362.0327881986168,
        "Y": 1692.5793381928443
      },
      {
        "Id": "7fad48ce1b7741439ec401e93078e09b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2446.4562643253203,
        "Y": 2440.0550626009676
      },
      {
        "Id": "6668770721804c3abd6de4a533d22aaa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "File From Path",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2892.7258057374238,
        "Y": 2445.4673831517516
      },
      {
        "Id": "99dc7cb1566d41bbacd757279acdee59",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "File Path : Family List ",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3705.2677635194709,
        "Y": 2226.1716051391672
      },
      {
        "Id": "4867f297ec224bdbad1d7dde516ece8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -3007.6845148873467,
        "Y": 2606.5893860320484
      },
      {
        "Id": "25a03f510ca64886924d3f6ab1429684",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -2726.5544433259615,
        "Y": 2701.1590307155766
      },
      {
        "Id": "f83769bfe6844213876c8e52b05e82d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Excel data dictionarizationScript",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1531.0321420422906,
        "Y": 2292.3153082985964
      },
      {
        "Id": "5ae4707de2a1481897939bcfadee129c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "lang_mode(영/한) select",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1888.0321420422906,
        "Y": 2292.3153082985964
      },
      {
        "Id": "c25ac96ef9a54c4a930ad2cc791a44f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.Keys",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 825.96785795770938,
        "Y": 2275.8153082985964
      },
      {
        "Id": "7adba81c4ee944d3a55f1bca9648780a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.Values",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1115.0321420422906,
        "Y": 2308.8153082985964
      },
      {
        "Id": "41119b47edeb4934bdd60a072611d385",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.ValueAtKey",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -788.03214204229062,
        "Y": 2365.8153082985964
      },
      {
        "Id": "757dd99937764674a9423b9adafd1385",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1115.0321420422906,
        "Y": 2456.6428082985963
      },
      {
        "Id": "dea307190fc74a64b3f72a5497a03bfd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -150.03214204229062,
        "Y": 2365.8153082985964
      },
      {
        "Id": "768b4404f7b549f18e38d2b8bc6a5cae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1140.9678579577094,
        "Y": 2275.8153082985964
      },
      {
        "Id": "cb017ec627dd4b8aad9c57efb9595d6c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -450.03214204229062,
        "Y": 2365.8153082985964
      },
      {
        "Id": "aef9b0def95242d3b0c134278f7eca57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.ByKeysValues",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1464.9678579577094,
        "Y": 2275.8153082985964
      },
      {
        "Id": "05adeb1cfa6e4a91bebfa3f1d4b71c70",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 144.96785795770938,
        "Y": 2421.8153082985964
      },
      {
        "Id": "956c0971229d4f62a6de05cbd39af66f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 444.96785795770938,
        "Y": 2487.8153082985964
      },
      {
        "Id": "466a9d5a12c645a7bc9ae4fa14926a83",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 144.96785795770938,
        "Y": 2570.6428082985963
      },
      {
        "Id": "63c10ffd123442fc81bedb3496122ebb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FirstItem",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 825.96785795770938,
        "Y": 2487.8153082985964
      },
      {
        "Id": "21fb33c4e5354ba5878ba5e8eb5d2683",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1140.9678579577094,
        "Y": 2487.8153082985964
      },
      {
        "Id": "aae00f786dc34be4b43a6292153a902f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.SortByKey",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1464.9678579577094,
        "Y": 2453.8153082985964
      },
      {
        "Id": "b66e9c308f364b25879cbc0155b3c577",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Dictionary.ValueAtKey",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1822.9678579577094,
        "Y": 2347.8153082985964
      },
      {
        "Id": "c0266473b27f4a7d9b98927dc317a14f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "From Revit",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2604.8988867426874,
        "Y": 1744.6243825097629
      },
      {
        "Id": "0cb63f541748456e8ad7ce4c9141d77b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "From Excel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2602.3123382965832,
        "Y": 2203.371297830975
      },
      {
        "Id": "b3941999ff4c4b48a5ed73f559d18577",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "make pairDictList",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3146.66754678771,
        "Y": 1955.3532653266348
      },
      {
        "Id": "99e65a4157b44f768cddfc74ab4bfa94",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Formatting for Excel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3701.0988961090497,
        "Y": 1839.3396547768825
      },
      {
        "Id": "def80b8d6fdf4fd48ee0b710f759aa00",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "Data.ExportToExcel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6158.57767117104,
        "Y": 1808.3040056962409
      },
      {
        "Id": "97e0a90cf4dc4b2cbecb8f16f2abf5dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5772.9190226034971,
        "Y": 1670.9492518564064
      },
      {
        "Id": "0f9a66c5651a4ea8afb78864104a2e33",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5779.3095318110672,
        "Y": 1836.1415950659289
      },
      {
        "Id": "2d08d2c2788a454f876bb43a7a09dd57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3048.2578597211154,
        "Y": 2682.3721252872915
      },
      {
        "Id": "a1b7e2d21af34b06bdecbf261d9e179f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.AddItemToEnd",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3444.8792225666907,
        "Y": 2603.9907813963359
      },
      {
        "Id": "b8ef1fcb8a0c45f5a765b2554fe1942f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3175.7462969730041,
        "Y": 2479.7903927367051
      },
      {
        "Id": "f4b8d6618c974c6a99864aa06964a1b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.AddItemToFront",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4039.8435438927381,
        "Y": 2391.7242952137653
      },
      {
        "Id": "64c3b4e33a52400696df80523bf1e591",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5185.45645214906,
        "Y": 2173.9253234977114
      },
      {
        "Id": "a40a7d2d764c4e1a9f5b69b3211765a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.AddItemToFront",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5486.3998305165023,
        "Y": 1973.4132163768691
      },
      {
        "Id": "c737b55046464c2baf66770f12e22a41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5104.994548942931,
        "Y": 1859.7274357435811
      },
      {
        "Id": "5194d65da09f4c56b28347d41d4e7a27",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.AddItemToFront",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4536.8053041027561,
        "Y": 2540.2440788611539
      },
      {
        "Id": "2b0ad83288324919bcc88d28f7755ec4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4107.0,
        "Y": 2944.0
      },
      {
        "Id": "737a3265420c49f09598017510ceb4bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5210.2583242924993,
        "Y": 1529.8818398629614
      },
      {
        "Id": "9d694f09acfe47e18520ac15f08a9c0c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4886.0,
        "Y": 1530.0
      }
    ],
    "Annotations": [
      {
        "Id": "f4eaeddc9d7b490ca104cb6fe2ad91ae",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7fad48ce1b7741439ec401e93078e09b",
          "6668770721804c3abd6de4a533d22aaa",
          "99dc7cb1566d41bbacd757279acdee59",
          "4867f297ec224bdbad1d7dde516ece8c",
          "25a03f510ca64886924d3f6ab1429684"
        ],
        "HasNestedGroups": false,
        "Left": -3715.2677635194709,
        "Top": 2153.1716051391672,
        "Width": 1516.8114991941507,
        "Height": 823.41778089288118,
        "FontSize": 36.0,
        "InitialTop": 2226.1716051391672,
        "InitialHeight": 780.41778089288118,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "de041e125be24dfd8f0c816a718de1cc",
        "Title": "Types From Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "f83769bfe6844213876c8e52b05e82d3",
          "5ae4707de2a1481897939bcfadee129c",
          "c25ac96ef9a54c4a930ad2cc791a44f0",
          "7adba81c4ee944d3a55f1bca9648780a",
          "41119b47edeb4934bdd60a072611d385",
          "757dd99937764674a9423b9adafd1385",
          "dea307190fc74a64b3f72a5497a03bfd",
          "768b4404f7b549f18e38d2b8bc6a5cae",
          "cb017ec627dd4b8aad9c57efb9595d6c",
          "aef9b0def95242d3b0c134278f7eca57",
          "05adeb1cfa6e4a91bebfa3f1d4b71c70",
          "956c0971229d4f62a6de05cbd39af66f",
          "466a9d5a12c645a7bc9ae4fa14926a83",
          "63c10ffd123442fc81bedb3496122ebb",
          "21fb33c4e5354ba5878ba5e8eb5d2683",
          "aae00f786dc34be4b43a6292153a902f",
          "b66e9c308f364b25879cbc0155b3c577"
        ],
        "HasNestedGroups": false,
        "Left": -1898.0321420422906,
        "Top": 2159.8153082985964,
        "Width": 3969.0,
        "Height": 542.82749999999987,
        "FontSize": 72.0,
        "InitialTop": 2275.8153082985964,
        "InitialHeight": 1292.5530472582518,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "2608823f1acf4c169e8ea9237b4a77b4",
        "Title": "Types From Revit",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "78239378beaf436f827b1dcd0caf5cbf",
          "7e20c2e7e60d487cab5bf3217e8de243",
          "9d4e07eb84a24d9daeabaa773966ebf0",
          "2d983678cd124be49367b4e573ce56bc",
          "9d650c2f7d944978bf91568a2d2b91e4",
          "adcf4bcceee24e15a87f7a637ebffaa8",
          "2f02036c70f748088ea8dcf78d78dcea",
          "b4adf57542fb42e3bb0ee14a3958d489",
          "d95e73e372a2449abb29dd7fb1d0af3e",
          "3b262fe8a4af4b8c8eb5c5290d635bfa",
          "cea7b8bc0c854de4b65dea024b706054"
        ],
        "HasNestedGroups": false,
        "Left": -119.9672118013832,
        "Top": 1212.7518381928444,
        "Width": 2135.0,
        "Height": 611.82749999999987,
        "FontSize": 72.0,
        "InitialTop": 1328.7518381928444,
        "InitialHeight": 525.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFFFAA45"
      }
    ],
    "X": -5226.4818072585149,
    "Y": -1641.3151065271784,
    "Zoom": 0.97680012596389465
  }
}