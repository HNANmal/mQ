{
  "Uuid": "1d6d431a-e8c4-48aa-8b91-a874ff2542a8",
  "IsCustomNode": false,
  "Description": "Auto Calculating the Quantities of each Element As per the Family List",
  "Name": "python scripting 실습용_5주차",
  "ElementResolver": {
    "ResolutionMap": {
      "DesignScript.Builtin.Dictionary": {
        "Key": "DesignScript.Builtin.Dictionary",
        "Value": "DesignScriptBuiltin.dll"
      }
    }
  },
  "Inputs": [
    {
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Name": "1. Family List 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "..\\etc\\물량산출테스트용\\Earthwork Dev\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4(24.06.01)_HGEN PCB_240617_mk.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    },
    {
      "Id": "de4566fde19f484c81cdf869933392fc",
      "Name": "2. 물량산출모드(입찰 / 실행)",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "입찰",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "bbbc75a0c0604f1280f428ef65ce021e",
      "Name": "3. 토공산출모드(온통 / 개별)",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "개별터파기",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 1
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "1250bd18102c4ebaac9950d60dac8849",
      "Inputs": [
        {
          "Id": "f2b7450af5914cbf8a28c2a092e6a190",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "912753a782b84f598e120e936fffbd58",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef get_all_BIC():\r\n\r\n    db = [\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Floors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Roofs,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Walls,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFoundation,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Doors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Windows,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Stairs,\r\n    #Autodesk.Revit.DB.BuiltInCategory.OST_Railings,\r\n    ]\r\n    return db\r\n    \r\ndef get_allElems(doc):\r\n    bics = get_all_BIC()\r\n    \r\n    def getElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType().ToElements()\r\n        return res\r\n\r\n    def getRailElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType()\r\n        return res\r\n\r\n    res = map(getElems, bics)\r\n#    res = getRailElems(Autodesk.Revit.DB.BuiltInCategory.OST_RailingSystemRail)\r\n    return res\r\n\r\n\r\nOUT = get_allElems(doc)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
      "Inputs": [
        {
          "Id": "08594b729317483fab0ab869358cdb3c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4d9d60debe6406cace5eb687f712858",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 441,
      "SelectedString": "OST_StairsRailing",
      "NodeType": "ExtensionNode",
      "Id": "d78f3dfc768541ab8490b53194e174c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdc68e6596d64c1bb2ad17af850a8a64",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
      "Inputs": [
        {
          "Id": "ae38fed72c0a434eb235268bfba22c03",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07eba95685e249a0a3188444eec253fe",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
      "Inputs": [
        {
          "Id": "efbd6851497a4681a114ca7842d95e6a",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2d45870ecc9f4742810ae2af861ad07b",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c329e42f144540938189475395a4a425",
          "Name": "list2",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9825547c3fc14efcaa6e0a83253c082d",
          "Name": "list3",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea90dca9236c4c19a28da5b5f7a76fcf",
          "Name": "list4",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fac716a5b9a34f8296c2dd982c72b3fd",
          "Name": "list5",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266640a8b58449a48603af36addb1282",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
      "Inputs": [
        {
          "Id": "c4d740fa206e4ab3b53ba148e9727e8f",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8871f8fef5b841e484fe65aa92aecb9c",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2e3869f91c64b06ab4cff0e2c816de0",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da624c3834b64df4a29198439fca082e",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16f6a93146ee4557a8eec29cac4eb344",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "caccad700bd84d8e8cb198c7fe1545aa",
      "Inputs": [
        {
          "Id": "8d8f529204cd48a5a2210b85d94be686",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb3a2510c5934129baf50771f5bb29a9",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\etc\\물량산출테스트용\\Earthwork Dev\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4(24.06.01)_HGEN PCB_240617_mk.xlsx",
      "InputValue": "..\\etc\\물량산출테스트용\\Earthwork Dev\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4(24.06.01)_HGEN PCB_240617_mk.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e3d41cbea388406e9b31fca8184f2a13",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "76e75c1cd00342eeb418e14c2410b8f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f98969ee45ea4cce8921b553ad57fbc0",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"WM-AR\"\n,\"산출기준\"\n,\"0.Room\"\n,\"1.Floors\"\n,\"2.Roofs\"\n,\"3.Walls_Ext\"\n,\"3.Walls_Int\"\n,\"4.St_Fdn\"\n,\"5.St_Col\"\n,\"6.St_Framing\"\n,\"7.Ceilings\"\n,\"8.Doors\"\n,\"9.Windows\"\n,\"10.Stairs\"\n,\"11.Railings\"\n,\"12.Generic\"\n,\"13.Manual_Input\"\n];",
      "Id": "64985def907747329221585392bfc414",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "414cd2a5762448afbc839c742fe3c056",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "e861b848a856496cbce58b3351868c08",
      "Inputs": [
        {
          "Id": "e4473f11a1094475b798c856c23211f3",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "200e8c0696ef4ed5a750d77b90d8adb2",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type\";\n\"Type Name\";",
      "Id": "b8bb7074d1474d5c817d440222fe7c73",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "89c4346d0ca240129b219859161d732e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "546a1d2d4b4b42559624cd48ac1ea2de",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a6525529e2854c5da74f8737df2462da",
      "Inputs": [
        {
          "Id": "02e0bb5b9d0e457ebd53e48eca839e1d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ff046ebd624422dad4be5c1cb3a9e98",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b41720919fd0439ea0dd87f71b67080e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
      "Inputs": [
        {
          "Id": "bee976de5cac45d9a7729a1dad8b487d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08cf3f9b3e5d43e48be4ee2445de11d1",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "343c269326d242598a644214bc9fd722",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n#collector1 = FilteredElementCollector(doc)\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\ncalcMode = IN[0]\r\nelemDicts = IN[1]\r\n\r\n\r\n# Place your code below this line\r\n\r\ndef calcFormula_each_WmSpecs(elemDicts, calcMode):\r\n    calc_key = \"실행_물량산출식\" if calcMode==\"실행\" else \"입찰_물량산출식\"\r\n    \r\n    def calcFormula_dict(d):\r\n        e = d[\"Elem\"]\r\n        wmSpecss = d[\"wms\"][\"wmSpecs\"]\r\n        if \"Post_Sym_Val Dict\" in d[\"wms\"].Keys:\r\n            postSymValDict = d[\"wms\"][\"Post_Sym_Val Dict\"]\r\n            Sym_Vals = list(zip(postSymValDict.Keys, list(map(str, postSymValDict.Values))))\r\n            sortedSym_Vals = sorted(Sym_Vals, key=lambda x: len(x[0]), reverse=True)\r\n            for i in wmSpecss:\r\n                applyFormula = str( i[calc_key] )\r\n                if not applyFormula.startswith('_'):\r\n                    substFormula = applyFormula\r\n                    for x in sortedSym_Vals:\r\n                        substFormula = substFormula.replace(*x)\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ substFormula\r\n                    try:\r\n                        i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n                    except:\r\n                        i[\"Quantity\"] = \"'\"+ substFormula\r\n                else:\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ applyFormula\r\n                    i[\"Quantity\"] = \"\"\r\n        else:\r\n            for i in wmSpecss:\r\n                applyFormula = str( i[calc_key] )\r\n                substFormula = applyFormula\r\n                i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n        return d\r\n    res = []\r\n    for d in elemDicts:\r\n        res.append(calcFormula_dict(d))\r\n    \r\n    return res\r\n\r\n\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = calcFormula_each_WmSpecs(elemDicts, calcMode)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0160cc09c3474815a65506ace3948e4f",
      "Inputs": [
        {
          "Id": "c8a7a0a48b804152912220118b24908f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "51dd00ffd7304563a68c380857a8ce47",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4835f9063384b88aee9393fbb8d6ba8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\n\r\ndef tmp_switchEarthworkFormula(elemDict):\r\n    \r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] in [\"=Exca\", \"=Back\", \"=Disp\"]:\r\n                i[k] = \"_tbd\"\r\n        \r\n    return elemDict\r\n\r\ndef tmp_switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(tmp_switchEarthworkFormula, elemDicts))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = tmp_switchEarthworkFormula_allDicts(elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5ba4a873bf1d434b910b34378934a374",
      "Inputs": [
        {
          "Id": "adf136f6f97a49d889443ca716141d60",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7f1ed869682c4a4594c6a1912c0d7cdc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "입찰",
          "Item": "입찰"
        },
        {
          "Name": "실행",
          "Item": "실행"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "입찰",
      "NodeType": "ExtensionNode",
      "Id": "de4566fde19f484c81cdf869933392fc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32798e643200441ba50e47158bac8958",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "04d37a7ec47d4dbf9637d86f3be06945",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "33996f8f1fcd4bf0b9b14097a32771e9",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 497,
      "SelectedString": "OST_Rooms",
      "NodeType": "ExtensionNode",
      "Id": "ba41dd7b1e544c768194fe3c25e74bc2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f93893f04b6a4c9c85bde5f8bbab797f",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "4cc98c97ebcc4cf8a37a980c5f62c296",
      "Inputs": [
        {
          "Id": "716ec7c1fc7a49ff8c4026967fa61e48",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "99445748c48a43429fd93e846a0127d7",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "6ede13f036274ae697bc98035846b781",
      "Inputs": [
        {
          "Id": "23fa6cd768304e8ab0e1861056556a3a",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c53088847bd74d49bf5b15aaa5f78d10",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5f978285ed442d8ac531ad320b332b2",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f6e66d25b5e47f4b571b338a98618bf",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.Type@var",
      "Id": "6ff0495beeb2499481715807a0f60ef2",
      "Inputs": [
        {
          "Id": "4c91edd5c0f64789a8ea801df8db525a",
          "Name": "object",
          "Description": "Object to query type\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "717bd50be2954098b51282b15b78e7d9",
          "Name": "string",
          "Description": "Type of object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the type of object represented as string.\n\nObject.Type (object: var): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i==\"Revit.Elements.Room\";",
      "Id": "386656a3778543bc971c0771aa33de2d",
      "Inputs": [
        {
          "Id": "fbc42faccac141f58fa4929998b28775",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "687ed700a2884539b98f2064f8168723",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "285fa2ccb9e64d638e488b5b2f65bfa9",
      "Inputs": [
        {
          "Id": "af7ef13b3b1746059950d92eded065ea",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f8c0a5ab126467f98568c0448e3ca45",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1a6f6ac0a0a4b0b93d898295473b351",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Number\";\n\"Name\";",
      "Id": "b97ab952870844e293b85efdee212e50",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6503815f9eb44e096e0a60fc7f86322",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ebc7ca6c04b445029ff0a19d1a6f5de8",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "90f58a0b10c745428bdf593ba78e6987",
      "Inputs": [
        {
          "Id": "c00c4b8eb30046c7998cc0379f1bf9ed",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a6cc35c54154c1ba3c9dafdb84fed2e",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb2166294e344de9a7345d4510303c2f",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "2fb4a4e82e8549f49f166798b56a76e3",
      "Inputs": [
        {
          "Id": "65387579e40c48ea995f066140591a7c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "919c2a1a395941fc8b371fcef1911806",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c54455fc6553473e9647aa720b5263e6",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5b581f5432b6436d9aca025a71f1e4bb",
      "Inputs": [
        {
          "Id": "8c051f1489514263a6774f363c24655f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ba6cfa7d18b452fa667ef6098d7307b",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf6ef4699697424eb47c86b542bed47e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "7862edc57af74bd8abec15b6d04702c5",
      "Inputs": [
        {
          "Id": "9796a4ddcf6343969756bfe504eb14bf",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "314c2fb0bcae46d3800e939a0a61ca19",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c58b0d1b47141bea5f51bd2cc0bdf08",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"_\";",
      "Id": "35d6d02792f24515ad91bc9d60b105ae",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "34472305116e4a9d8f31063197f01a2b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fc7dbf06233e4ce48a0c2a90e4bb3494",
      "Inputs": [
        {
          "Id": "6d691c16e28044f88ab671d1b177a7b5",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3144a79a2174bd690e5e0e2ceea0412",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f2aea9c72fae496792d64287a83c2951",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "f2fbd5908bd845fd918324ba4b97cd7e",
      "Inputs": [
        {
          "Id": "4ba52a74ab09432dbc936fb0c846d7af",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "000346f199e84c0e89036c3238bd2534",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "fa50df0655ca42419832fc4392e55b87",
      "Inputs": [
        {
          "Id": "52497a4f7e3f4e7b8fd87b74a4f02822",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0dd4e8d6e864acfaadcc4003759b07a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a3bfc25f6e9b44cca0b0174014698814",
      "Inputs": [
        {
          "Id": "f83b0c67f2a844eb9671a652aaab5295",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edabcd49e6ea4993b172068d83bbdbee",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea99d3a9383c42fca4100fb7c05b0059",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "511c6cef074d451ca975caef002fe34b",
      "Inputs": [
        {
          "Id": "fe0317db0fe94c9ea9a7ba7a77a0c743",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cda7261c7e245cc99d696e81cd52879",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type\";",
      "Id": "e703509cbf3842809e89d16cdb367747",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a86a3be4671e4154b36554dc2a2af2d6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "calcMode;",
      "Id": "9a943402cecb4a248260e65c289f9e35",
      "Inputs": [
        {
          "Id": "f55b93e723644c63be0a0d6b776530c7",
          "Name": "calcMode",
          "Description": "calcMode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "761c3da8ff6a43339a6d3b904a049e95",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dictionarizedTypes;",
      "Id": "c438dfb67edb45488157194c6b394ce3",
      "Inputs": [
        {
          "Id": "7f74ea49e8194139a4c9a30fde21778f",
          "Name": "dictionarizedTypes",
          "Description": "dictionarizedTypes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7fe767aa2dde4da0a94f539212075db1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "97a2979f91fd486ca41887522d397a97",
      "Inputs": [
        {
          "Id": "1a559a0ef78248deb186ecbf9f48ad78",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91cc642301734d1fb1efcf0de961ece3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "63bd58ef9417408daec6de73f083a6cb",
      "Inputs": [
        {
          "Id": "936dcfd3645e4b1991ca7629b12e5d67",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "583b63e14057467daf79cbfbcb0ef8c9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\"\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n\r\nimport re\r\nfrom functools import partial\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\nwholeDatas = IN[1]\r\ndb = wholeDatas[1:]\r\nallCatSheetsNames = IN[2][2:]\r\nallCatSheetsNames_noRoom = allCatSheetsNames[1:]\r\n\r\ncalcStdSheet = db[0] ##산출기준 시트\r\nallCatSheets = db[1:]\r\n\r\nallElemsNames = IN[3][0]\r\nallElems = IN[3][1]\r\nallElemsSet = list(zip(allElemsNames, allElems))\r\n\r\n\r\n#wmspec_headers = [\r\n#    \"Work Master Code\" ,\"GaugeCode\" ,\"Unit\" ,\"Work Category-L1\"\r\n#    ,\"Work Category-L2\" ,\"Work Category-L3\" ,\"Spec. 1- L4\" ,\"Spec. 2- L5\"\r\n#    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\r\n#    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\r\n#    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\r\n#    ,\"Work Master Code /w Description\", \"Description\" ,\"입찰_물량산출식\" ,\"실행_물량산출식\" ,\"rIDX\"\r\n#]\r\n# Place your code below this line\r\n\r\ndef find_IsInStr(target, string):\r\n    if target == None or string == None:\r\n        pass\r\n    else:\r\n        res = str(target) in str(string)\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db)) ##targetTransposedDB (col_idx에 해당하는 데이터만 추출)\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    target_RowNumber = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,target_RowNumber))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb] ## 각 구간별 마지막 행 번호\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,target_RowNumber))\r\n    rangeEndIdxs = endidxs\r\n    result = list(zip(rangeSttIdxs, rangeEndIdxs))\r\n    return result\r\n\r\n    \r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = list(map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1]))))\r\n    \r\n    return dict(headers_sheet)\r\n    #return list(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdxDict, trgt_hdr, trgt_str):\r\n    #hdrs_withIdxDict = dict(hdrs_withIdx)\r\n    return find_range_by_columnItem(sheet, hdrs_withIdxDict[trgt_hdr], trgt_str)\r\n\r\n\r\ndef get_DataOnGrpsAtSheet(sheet:list, discrHDRStr, discrRowStr):\r\n    \"\"\"\r\n    판별기준 Header문자열(discrHDRStr)이 들어있는 열에서,\r\n    판별기준 행 문자열(discrRowStr)이 들어있는 행번호 기준으로 구역을 나누어 데이터 리스트 반환\r\n    \"\"\"\r\n    hdrs_withIdxDict = find_headersAtSheet(sheet)\r\n\r\n    # 시트별 그룹 구분 (시작 행번호, 끝 행 번호 추출)\r\n    rowAreasAtSheet = find_rangesAtSheet(sheet, hdrs_withIdxDict, discrHDRStr, discrRowStr)\r\n    \r\n    # 시트 각행에 rIDX 데이터 주입하는 구간 - (시작) >>>>>>>\r\n    ## 헤더의 칼럼 인덱스 중 가장 큰 것 추출\r\n    hdrs_maxCol_idx = max(list(hdrs_withIdxDict.values()))\r\n    ## 마지막 헤더위치보다 한칸 옆을 행인덱스번호(\"rIDX\") 정보 보관 위치로 설정\r\n    hdrs_withIdxDict[\"rIDX\"] = hdrs_maxCol_idx+1\r\n    ## 시트의 각 행을 번호와 함께 pair 형태로 추출\r\n    sheetWith_rIDX = list(enumerate(sheet))\r\n    ## rIDX 보관된 시트 데이터 저장을 위한 빈 리스트 선언\r\n    sheet_rIDX = []\r\n    ## pair 형태의 각 행에서, 마지막 헤더의 한칸 우측위치에 rIDX 데이터 주입\r\n    ## 시트의 각 행마다 x 라는 이름으로 순회하며,\r\n    for x in sheetWith_rIDX:\r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치보다 클때,\r\n        if len(x[1])-1>hdrs_maxCol_idx:\r\n        #if len(x)>hdrs_maxCol_idx:\r\n            #### 마지막 헤더의 우측 칸 위치를 rIDX 데이터로 치환\r\n            x[1][hdrs_maxCol_idx+1] = x[0]\r\n            sheet_rIDX.append(x[1])\r\n            \r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치와 같을때,\r\n        else:\r\n            #### 마지막 헤더의 우측칸이 없으므로 append로 rIDX 데이터 추가\r\n            x[1].append(x[0])\r\n            sheet_rIDX.append(x[1])\r\n    # <<<<< 시트 각행에 rIDX 데이터 주입하는 구간 - (끝)\r\n    \r\n    rowsGrps_perType_withNone = list(map(lambda x: sheet_rIDX[x[0]-1:x[1]], rowAreasAtSheet))\r\n    # None 데이터 치환 구간\r\n    rowsListGrps_perType = go(#>\r\n        rowsGrps_perType_withNone, list,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서\r\n        map(lambda rowGrp: \\\r\n        ## 한 행씩 골라서\r\n        list(map(lambda row: \\\r\n        ## 행을 구성하는 셀 값 중 None이 있으면 빈문자열로 치환\r\n        list(map(lambda cell: \"\" if cell==None else cell, row)), rowGrp)) ),\r\n        ## 맵 객체가 반환되므로 리스트 변환\r\n        list,\r\n    )#<\r\n    \r\n    return (rowsListGrps_perType, hdrs_withIdxDict)\r\n\r\ndef cvt_rowsListGrps_toDictGrps(rowsListGrps_perType, hdrs_withIdxDict, sheetName):\r\n    \"\"\"\r\n    헤더 행과 다수의 컨텐츠 행으로 이루어진 rowListGrps를,\r\n    모든 행을 헤더와 결합된 딕셔너리화 해서 rowDictGrps를 만드는 함수\r\n    \"\"\"\r\n    eff_hdrs_idx = hdrs_withIdxDict.values()\r\n    eff_hdrs_name = hdrs_withIdxDict.keys()\r\n    \r\n    rowsDictGrps_perType = go(#>\r\n        rowsListGrps_perType,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서 한 행 씩 조작하는 함수들을 구상 후\r\n        ## 맵 함수 내에서 go로 합성하여 반복시켜 사용\r\n        map(lambda rowGrp: go(#>>\r\n            ### 그룹 전체 가져와서\r\n            rowGrp,\r\n            ### 각 행을 리스트 타입으로 변환\r\n            map(list), list,\r\n            ### 헤더에 해당하는 행 값을 추출--\r\n            map(lambda row: list(map(lambda idx: row[idx], eff_hdrs_idx))), list,\r\n            ### 헤더이름과 행 내부의 값을 2개씩 짝지어 줌\r\n            map(lambda row: list(zip(eff_hdrs_name, row))), list,\r\n            ### 헤더이름 : 값의 형태로 각 행 데이터를 딕셔너리로 만듬\r\n            map(lambda x: dict(x)),\r\n            ### 딕셔너리 마다 카테고리 정보 추가\r\n            map(lambda x: dictUpdate(x,{\"Family Category\":sheetName})),\r\n            list,\r\n            )#<<\r\n        ), list,\r\n    )#<\r\n    return rowsDictGrps_perType\r\n\r\n# 행딕셔너리 별 입력한 규칙에 따라 참거짓 여부를 반환하는 함수\r\ndef findRow_AppliedType(rowDict, tgtHDRname, rule=None):\r\n    p = re.compile('[0-9]{3,5}')\r\n    target = str(rowDict[tgtHDRname])\r\n    ## 함수 호출시 구분자(rule) 없이 호출한 경우\r\n    ## -Room Category 시트 용 이며 \"Standard Type\" 항목의 값이 000형태의 숫자인지를 판별\r\n    ## -Room Category 중 \"Standard Type\" 칼럼에 룸 넘버, \"Family Type Name\" 칼럼에 룸 이름 입력하게 되어있음\r\n    if rule==None:\r\n        p = re.compile('[0-9]{3,5}')\r\n        m = p.match(target)\r\n        stdCase = target ==\"Room No\"\r\n        res = all([m or stdCase])\r\n    ## 구분자(rule)가 정규표현식 객체로 들어온 경우\r\n    elif isinstance(rule, re.Pattern):\r\n        m = p.match(target)\r\n        res = all([m])\r\n    ## 구분자(rule)가 문자열로 들어온 경우\r\n    else:\r\n        res = rule in target\r\n    return res\r\n\r\n\r\n\r\ndef form_TypeDict(rowsDictGrps,titleKeyName,sttIdx):\r\n    \"\"\"\r\n    rowsDictGrps_perType을 받아서 각 그룹의 이름을 키로 하는\r\n    새로운 중첩구조의 Dictionary를 만들어서,\r\n    바깥에서 타입이름으로 딕셔너리에 접근하면 \r\n    바로 해당 구성내용을 반환해주는 데이터 구조를 만드는 함수\r\n    \"\"\"\r\n    typeDict = go(#>\r\n        rowsDictGrps, list,\r\n        filter(lambda x: x!=[]),\r\n        map(lambda rowsDictGrp: \\\r\n            ### 그룹 전체 첫행 중 타이틀키값과 나머지 row 들 dict를 짝지어 새로운 딕셔너리로 형성\r\n            [list(rowsDictGrp)[0][titleKeyName],go(#>>\r\n                list(rowsDictGrp)[sttIdx:],\r\n                #### 모두 빈칸인 값일때 제외 필터링\r\n                filter(lambda row: any(list(map(lambda cell: cell!=\"\", list(row.values()))))),\r\n                list,\r\n            )]#<<\r\n        ),list,\r\n        dict,\r\n    )#<\r\n    \r\n    return typeDict\r\n\r\ndef updateDict_symValPair(calcTypeDict):\r\n    \"\"\"\r\n    calcTypeDict를 입력으로 받아서\r\n    필요한 \"약자-대응 항목\" 의 구조를 갖는 딕셔너리 형태로\r\n    구성된 새로운 Dictionary를 반환하는 함수\r\n    \"\"\"\r\n    # 모든 산출타입 이름 추출\r\n    allCalcTypeNames = list(calcTypeDict.keys())\r\n    # 전체 결과물 담을 빈 딕셔너리 선언\r\n    res = {}\r\n    # 산출타입태그 이름 각각에 대해,\r\n    for x in allCalcTypeNames:\r\n        ## 타입별 약자 - 산출 대상 값 을 매칭하기위한 빈 딕셔너리 선언\r\n        type = {}\r\n        ## 산출기준 시트의 각 행을 딕셔너리화 한 rD마다 값을 들여다보며\r\n        for rD in calcTypeDict[x]:\r\n            ### 행 딕셔너리의 \"수동 입력값\" 항목의 값이 유효한 값이고,\r\n            ###\"산출수식 약자\" 항목에도 유효한 값이 있다면\r\n            if rD[\"수동 입력값\"]!=\"\" and rD[\"산출수식 약자\"]!=\"\":\r\n                #### 신규 딕셔너리인 type에 키를 산축수식 약자로 하고,\r\n                #### 값을 수동입력값이나 Parameter 항목 값으로 하는 딕셔너리 형성\r\n                type[rD[\"산출수식 약자\"]] = rD[\"수동 입력값\"]\r\n            elif rD[\"Parameter\"]!=\"\" and rD[\"산출수식 약자\"]!=\"\":\r\n                type[rD[\"산출수식 약자\"]] = rD[\"Parameter\"]\r\n        ## 전체를 담을 빈딕셔너리인 res에 \r\n        ## 키를 산축수식 약자로 하고, 값을 아까 마련한 type 딕셔너리로 하는 딕셔너리로 만듬\r\n        res[x] = type\r\n    # 최종결과 반환\r\n    return res\r\n   \r\n\r\ndef find_stdWMdicts_inGrp(rowsDictGrp):\r\n    res = go(\r\n        rowsDictGrp, list,\r\n        ## 엑셀 \"물량산출식\", \"Work Master Code\" 열에 값이 없는 행 제외\r\n        filter(lambda rD: rD[\"입찰_물량산출식\"] != \"\" and rD[\"실행_물량산출식\"] != \"\"),\r\n        filter(lambda rD: rD[\"Work Master Code\"] != \"\"),\r\n        filter(lambda rD: isinstance(rD[\"Work Master Code\"], str)), ### 7/18 오류제보 반영\r\n        ## Family Type Name에 \"H_\" 문자열 포함된 경우 제외\r\n        filter(lambda rD: not findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n        ## 행 딕셔너리의 NO, Standard Type 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictGrp[0][\"NO\"], \"Standard Type\":rowsDictGrp[0][\"Standard Type\"]})),\r\n        ## Q'ty Cal Type Tag 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n        list,\r\n    )\r\n    return res\r\n\r\n\r\ndef find_stdWMdicts_forCat(rowsDictsGrps):\r\n    res = go(#>\r\n        rowsDictsGrps, list,\r\n        map(find_stdWMdicts_inGrp),\r\n        #filter(lambda x: x!=[]),\r\n        list,\r\n    )#<\r\n    return res\r\n\r\ndef find_appliedTypeDicts_forCat(rowsDictsGrps):\r\n    catName = rowsDictsGrps[0][0][\"Family Category\"]\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    #stdWMsDicts = find_stdWMdicts_forCat(rowsDictGrps)\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Family Type Name에 \"H_\" 문자열 포함된 경우만 필터링\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictsGrp[0][\"NO\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            ## 각 딕셔너리마다 카테고리 명 입력\r\n            #map(lambda rD: dictUpdate(rD, {\"Family Category\":catName})),\r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef find_appliedTypeDicts_forRoom(rowsDictsGrps):\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Standard Type 에 \"H_\" 문자열 포함된 경우만 필터링(only for room)\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Standard Type\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rD[\"Standard Type\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            \r\n            ## Room 의 경우는 \"No\"와 \"Family Type Name\"을 합쳐서 \"Family Type Name\"에 입력\r\n            map(lambda rD: dictUpdate(rD,{\"Family Type Name\":str(rD[\"NO\"]).split('.')[0]+\"_\"+rD[\"Family Type Name\"]})),\r\n            \r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef merge_sameFamType_wmSpecs(appliedTypeDicts):\r\n    def merge_inGrp(appliedTypeDicts_perGrp):\r\n        \"\"\"\r\n        엑셀 타입별 행그룹 내에서 실 적용 패일리명이 들어있는\r\n        행들만 추출하고, 그 중 이름이 같은 것들의 wm 정보는 합쳐서\r\n        하나의 이름에 하나의 딕셔너리 객체만 존재하도록 수정\r\n        \"\"\"\r\n        ## 그룹 내 실 적용 패밀리 타입 명 추출(중복 불허)\r\n        keysPerGrp = go(#>\r\n            appliedTypeDicts_perGrp,\r\n            ## 개별 행딕셔너리의 패밀리 타입 항목 값 추출\r\n            map(lambda rD: rD[\"Family Type Name\"]),\r\n            ## 문자열 내 \"H_\"가 포함되어있는 지 검사\r\n            filter(lambda x: \"H_\" in x),\r\n            ## 중복 Family Type Name 단일화\r\n            set, list,\r\n        )#<\r\n        ## 패밀리 타입 명을 k라는 변수명으로 하나씩 순회\r\n        for k in keysPerGrp:\r\n            ### k라는 패밀리 타입 명에 해당하는 딕셔너리 모두 검색\r\n            sameNameDicts = list(filter(lambda x: x[\"Family Type Name\"] == k, appliedTypeDicts_perGrp))\r\n            ### 하나의 타입명에 복수 객체인지를 검사하여\r\n            ### 2개 이상인 경우\r\n            if len(sameNameDicts)>=2:\r\n                ### 동일 이름의 딕셔너리들 중 첫번째 항목의 \"wmSpecs\"에\r\n                ### 나머지 항목의 wmSpecs 항목을 몰아준다\r\n                for i,rD in enumerate(sameNameDicts[1:]):\r\n                    if rD[\"wmSpecs\"]:\r\n                        sameNameDicts[0][\"wmSpecs\"].append(*rD[\"wmSpecs\"])\r\n                    else: pass\r\n                ### 몰아주기가 끝나면, 첫번째를 제외한 나머지 딕셔너리는\r\n                ### 불필요해지므로 삭제\r\n                appliedTypeDicts_perGrp.remove(sameNameDicts[i+1])\r\n            else:                \r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDicts_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return map(merge_inGrp, appliedTypeDicts)\r\n\r\n\r\n\r\ndef inject_stdWMtoAppliedTypeDicts(appliedTypeDicts, allCat_stdWMdicts_stdTypeName):\r\n    def inject_inGrp(appliedTypeDict_perGrp):\r\n        \"\"\"\r\n        타입 그룹 별 공통 WM 딕셔너리 항목들을\r\n        실적용패밀리 딕셔너리에 주입하는 함수\r\n        \"\"\"\r\n        ## 실적용패밀리 딕셔너리 리스트의 구성 원소 각각을\r\n        ## rD(rowDictionary) 라는 이름으로 순회\r\n        for rD in appliedTypeDict_perGrp:\r\n            ### rD의 \"Standard Type\" 항목 값이\r\n            ### 입력받은 타입별 공통 WM항목 딕셔너리의 키값중에\r\n            ### 포함되었는지 검사후 있으면,\r\n            if rD[\"Standard Type\"] in list(allCat_stdWMdicts_stdTypeName.keys()):\r\n                #### rD의 \"wmSpecs\" 항목에 공통 WM항목을 추가하여 재할당\r\n                rD[\"wmSpecs\"] = rD[\"wmSpecs\"] + allCat_stdWMdicts_stdTypeName[rD[\"Standard Type\"]]\r\n            else:\r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDict_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return list(map(inject_inGrp, appliedTypeDicts))\r\n    \r\ndef updateFamTypeDicts_symValPair(total_appliedTypeDicts, calcTypeDict_symValPair):\r\n    \"\"\"\r\n    실적용패밀리타입명 별 딕셔너리에\r\n    \"Q'ty Cal Type Tag\" 항목 값 이름과 일치하는\r\n    물량산출 매개변수 꾸러미 추가하는 함수\r\n    \"\"\"\r\n    # 전체 결과물 담을 빈 딕셔너리 선언\r\n    res = {}\r\n    # 전체 실적용 패밀리 딕셔너리들 중 구성원소 각각을 d라는 이름으로 순회\r\n    for d in total_appliedTypeDicts:\r\n        ## 딕셔너리의 \"Q'ty Cal Type Tag\"항목의 값이 빈문자열이 아니라면,\r\n        if d[\"Q'ty Cal Type Tag\"]!=\"\":\r\n            ### 딕셔너리에 \"Sym_Val Dict\"라는 키를 추가하고\r\n            ### calcTypeDict 중 일치하는 값을 골라 키의 값으로 할당\r\n            symValPair = calcTypeDict_symValPair[d[\"Q'ty Cal Type Tag\"]]\r\n            d[\"Sym_Val Dict\"] = symValPair\r\n        ## 전체용 빈 딕셔너리에 패밀리 타입명을 키로 추가하고\r\n        ## 방금 수정한 단위 딕셔너리를 키의 값으로 할당\r\n        res[d[\"Family Type Name\"]] = d    \r\n    return res\r\n    \r\ndef matchWith_Elem_Dict(famlist_dic,revitElems):\r\n    \"\"\"\r\n    레빗객체와 패밀리리스트 딕셔너리의 정보를 하나로 결합해주는 용도의 함수\r\n    패밀리리스트 데이터는 패밀리 타입명을 키값으로 하는 하나의 딕셔너리로 정리되어있어야 한다\r\n    revit객체는 패밀리리스트 상 존재하는 타입만 필터링해서 입력해야 함\r\n    \"\"\"\r\n    # 수행결과를 모을 빈 리스트 선언\r\n    res = []\r\n    # 모든 레빗 객체들을 하나씩 순회 \r\n    for i in revitElems:\r\n        ## revit 객체들과 revit 타입별 Family List 딕셔너리를 결합하기 위한 빈 딕셔너리 선언\r\n        combD = {}\r\n        ## 패밀리 타입명 추출 - Room 객체인 경우와 아닌 경우 분기\r\n        if \"Room\" in str(type(i)):\r\n            famTypeName = i.GetParameterValueByName(\"Number\") + \"_\" + i.GetParameterValueByName(\"Name\")\r\n        else:\r\n            famTypeName = i.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\")\r\n        ## 결합용 딕셔너리의 \"Elem\" 이라는 키에 순회 중인 i (revit객체)를 할당\r\n        combD[\"Elem\"] = i\r\n        combD[\"GUID\"] = i.GetParameterValueByName(\"IfcGUID\")\r\n        ## 결합용 딕셔너리의 \"wms\" 이라는 키에 \r\n        ## 순회 중인 i (revit객체) 패밀리 타입 명과 일치하는 famlist_dictionary의 값을 할당\r\n        combD[\"wms\"] = deepcopy(famlist_dic[famTypeName])\r\n        ##결합된 딕셔너리를 res에 저장\r\n        res.append(combD)\r\n    # 전체 수행 결과 반환\r\n    return res\r\n\r\ndef update_sym_valDict(matched_elemDicts):\r\n    def update_sym_valDict_single(d):\r\n        \"\"\"\r\n        딕셔너리별로 포함된 [\"wms\"][\"Sym_Val Dict\"]항목 내에\r\n        아직 계산되지 않은 매개변수 값들을 계산하여\r\n        \"Post_Sym_Val Dict\"라는 새로운 키의 값으로 할당하는 함수\r\n        \"\"\"\r\n        e = d[\"Elem\"]\r\n        newSymValDict = {}\r\n        keys = d[\"wms\"][\"Sym_Val Dict\"].keys()\r\n        vals = d[\"wms\"][\"Sym_Val Dict\"].values()\r\n        for s,v in zip(keys, vals):\r\n            ## Vals 항목이 사용자 입력값이 아닌 revit 매개변수인 경우\r\n            if isinstance(v,str):\r\n                if v not in list(map(lambda x: x.Name, e.Parameters)):\r\n                    calc_v = e.ElementType.GetParameterValueByName(v)\r\n                else:\r\n                    calc_v = e.GetParameterValueByName(v)\r\n                calc_vv= calc_v if isinstance(calc_v, str) else round(calc_v, 3)\r\n                newSymValDict[s] = calc_vv\r\n            ## Vals 항목이 사용자 입력값인 경우는 그대로 입력된 숫자 사용\r\n            else:\r\n                newSymValDict[s] = v\r\n        d[\"wms\"][\"Post_Sym_Val Dict\"] = newSymValDict\r\n        \r\n        return d\r\n    return list(map(update_sym_valDict_single, matched_elemDicts))\r\n\r\n\r\n\r\n    \r\ncalcSheet_rowsListGrps_perType = get_DataOnGrpsAtSheet(calcStdSheet, \"구간판별\", \"#\")\r\ncalcSheet_rowsDictGrps_perType = cvt_rowsListGrps_toDictGrps(*calcSheet_rowsListGrps_perType,\"\")\r\ncalcTypeDict = form_TypeDict(calcSheet_rowsDictGrps_perType,\"Q'ty Cal Type Tag\",sttIdx=1)\r\ncalcTypeDict_symValPair = updateDict_symValPair(calcTypeDict)\r\n\r\nroomSheet_rowsListGrps_perType = get_DataOnGrpsAtSheet(allCatSheets[0], \"Standard Type\", \"H_\")\r\nroomSheet_rowsDictGrps_perType = cvt_rowsListGrps_toDictGrps(*roomSheet_rowsListGrps_perType,\"0.Room\")\r\nroom_stdWMdicts = find_stdWMdicts_forCat(deepcopy(roomSheet_rowsDictGrps_perType))\r\nroom_stdWMdicts_stdTypeName = form_TypeDict(room_stdWMdicts, \"Standard Type\",sttIdx=0)\r\n\r\nroom_appliedTypeDicts = find_appliedTypeDicts_forRoom(roomSheet_rowsDictGrps_perType)\r\nroom_appliedTypeDicts_noDupl = merge_sameFamType_wmSpecs(room_appliedTypeDicts)\r\n\r\nroom_appliedTypeDicts_withStdWm = list(chain(*inject_stdWMtoAppliedTypeDicts(room_appliedTypeDicts_noDupl, room_stdWMdicts_stdTypeName)))\r\n\r\n# 룸 제외 모든 카테고리 시트 처리\r\nallCatSheet_rowsListGrps = map( lambda x: get_DataOnGrpsAtSheet(x, \"Standard Type\", \"H_\"), allCatSheets[1:] )\r\nallCatSheet_rowsListGrps_namesPair = list(zip(allCatSheet_rowsListGrps, allCatSheetsNames_noRoom))\r\nallCatSheet_rowsDictGrps = map( lambda x: cvt_rowsListGrps_toDictGrps(*x[0],x[1]), allCatSheet_rowsListGrps_namesPair )\r\n\r\n# \"Standard Type\" 별 wm 공통항목 찾기\r\nallCat_stdWMdicts = list(map( lambda x: find_stdWMdicts_forCat(x), deepcopy(allCatSheet_rowsDictGrps) ))\r\n# \"Standard Type\" 명으로 검색할 수 있는, 전 카테고리 \"Standard Type\" 별 공통 WM항목 사전 만들기\r\nallCat_stdWMdicts_stdTypeName = dictsMerge(list(map(lambda x: form_TypeDict(x, \"Standard Type\",sttIdx=0), allCat_stdWMdicts)))\r\n\r\nallCat_appliedTypeDicts = map( lambda x: find_appliedTypeDicts_forCat(x), allCatSheet_rowsDictGrps )\r\nallCat_appliedTypeDicts_noDupl = map( lambda x: merge_sameFamType_wmSpecs(x), allCat_appliedTypeDicts )\r\n\r\nallCat_appliedTypeDicts_withStdWm = list(chain(*chain(*map( lambda x: inject_stdWMtoAppliedTypeDicts(x,allCat_stdWMdicts_stdTypeName), allCat_appliedTypeDicts_noDupl ))))\r\n\r\ntotal_appliedTypeDicts = room_appliedTypeDicts_withStdWm + allCat_appliedTypeDicts_withStdWm\r\nFamTypeDicts_symValPair = updateFamTypeDicts_symValPair(total_appliedTypeDicts,calcTypeDict_symValPair)\r\n\r\nallUsedFamTypeNames_Excel = FamTypeDicts_symValPair.keys()\r\nallElemsFiltered_byExcel = list(map(lambda y: y[1], list(filter(lambda x: x[0] in allUsedFamTypeNames_Excel , allElemsSet))))\r\n\r\nallElemsDict = update_sym_valDict(matchWith_Elem_Dict(FamTypeDicts_symValPair, allElemsFiltered_byExcel))\r\n# Assign your output to the OUT variable.\r\n\r\nOUT = allElemsDict, FamTypeDicts_symValPair, calcTypeDict_symValPair",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "58daf06df9104b8391f520ccf481f57c",
      "Inputs": [
        {
          "Id": "2888ab33721743e0ae13ac4434a4ee07",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb94bf70f0614392ae1e8118670b81ff",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "579f82985caf400d9840f56d3770c28b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6382d910bd1e4e2db78a241eabf57a5d",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "697161a7bcd34473ad070e70e6c47d79",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "09ff3023bbe14c029ffa457f54a1e8b2",
      "Inputs": [
        {
          "Id": "2a68d04b2d3f4143aee9cd81a4729012",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66dd7d6dd4ee4e8a8efcd2878561afac",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 264,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "26fa4d44e5a24cbe8ad3c672e5ee6472",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bde137e8f8ff4e4ba2046e44a5fba330",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "51ff3d4e470a415b9a466dc2ee7c3d35",
      "Inputs": [
        {
          "Id": "8728c90e6df84acfa987dfed69e494b7",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bf1b2f5c86e942c29007b1f17d37f6d8",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "dca2510d212b40df9fb10db4764ee024",
      "Inputs": [
        {
          "Id": "142180ec72904146988fd756eeb7ec7e",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30d82c366926459d88bb0a2ca137b141",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.Type@var",
      "Id": "381b6816a63c4ad9a5812d7dbfa63c6b",
      "Inputs": [
        {
          "Id": "8551cd95da79494a9e6465fb90f2305f",
          "Name": "object",
          "Description": "Object to query type\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "33ce989dd6f242329f8f1a93d078ccbd",
          "Name": "string",
          "Description": "Type of object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the type of object represented as string.\n\nObject.Type (object: var): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i!=\"Revit.Elements.DirectShape\";",
      "Id": "5276025f67d248ca845e0814b23777de",
      "Inputs": [
        {
          "Id": "7eadf25c17824811a5d53c0cced1aeed",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df152cbc55304f3b884874f607d619f4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "6bd3a0bdd7074b6fbd12d7f3473b3923",
      "Inputs": [
        {
          "Id": "b5b57ba18a744048940a75a3318edd9c",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f2f47ac2e88440fe8f83bc5b1ba6c0df",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7386be5203154c60a1e39c5fd606c32b",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "142effdde45541e293f60e34fa2d08d9",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "34304384d8ce43078bbb9bb72827b8f5",
      "Inputs": [
        {
          "Id": "a17de4c2b7d24a09b60c96be8f1f4367",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9d145eba8e4475a90b2c565372699e5",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.TakeItems@var[]..[],int",
      "Id": "3d0d1d58a3aa4fb8a8020afd566ffde4",
      "Inputs": [
        {
          "Id": "8d0328a11fd1449fab1fe9fada228e77",
          "Name": "list",
          "Description": "List to take from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a8949e5f1c614f97b480bdc60af64410",
          "Name": "amount",
          "Description": "Amount of items to take. If negative, items are taken from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a797fe6d3cc4cd58aeccb22f2360874",
          "Name": "list",
          "Description": "List of extracted items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Fetches an amount of items from the start of the list.\n\nList.TakeItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-14;",
      "Id": "802142866fa84f43aa506326e882f0a5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c10e969a237d467bbf6c0b29f7a56d0a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Range, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "76604e671a6049e6acf093fb818987bf",
      "Inputs": [
        {
          "Id": "a120ec997e1240d9b44748e5742b31a4",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b9668ea322a24115b2486a25f5414cb7",
          "Name": "end",
          "Description": "Number or letter to end the sequence at\r\nDefault value: 9",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "27eab817eee649a58ffb81098d12d80e",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9aaa90ed3ff64f1081fcaed29a0625ca",
          "Name": "list",
          "Description": "New list of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers or letters in the specified range."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "749675edd80c458ca4a22f0dbd0c4054",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1bf30d20ca7d4e57b5ae25e8b3d34d80",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "93c4572a98bc4ae8a9868f31a5b20fc2",
      "Inputs": [
        {
          "Id": "acf6e840f5ee454c8d273f42836300c3",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "77b710a75f6f40739bd3f40bec1c9e9a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "105635819aaf47ea95f22c53f28cb9f5",
      "Inputs": [
        {
          "Id": "1d6cfa74e55f4e97bc84cd321cf66286",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "f2981ec1682245a19f39f7d5590a4e23",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "077870de2e5a4d729f16fe36a0413b60",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "fd6d46aa8b2640a58c664998dff9de9f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "af820fdbfa564f60ab29453b16390b4d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ntgtStr = IN[0]\r\nhdrs_list_sheets = IN[1]\r\n# Place your code below this line\r\n\r\ndef find_tgtColIdx(tgtStr, hdrs_list_sheets):\r\n    res = []\r\n    for hdrs_list in hdrs_list_sheets:\r\n        if hdrs_list[0]!=\"NO\":\r\n            col_idx = hdrs_list.index(tgtStr)\r\n        else:\r\n            col_idx = hdrs_list.index(tgtStr)+1\r\n        res.append(col_idx)\r\n    return res\r\n# Assign your output to the OUT variable.\r\nOUT = find_tgtColIdx(tgtStr, hdrs_list_sheets)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "53ef45e8cc6e40399b858183a5b26160",
      "Inputs": [
        {
          "Id": "61b5977ea8d7495ca9291e656b242d91",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86ff6e829c324f5ba71898eba14cd814",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e71d4402929549c6968c271766f73218",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Quantity\";",
      "Id": "e949624b70d341a7892f9abf4aff4ede",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6605df4d78434736b7b17a34a4723d60",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "162005bfdcfb4100aa4a3ad1714fe5a0",
      "Inputs": [
        {
          "Id": "e12a8c4f95104beba45f31f130837c68",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0492e26ac02347c196d2e70a2840891c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 246,
      "SelectedString": "OST_EdgeSlab",
      "NodeType": "ExtensionNode",
      "Id": "0c927f7650f444ecb5b45187c926735c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a9053c19ac1a48a78e73faf35a332a3c",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "8fb5ae44edc4450d8c7668ed9e1f96b1",
      "Inputs": [
        {
          "Id": "79f379b6f65e433994515fec63a7bf77",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b69d3b8373c4da8894964b999d1b252",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "19c282569a234b8a9ef8c91c03f7419c",
      "Inputs": [
        {
          "Id": "1c64374f51c741dca67094bf641d7890",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98f74cb4eb434c2db15a844929eac4ec",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "11e415810ae64cef9bf915f7f07468c8",
      "Inputs": [
        {
          "Id": "2c29681eae464a4782e43fe969ed3be3",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "166b2b154a444047b8da2cff84565f0f",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 488,
      "SelectedString": "OST_Gutter",
      "NodeType": "ExtensionNode",
      "Id": "2b5b0248077241b88de1e94704caab82",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fbfa2120023343d2a7e57ce917d47e3a",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "ef2856efd91d4cdfa5c6731fc0e3a350",
      "Inputs": [
        {
          "Id": "fc6e7c8d184949139064461a9aa8f600",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cf4d8400d7447daa992836632717df4",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "3a741e5c93af45bf8eaadb3aa04b8f49",
      "Inputs": [
        {
          "Id": "31fee54ae74f49c9a7b78648c5fe6bf9",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88fde7de93994df7910f9c8bd2389a49",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"Family Type Name\"];",
      "Id": "4b26771373494af2ab6596ac227b0531",
      "Inputs": [
        {
          "Id": "33c497eed8a04ad39e87b60bcdfe8a1e",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "755dc9477c95488fb15075e63cd6b6de",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "온통터파기",
          "Item": "온통터파기"
        },
        {
          "Name": "개별터파기",
          "Item": "개별터파기"
        }
      ],
      "SelectedIndex": 1,
      "SelectedString": "개별터파기",
      "NodeType": "ExtensionNode",
      "Id": "bbbc75a0c0604f1280f428ef65ce021e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a170399ef4c4fcabc30a2fbb1608530",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "earthmode;",
      "Id": "02380328b0274c2f9edfe4a8c1ea15f8",
      "Inputs": [
        {
          "Id": "f8f0e458be4543f7afd8cc815ae3ed63",
          "Name": "earthmode",
          "Description": "earthmode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266f688232474bea88168f12619b67fd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "execMode;",
      "Id": "b062fa79e826460ea060fa7689bda688",
      "Inputs": [
        {
          "Id": "7d46bcb3363545d48d1602b02b61ee54",
          "Name": "execMode",
          "Description": "execMode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "deff8fc117cb4aac8dba229131a1b081",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport Revit\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncalcMode = IN[0]\r\nexcaMode = IN[1]\r\nelemDicts = IN[2]\r\nearth_CommonInfoDict = IN[3]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\nLD = earth_CommonInfoDict[\"LD\"]\r\nGL = Revit.Elements.Coordinates.BasePoint().Z - LD * 1000\r\n\r\nGWL = earth_CommonInfoDict[\"GWL\"] * 1000\r\nGWLplane = Plane.ByOriginNormal(Point.ByCoordinates(0,0,GWL), Vector.ByCoordinates(0,0,1))\r\n\r\ndef find_belowSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n\r\ndef find_belowSrf_complex(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        #map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef find_aboveSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef add_defaultEarthInfo(elemDict, GWL, GL):\r\n    elem = elemDict[\"Elem\"]\r\n    if \"_ExcaTgt\" in elemDict[\"wms\"][\"Family Type Name\"]:\r\n        btmSrfs = find_belowSrf_complex(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    else:\r\n        btmSrfs = find_belowSrf_simple(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    uprSrfs = find_aboveSrf_simple(elem)\r\n    uprSrfs = uprSrfs if uprSrfs else []\r\n    \r\n    btmZ = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, btmSrfs))\\\r\n                        if btmSrfs else [0] )\r\n    uprZ = max( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, uprSrfs))\\\r\n                        if uprSrfs else [0] )\r\n    \r\n    btmArea = sum(list(map(lambda x: x.Area, btmSrfs)))\r\n    elem_Volume = btmArea * abs(uprZ - btmZ)\r\n    Btm_toGWL_volume = btmArea * ( GWL - btmZ ) / 1000000000\r\n    GWL_toGL_volume = btmArea * ( GL - GWL ) / 1000000000\r\n    Btm_toGL_volume = btmArea * ( GL - btmZ ) / 1000000000\r\n    \r\n    res = {\r\n        \"isExca\": False,\r\n        \"btmSrfs\": btmSrfs,\r\n        \"uprSrfs\": uprSrfs,\r\n        \"btmArea\": btmArea,\r\n        \"btmZ\": btmZ,\r\n        \"uprZ\": uprZ,\r\n        \"elem_Volume\": elem_Volume,\r\n        \"Btm_toGWL_volume\": Btm_toGWL_volume\\\r\n                            if Btm_toGWL_volume > 0 else 0 ,\r\n        \"GWL_toGL_volume\": GWL_toGL_volume\\\r\n                            if GWL_toGL_volume > 0 else 0 ,\r\n        \"Btm_toGL_volume\": Btm_toGL_volume\\\r\n                            if Btm_toGL_volume > 0 else 0 ,\r\n    }\r\n    \r\n    \r\n    elemDict[\"earthInfo\"] = res\r\n    return elemDict\r\n\r\ndef filter_EarthworkCalcTarget(elemDicts, GWL, GL):\r\n    ruleCondition = lambda x:\\\r\n        \"H1_\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_W\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_Wall\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B01\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_UG RC Slab\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ext Wall_RC_UG_Pit\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_TG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_SOG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_EQ-Pad\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Edge\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Suspend\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S15_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Stoop\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ramp\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"_ExcaTgt\" in x[\"wms\"][\"Family Type Name\"]\r\n    res = go(\r\n        elemDicts,\r\n        filter(lambda x: ruleCondition(x)),\r\n        map( lambda x: add_defaultEarthInfo(x, GWL, GL) ),\r\n        list,\r\n    )\r\n    remain = go(\r\n        elemDicts,\r\n        filter(lambda x: not ruleCondition(x)),\r\n        list,\r\n    )\r\n    return res, remain\r\n\r\n\r\ndef filter_ExcaTarget(earthworkCalcTargets):\r\n    res = go(\r\n        earthworkCalcTargets,\r\n        filter(lambda x:\r\n            \"B08_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n            \"S15_UG\" not in x[\"wms\"][\"Family Type Name\"]\r\n        ),\r\n        list,\r\n    )\r\n    for x in res:\r\n        x[\"earthInfo\"][\"isExca\"] = True\r\n    return res\r\n\r\ndef find_eachExcaShape(elemDict, GWL, GL, LD):\r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    btm_GL_Z = elemDict[\"earthInfo\"][\"btmZ\"]\r\n    G = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"G\"]\r\n    GL_FL_gap = LD\r\n    leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    excaHeight = -btm_GL_Z + base_downHeight\r\n    leanOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"] * 1000\r\n    excaOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"] * 1000\r\n    belowOffset = leanOffset + excaOffset\r\n    upperOffset = G * excaHeight\r\n    \r\n    find_belowRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    find_upperRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -btm_GL_Z),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    belowRefs = list(map(find_belowRef, belowSrfs))\r\n    upperRefs = list(map(find_upperRef, belowSrfs))\r\n    exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n    exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n    \r\n    return exca_Shape\r\n\r\ndef find_unionExcaShape(excaTargets, GWL, GL, LD):\r\n    excaSolids = []\r\n    for elemDict in excaTargets:\r\n        try:\r\n            excaSolids.append( find_eachExcaShape(elemDict, GWL, GL, LD) )\r\n        except:\r\n            pass\r\n    return Solid.ByUnion(excaSolids)\r\n    \r\ndef find_disposalShape(elemDict):\r\n    elemDisposal_shape = Solid.ByUnion(list(elemDict[\"Elem\"].Geometry()))\r\n    \r\n    leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    \r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    offset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"]*1000\\\r\n                + (elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"]/2) *1000\r\n    \r\n    find_nonElemDisposal_belowRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    find_nonElemDisposal_upperRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n\r\n    nonElemDisposal_belowRefs = list(map(find_nonElemDisposal_belowRefs, belowSrfs))\r\n    nonElemDisposal_upperRefs = list(map(find_nonElemDisposal_upperRefs, belowSrfs))\r\n    nonElemDisposal_RefGroups = list(zip(nonElemDisposal_belowRefs,nonElemDisposal_upperRefs))\r\n    nonElemDisposal_Shape = Solid.ByUnion( map(Solid.ByLoft, nonElemDisposal_RefGroups) )\r\n    disposal_shape = Solid.ByUnion( [elemDisposal_shape, nonElemDisposal_Shape] )\r\n    \r\n    return disposal_shape\r\n\r\ndef find_unionDisposalShape(earthCalcTargets):\r\n    disposal_Solids = []\r\n    for elemDict in earthCalcTargets:\r\n        try:\r\n            disposal_Solids.append( find_disposalShape(elemDict) )\r\n        except:\r\n            pass\r\n    return Solid.ByUnion(disposal_Solids)\r\n    \r\ndef add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape):\r\n    whole_disposalShape_volume = unionDisposalShape.Volume\r\n    whole_backfillShape_volume = unionBackfillShape.Volume\r\n    target = earthCalcTargets\r\n    \r\n    total_toGLvolume = go(\r\n        target,\r\n        map(lambda x: x[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    \r\n    def find_asignedQty_elemDict(d, wholeVolume):\r\n        res = go(\r\n            d,\r\n            lambda x: (x[\"earthInfo\"][\"Btm_toGL_volume\"] / total_toGLvolume) * wholeVolume,\r\n            lambda x: x / 1000000000,\r\n        )\r\n        return res\r\n     \r\n    res = go(\r\n        target,\r\n        map( lambda x: \r\n            dict( x, **{\"earthQty\": {\r\n                                        \"disposal\": find_asignedQty_elemDict(x, whole_disposalShape_volume),\r\n                                        \"backfill\": find_asignedQty_elemDict(x, whole_backfillShape_volume),\r\n                                    }} ) \r\n        ),\r\n        list,\r\n    )\r\n    return res\r\n    \r\ndef add_above_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_inter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] < x[\"earthInfo\"][\"elem_Volume\"]\r\n    cond_above_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] == 0\r\n    cond_below_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] >= x[\"earthInfo\"][\"elem_Volume\"]\r\n    \r\n    total_Btm_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_above_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_GWL_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_inter_GWL(elemDict) or cond_below_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"GWL_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGL_volume + total_GWL_toGL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_inter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"GWL_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        elif elemDict[\"earthInfo\"][\"isExca\"] and cond_above_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"Btm_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_above\"] = 0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\ndef add_below_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_belowOrInter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0\r\n    \r\n    total_Btm_toGWL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_belowOrInter_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGWL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_belowOrInter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_below\"] = exca_below_total_volume/1000000000 * (elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"] / total_ref_volume)\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_below\"] = 0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\n\r\nearthCalcTargets, remainElemDicts = filter_EarthworkCalcTarget(elemDicts, GWL, GL)\r\nexcaTargets = filter_ExcaTarget(earthCalcTargets)\r\nunionExcaShape = find_unionExcaShape(excaTargets, GWL, GL, LD)\r\nunionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\nunionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\nunionBackfillShape_volume = unionBackfillShape.Volume\r\nunionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\nunionDisposalShape_volume = unionDisposalShape.Volume\r\nabove_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n\r\nearthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n\r\nearthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\nearthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = earthCalcTargets\r\n#OUT = unionExcaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape.Volume/1000000000, below_GWL_excaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape, below_GWL_excaShape\r\n#OUT = unionDisposalShape_volume/1000000000, unionBackfillShape_volume/1000000000\r\n#OUT = earthCalcTargets_calcFinshed, []\r\nOUT = earthCalcTargets_calcFinshed + remainElemDicts",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "59658e88675c417481ca86fc0e7fabfc",
      "Inputs": [
        {
          "Id": "f7a184165f9340c5969916c4879bc505",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b73bca98f6f24c9ba7c48dd87740d16f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f04b36337144216b24391799f5d9f67",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c1176d5e778470bac07b9dc985e3f13",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "41c1af775e1d4a5ca7cd4e28b001813c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2];",
      "Id": "eba507fa5e304e17a67d7d065190e864",
      "Inputs": [
        {
          "Id": "a763b442c02444f8bc7202390ea47e1c",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5086f1812eb44b68edebbbf88c946dc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"SF-Q0\"];",
      "Id": "b7dee80ea3b942a79ce2fadd8e03184f",
      "Inputs": [
        {
          "Id": "fed53e3f50cd4ae89d7b9f8471c6de91",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5be1ab36fd8343159f67ec6c3112c04d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0..15];",
      "Id": "36f68bd0bd234e679de0f8de00130b10",
      "Inputs": [
        {
          "Id": "3846085d31c2464b949611be95d7026b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7f74eff3213c444c8c7809e5d204f3db",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2..16];",
      "Id": "c03a0584b9e44b6b9ac103682ccacdb7",
      "Inputs": [
        {
          "Id": "e010345f3973402c89afdfbb3d58471d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7d25fc8a232b48bf91d08ad3e080c6c0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[16];",
      "Id": "62cb4c6f9acc4dffa6e05938fb412ba1",
      "Inputs": [
        {
          "Id": "4e3b56adf6304349b8117bf163463cf1",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "393a7123682b430cbeffc89426e3772c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\"\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n\r\nimport re\r\nfrom functools import partial\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\n\r\nmanualSheet = IN[1]\r\n\r\n\r\n#wmspec_headers = [\r\n#    \"Work Master Code\" ,\"GaugeCode\" ,\"Unit\" ,\"Work Category-L1\"\r\n#    ,\"Work Category-L2\" ,\"Work Category-L3\" ,\"Spec. 1- L4\" ,\"Spec. 2- L5\"\r\n#    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\r\n#    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\r\n#    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\r\n#    ,\"Work Master Code /w Description\", \"Description\" ,\"입찰_물량산출식\" ,\"실행_물량산출식\" ,\"rIDX\"\r\n#]\r\n# Place your code below this line\r\n\r\ndef find_IsInStr(target, string):\r\n    if target == None or string == None:\r\n        pass\r\n    else:\r\n        res = str(target) in str(string)\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db)) ##targetTransposedDB (col_idx에 해당하는 데이터만 추출)\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    target_RowNumber = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,target_RowNumber))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb] ## 각 구간별 마지막 행 번호\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,target_RowNumber))\r\n    rangeEndIdxs = endidxs\r\n    result = list(zip(rangeSttIdxs, rangeEndIdxs))\r\n    return result\r\n\r\n    \r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = list(map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1]))))\r\n    \r\n    return dict(headers_sheet)\r\n    #return list(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdxDict, trgt_hdr, trgt_str):\r\n    #hdrs_withIdxDict = dict(hdrs_withIdx)\r\n    return find_range_by_columnItem(sheet, hdrs_withIdxDict[trgt_hdr], trgt_str)\r\n\r\n\r\ndef get_DataOnGrpsAtSheet(sheet:list, discrHDRStr, discrRowStr):\r\n    \"\"\"\r\n    판별기준 Header문자열(discrHDRStr)이 들어있는 열에서,\r\n    판별기준 행 문자열(discrRowStr)이 들어있는 행번호 기준으로 구역을 나누어 데이터 리스트 반환\r\n    \"\"\"\r\n    hdrs_withIdxDict = find_headersAtSheet(sheet)\r\n\r\n    # 시트별 그룹 구분 (시작 행번호, 끝 행 번호 추출)\r\n    rowAreasAtSheet = find_rangesAtSheet(sheet, hdrs_withIdxDict, discrHDRStr, discrRowStr)\r\n    \r\n    # 시트 각행에 rIDX 데이터 주입하는 구간 - (시작) >>>>>>>\r\n    ## 헤더의 칼럼 인덱스 중 가장 큰 것 추출\r\n    hdrs_maxCol_idx = max(list(hdrs_withIdxDict.values()))\r\n    ## 마지막 헤더위치보다 한칸 옆을 행인덱스번호(\"rIDX\") 정보 보관 위치로 설정\r\n    hdrs_withIdxDict[\"rIDX\"] = hdrs_maxCol_idx+1\r\n    ## 시트의 각 행을 번호와 함께 pair 형태로 추출\r\n    sheetWith_rIDX = list(enumerate(sheet))\r\n    ## rIDX 보관된 시트 데이터 저장을 위한 빈 리스트 선언\r\n    sheet_rIDX = []\r\n    ## pair 형태의 각 행에서, 마지막 헤더의 한칸 우측위치에 rIDX 데이터 주입\r\n    ## 시트의 각 행마다 x 라는 이름으로 순회하며,\r\n    for x in sheetWith_rIDX:\r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치보다 클때,\r\n        if len(x[1])-1>hdrs_maxCol_idx:\r\n            #### 마지막 헤더의 우측 칸 위치를 rIDX 데이터로 치환\r\n            x[1][hdrs_maxCol_idx+1] = x[0]\r\n            sheet_rIDX.append(x[1])\r\n            \r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치와 같을때,\r\n        else:\r\n            #### 마지막 헤더의 우측칸이 없으므로 append로 rIDX 데이터 추가\r\n            x[1].append(x[0])\r\n            sheet_rIDX.append(x[1])\r\n    # <<<<< 시트 각행에 rIDX 데이터 주입하는 구간 - (끝)\r\n    \r\n    rowsGrps_perType_withNone = list(map(lambda x: sheet_rIDX[x[0]-1:x[1]], rowAreasAtSheet))\r\n    # None 데이터 치환 구간\r\n    rowsListGrps_perType = go(#>\r\n        rowsGrps_perType_withNone, list,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서\r\n        map(lambda rowGrp: \\\r\n        ## 한 행씩 골라서\r\n        list(map(lambda row: \\\r\n        ## 행을 구성하는 셀 값 중 None이 있으면 빈문자열로 치환\r\n        list(map(lambda cell: \"\" if cell==None else cell, row)), rowGrp)) ),\r\n        ## 맵 객체가 반환되므로 리스트 변환\r\n        list,\r\n    )#<\r\n    \r\n    return (rowsListGrps_perType, hdrs_withIdxDict)\r\n\r\ndef cvt_rowsListGrps_toDictGrps(rowsListGrps_perType, hdrs_withIdxDict, sheetName):\r\n    \"\"\"\r\n    헤더 행과 다수의 컨텐츠 행으로 이루어진 rowListGrps를,\r\n    모든 행을 헤더와 결합된 딕셔너리화 해서 rowDictGrps를 만드는 함수\r\n    \"\"\"\r\n    eff_hdrs_idx = hdrs_withIdxDict.values()\r\n    eff_hdrs_name = hdrs_withIdxDict.keys()\r\n    \r\n    rowsDictGrps_perType = go(#>\r\n        rowsListGrps_perType,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서 한 행 씩 조작하는 함수들을 구상 후\r\n        ## 맵 함수 내에서 go로 합성하여 반복시켜 사용\r\n        map(lambda rowGrp: go(#>>\r\n            ### 그룹 전체 가져와서\r\n            rowGrp,\r\n            ### 각 행을 리스트 타입으로 변환\r\n            map(list), list,\r\n            ### 헤더에 해당하는 행 값을 추출--\r\n            map(lambda row: list(map(lambda idx: row[idx], eff_hdrs_idx))), list,\r\n            ### 헤더이름과 행 내부의 값을 2개씩 짝지어 줌\r\n            map(lambda row: list(zip(eff_hdrs_name, row))), list,\r\n            ### 헤더이름 : 값의 형태로 각 행 데이터를 딕셔너리로 만듬\r\n            map(lambda x: dict(x)),\r\n            ### 딕셔너리 마다 카테고리 정보 추가\r\n            map(lambda x: dictUpdate(x,{\"Family Category\":sheetName})),\r\n            list,\r\n            )#<<\r\n        ), list,\r\n    )#<\r\n    return rowsDictGrps_perType\r\n\r\n# 행딕셔너리 별 입력한 규칙에 따라 참거짓 여부를 반환하는 함수\r\ndef findRow_AppliedType(rowDict, tgtHDRname, rule=None):\r\n    p = re.compile('[0-9]{3,5}')\r\n    target = str(rowDict[tgtHDRname])\r\n    ## 함수 호출시 구분자(rule) 없이 호출한 경우\r\n    ## -Room Category 시트 용 이며 \"Standard Type\" 항목의 값이 000형태의 숫자인지를 판별\r\n    ## -Room Category 중 \"Standard Type\" 칼럼에 룸 넘버, \"Family Type Name\" 칼럼에 룸 이름 입력하게 되어있음\r\n    if rule==None:\r\n        p = re.compile('[0-9]{3,5}')\r\n        m = p.match(target)\r\n        stdCase = target ==\"Room No\"\r\n        res = all([m or stdCase])\r\n    ## 구분자(rule)가 정규표현식 객체로 들어온 경우\r\n    elif isinstance(rule, re.Pattern):\r\n        m = p.match(target)\r\n        res = all([m])\r\n    ## 구분자(rule)가 문자열로 들어온 경우\r\n    else:\r\n        res = rule in target\r\n    return res\r\n\r\ndef find_stdWMdicts_inGrp(rowsDictGrp):\r\n    res = go(\r\n        rowsDictGrp, list,\r\n        ## 엑셀 \"물량산출식\", \"Work Master Code\" 열에 값이 없는 행 제외\r\n        filter(lambda rD: rD[\"입찰_물량산출식\"] != \"\" and rD[\"실행_물량산출식\"] != \"\"),\r\n        filter(lambda rD: rD[\"Work Master Code\"] != \"\"),\r\n        filter(lambda rD: isinstance(rD[\"Work Master Code\"], str)), ### 7/18 오류제보 반영\r\n        ## Family Type Name에 \"H_\" 문자열 포함된 경우 제외\r\n        filter(lambda rD: not findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n        ## 행 딕셔너리의 NO, Standard Type 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictGrp[0][\"NO\"], \"Standard Type\":rowsDictGrp[0][\"Standard Type\"]})),\r\n        ## Q'ty Cal Type Tag 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n        list,\r\n    )\r\n    return res\r\n\r\n\r\ndef find_stdWMdicts_forCat(rowsDictsGrps):\r\n    res = go(#>\r\n        rowsDictsGrps, list,\r\n        map(find_stdWMdicts_inGrp),\r\n        #filter(lambda x: x!=[]),\r\n        list,\r\n    )#<\r\n    return res\r\n\r\ndef find_appliedTypeDicts_forCat(rowsDictsGrps):\r\n    catName = rowsDictsGrps[0][0][\"Family Category\"]\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    #stdWMsDicts = find_stdWMdicts_forCat(rowsDictGrps)\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Family Type Name에 \"H_\" 문자열 포함된 경우만 필터링\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictsGrp[0][\"NO\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            ## 각 딕셔너리마다 카테고리 명 입력\r\n            #map(lambda rD: dictUpdate(rD, {\"Family Category\":catName})),\r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef merge_sameFamType_wmSpecs(appliedTypeDicts):\r\n    def merge_inGrp(appliedTypeDicts_perGrp):\r\n        \"\"\"\r\n        엑셀 타입별 행그룹 내에서 실 적용 패일리명이 들어있는\r\n        행들만 추출하고, 그 중 이름이 같은 것들의 wm 정보는 합쳐서\r\n        하나의 이름에 하나의 딕셔너리 객체만 존재하도록 수정\r\n        \"\"\"\r\n        ## 그룹 내 실 적용 패밀리 타입 명 추출(중복 불허)\r\n        keysPerGrp = go(#>\r\n            appliedTypeDicts_perGrp,\r\n            ## 개별 행딕셔너리의 패밀리 타입 항목 값 추출\r\n            map(lambda rD: rD[\"Family Type Name\"]),\r\n            ## 문자열 내 \"H_\"가 포함되어있는 지 검사\r\n            filter(lambda x: \"H_\" in x),\r\n            ## 중복 Family Type Name 단일화\r\n            set, list,\r\n        )#<\r\n        ## 패밀리 타입 명을 k라는 변수명으로 하나씩 순회\r\n        for k in keysPerGrp:\r\n            ### k라는 패밀리 타입 명에 해당하는 딕셔너리 모두 검색\r\n            sameNameDicts = list(filter(lambda x: x[\"Family Type Name\"] == k, appliedTypeDicts_perGrp))\r\n            ### 하나의 타입명에 복수 객체인지를 검사하여\r\n            ### 2개 이상인 경우\r\n            if len(sameNameDicts)>=2:\r\n                ### 동일 이름의 딕셔너리들 중 첫번째 항목의 \"wmSpecs\"에\r\n                ### 나머지 항목의 wmSpecs 항목을 몰아준다\r\n                for i,rD in enumerate(sameNameDicts[1:]):\r\n                    if rD[\"wmSpecs\"]:\r\n                        sameNameDicts[0][\"wmSpecs\"].append(*rD[\"wmSpecs\"])\r\n                    else: pass\r\n                ### 몰아주기가 끝나면, 첫번째를 제외한 나머지 딕셔너리는\r\n                ### 불필요해지므로 삭제\r\n                appliedTypeDicts_perGrp.remove(sameNameDicts[i+1])\r\n            else:                \r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDicts_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return map(merge_inGrp, appliedTypeDicts)\r\n\r\ndef inject_stdWMtoAppliedTypeDicts(appliedTypeDicts, allCat_stdWMdicts_stdTypeName):\r\n    def inject_inGrp(appliedTypeDict_perGrp):\r\n        \"\"\"\r\n        타입 그룹 별 공통 WM 딕셔너리 항목들을\r\n        실적용패밀리 딕셔너리에 주입하는 함수\r\n        \"\"\"\r\n        ## 실적용패밀리 딕셔너리 리스트의 구성 원소 각각을\r\n        ## rD(rowDictionary) 라는 이름으로 순회\r\n        for rD in appliedTypeDict_perGrp:\r\n            ### rD의 \"Standard Type\" 항목 값이\r\n            ### 입력받은 타입별 공통 WM항목 딕셔너리의 키값중에\r\n            ### 포함되었는지 검사후 있으면,\r\n            if rD[\"Standard Type\"] in list(allCat_stdWMdicts_stdTypeName.keys()):\r\n                #### rD의 \"wmSpecs\" 항목에 공통 WM항목을 추가하여 재할당\r\n                rD[\"wmSpecs\"] = rD[\"wmSpecs\"] + allCat_stdWMdicts_stdTypeName[rD[\"Standard Type\"]]\r\n            else:\r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDict_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return list(map(inject_inGrp, appliedTypeDicts))\r\n\r\ndef matchWith_Elem_Dict(famlist_dic,revitElems):\r\n    \"\"\"\r\n    레빗객체와 패밀리리스트 딕셔너리의 정보를 하나로 결합해주는 용도의 함수\r\n    패밀리리스트 데이터는 패밀리 타입명을 키값으로 하는 하나의 딕셔너리로 정리되어있어야 한다\r\n    revit객체는 패밀리리스트 상 존재하는 타입만 필터링해서 입력해야 함\r\n    \"\"\"\r\n    # 수행결과를 모을 빈 리스트 선언\r\n    res = []\r\n    # 모든 레빗 객체들을 하나씩 순회 \r\n    for i in revitElems:\r\n        ## revit 객체들과 revit 타입별 Family List 딕셔너리를 결합하기 위한 빈 딕셔너리 선언\r\n        combD = {}\r\n        ## 패밀리 타입명 추출 - Room 객체인 경우와 아닌 경우 분기\r\n        if \"Room\" in str(type(i)):\r\n            famTypeName = i.GetParameterValueByName(\"Number\") + \"_\" + i.GetParameterValueByName(\"Name\")\r\n        else:\r\n            famTypeName = i.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\")\r\n        ## 결합용 딕셔너리의 \"Elem\" 이라는 키에 순회 중인 i (revit객체)를 할당\r\n        combD[\"Elem\"] = i\r\n        combD[\"GUID\"] = i.GetParameterValueByName(\"IfcGUID\")\r\n        ## 결합용 딕셔너리의 \"wms\" 이라는 키에 \r\n        ## 순회 중인 i (revit객체) 패밀리 타입 명과 일치하는 famlist_dictionary의 값을 할당\r\n        combD[\"wms\"] = deepcopy(famlist_dic[famTypeName])\r\n        ##결합된 딕셔너리를 res에 저장\r\n        res.append(combD)\r\n    # 전체 수행 결과 반환\r\n    return res\r\n\r\ndef formToElemDictStyle(typeDictsGrps):\r\n    res = []\r\n    for typeDicts in typeDictsGrps:\r\n        tmp = go(\r\n            typeDicts,\r\n            map(lambda x: {\"wms\": x, \"Elem\":\"from_Manual_Input\", \"GUID\": \"from_Manual_Input\"}),\r\n            list,\r\n        )\r\n        res.append(tmp)\r\n    return list(chain(*res))\r\n    \r\nmanualSheet_rowsListGrps = get_DataOnGrpsAtSheet(manualSheet, \"Standard Type\", \"H_\")\r\nmanualSheet_rowsDictGrps = cvt_rowsListGrps_toDictGrps(*manualSheet_rowsListGrps, \"13.Manual_Input\")\r\nmanualSheet_appliedTypeDicts = find_appliedTypeDicts_forCat(manualSheet_rowsDictGrps)\r\nmanualSheet_appliedTypeDicts_noDupl = merge_sameFamType_wmSpecs(manualSheet_appliedTypeDicts)\r\n#appliedTypeDicts_withStdWm = inject_stdWMtoAppliedTypeDicts(manualSheet_appliedTypeDicts_noDupl, {})\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n\r\nOUT = formToElemDictStyle(manualSheet_appliedTypeDicts_noDupl)#, manualSheet_appliedTypeDicts_noDupl#",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "25215db1a0754850946d5b41df97ac26",
      "Inputs": [
        {
          "Id": "2b647c9d6a6d4bb5a57ec0bf81882923",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "92982ea0cf1a46ac9757a3d3253346e8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8871d9005bba4330a3c1ea87912e8cc7",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebde98554221478cbc74de7b003446d3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\n\r\ndef tmp_switchEarthworkFormula(elemDict):\r\n    \r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] in [\"=Exca\", \"=Back\", \"=Disp\"]:\r\n                i[k] = \"_tbd\"\r\n        \r\n    return elemDict\r\n\r\ndef tmp_switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(tmp_switchEarthworkFormula, elemDicts))\r\n\r\ndef switchEarthworkFormula(elemDict):\r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] == \"=Exca\" and \"Above\" in i[\"Spec. 7- L10\"]:\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"exca_above\"]}'\r\n                \r\n            elif i[k] == \"=Exca\" and \"Below\" in i[\"Spec. 7- L10\"]:\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"exca_below\"]}'\r\n                \r\n            elif i[k] == \"=Back\":\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"backfill\"]}'\r\n                \r\n            elif i[k] == \"=Disp\":\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"disposal\"]}'\r\n    \r\n    return elemDict\r\n\r\ndef switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(switchEarthworkFormula, elemDicts))\r\n# Assign your output to the OUT variable.\r\nOUT = switchEarthworkFormula_allDicts(elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ad52ea54ebbc4ba880bd3af3ddbfe30f",
      "Inputs": [
        {
          "Id": "1ba55ffe725344f5a1ec8aad0da51772",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "699ee2afe8ef4100966173c51b9dfeb9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nmanualDicts = IN[0]\r\n# Place your code below this line\r\ndef filter_noFormulaWM(manualDict):\r\n    cond = lambda x:\\\r\n            x[\"입찰_물량산출식\"].startswith(\"=\") or\\\r\n            x[\"실행_물량산출식\"].startswith(\"=\")\r\n    wms = manualDict[\"wms\"]\r\n#    for wm in wms:\r\n    wmSpecs = wms[\"wmSpecs\"]\r\n    filtered_wmSpecs = go(\r\n        wmSpecs,\r\n        filter(lambda x: cond(x) ),\r\n        list,\r\n    )\r\n    wms[\"wmSpecs\"] = filtered_wmSpecs\r\n    manualDict[\"wms\"][\"wmSpecs\"] = filtered_wmSpecs\r\n    return manualDict\r\n\r\ndef filter_noWmSpecs(manualDicts):    \r\n    res = go(\r\n        manualDicts,\r\n        filter(lambda x: len(x[\"wms\"][\"wmSpecs\"]) != 0),\r\n        list,\r\n    )\r\n\r\n    return res\r\n    \r\nfiltered_manualDicts = list(map(filter_noFormulaWM, manualDicts))\r\n# Assign your output to the OUT variable.\r\nOUT = filter_noWmSpecs(filtered_manualDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1e2f686b1ba5486bbfe48489174d2615",
      "Inputs": [
        {
          "Id": "20fdc9d6cd6348c6be8d0c98fba3aeee",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "19e0cbc7ef3f45e082555ef553e9d359",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "f4975d68f4f9463a81f2d1585897e2ee",
      "Inputs": [
        {
          "Id": "b628caffb4f747faa01878005a2625f4",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b2bac42c0dd4bb2b06053c640b2193a",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "269dcbfbc9944c1db3d107abf604ef80",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "912753a782b84f598e120e936fffbd58",
      "End": "ae38fed72c0a434eb235268bfba22c03",
      "Id": "2f9fd4adb6444d8e9c24cd4a536bbbf2",
      "IsHidden": "False"
    },
    {
      "Start": "e4d9d60debe6406cace5eb687f712858",
      "End": "c329e42f144540938189475395a4a425",
      "Id": "c8428eeb2f704586bc201ae53aeab286",
      "IsHidden": "False"
    },
    {
      "Start": "bdc68e6596d64c1bb2ad17af850a8a64",
      "End": "f2b7450af5914cbf8a28c2a092e6a190",
      "Id": "e1261a8d8e0640709812536bf93bfcb4",
      "IsHidden": "False"
    },
    {
      "Start": "07eba95685e249a0a3188444eec253fe",
      "End": "ea90dca9236c4c19a28da5b5f7a76fcf",
      "Id": "2f35c67d27694bfba983f16872746283",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "e4473f11a1094475b798c856c23211f3",
      "Id": "adcf7ca898144a3b8f77115c0a663e7f",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "f83b0c67f2a844eb9671a652aaab5295",
      "Id": "c1289e4cbd494b49bfad0b1226e5752b",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "fe0317db0fe94c9ea9a7ba7a77a0c743",
      "Id": "e38dacbd6643403983be5ac75096ee05",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "4e3b56adf6304349b8117bf163463cf1",
      "Id": "e9b40c558dc54d5a8cd953f7cce33671",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "3846085d31c2464b949611be95d7026b",
      "Id": "2d851a9d4dfb4a9cbd4c12775716e410",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "e010345f3973402c89afdfbb3d58471d",
      "Id": "56b83f454565422e935839b7adaf88e9",
      "IsHidden": "False"
    },
    {
      "Start": "eb3a2510c5934129baf50771f5bb29a9",
      "End": "c4d740fa206e4ab3b53ba148e9727e8f",
      "Id": "0708e80f5c0f475aa73809bfc8d71053",
      "IsHidden": "False"
    },
    {
      "Start": "e3d41cbea388406e9b31fca8184f2a13",
      "End": "8d8f529204cd48a5a2210b85d94be686",
      "Id": "aea2bbf0844a421eac38d674664254a7",
      "IsHidden": "False"
    },
    {
      "Start": "f98969ee45ea4cce8921b553ad57fbc0",
      "End": "da624c3834b64df4a29198439fca082e",
      "Id": "056e91bb2fca4d81af853578b822a2fa",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "8871f8fef5b841e484fe65aa92aecb9c",
      "Id": "fe84dfc1f847481ca88c299d22994b0d",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "579f82985caf400d9840f56d3770c28b",
      "Id": "bb5a8939c9ea462ab2ac40e78b07b605",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "8871d9005bba4330a3c1ea87912e8cc7",
      "Id": "400f8b21b4d0464081067299ba49d28e",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "4c91edd5c0f64789a8ea801df8db525a",
      "Id": "eaf8ac6415c149f094f163068bbbe7b5",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "23fa6cd768304e8ab0e1861056556a3a",
      "Id": "2a0ee7cd60cb4fbcaaecc3b546f0377b",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "919c2a1a395941fc8b371fcef1911806",
      "Id": "ed1ed1aae32a49ab83d75ff0f7b475c8",
      "IsHidden": "False"
    },
    {
      "Start": "89c4346d0ca240129b219859161d732e",
      "End": "0ff046ebd624422dad4be5c1cb3a9e98",
      "Id": "8136914391604a27bd6ad1296c1ed539",
      "IsHidden": "False"
    },
    {
      "Start": "546a1d2d4b4b42559624cd48ac1ea2de",
      "End": "08cf3f9b3e5d43e48be4ee2445de11d1",
      "Id": "1922f426881d4b50b3cb9513bb830c66",
      "IsHidden": "False"
    },
    {
      "Start": "b41720919fd0439ea0dd87f71b67080e",
      "End": "bee976de5cac45d9a7729a1dad8b487d",
      "Id": "4ab732f054a348248517e85be07355a5",
      "IsHidden": "False"
    },
    {
      "Start": "343c269326d242598a644214bc9fd722",
      "End": "6a6cc35c54154c1ba3c9dafdb84fed2e",
      "Id": "132ba31ff01f4917a779a2fcada982e4",
      "IsHidden": "False"
    },
    {
      "Start": "32798e643200441ba50e47158bac8958",
      "End": "f55b93e723644c63be0a0d6b776530c7",
      "Id": "132de1679300477db1a79f60d1db79cf",
      "IsHidden": "False"
    },
    {
      "Start": "32798e643200441ba50e47158bac8958",
      "End": "7d46bcb3363545d48d1602b02b61ee54",
      "Id": "212af49fe8234e75a3247524febf0feb",
      "IsHidden": "False"
    },
    {
      "Start": "33996f8f1fcd4bf0b9b14097a32771e9",
      "End": "2888ab33721743e0ae13ac4434a4ee07",
      "Id": "59ef7623fdbe4a18a3cf9408294d4ff9",
      "IsHidden": "False"
    },
    {
      "Start": "33996f8f1fcd4bf0b9b14097a32771e9",
      "End": "2b647c9d6a6d4bb5a57ec0bf81882923",
      "Id": "045a512370fe4f5b8d6347f2ce68488e",
      "IsHidden": "False"
    },
    {
      "Start": "f93893f04b6a4c9c85bde5f8bbab797f",
      "End": "716ec7c1fc7a49ff8c4026967fa61e48",
      "Id": "a2ce851f53e045c0b3d61540aaf5932e",
      "IsHidden": "False"
    },
    {
      "Start": "99445748c48a43429fd93e846a0127d7",
      "End": "2c29681eae464a4782e43fe969ed3be3",
      "Id": "3b8a5adf8cc743689be571466ede72e2",
      "IsHidden": "False"
    },
    {
      "Start": "e5f978285ed442d8ac531ad320b332b2",
      "End": "af7ef13b3b1746059950d92eded065ea",
      "Id": "3fc9667038d54065897c2fcae9ca7665",
      "IsHidden": "False"
    },
    {
      "Start": "e5f978285ed442d8ac531ad320b332b2",
      "End": "8c051f1489514263a6774f363c24655f",
      "Id": "06f1cb47d7f949cb9d676160ef8ae312",
      "IsHidden": "False"
    },
    {
      "Start": "9f6e66d25b5e47f4b571b338a98618bf",
      "End": "02e0bb5b9d0e457ebd53e48eca839e1d",
      "Id": "8937fe20fbf34ebabcbf516f6cf0b096",
      "IsHidden": "False"
    },
    {
      "Start": "717bd50be2954098b51282b15b78e7d9",
      "End": "fbc42faccac141f58fa4929998b28775",
      "Id": "f68d857491e0484aa06eb1b2f53a4cb9",
      "IsHidden": "False"
    },
    {
      "Start": "687ed700a2884539b98f2064f8168723",
      "End": "c53088847bd74d49bf5b15aaa5f78d10",
      "Id": "41311c7b18ad41488425a3b8f8c75b44",
      "IsHidden": "False"
    },
    {
      "Start": "e1a6f6ac0a0a4b0b93d898295473b351",
      "End": "e3144a79a2174bd690e5e0e2ceea0412",
      "Id": "e8801fb84fb141b98bf1a23d6c0fa257",
      "IsHidden": "False"
    },
    {
      "Start": "b6503815f9eb44e096e0a60fc7f86322",
      "End": "1ba6cfa7d18b452fa667ef6098d7307b",
      "Id": "961f70911673429da946f49de6924319",
      "IsHidden": "False"
    },
    {
      "Start": "ebc7ca6c04b445029ff0a19d1a6f5de8",
      "End": "9f8c0a5ab126467f98568c0448e3ca45",
      "Id": "2a53a42ace5b4a5691441c6a583d9da4",
      "IsHidden": "False"
    },
    {
      "Start": "fb2166294e344de9a7345d4510303c2f",
      "End": "65387579e40c48ea995f066140591a7c",
      "Id": "269dcce2b712454ba6208e94301b876e",
      "IsHidden": "False"
    },
    {
      "Start": "c54455fc6553473e9647aa720b5263e6",
      "End": "6382d910bd1e4e2db78a241eabf57a5d",
      "Id": "bdc425cd18f4499c8d21aaa5f1298091",
      "IsHidden": "False"
    },
    {
      "Start": "cf6ef4699697424eb47c86b542bed47e",
      "End": "6d691c16e28044f88ab671d1b177a7b5",
      "Id": "263ceb1ac80a46068bbfb73b9356db34",
      "IsHidden": "False"
    },
    {
      "Start": "1c58b0d1b47141bea5f51bd2cc0bdf08",
      "End": "52497a4f7e3f4e7b8fd87b74a4f02822",
      "Id": "a858e6b8bf7a4e22b41ea2961982ed82",
      "IsHidden": "False"
    },
    {
      "Start": "34472305116e4a9d8f31063197f01a2b",
      "End": "9796a4ddcf6343969756bfe504eb14bf",
      "Id": "bba73f6e7a054a9d99ed14bd4d553381",
      "IsHidden": "False"
    },
    {
      "Start": "f2aea9c72fae496792d64287a83c2951",
      "End": "4ba52a74ab09432dbc936fb0c846d7af",
      "Id": "0132f396adb343038aebc26b856b05a9",
      "IsHidden": "False"
    },
    {
      "Start": "000346f199e84c0e89036c3238bd2534",
      "End": "314c2fb0bcae46d3800e939a0a61ca19",
      "Id": "a545102212e54d208d2325b2387af156",
      "IsHidden": "False"
    },
    {
      "Start": "a0dd4e8d6e864acfaadcc4003759b07a",
      "End": "c00c4b8eb30046c7998cc0379f1bf9ed",
      "Id": "b1716d1835254c3db9149eab0cc93704",
      "IsHidden": "False"
    },
    {
      "Start": "a86a3be4671e4154b36554dc2a2af2d6",
      "End": "edabcd49e6ea4993b172068d83bbdbee",
      "Id": "c9a7d87b882a4c35af5cecedfcb5eb4c",
      "IsHidden": "False"
    },
    {
      "Start": "761c3da8ff6a43339a6d3b904a049e95",
      "End": "c8a7a0a48b804152912220118b24908f",
      "Id": "1a75bd4b1496446dab550f7cd5b55a87",
      "IsHidden": "False"
    },
    {
      "Start": "7fe767aa2dde4da0a94f539212075db1",
      "End": "33c497eed8a04ad39e87b60bcdfe8a1e",
      "Id": "06f9f0030f0e4281bbae260dd12ae15f",
      "IsHidden": "False"
    },
    {
      "Start": "91cc642301734d1fb1efcf0de961ece3",
      "End": "7f74ea49e8194139a4c9a30fde21778f",
      "Id": "b4634d54f383413282cbc4edb394eb97",
      "IsHidden": "False"
    },
    {
      "Start": "91cc642301734d1fb1efcf0de961ece3",
      "End": "2f04b36337144216b24391799f5d9f67",
      "Id": "dc4b6851c5ea4cc0856961a37f45df77",
      "IsHidden": "False"
    },
    {
      "Start": "697161a7bcd34473ad070e70e6c47d79",
      "End": "2a68d04b2d3f4143aee9cd81a4729012",
      "Id": "2bbbcb1d6cd64dd5b9a38a454f880c60",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "936dcfd3645e4b1991ca7629b12e5d67",
      "Id": "71056b3ed818472aaa7a57c85341e46d",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "1a559a0ef78248deb186ecbf9f48ad78",
      "Id": "394a62e60abb4fcfaa56619981e27b1c",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "a763b442c02444f8bc7202390ea47e1c",
      "Id": "741f18636333415091689d93d0ade392",
      "IsHidden": "False"
    },
    {
      "Start": "bde137e8f8ff4e4ba2046e44a5fba330",
      "End": "8728c90e6df84acfa987dfed69e494b7",
      "Id": "abe9196e0fdb4b698782f144b51a60f8",
      "IsHidden": "False"
    },
    {
      "Start": "bf1b2f5c86e942c29007b1f17d37f6d8",
      "End": "b5b57ba18a744048940a75a3318edd9c",
      "Id": "ebebcdab063a4bc1a17b724fc192f9ec",
      "IsHidden": "False"
    },
    {
      "Start": "bf1b2f5c86e942c29007b1f17d37f6d8",
      "End": "8551cd95da79494a9e6465fb90f2305f",
      "Id": "024754931345457293bca2a179662991",
      "IsHidden": "False"
    },
    {
      "Start": "30d82c366926459d88bb0a2ca137b141",
      "End": "fac716a5b9a34f8296c2dd982c72b3fd",
      "Id": "fb751384165844a58fcd8e186bb2911a",
      "IsHidden": "False"
    },
    {
      "Start": "33ce989dd6f242329f8f1a93d078ccbd",
      "End": "7eadf25c17824811a5d53c0cced1aeed",
      "Id": "62d5bd6a1932420b9fa35c5aa14871f8",
      "IsHidden": "False"
    },
    {
      "Start": "df152cbc55304f3b884874f607d619f4",
      "End": "f2f47ac2e88440fe8f83bc5b1ba6c0df",
      "Id": "8f3ac319873d4c59a7270c6438641172",
      "IsHidden": "False"
    },
    {
      "Start": "7386be5203154c60a1e39c5fd606c32b",
      "End": "142180ec72904146988fd756eeb7ec7e",
      "Id": "a2eae7a04c474d4ab30b9ca5d5d26c9e",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "8d0328a11fd1449fab1fe9fada228e77",
      "Id": "abe1b0c6dea544fe854a3288b727831e",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "b9668ea322a24115b2486a25f5414cb7",
      "Id": "377d6cceccdf4674bc112cc12cf558e1",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "acf6e840f5ee454c8d273f42836300c3",
      "Id": "3c9e33c671c547ec9e6974df86d05f61",
      "IsHidden": "False"
    },
    {
      "Start": "c10e969a237d467bbf6c0b29f7a56d0a",
      "End": "a8949e5f1c614f97b480bdc60af64410",
      "Id": "4f1152db9ade4f38ad91e3e13ee5d694",
      "IsHidden": "False"
    },
    {
      "Start": "1bf30d20ca7d4e57b5ae25e8b3d34d80",
      "End": "a120ec997e1240d9b44748e5742b31a4",
      "Id": "8d2fb8b6e3b04b50a202bd95063b9b66",
      "IsHidden": "False"
    },
    {
      "Start": "077870de2e5a4d729f16fe36a0413b60",
      "End": "86ff6e829c324f5ba71898eba14cd814",
      "Id": "1cf46e5f484f4113989a62d60db2b377",
      "IsHidden": "False"
    },
    {
      "Start": "af820fdbfa564f60ab29453b16390b4d",
      "End": "f2981ec1682245a19f39f7d5590a4e23",
      "Id": "ce02535c9e9248d39b105c55a3693aaa",
      "IsHidden": "False"
    },
    {
      "Start": "e71d4402929549c6968c271766f73218",
      "End": "e12a8c4f95104beba45f31f130837c68",
      "Id": "0f8f37103d3a47d397132b9356190ca7",
      "IsHidden": "False"
    },
    {
      "Start": "6605df4d78434736b7b17a34a4723d60",
      "End": "61b5977ea8d7495ca9291e656b242d91",
      "Id": "9276804ec6324e1c9677a5f7bf5cc934",
      "IsHidden": "False"
    },
    {
      "Start": "a9053c19ac1a48a78e73faf35a332a3c",
      "End": "79f379b6f65e433994515fec63a7bf77",
      "Id": "5b2fb8ea1856496992aa553ad2661d23",
      "IsHidden": "False"
    },
    {
      "Start": "7b69d3b8373c4da8894964b999d1b252",
      "End": "1c64374f51c741dca67094bf641d7890",
      "Id": "11a2439c28cf493095c9e732cc01bf33",
      "IsHidden": "False"
    },
    {
      "Start": "98f74cb4eb434c2db15a844929eac4ec",
      "End": "9825547c3fc14efcaa6e0a83253c082d",
      "Id": "1a109cce5e5b4ae280eb36095029eed1",
      "IsHidden": "False"
    },
    {
      "Start": "166b2b154a444047b8da2cff84565f0f",
      "End": "efbd6851497a4681a114ca7842d95e6a",
      "Id": "b23ad2bd288c49e8a19e0027d26f0968",
      "IsHidden": "False"
    },
    {
      "Start": "fbfa2120023343d2a7e57ce917d47e3a",
      "End": "fc6e7c8d184949139064461a9aa8f600",
      "Id": "68183591fb2647a2abf8cf949f990b0f",
      "IsHidden": "False"
    },
    {
      "Start": "4cf4d8400d7447daa992836632717df4",
      "End": "31fee54ae74f49c9a7b78648c5fe6bf9",
      "Id": "cb9dd8f8b9124a81bb62ac881d1b9ae8",
      "IsHidden": "False"
    },
    {
      "Start": "88fde7de93994df7910f9c8bd2389a49",
      "End": "2d45870ecc9f4742810ae2af861ad07b",
      "Id": "79d941031628450d8c1abb3035d706ec",
      "IsHidden": "False"
    },
    {
      "Start": "3a170399ef4c4fcabc30a2fbb1608530",
      "End": "f8f0e458be4543f7afd8cc815ae3ed63",
      "Id": "b27837d9afb54c9eb0d5ba7eec9dd083",
      "IsHidden": "False"
    },
    {
      "Start": "266f688232474bea88168f12619b67fd",
      "End": "b73bca98f6f24c9ba7c48dd87740d16f",
      "Id": "b1917fce7a73493f84714950932b3a0c",
      "IsHidden": "False"
    },
    {
      "Start": "deff8fc117cb4aac8dba229131a1b081",
      "End": "f7a184165f9340c5969916c4879bc505",
      "Id": "292a865c6c9d425a9f1fe56660fdae90",
      "IsHidden": "False"
    },
    {
      "Start": "41c1af775e1d4a5ca7cd4e28b001813c",
      "End": "1ba55ffe725344f5a1ec8aad0da51772",
      "Id": "248efe33ab824dd693ae184ca8eda234",
      "IsHidden": "False"
    },
    {
      "Start": "41c1af775e1d4a5ca7cd4e28b001813c",
      "End": "adf136f6f97a49d889443ca716141d60",
      "Id": "44b9267d613743c2840a58eb493b4698",
      "IsHidden": "False"
    },
    {
      "Start": "a5086f1812eb44b68edebbbf88c946dc",
      "End": "fed53e3f50cd4ae89d7b9f8471c6de91",
      "Id": "54231e25ec65497996f67ee829db206e",
      "IsHidden": "False"
    },
    {
      "Start": "5be1ab36fd8343159f67ec6c3112c04d",
      "End": "8c1176d5e778470bac07b9dc985e3f13",
      "Id": "1eb3f2ebbdd0491aa02c54b82a7b2c29",
      "IsHidden": "False"
    },
    {
      "Start": "7f74eff3213c444c8c7809e5d204f3db",
      "End": "eb94bf70f0614392ae1e8118670b81ff",
      "Id": "7deb6e9a1dbc4a22920f809067d36d37",
      "IsHidden": "False"
    },
    {
      "Start": "7d25fc8a232b48bf91d08ad3e080c6c0",
      "End": "1d6cfa74e55f4e97bc84cd321cf66286",
      "Id": "55f2f0f2e36c40458140ab8d23999da3",
      "IsHidden": "False"
    },
    {
      "Start": "7d25fc8a232b48bf91d08ad3e080c6c0",
      "End": "a17de4c2b7d24a09b60c96be8f1f4367",
      "Id": "40d0bdca444c40299f9a9c6db7d093c0",
      "IsHidden": "False"
    },
    {
      "Start": "393a7123682b430cbeffc89426e3772c",
      "End": "92982ea0cf1a46ac9757a3d3253346e8",
      "Id": "a2670dae5c0e4a858663ad47aa17b6f2",
      "IsHidden": "False"
    },
    {
      "Start": "ebde98554221478cbc74de7b003446d3",
      "End": "20fdc9d6cd6348c6be8d0c98fba3aeee",
      "Id": "6fe9d384768e4730b61fb2d3f8dbb7f3",
      "IsHidden": "False"
    },
    {
      "Start": "699ee2afe8ef4100966173c51b9dfeb9",
      "End": "b628caffb4f747faa01878005a2625f4",
      "Id": "94256724e7044dfa8857092347ebe1e8",
      "IsHidden": "False"
    },
    {
      "Start": "19e0cbc7ef3f45e082555ef553e9d359",
      "End": "1b2bac42c0dd4bb2b06053c640b2193a",
      "Id": "dc3a4fc7fc72411c9ddf424700c79791",
      "IsHidden": "False"
    },
    {
      "Start": "269dcbfbc9944c1db3d107abf604ef80",
      "End": "51dd00ffd7304563a68c380857a8ce47",
      "Id": "8137fc4028f54a629cfb9dde4c20fc2c",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4(24.06.01)_HGEN PCB_240617_mk.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "51b4738620874fe885b1b5ecce1e49b7"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "MK Jang",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 82369.578125,
      "EyeY": -85538.421875,
      "EyeZ": -72025.09375,
      "LookX": -16728.578125,
      "LookY": 57095.05859375,
      "LookZ": 93078.71875,
      "UpX": 0.12175912410020828,
      "UpY": 0.72537702322006226,
      "UpZ": -0.6774975061416626
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "1250bd18102c4ebaac9950d60dac8849",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8801.4924531477554,
        "Y": 1505.2395926868626
      },
      {
        "Name": "All ElementsExceptRails",
        "ShowGeometry": true,
        "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 1210.2395926868626
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "d78f3dfc768541ab8490b53194e174c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9262.4924531477554,
        "Y": 1505.2395926868626
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 1505.2395926868626
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8091.4924531477554,
        "Y": 1199.2395926868626
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8483.5010906196349,
        "Y": -35.968941941222454
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "caccad700bd84d8e8cb198c7fe1545aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8777.5010906196349,
        "Y": -138.96894194122245
      },
      {
        "Name": "1. Family List 경로 입력",
        "ShowGeometry": true,
        "Id": "51b4738620874fe885b1b5ecce1e49b7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9626.7627039680956,
        "Y": -300.20161153051345
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "76e75c1cd00342eeb418e14c2410b8f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8777.5010906196349,
        "Y": 157.0310580587776
      },
      {
        "Name": "Target Sheet Names",
        "ShowGeometry": true,
        "Id": "64985def907747329221585392bfc414",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9044.279817512097,
        "Y": 33.153044357474528
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "e861b848a856496cbce58b3351868c08",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7081.2967809391,
        "Y": 1489.97930386344
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b8bb7074d1474d5c817d440222fe7c73",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4583.35774767021,
        "Y": 1844.88353866124
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "a6525529e2854c5da74f8737df2462da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4332.77191651146,
        "Y": 1934.55079452346
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3961.69571250695,
        "Y": 1827.50908314071
      },
      {
        "Name": "부재/WM 별 산식에 의한 최종 계산",
        "ShowGeometry": true,
        "Id": "0160cc09c3474815a65506ace3948e4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2277.2307186895491,
        "Y": -1961.2972875307948
      },
      {
        "Name": "토공관련 wm들 물량산출 수식 임시처리구간",
        "ShowGeometry": true,
        "Id": "5ba4a873bf1d434b910b34378934a374",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 1225.6336932552763,
        "Y": -2039.1933675454209
      },
      {
        "Name": "2. 물량산출모드(입찰 / 실행)",
        "ShowGeometry": true,
        "Id": "de4566fde19f484c81cdf869933392fc",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -10191.300605553795,
        "Y": -1872.1473234903997
      },
      {
        "Name": "lang_mode(영/한) select",
        "ShowGeometry": true,
        "Id": "04d37a7ec47d4dbf9637d86f3be06945",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3704.431275328855,
        "Y": -97.319885673487192
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "ba41dd7b1e544c768194fe3c25e74bc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9262.4924531477554,
        "Y": 916.23959268686258
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "4cc98c97ebcc4cf8a37a980c5f62c296",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8801.4924531477554,
        "Y": 916.23959268686258
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "6ede13f036274ae697bc98035846b781",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5810.24569588883,
        "Y": 1908.60165710588
      },
      {
        "Name": "Object.Type",
        "ShowGeometry": true,
        "Id": "6ff0495beeb2499481715807a0f60ef2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6518.24569588883,
        "Y": 1942.42915710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "386656a3778543bc971c0771aa33de2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6216.24569588883,
        "Y": 1942.42915710588
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "285fa2ccb9e64d638e488b5b2f65bfa9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5475.24569588883,
        "Y": 1861.60165710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b97ab952870844e293b85efdee212e50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5810.24569588883,
        "Y": 1751.25665710588
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "90f58a0b10c745428bdf593ba78e6987",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3507.06998550822,
        "Y": 1659.04326477827
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "2fb4a4e82e8549f49f166798b56a76e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3237.83385912968,
        "Y": 1442.63876933357
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "5b581f5432b6436d9aca025a71f1e4bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5475.24569588883,
        "Y": 1683.60165710588
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "7862edc57af74bd8abec15b6d04702c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4488.24569588883,
        "Y": 1659.04326477827
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "35d6d02792f24515ad91bc9d60b105ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4769.24569588883,
        "Y": 1607.42915710588
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "fc7dbf06233e4ce48a0c2a90e4bb3494",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5029.24569588883,
        "Y": 1755.60165710588
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "f2fbd5908bd845fd918324ba4b97cd7e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4769.24569588883,
        "Y": 1755.60165710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fa50df0655ca42419832fc4392e55b87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3940.99563292914,
        "Y": 1659.04326477827
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "a3bfc25f6e9b44cca0b0174014698814",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7627.0206983794124,
        "Y": 767.831220950756
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "511c6cef074d451ca975caef002fe34b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7731.6174678534589,
        "Y": 1228.4680964508518
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e703509cbf3842809e89d16cdb367747",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7931.7147927595852,
        "Y": 639.87995503811476
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9a943402cecb4a248260e65c289f9e35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1280.8098410420612,
        "Y": -2209.295410879733
      },
      {
        "Name": "allElemsDict",
        "ShowGeometry": true,
        "Id": "c438dfb67edb45488157194c6b394ce3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1111.5613189007411,
        "Y": 36.687506257388122
      },
      {
        "Name": "allElemsDict",
        "ShowGeometry": true,
        "Id": "97a2979f91fd486ca41887522d397a97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1503.4738555673412,
        "Y": 37.186116656269121
      },
      {
        "Name": "allTypes",
        "ShowGeometry": true,
        "Id": "63bd58ef9417408daec6de73f083a6cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1482.1994387831112,
        "Y": 220.34434358782511
      },
      {
        "Name": "Excel data dictionarization_3.0.2_new",
        "ShowGeometry": true,
        "Id": "58daf06df9104b8391f520ccf481f57c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2248.0806666215713,
        "Y": -14.25029517066389
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "09ff3023bbe14c029ffa457f54a1e8b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1816.6744698166312,
        "Y": 130.80417872616812
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "26fa4d44e5a24cbe8ad3c672e5ee6472",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -10257.492453147755,
        "Y": 1669.1533426868627
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "51ff3d4e470a415b9a466dc2ee7c3d35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9921.4924531477554,
        "Y": 1669.1533426868627
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "dca2510d212b40df9fb10db4764ee024",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 1652.2395926868626
      },
      {
        "Name": "Object.Type",
        "ShowGeometry": true,
        "Id": "381b6816a63c4ad9a5812d7dbfa63c6b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9564.4924531477554,
        "Y": 1686.0670926868629
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5276025f67d248ca845e0814b23777de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9262.4924531477554,
        "Y": 1686.0670926868629
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "6bd3a0bdd7074b6fbd12d7f3473b3923",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8801.4924531477554,
        "Y": 1652.2395926868626
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "34304384d8ce43078bbb9bb72827b8f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4001.5815147721823,
        "Y": -1146.078447913417
      },
      {
        "Name": "List.TakeItems",
        "ShowGeometry": true,
        "Id": "3d0d1d58a3aa4fb8a8020afd566ffde4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3593.5027730682768,
        "Y": -1143.9692959501197
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "802142866fa84f43aa506326e882f0a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3792.592888982389,
        "Y": -1036.0306464715516
      },
      {
        "Name": "Range",
        "ShowGeometry": true,
        "Id": "76604e671a6049e6acf093fb818987bf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3047.8335699454628,
        "Y": -1178.5702134386129
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "749675edd80c458ca4a22f0dbd0c4054",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3548.4711685702669,
        "Y": -1371.7159127129639
      },
      {
        "Name": "sheet_rowRange",
        "ShowGeometry": true,
        "Id": "93c4572a98bc4ae8a9868f31a5b20fc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2161.0901565233066,
        "Y": -974.27255974008312
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "105635819aaf47ea95f22c53f28cb9f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3887.402858952411,
        "Y": -404.78131171284417
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fd6d46aa8b2640a58c664998dff9de9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4082.2992238009724,
        "Y": -313.51036421923368
      },
      {
        "Name": "find_tgtColIDX",
        "ShowGeometry": true,
        "Id": "53ef45e8cc6e40399b858183a5b26160",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3496.2472961845447,
        "Y": -438.36270630939316
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e949624b70d341a7892f9abf4aff4ede",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3814.7248531785867,
        "Y": -536.27010404532871
      },
      {
        "Name": "시트별 Quantity 열 인덱스",
        "ShowGeometry": true,
        "Id": "162005bfdcfb4100aa4a3ad1714fe5a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2185.17161480613,
        "Y": -645.89130501002546
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "0c927f7650f444ecb5b45187c926735c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9262.4924531477554,
        "Y": 1358.2395926868626
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "8fb5ae44edc4450d8c7668ed9e1f96b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8801.4924531477554,
        "Y": 1358.2395926868626
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "19c282569a234b8a9ef8c91c03f7419c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 1358.2395926868626
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "11e415810ae64cef9bf915f7f07468c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 916.23959268686269
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "2b5b0248077241b88de1e94704caab82",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9262.4924531477554,
        "Y": 1063.2395926868626
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "ef2856efd91d4cdfa5c6731fc0e3a350",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8801.4924531477554,
        "Y": 1063.2395926868626
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "3a741e5c93af45bf8eaadb3aa04b8f49",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8444.4924531477554,
        "Y": 1063.2395926868626
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4b26771373494af2ab6596ac227b0531",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 53.824953830452614,
        "Y": -55.638739488335204
      },
      {
        "Name": "3. 토공산출모드(온통 / 개별)",
        "ShowGeometry": true,
        "Id": "bbbc75a0c0604f1280f428ef65ce021e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -10138.514116117101,
        "Y": -1628.6847068182701
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "02380328b0274c2f9edfe4a8c1ea15f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1237.592094155214,
        "Y": -1513.4782881618196
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b062fa79e826460ea060fa7689bda688",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1240.9814947374009,
        "Y": -1818.0765492924377
      },
      {
        "Name": "토공 계산_1.1.1",
        "ShowGeometry": true,
        "Id": "59658e88675c417481ca86fc0e7fabfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 768.93054305780925,
        "Y": -1958.7018555716074
      },
      {
        "Name": "calcTypeDict_symValPair",
        "ShowGeometry": true,
        "Id": "eba507fa5e304e17a67d7d065190e864",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 120.16345957762587,
        "Y": -1521.9827447707046
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b7dee80ea3b942a79ce2fadd8e03184f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 441.9634816722596,
        "Y": -1618.7342727317061
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "36f68bd0bd234e679de0f8de00130b10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7230.5363266728345,
        "Y": -63.344604019745589
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "c03a0584b9e44b6b9ac103682ccacdb7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5010.0435983478419,
        "Y": -800.45133264723927
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "62cb4c6f9acc4dffa6e05938fb412ba1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4842.6099924403243,
        "Y": 205.71230053705904
      },
      {
        "Name": "Excel data dictionarization_ManualSheet",
        "ShowGeometry": true,
        "Id": "25215db1a0754850946d5b41df97ac26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1518.13634227383,
        "Y": 482.73919558461307
      },
      {
        "Name": "토공관련 wm들 물량산출 수식 처리구간",
        "ShowGeometry": true,
        "Id": "ad52ea54ebbc4ba880bd3af3ddbfe30f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1239.573321327066,
        "Y": -1812.6738869991259
      },
      {
        "Name": "매뉴얼 시트_물량산출 수식 처리구간",
        "ShowGeometry": true,
        "Id": "1e2f686b1ba5486bbfe48489174d2615",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1205.7400683799524,
        "Y": -1271.9199298340391
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "f4975d68f4f9463a81f2d1585897e2ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1765.9208894787048,
        "Y": -1608.3528621261562
      }
    ],
    "Annotations": [
      {
        "Id": "f70bf264fa0749c79027f550865f41ad",
        "Title": "All Elements in Revit",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1250bd18102c4ebaac9950d60dac8849",
          "c790cfc4c7d943cdb05ca3a612d673c4",
          "d78f3dfc768541ab8490b53194e174c5",
          "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
          "bf37a72db0e847dba5e3d1c2ed14c8bd",
          "ba41dd7b1e544c768194fe3c25e74bc2",
          "4cc98c97ebcc4cf8a37a980c5f62c296",
          "26fa4d44e5a24cbe8ad3c672e5ee6472",
          "51ff3d4e470a415b9a466dc2ee7c3d35",
          "381b6816a63c4ad9a5812d7dbfa63c6b",
          "5276025f67d248ca845e0814b23777de",
          "6bd3a0bdd7074b6fbd12d7f3473b3923",
          "dca2510d212b40df9fb10db4764ee024",
          "0c927f7650f444ecb5b45187c926735c",
          "8fb5ae44edc4450d8c7668ed9e1f96b1",
          "19c282569a234b8a9ef8c91c03f7419c",
          "11e415810ae64cef9bf915f7f07468c8",
          "2b5b0248077241b88de1e94704caab82",
          "ef2856efd91d4cdfa5c6731fc0e3a350",
          "3a741e5c93af45bf8eaadb3aa04b8f49"
        ],
        "HasNestedGroups": false,
        "Left": -10267.492453147755,
        "Top": 771.23959268686258,
        "Width": 2338.0,
        "Height": 1048.0,
        "FontSize": 96.0,
        "InitialTop": 916.23959268686258,
        "InitialHeight": 914.82750000000033,
        "TextblockHeight": 135.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "845648042f7a44b3b450cfa23ec8d632",
        "Title": "All Data In Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1eac1f1717ab40c98ea2a8a9b59421d3",
          "caccad700bd84d8e8cb198c7fe1545aa",
          "51b4738620874fe885b1b5ecce1e49b7",
          "76e75c1cd00342eeb418e14c2410b8f4",
          "64985def907747329221585392bfc414"
        ],
        "HasNestedGroups": false,
        "Left": -9636.7627039680956,
        "Top": -445.20161153051345,
        "Width": 1401.2616133484607,
        "Height": 897.354655887988,
        "FontSize": 96.0,
        "InitialTop": -300.20161153051345,
        "InitialHeight": 602.232669589291,
        "TextblockHeight": 135.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "e4fb627520384af3b1eabd7a2ac5343b",
        "Title": "모델링된 모든 객체의 패밀리 타입 명 추출 구간\r\n(Room 객체의 경우 Number 속성값을 합쳐서 이름 추출)",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e861b848a856496cbce58b3351868c08",
          "b8bb7074d1474d5c817d440222fe7c73",
          "a6525529e2854c5da74f8737df2462da",
          "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
          "6ff0495beeb2499481715807a0f60ef2",
          "386656a3778543bc971c0771aa33de2d",
          "6ede13f036274ae697bc98035846b781",
          "285fa2ccb9e64d638e488b5b2f65bfa9",
          "b97ab952870844e293b85efdee212e50",
          "90f58a0b10c745428bdf593ba78e6987",
          "5b581f5432b6436d9aca025a71f1e4bb",
          "7862edc57af74bd8abec15b6d04702c5",
          "fc7dbf06233e4ce48a0c2a90e4bb3494",
          "f2fbd5908bd845fd918324ba4b97cd7e",
          "35d6d02792f24515ad91bc9d60b105ae",
          "fa50df0655ca42419832fc4392e55b87",
          "2fb4a4e82e8549f49f166798b56a76e3"
        ],
        "HasNestedGroups": false,
        "Left": -7091.2967809391,
        "Top": 1182.63876933357,
        "Width": 4023.46292180942,
        "Height": 913.91202518988985,
        "FontSize": 96.0,
        "InitialTop": 1442.63876933357,
        "InitialHeight": 644.79038777230994,
        "TextblockHeight": 250.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "ff2e288062b0459d84507532a4a02ab3",
        "Title": "Excel Dictionarize & 레빗 객체와 결합 딕셔너리 형성 및 심볼 / 값 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "c438dfb67edb45488157194c6b394ce3",
          "97a2979f91fd486ca41887522d397a97",
          "63bd58ef9417408daec6de73f083a6cb",
          "09ff3023bbe14c029ffa457f54a1e8b2",
          "58daf06df9104b8391f520ccf481f57c"
        ],
        "HasNestedGroups": false,
        "Left": -2258.0806666215713,
        "Top": -217.25029517066389,
        "Width": 1517.5193477208302,
        "Height": 569.594638758489,
        "FontSize": 72.0,
        "InitialTop": -14.25029517066389,
        "InitialHeight": 379.594638758489,
        "TextblockHeight": 193.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "0376b0f088d949b99415cbca23865c2c",
        "Title": "Final Calculation",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "0160cc09c3474815a65506ace3948e4f",
          "5ba4a873bf1d434b910b34378934a374",
          "9a943402cecb4a248260e65c289f9e35",
          "ad52ea54ebbc4ba880bd3af3ddbfe30f",
          "b7dee80ea3b942a79ce2fadd8e03184f",
          "59658e88675c417481ca86fc0e7fabfc",
          "eba507fa5e304e17a67d7d065190e864",
          "1e2f686b1ba5486bbfe48489174d2615",
          "f4975d68f4f9463a81f2d1585897e2ee"
        ],
        "HasNestedGroups": false,
        "Left": 110.16345957762587,
        "Top": -2325.295410879733,
        "Width": 2497.0672591119232,
        "Height": 1185.375481045694,
        "FontSize": 72.0,
        "InitialTop": -2209.295410879733,
        "InitialHeight": 1082.375481045694,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "fa255a5ece2346b38f948380ce22e686",
        "Title": "시트별 시작:끝행 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "34304384d8ce43078bbb9bb72827b8f5",
          "3d0d1d58a3aa4fb8a8020afd566ffde4",
          "802142866fa84f43aa506326e882f0a5",
          "76604e671a6049e6acf093fb818987bf",
          "749675edd80c458ca4a22f0dbd0c4054"
        ],
        "HasNestedGroups": false,
        "Left": -4011.5815147721823,
        "Top": -1487.7159127129639,
        "Width": 1151.7479448267195,
        "Height": 583.68526624141236,
        "FontSize": 72.0,
        "InitialTop": -1371.7159127129639,
        "InitialHeight": 480.68526624141236,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "7f76803990c54be9a7e19d32c4544213",
        "Title": "시트별 Quantity 열 인덱스 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "105635819aaf47ea95f22c53f28cb9f5",
          "fd6d46aa8b2640a58c664998dff9de9f",
          "53ef45e8cc6e40399b858183a5b26160",
          "e949624b70d341a7892f9abf4aff4ede"
        ],
        "HasNestedGroups": false,
        "Left": -4092.2992238009724,
        "Top": -739.27010404532871,
        "Width": 788.05192761642775,
        "Height": 557.759739826095,
        "FontSize": 72.0,
        "InitialTop": -536.27010404532871,
        "InitialHeight": 367.75973982609503,
        "TextblockHeight": 193.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "8c76e8b756db447f9838c8079565b37d",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "de4566fde19f484c81cdf869933392fc"
        ],
        "HasNestedGroups": false,
        "Left": -10201.300605553795,
        "Top": -1988.1473234903997,
        "Width": 342.0,
        "Height": 248.0,
        "FontSize": 36.0,
        "InitialTop": -1872.1473234903997,
        "InitialHeight": 145.0,
        "TextblockHeight": 106.0,
        "Background": "#FFFF7BAC"
      }
    ],
    "X": 48.610224810077739,
    "Y": 2351.6996999786761,
    "Zoom": 1.0285475384117313
  }
}