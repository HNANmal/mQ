{
  "Uuid": "d850a1c0-60d4-4dbb-8a03-e78a65e28caa",
  "IsCustomNode": false,
  "Description": "",
  "Name": "산출실습샘플_7주차_배포",
  "ElementResolver": {
    "ResolutionMap": {
      "DesignScript.Builtin.Dictionary": {
        "Key": "DesignScript.Builtin.Dictionary",
        "Value": "DesignScriptBuiltin.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "e5163059d81c496a844e2f0e5a0bf0d6",
      "Inputs": [
        {
          "Id": "aade8920468942bfbd49482419068db6",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6889b12dc2d4e11a683b725f61d07b0",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 610,
      "SelectedString": "OST_StructuralFoundation",
      "NodeType": "ExtensionNode",
      "Id": "85fdbecb419941128554f1a91e6b8982",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f142356b55f147f4926b40a4f9e269da",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "128aa7090676495c830bc9a9f85cd374",
      "Inputs": [
        {
          "Id": "0a24bfa660464b8299da0c6d1726049d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf7ab43be50e41d2888ffb5c8e71bdd3",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c971d304130e4c4bad417a77a776726e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Family and Type\";",
      "Id": "440bb22b3dc74e1abb33a9a872085c8a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3def864482774f828bfb72527e7339ea",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "adf4afb6f2664889ae0bcb3d0e932d7f",
      "Inputs": [
        {
          "Id": "da2a0285072b4315af717c78295f0441",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f19256d0ddb48ee9bd884ae928e6e83",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e83e9953f2c1486bade3081cfa884d36",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type Name\";",
      "Id": "e9633a91eeeb42ee9d9c7f06ec7cf260",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e00b6a9f99748528204eb582ed9e369",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "cde777c0283643a78a113fe4880714a3",
      "Inputs": [
        {
          "Id": "032f726088e648e39d3da612e6d6f8a1",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "962303ad44c5467bb99dd99f10bd1f8e",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "0cafac5b7c20435cb8af4a8fdc391ed3",
      "Inputs": [
        {
          "Id": "4f6f38da2752493ea508db05765a7f83",
          "Name": "keys",
          "Description": "Keys of dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edc2079e826d4e79b775ec1f1ad94a3f",
          "Name": "values",
          "Description": "Values of dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b4b512dd45041248f8eb3902ecd8c80",
          "Name": "dictionary",
          "Description": "Dictionary from keys and values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"A03AD032-00022 Concrete Work Substructure Work Structural Concrete  Cement Type-1 25MPa ≤ F'c (Cylinder Strength) < 30MPa     \",\n\"A03AD037-00002 Concrete Work Substructure Work Rebar Work Deformed Bar (Non-Coat.)  400MPa<Fy≤470MPa     \",\n\"A03AD035-00001 Concrete Work Substructure Work Form Work (3 times in use) Flat Form     Dressed Lumber, Plywood or Steel Form(Wood Planks are not Allowed) incl. Chamfer  \",\n\"A03AH056-00001 Concrete Work Concrete Protective Coating (U/G) Bitumen/Bituminous/Asphalt Coating        \",\n\"A01ZZ001-00012 Earth Work - Excavation Soil, Mech.      Manual Excavation Above GWL \",\n\"A01ZZ001-00013 Earth Work - Excavation Soil, Mech.      Manual Excavation Below GWL \",\n\"A01ZZ003-00001 Earth Work - Backfill Re-use, Soil       \",\n\"A01ZZ004-00001 Earth Work - Disposal Soil       \",\n\"A03AD034-00013 Concrete Work Substructure Work Lean Concrete (including Form work)  Cement Type-1 10MPa ≤ F'c (Cylinder Strength) < 15MPa     \",\n\"A01ZZ012-00002 Earth Work - PE Sheet (Vapor Barrier)        THK ≤ 0.25mm (or 0.01 inch)\",\n\"A01ZZ005-00001 Earth Work - Base Course        THK≤150mm\",\n\"A01ZZ006-00001 Earth Work - Subbase Course      Including Compaction of Sub-Grade  THK≤150mm\"\n];",
      "Id": "85849bb2b01d4860916af753a687d26c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ba19ea9a4e0d4d43a0bb540fa21ce870",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"=V\",\n\"=V*RE\",\n\"=2*(W/1000 + D/1000) * (T/1000)\",\n\"=2*(W/1000 + D/1000) * (T/1000)+2*(W/1000*D/1000)\",\n\"=Exca\",\n\"=Exca\",\n\"=Back\",\n\"=Disp\",\n\"=(W/1000+2*D1)*(D/1000+2*D1) * C1\",\n\"=(W/1000+2*D1)*(D/1000+2*D1)\",\n\"=(W/1000+2*D1)*(D/1000+2*D1)\",\n\"=(W/1000+2*D1)*(D/1000+2*D1)\"\n];",
      "Id": "ab3b552f811d488f89f9e2a3776c034a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "08ac8144be5c4fa9a9f7022664acb3d2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"V\",\n\"A\",\n\"P\",\n\"T\",\n\"H2\"\n];",
      "Id": "03de03734ffb44af8c2d34cb81a80d55",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9bccbefb3c8147038e10a7680104e8a3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"Volume\",\n\"Area\",\n\"Perimeter\",\n\"Thickness\",\n\"Elevation at Bottom\"\n];",
      "Id": "6d8fc3cf653743a49c6e0fd1e50b130c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "890a7c478bd74995a5f1b2d11d988a1e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"C1\",\n\"C2\",\n\"C3\",\n\"C4\",\n\"VCF\",\n\"D1\",\n\"D2\",\n\"GWL\",\n\"LD\",\n\"RE\",\n\"G\"\n];",
      "Id": "4c9ecbdab4ff428f905fb89f8c809536",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e18104252584070bc0e0d388121d329",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n0.1,\n0.00,\n0,\n0,\n1.15,\n0.1,\n0.2,\n-1,\n0.3,\n0.12,\n1\n];",
      "Id": "21dc329087f34308a81db054d3082341",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f7852f076a2f4bd599535929ab183cb1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"workmaster_codes\";",
      "Id": "a3d6b0ff53d2431d974ca8c649b4de55",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "03543b9c74a54dec94ffe189c3a6b853",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n#collector1 = FilteredElementCollector(doc)\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\ncalcMode = IN[0]\r\nelemDicts = IN[1]\r\n\r\n\r\n# Place your code below this line\r\n\r\ndef calcFormula_each_WmSpecs(elemDicts, calcMode):\r\n    calc_key = \"실행_물량산출식\" if calcMode==\"실행\" else \"입찰_물량산출식\"\r\n    \r\n    def calcFormula_dict(d):\r\n        e = d[\"Elem\"]\r\n        wmSpecss = d[\"wms\"][\"wmSpecs\"]\r\n        if \"Post_Sym_Val Dict\" in d[\"wms\"].Keys:\r\n            postSymValDict = d[\"wms\"][\"Post_Sym_Val Dict\"]\r\n            Sym_Vals = list(zip(postSymValDict.Keys, list(map(str, postSymValDict.Values))))\r\n            sortedSym_Vals = sorted(Sym_Vals, key=lambda x: len(x[0]), reverse=True)\r\n            for i in wmSpecss:\r\n                applyFormula = str( i[calc_key] )\r\n                if not applyFormula.startswith('_'):\r\n                    substFormula = applyFormula\r\n                    for x in sortedSym_Vals:\r\n                        substFormula = substFormula.replace(*x)\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ substFormula\r\n                    try:\r\n                        i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n                    except:\r\n                        i[\"Quantity\"] = \"'\"+ substFormula\r\n                else:\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ applyFormula\r\n                    i[\"Quantity\"] = \"\"\r\n        else:\r\n            for i in wmSpecss:\r\n                try:\r\n                    applyFormula = str( i[calc_key] )\r\n                    substFormula = applyFormula\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ substFormula\r\n                    i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n                except:\r\n                    i[\"Quantity\"] = 0\r\n        return d\r\n    res = []\r\n    for d in elemDicts:\r\n        res.append(calcFormula_dict(d))\r\n    \r\n    return res\r\n\r\n\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = calcFormula_each_WmSpecs(elemDicts, calcMode)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6c8e0af59613498fa982b65cc2d464a4",
      "Inputs": [
        {
          "Id": "d9282705c4674ed7b0b62161d5f9c702",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b594f51ea2354edbb6d9ab749cede5cb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3759beddb71c4aba96cf8f3844707efa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "calcMode;",
      "Id": "f72c46781e0e42e098da7494b365304a",
      "Inputs": [
        {
          "Id": "69dac71dea9d4192b0a47af8f21b45be",
          "Name": "calcMode",
          "Description": "calcMode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6aa6deec5370481a897e01a276832a71",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\n\r\ndef tmp_switchEarthworkFormula(elemDict):\r\n    \r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] in [\"=Exca\", \"=Back\", \"=Disp\"]:\r\n                i[k] = \"_tbd\"\r\n        \r\n    return elemDict\r\n\r\ndef tmp_switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(tmp_switchEarthworkFormula, elemDicts))\r\n\r\ndef switchEarthworkFormula(elemDict):\r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] == \"=Exca\" and \"Above\" in i[\"Spec. 7- L10\"]:\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"exca_above\"]}'\r\n                \r\n            elif i[k] == \"=Exca\" and \"Below\" in i[\"Spec. 7- L10\"]:\r\n                try:\r\n                    i[k] = f'= {elemDict[\"earthQty\"][\"exca_below\"]}'\r\n                except:\r\n                    i[k] = f'= 0'\r\n                \r\n            elif i[k] == \"=Back\":\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"backfill\"]}'\r\n                \r\n            elif i[k] == \"=Disp\":\r\n                i[k] = f'= {elemDict[\"earthQty\"][\"disposal\"]}'\r\n    \r\n    return elemDict\r\n\r\ndef switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(switchEarthworkFormula, elemDicts))\r\n# Assign your output to the OUT variable.\r\nOUT = switchEarthworkFormula_allDicts(elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f7668a412eaa47a3842cd21a11fc5662",
      "Inputs": [
        {
          "Id": "4dbeab465d5647a8893b98411efbbded",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "90488a3d11f0443d9625ef34d08ef7ed",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"SF-Q0\"];",
      "Id": "bec4607c6a2b413392afd1adbc35e75b",
      "Inputs": [
        {
          "Id": "f7ab23ee18de47789b0f5fb1c2237ef9",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "005d97c1658c4ab098d7a3959c29fc1c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2];",
      "Id": "3c6ec5510c144ae1a90e6fca8933396a",
      "Inputs": [
        {
          "Id": "3e8893ff483f41aa8df76d3c36d42742",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c310e3fd4f064088818185143c7a3d2b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport Revit\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncalcMode = IN[0]\r\nexcaMode = IN[1]\r\nelemDicts = IN[2]\r\nearth_CommonInfoDict = IN[3]\r\nFL_Z = IN[4]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\nLD = earth_CommonInfoDict[\"LD\"]\r\nBasePoint_Calibration = Revit.Elements.Coordinates.BasePoint().Z\r\n#GL = Revit.Elements.Coordinates.BasePoint().Z - LD * 1000\r\nGL = FL_Z - BasePoint_Calibration - LD * 1000\r\n\r\nGWL_ = earth_CommonInfoDict[\"GWL\"] * 1000\r\n\r\nGWL = earth_CommonInfoDict[\"GWL\"] * 1000# - BasePoint_Calibration\r\n\r\nGWLplane = Plane.ByOriginNormal(Point.ByCoordinates(0,0,GWL_ + BasePoint_Calibration), Vector.ByCoordinates(0,0,1))\r\n\r\ndef find_belowSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n\r\ndef find_belowSrf_complex(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        #map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef find_aboveSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef add_defaultEarthInfo(elemDict, GWL, GL, BasePoint_Calibration):\r\n    elem = elemDict[\"Elem\"]\r\n    if \"_ExcaTgt\" in elemDict[\"wms\"][\"Family Type Name\"]:\r\n        btmSrfs = find_belowSrf_complex(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    else:\r\n        btmSrfs = find_belowSrf_simple(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    uprSrfs = find_aboveSrf_simple(elem)\r\n    uprSrfs = uprSrfs if uprSrfs else []\r\n    \r\n    try:    \r\n        if \"Lean\" not in elemDict[\"wms\"][\"Family Type Name\"]:\r\n            leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n            baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n            subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n            extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n        else:\r\n            leanThk  = 0\r\n            baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n            subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n            extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    except:\r\n        leanThk  = 0\r\n        baseThk = 0\r\n        subBaseThk = 0\r\n        extraThk = 0\r\n        \r\n\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    \r\n    btmZ = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, btmSrfs))\\\r\n                        if btmSrfs else [0] ) - BasePoint_Calibration\r\n    uprZ = max( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, uprSrfs))\\\r\n                        if uprSrfs else [0] ) - BasePoint_Calibration\r\n    \r\n    btmArea = sum(list(map(lambda x: x.Area, btmSrfs)))\r\n    elem_Volume = btmArea * abs(uprZ - btmZ) / 1000000000\r\n    Btm_toGWL_volume = btmArea * ( GWL - (btmZ - base_downHeight) ) / 1000000000\r\n    GWL_toGL_volume = btmArea * ( GL - GWL ) / 1000000000\r\n    Btm_toGL_volume = btmArea * ( GL - (btmZ - base_downHeight) ) / 1000000000\r\n    \r\n    res = {\r\n        \"isExca\": False,\r\n        \"btmSrfs\": btmSrfs,\r\n        \"uprSrfs\": uprSrfs,\r\n        \"btmArea\": btmArea,\r\n        \"btmZ\": btmZ,\r\n        \"uprZ\": uprZ,\r\n        \"elem_Volume\": elem_Volume,\r\n        \"Btm_toGWL_volume\": Btm_toGWL_volume\\\r\n                            if Btm_toGWL_volume > 0 else 0 ,\r\n        \"GWL_toGL_volume\": GWL_toGL_volume\\\r\n                            if GWL_toGL_volume > 0 else 0 ,\r\n        \"Btm_toGL_volume\": Btm_toGL_volume\\\r\n                            if Btm_toGL_volume > 0 else 0 ,\r\n    }\r\n    \r\n    \r\n    elemDict[\"earthInfo\"] = res\r\n    return elemDict\r\n\r\ndef filter_EarthworkCalcTarget(elemDicts, GWL, GL, BasePoint_Calibration):\r\n    ruleCondition = lambda x:\\\r\n        \"H1_\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_Shallow\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_W\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B01_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_Wall\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B01\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_UG RC Slab\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ext Wall_RC_UG_Pit\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_TG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_SOG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Gr\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_EQ-Pad\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Edge\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Suspend\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S15_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Stoop\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ramp\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"_ExcaTgt\" in x[\"wms\"][\"Family Type Name\"]\r\n    res = go(\r\n        elemDicts,\r\n        filter(lambda x: ruleCondition(x)),\r\n        map( lambda x: add_defaultEarthInfo(x, GWL, GL, BasePoint_Calibration) ),\r\n        list,\r\n    )\r\n    remain = go(\r\n        elemDicts,\r\n        filter(lambda x: not ruleCondition(x)),\r\n        list,\r\n    )\r\n    return res, remain\r\n\r\n\r\ndef filter_ExcaTarget(earthworkCalcTargets):\r\n    res = go(\r\n        earthworkCalcTargets,\r\n        filter(lambda x:\r\n            \"B08_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n            \"B02_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n            \"S15_UG\" not in x[\"wms\"][\"Family Type Name\"]\r\n        ),\r\n        list,\r\n    )\r\n    for x in res:\r\n        x[\"earthInfo\"][\"isExca\"] = True\r\n    return res\r\n\r\n\r\ndef find_eachExcaShape(elemDict, GWL, GL, LD, BasePoint_Calibration):\r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    btm_GL_Z = elemDict[\"earthInfo\"][\"btmZ\"]\r\n    G = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"G\"]\r\n    GL_FL_gap = LD\r\n    \r\n    if \"Lean\" not in elemDict[\"wms\"][\"Family Type Name\"]:\r\n        leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    else:\r\n        leanThk  = 0\r\n        \r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    \r\n    if btm_GL_Z < -0.1:\r\n        excaHeight = (-btm_GL_Z + base_downHeight)\r\n    else:\r\n        excaHeight = base_downHeight\r\n        \r\n    leanOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"] * 1000\r\n    excaOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"] * 1000\r\n    belowOffset = leanOffset + excaOffset\r\n    #upperOffset = G * excaHeight\r\n    upperOffset = G * excaHeight + belowOffset\r\n    \r\n    find_belowRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    find_upperRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -btm_GL_Z - LD*1000),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    belowRefs = list(map(find_belowRef, belowSrfs))\r\n    upperRefs = list(map(find_upperRef, belowSrfs))\r\n    exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n    exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n    \r\n    return exca_Shape\r\n\r\ndef find_unionExcaShape(excaTargets, GWL, GL, LD, BasePoint_Calibration):\r\n    excaSolids = []\r\n    for elemDict in excaTargets:\r\n        excaSolids.append( find_eachExcaShape(elemDict, GWL, GL, LD, BasePoint_Calibration) )\r\n        res = Solid.ByUnion(excaSolids)\r\n    return res\r\n    \r\ndef find_unionExcaShape_whole(\r\n        excaTargets, \r\n        GWL, \r\n        GL, \r\n        LD, \r\n        earth_CommonInfoDict, \r\n        BasePoint_Calibration\r\n    ):\r\n    \r\n    allElems = list(map(lambda x: x[\"Elem\"], excaTargets))\r\n    def makeBdCube(e):\r\n        eGeo = e.Geometry()[0]\r\n        eBdBoxCube = BoundingBox.ByGeometry(eGeo).ToCuboid()\r\n        return eBdBoxCube\r\n    \r\n    def find_elemsGeo(allElems):\r\n        #flatten_Elems = list(chain(*excaTargets))\r\n        allGeo = []\r\n        for e in allElems:\r\n            try:\r\n                allGeo.append(makeBdCube(e))\r\n            except:\r\n                pass\r\n        return allGeo\r\n        \r\n    def findWholeBdBox(allElems):\r\n        allGeo = find_elemsGeo(allElems)\r\n        unionBdCube = BoundingBox.ByGeometry(allGeo).ToCuboid()\r\n        return unionBdCube\r\n    \r\n    find_belowRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    find_upperRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -btm_GL_Z - LD*1000),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n\r\n    unionBdCube = findWholeBdBox(allElems)\r\n    belowSrfs = go(\r\n        [unionBdCube],\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    \r\n    btm_GL_Z = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, belowSrfs))\\\r\n                        if belowSrfs else [0] ) - BasePoint_Calibration\r\n\r\n    G = earth_CommonInfoDict[\"G\"]\r\n    GL_FL_gap = LD\r\n    leanThk = earth_CommonInfoDict[\"C1\"] * 1000\r\n    baseThk = earth_CommonInfoDict[\"C2\"] * 1000\r\n    subBaseThk = earth_CommonInfoDict[\"C3\"] * 1000\r\n    extraThk = earth_CommonInfoDict[\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    excaHeight = -btm_GL_Z + base_downHeight\r\n    leanOffset = earth_CommonInfoDict[\"D1\"] * 1000\r\n    excaOffset = earth_CommonInfoDict[\"D2\"] * 1000\r\n    belowOffset = leanOffset + excaOffset\r\n    #upperOffset = G * excaHeight\r\n    upperOffset = G * excaHeight + belowOffset\r\n\r\n    belowRefs = list(map(find_belowRef, belowSrfs))\r\n    upperRefs = list(map(find_upperRef, belowSrfs))\r\n    exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n    exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n    \r\n    return exca_Shape\r\n    \r\ndef find_disposalShape(elemDict):\r\n    elemDisposal_shape = Solid.ByUnion(list(elemDict[\"Elem\"].Geometry()))\r\n    \r\n    leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    \r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    offset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"]*1000\\\r\n                + (elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"]/2) *1000\r\n    \r\n    find_nonElemDisposal_belowRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    find_nonElemDisposal_upperRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n\r\n    nonElemDisposal_belowRefs = list(map(find_nonElemDisposal_belowRefs, belowSrfs))\r\n    nonElemDisposal_upperRefs = list(map(find_nonElemDisposal_upperRefs, belowSrfs))\r\n    nonElemDisposal_RefGroups = list(zip(nonElemDisposal_belowRefs,nonElemDisposal_upperRefs))\r\n    nonElemDisposal_Shape = Solid.ByUnion( map(Solid.ByLoft, nonElemDisposal_RefGroups) )\r\n    disposal_shape = Solid.ByUnion( [elemDisposal_shape, nonElemDisposal_Shape] )\r\n    \r\n    return disposal_shape\r\n\r\ndef find_unionDisposalShape(earthCalcTargets):\r\n    disposal_Solids = []\r\n    for elemDict in earthCalcTargets:\r\n        try:\r\n            disposal_Solids.append( find_disposalShape(elemDict) )\r\n        except:\r\n            pass\r\n    return Solid.ByUnion(disposal_Solids)\r\n    \r\ndef add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape):\r\n    whole_disposalShape_volume = unionDisposalShape.Volume\r\n    whole_backfillShape_volume = unionBackfillShape.Volume\r\n    target = earthCalcTargets\r\n    \r\n    total_toGLvolume = go(\r\n        target,\r\n        map(lambda x: x[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    \r\n    def find_asignedQty_elemDict(d, wholeVolume):\r\n        res = go(\r\n            d,\r\n            lambda x: (x[\"earthInfo\"][\"Btm_toGL_volume\"] / total_toGLvolume) * wholeVolume,\r\n            lambda x: x / 1000000000,\r\n        )\r\n        return res\r\n     \r\n    res = go(\r\n        target,\r\n        map( lambda x: \r\n            dict( x, **{\"earthQty\": {\r\n                                        \"disposal\": find_asignedQty_elemDict(x, whole_disposalShape_volume),\r\n                                        \"backfill\": find_asignedQty_elemDict(x, whole_backfillShape_volume),\r\n                                    }} ) \r\n        ),\r\n        list,\r\n    )\r\n    return res\r\n    \r\ndef add_above_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_inter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] < x[\"earthInfo\"][\"elem_Volume\"]\r\n    cond_above_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] == 0\r\n    cond_below_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] >= x[\"earthInfo\"][\"elem_Volume\"]\r\n    \r\n    total_Btm_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_above_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_GWL_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_inter_GWL(elemDict) or cond_below_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"GWL_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGL_volume + total_GWL_toGL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_inter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"GWL_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        elif elemDict[\"earthInfo\"][\"isExca\"] and cond_above_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"Btm_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_above\"] = 0.0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\ndef add_below_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_belowOrInter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0\r\n    \r\n    total_Btm_toGWL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_belowOrInter_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGWL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_belowOrInter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_below\"] = exca_below_total_volume/1000000000 * (elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"] / total_ref_volume)\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_below\"] = 0.0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\n\r\nearthCalcTargets, remainElemDicts = filter_EarthworkCalcTarget(elemDicts, GWL, GL, BasePoint_Calibration)\r\nexcaTargets = filter_ExcaTarget(earthCalcTargets)\r\n\r\nif excaMode == \"개별터파기\":\r\n    unionExcaShape = find_unionExcaShape(excaTargets, GWL, GL, LD, BasePoint_Calibration)\r\n    unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n    unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n    unionBackfillShape_volume = unionBackfillShape.Volume\r\n    unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n    \r\n    if isinstance(unionExcaShape, list) and len(unionExcaShape) ==2:\r\n        above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n        earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n        earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n        earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n        \r\n        OUT = [earthCalcTargets_calcFinshed + remainElemDicts, unionBackfillShape]\r\n    else:\r\n        above_GWL_excaShape = unionExcaShape\r\n        earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n        earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, above_GWL_excaShape)\r\n        OUT = [earthCalcTargets_aboveExca + remainElemDicts, unionBackfillShape]\r\n    \r\nelif excaMode == \"온통터파기\":\r\n    unionExcaShape = find_unionExcaShape_whole(excaTargets, GWL, GL, LD, earth_CommonInfoDict)\r\n    unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n    unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n    unionBackfillShape_volume = unionBackfillShape.Volume\r\n    unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n    unionDisposalShape_volume = unionDisposalShape.Volume\r\n    \r\n    if isinstance(unionExcaShape, list) and len(unionExcaShape) ==2:\r\n        above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n        earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n        earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n        earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n        \r\n        OUT = [earthCalcTargets_calcFinshed + remainElemDicts, unionBackfillShape]\r\n    else:\r\n        above_GWL_excaShape = unionExcaShape\r\n        earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n        earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, above_GWL_excaShape)\r\n        OUT = [earthCalcTargets_aboveExca + remainElemDicts, unionBackfillShape]\r\n\r\n\r\n#    above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n#    \r\n#    earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n#    \r\n#    earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n#    earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n#    \r\n#    OUT = earthCalcTargets_calcFinshed + remainElemDicts\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = earthCalcTargets\r\n#OUT = unionExcaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape.Volume/1000000000, below_GWL_excaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape, below_GWL_excaShape\r\n#OUT = unionDisposalShape_volume/1000000000, unionBackfillShape_volume/1000000000\r\n#OUT = earthCalcTargets_calcFinshed, []\r\n#OUT = earthCalcTargets_calcFinshed + remainElemDicts",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "30bc18a95e2d41ba98499bf4658d9b72",
      "Inputs": [
        {
          "Id": "8c1115b5636642888f03057ec2d8df73",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fbbf04efb7114fc7bef631b55d9e5b39",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3cb27de2e2d4600a9b1c059a5ca8149",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6c0173b7e32648d8b52d88a271fd22b1",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "96bbf91cc2224861bc34ad2f3f756771",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e515821dd1414b208adb64d6337ac5b6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];\ni[0];",
      "Id": "ac155af8dc95430d83db132a542409f5",
      "Inputs": [
        {
          "Id": "c67594f3a9cc45d29d2e464d260e1e31",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dfa3e79019474fbc91cdc54cb56e4a04",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e340df3981d14731b4c4db6dceb7a8e4",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"입찰\";",
      "Id": "2d32270a7efc46b8b01603aa39476ea8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d1a00d385ca6454e8c10571cf3cb43ec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allFdnElems;",
      "Id": "837a058365b54ba89f938726626e2a7c",
      "Inputs": [
        {
          "Id": "887111a8d32544308184b1122c96af37",
          "Name": "allFdnElems",
          "Description": "allFdnElems",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7056e87dcd124b2ab5dada7e3e6136bd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "d7d0e292b59943e19fdb4fec5928c925",
      "Inputs": [
        {
          "Id": "5ca09047dff64c609196712ce9e68156",
          "Name": "keys",
          "Description": "Keys of dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1cb1590095ff402caa73b2211d1ca258",
          "Name": "values",
          "Description": "Values of dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e0466cbd5b3b478ba10078359ad7182b",
          "Name": "dictionary",
          "Description": "Dictionary from keys and values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\nd[\"C1\"],\nd[\"C2\"],\nd[\"C3\"],\nd[\"C4\"]\n];",
      "Id": "fbec1be90e014361bb2fcd1c03ff3959",
      "Inputs": [
        {
          "Id": "5eccb4679773425a9975fabbba7a7e6e",
          "Name": "d",
          "Description": "d",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f638c8e50f974f38992b4e9a5f4d251d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "579225f9c4544ddb93a31271b5429ff2",
      "Inputs": [
        {
          "Id": "7c80dd22078d49c9af54758181ef5ca4",
          "Name": "values",
          "Description": "Numbers to add to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "37c2553389aa4f18a9fd5ad45f42a313",
          "Name": "double",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "ee7eb09d38ca451d80425a3f5b50df0d",
      "Inputs": [
        {
          "Id": "b5e953ff343b490f92318c415fd73d45",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "193fe805749a44e9ae0051fbd5c3359d",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3f35999e08d46fa84f3ad707c4af95f",
          "Name": "number",
          "Description": "The product of the two input numbers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns multiplication of x times y\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1*1000;",
      "Id": "86d0d851d5a349c19279b4c4457199ec",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bd9fc99a57d54854b28ec80654eb97a1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\nd[\"D1\"],\nd[\"D2\"]\n];",
      "Id": "b9955abcae8942af80978a17476c42d6",
      "Inputs": [
        {
          "Id": "fd8b1e3943394c3883affd0a88904f5f",
          "Name": "d",
          "Description": "d",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ffaeac13561942c6a075b7cb6de9726b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "795f5cf12d5047e9b1879d99459eb88a",
      "Inputs": [
        {
          "Id": "5e34fd78458944089ce12e8fb0c235a5",
          "Name": "values",
          "Description": "Numbers to add to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "177eb4dc702e44b7b0fcadd49a4df9ea",
          "Name": "double",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "52a8711ceeed4437a88cf08fbf6c5328",
      "Inputs": [
        {
          "Id": "7b461421a1c94680b92b13dd9f01a8b5",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f84788b2637e4dbd845076db2d31ea3a",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1dfa692e14ab4a6283100f1500ba6504",
          "Name": "number",
          "Description": "The product of the two input numbers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns multiplication of x times y\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1000;",
      "Id": "8b8112b4e0c04ff69645e34bb66557f9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7fd7935440344ab59b1c266579f42cb4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "1ac1d795befa43da9e0ac9ac9d5ab477",
      "Inputs": [
        {
          "Id": "22bcce6da36f4c389252d492f8f24a89",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3254807ca7e8418994b24f34bc7d5748",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fe34bcdadd6444db82cb0ce5f325ab3",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Elevation at Bottom\";",
      "Id": "59282b31444948069199283db8b9668c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cd3a04345d3a4553b7c96fd10d5381a0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "3c9eff516bb5442982542baff5a8d5ce",
      "Inputs": [
        {
          "Id": "d091cf86154f496392cdb6997800cbec",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "327e0fc21ebe41fd8e37c5d4935409c8",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2cc4becb7f574a9494835464523e4641",
          "Name": "number",
          "Description": "The product of the two input numbers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns multiplication of x times y\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "644a7b41292d43ccb9753c25f3c54cf3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4da2bba8ad994849a6dc1c508578e864",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\nd[\"G\"]\n];",
      "Id": "0e017e713b394e25b62474efc65e3aff",
      "Inputs": [
        {
          "Id": "61ef6c92e1164de596ed5401392e7261",
          "Name": "d",
          "Description": "d",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6dad3563309410cb453780b9ae31d9a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "d6f7c513670b42a485947bf4b7a8ffec",
      "Inputs": [
        {
          "Id": "48f9ba5956504139a1d4871365f0a9c8",
          "Name": "values",
          "Description": "Numbers to add to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21842acb17db41ea8f4f317961e90e31",
          "Name": "double",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "G * H;",
      "Id": "2f1d4cab1e42414c9b2485352b486f9a",
      "Inputs": [
        {
          "Id": "3500f35bffcd490f97033999cf444966",
          "Name": "G",
          "Description": "G",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5c2a25199326429c95739a485ffc52a7",
          "Name": "H",
          "Description": "H",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1ee4057c539b4154a7c3606da8d76920",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "e6889b12dc2d4e11a683b725f61d07b0",
      "End": "0a24bfa660464b8299da0c6d1726049d",
      "Id": "9cf19b2070cd41678a0409f31cbdeab6",
      "IsHidden": "False"
    },
    {
      "Start": "e6889b12dc2d4e11a683b725f61d07b0",
      "End": "887111a8d32544308184b1122c96af37",
      "Id": "a0fb777cf5894e1cb5b80676a1d627cb",
      "IsHidden": "False"
    },
    {
      "Start": "f142356b55f147f4926b40a4f9e269da",
      "End": "aade8920468942bfbd49482419068db6",
      "Id": "15cc224e87984003a8b9afea7dae00b2",
      "IsHidden": "False"
    },
    {
      "Start": "c971d304130e4c4bad417a77a776726e",
      "End": "da2a0285072b4315af717c78295f0441",
      "Id": "4401cfb1b91147c89ffd241fb49973e3",
      "IsHidden": "False"
    },
    {
      "Start": "3def864482774f828bfb72527e7339ea",
      "End": "cf7ab43be50e41d2888ffb5c8e71bdd3",
      "Id": "9fe237dbf15f4550b36e702c0534748b",
      "IsHidden": "False"
    },
    {
      "Start": "e83e9953f2c1486bade3081cfa884d36",
      "End": "032f726088e648e39d3da612e6d6f8a1",
      "Id": "6cfcc955f15c45e09bcdf4ee8dedd175",
      "IsHidden": "False"
    },
    {
      "Start": "8e00b6a9f99748528204eb582ed9e369",
      "End": "2f19256d0ddb48ee9bd884ae928e6e83",
      "Id": "e0a87604f6f249f48d0b670bd125939e",
      "IsHidden": "False"
    },
    {
      "Start": "ba19ea9a4e0d4d43a0bb540fa21ce870",
      "End": "edc2079e826d4e79b775ec1f1ad94a3f",
      "Id": "985f40461048455295d7566d4aa22558",
      "IsHidden": "False"
    },
    {
      "Start": "8e18104252584070bc0e0d388121d329",
      "End": "5ca09047dff64c609196712ce9e68156",
      "Id": "0be82134a0ec4661a4c3a28bb94e4354",
      "IsHidden": "False"
    },
    {
      "Start": "f7852f076a2f4bd599535929ab183cb1",
      "End": "1cb1590095ff402caa73b2211d1ca258",
      "Id": "b226519eb92d4bc4b98928322f5a5412",
      "IsHidden": "False"
    },
    {
      "Start": "03543b9c74a54dec94ffe189c3a6b853",
      "End": "4f6f38da2752493ea508db05765a7f83",
      "Id": "262be3e4e85d4220a516d5ef959dad4a",
      "IsHidden": "False"
    },
    {
      "Start": "6aa6deec5370481a897e01a276832a71",
      "End": "d9282705c4674ed7b0b62161d5f9c702",
      "Id": "26799cc251de4030b8693bb3efd18574",
      "IsHidden": "False"
    },
    {
      "Start": "90488a3d11f0443d9625ef34d08ef7ed",
      "End": "b594f51ea2354edbb6d9ab749cede5cb",
      "Id": "1cf7fee800614e51a548f964b906e7bc",
      "IsHidden": "False"
    },
    {
      "Start": "005d97c1658c4ab098d7a3959c29fc1c",
      "End": "6c0173b7e32648d8b52d88a271fd22b1",
      "Id": "3dbd6f13af2841f48c56fa6ee9d1f02a",
      "IsHidden": "False"
    },
    {
      "Start": "c310e3fd4f064088818185143c7a3d2b",
      "End": "f7ab23ee18de47789b0f5fb1c2237ef9",
      "Id": "cf2242a473014f719956c27d231770dd",
      "IsHidden": "False"
    },
    {
      "Start": "e515821dd1414b208adb64d6337ac5b6",
      "End": "c67594f3a9cc45d29d2e464d260e1e31",
      "Id": "80150ec33aee4fd9879e1eec23b0926b",
      "IsHidden": "False"
    },
    {
      "Start": "e340df3981d14731b4c4db6dceb7a8e4",
      "End": "4dbeab465d5647a8893b98411efbbded",
      "Id": "5765c7c6964c402d89c04b3b1ca3475b",
      "IsHidden": "False"
    },
    {
      "Start": "d1a00d385ca6454e8c10571cf3cb43ec",
      "End": "69dac71dea9d4192b0a47af8f21b45be",
      "Id": "b497c3dc08a04c6389485b904905c4e0",
      "IsHidden": "False"
    },
    {
      "Start": "7056e87dcd124b2ab5dada7e3e6136bd",
      "End": "22bcce6da36f4c389252d492f8f24a89",
      "Id": "fdfffcaebb3e4a359faecf706e8282a0",
      "IsHidden": "False"
    },
    {
      "Start": "e0466cbd5b3b478ba10078359ad7182b",
      "End": "5eccb4679773425a9975fabbba7a7e6e",
      "Id": "09487c800fc54fe782dc4ea2199bb4f6",
      "IsHidden": "False"
    },
    {
      "Start": "e0466cbd5b3b478ba10078359ad7182b",
      "End": "fd8b1e3943394c3883affd0a88904f5f",
      "Id": "789fadd751fd409da2439b764e63207a",
      "IsHidden": "False"
    },
    {
      "Start": "e0466cbd5b3b478ba10078359ad7182b",
      "End": "61ef6c92e1164de596ed5401392e7261",
      "Id": "d913cbb158664716a5c43d8842925c66",
      "IsHidden": "False"
    },
    {
      "Start": "f638c8e50f974f38992b4e9a5f4d251d",
      "End": "7c80dd22078d49c9af54758181ef5ca4",
      "Id": "d0f3b03630cb41d5ac329856ca3319d6",
      "IsHidden": "False"
    },
    {
      "Start": "37c2553389aa4f18a9fd5ad45f42a313",
      "End": "b5e953ff343b490f92318c415fd73d45",
      "Id": "b0ec74bb63564b0da08d4e7074833066",
      "IsHidden": "False"
    },
    {
      "Start": "bd9fc99a57d54854b28ec80654eb97a1",
      "End": "193fe805749a44e9ae0051fbd5c3359d",
      "Id": "39faa454bf6e4f288f47c4f434551831",
      "IsHidden": "False"
    },
    {
      "Start": "ffaeac13561942c6a075b7cb6de9726b",
      "End": "5e34fd78458944089ce12e8fb0c235a5",
      "Id": "a860f48080f1455a88eb8ef59ff58c84",
      "IsHidden": "False"
    },
    {
      "Start": "177eb4dc702e44b7b0fcadd49a4df9ea",
      "End": "7b461421a1c94680b92b13dd9f01a8b5",
      "Id": "9bb0dcdd81e04027909d878c046f864c",
      "IsHidden": "False"
    },
    {
      "Start": "7fd7935440344ab59b1c266579f42cb4",
      "End": "f84788b2637e4dbd845076db2d31ea3a",
      "Id": "91034138e3f945abb63bef86598c8ed0",
      "IsHidden": "False"
    },
    {
      "Start": "0fe34bcdadd6444db82cb0ce5f325ab3",
      "End": "d091cf86154f496392cdb6997800cbec",
      "Id": "595a74941bdb422d932f0ae6553bd1d8",
      "IsHidden": "False"
    },
    {
      "Start": "cd3a04345d3a4553b7c96fd10d5381a0",
      "End": "3254807ca7e8418994b24f34bc7d5748",
      "Id": "a5d56bff7c99453bbdea2ba216a39194",
      "IsHidden": "False"
    },
    {
      "Start": "2cc4becb7f574a9494835464523e4641",
      "End": "5c2a25199326429c95739a485ffc52a7",
      "Id": "f6dbb735155f4bba84faba33423e31d3",
      "IsHidden": "False"
    },
    {
      "Start": "4da2bba8ad994849a6dc1c508578e864",
      "End": "327e0fc21ebe41fd8e37c5d4935409c8",
      "Id": "dbebd8b13aa9477a941df465e5d4242a",
      "IsHidden": "False"
    },
    {
      "Start": "f6dad3563309410cb453780b9ae31d9a",
      "End": "48f9ba5956504139a1d4871365f0a9c8",
      "Id": "1681778506964a989836f92470cbeb49",
      "IsHidden": "False"
    },
    {
      "Start": "21842acb17db41ea8f4f317961e90e31",
      "End": "3500f35bffcd490f97033999cf444966",
      "Id": "bdc440e1857c48cfb6dabc5d7b654005",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 2442904.5,
      "EyeY": 6137.7841796875,
      "EyeZ": 4320685.0,
      "LookX": 2003.75,
      "LookY": -2689.6953125,
      "LookZ": -5303.5,
      "UpX": 0.079489231109619141,
      "UpY": 0.97437012195587158,
      "UpZ": -0.21043872833251953
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "e5163059d81c496a844e2f0e5a0bf0d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -62.028001991096062,
        "Y": 285.78791569852797
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "85fdbecb419941128554f1a91e6b8982",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -446.02800199109606,
        "Y": 285.78791569852797
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "128aa7090676495c830bc9a9f85cd374",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 700.75192351186047,
        "Y": 282.76567259800737
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "440bb22b3dc74e1abb33a9a872085c8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 331.4783866031753,
        "Y": 397.50137980262451
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "adf4afb6f2664889ae0bcb3d0e932d7f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1504.8703106112962,
        "Y": 284.03397721063544
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e9633a91eeeb42ee9d9c7f06ec7cf260",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1135.5967737026074,
        "Y": 398.76968441525304
      },
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "cde777c0283643a78a113fe4880714a3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1490.324778424193,
        "Y": -765.60411089899912
      },
      {
        "Name": "Dictionary.ByKeysValues",
        "ShowGeometry": true,
        "Id": "0cafac5b7c20435cb8af4a8fdc391ed3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4259.7924466125241,
        "Y": -3416.2473914035772
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "85849bb2b01d4860916af753a687d26c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3247.0944144283771,
        "Y": -2952.2925890314818
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ab3b552f811d488f89f9e2a3776c034a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4187.3469370902931,
        "Y": -2963.78047386484
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "03de03734ffb44af8c2d34cb81a80d55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4494.5837679933575,
        "Y": -2366.0617424326283
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6d8fc3cf653743a49c6e0fd1e50b130c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4719.2989462372825,
        "Y": -2363.8256200214669
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4c9ecbdab4ff428f905fb89f8c809536",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3927.437730054462,
        "Y": -538.41943690599112
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "21dc329087f34308a81db054d3082341",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3927.437730054462,
        "Y": -202.41943690599112
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a3d6b0ff53d2431d974ca8c649b4de55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3636.1008917514214,
        "Y": -3364.5428091396852
      },
      {
        "Name": "부재/WM 별 산식에 의한 최종 계산",
        "ShowGeometry": true,
        "Id": "6c8e0af59613498fa982b65cc2d464a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6399.83116544857,
        "Y": -4832.8244718323767
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f72c46781e0e42e098da7494b365304a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5403.41028780108,
        "Y": -5080.8225951813165
      },
      {
        "Name": "토공관련 wm들 물량산출 수식 처리구간",
        "ShowGeometry": true,
        "Id": "f7668a412eaa47a3842cd21a11fc5662",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5528.48434392649,
        "Y": -4682.6611585614464
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "bec4607c6a2b413392afd1adbc35e75b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4564.563928431282,
        "Y": -4490.2614570332862
      },
      {
        "Name": "calcTypeDict_symValPair",
        "ShowGeometry": true,
        "Id": "3c6ec5510c144ae1a90e6fca8933396a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 4242.76390633665,
        "Y": -4393.5099290722865
      },
      {
        "Name": "토공 계산_1.1.2",
        "ShowGeometry": true,
        "Id": "30bc18a95e2d41ba98499bf4658d9b72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4910.6908189551468,
        "Y": -4864.349264647657
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ac155af8dc95430d83db132a542409f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5250.40094890811,
        "Y": -4699.5090573714169
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2d32270a7efc46b8b01603aa39476ea8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4648.5123155923975,
        "Y": -5486.432103675168
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "837a058365b54ba89f938726626e2a7c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1506.9152839275309,
        "Y": 1759.3831833813224
      },
      {
        "Name": "Dictionary.ByKeysValues",
        "ShowGeometry": true,
        "Id": "d7d0e292b59943e19fdb4fec5928c925",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4181.437730054462,
        "Y": -387.24693690599122
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fbec1be90e014361bb2fcd1c03ff3959",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4649.4953487325793,
        "Y": 349.05988124873988
      },
      {
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Id": "579225f9c4544ddb93a31271b5429ff2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4925.4953487325793,
        "Y": 349.23238124873978
      },
      {
        "Name": "*",
        "ShowGeometry": true,
        "Id": "ee7eb09d38ca451d80425a3f5b50df0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5234.4953487325793,
        "Y": 406.23238124873978
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "86d0d851d5a349c19279b4c4457199ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4925.4953487325793,
        "Y": 497.05988124873988
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b9955abcae8942af80978a17476c42d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6045.0412286439287,
        "Y": 471.78893694549186
      },
      {
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Id": "795f5cf12d5047e9b1879d99459eb88a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6321.0412286439287,
        "Y": 471.96143694549187
      },
      {
        "Name": "*",
        "ShowGeometry": true,
        "Id": "52a8711ceeed4437a88cf08fbf6c5328",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6630.0412286439287,
        "Y": 528.96143694549187
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8b8112b4e0c04ff69645e34bb66557f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6321.0412286439287,
        "Y": 619.78893694549186
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "1ac1d795befa43da9e0ac9ac9d5ab477",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6624.5931929051039,
        "Y": 1776.8809971315068
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "59282b31444948069199283db8b9668c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6030.7684108995591,
        "Y": 1873.5493627766073
      },
      {
        "Name": "*",
        "ShowGeometry": true,
        "Id": "3c9eff516bb5442982542baff5a8d5ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7826.2304394752118,
        "Y": 1404.6156541858516
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "644a7b41292d43ccb9753c25f3c54cf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7551.1087719642856,
        "Y": 1564.2514943744175
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0e017e713b394e25b62474efc65e3aff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7579.73434694943,
        "Y": 505.06448463926881
      },
      {
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Id": "d6f7c513670b42a485947bf4b7a8ffec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7855.73434694943,
        "Y": 505.23698463926883
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2f1d4cab1e42414c9b2485352b486f9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8521.4420631754947,
        "Y": 506.53417656945555
      }
    ],
    "Annotations": [
      {
        "Id": "2424e52975604686baf733279047a21b",
        "Title": "All Fdn Elements and It's Type Name",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e5163059d81c496a844e2f0e5a0bf0d6",
          "85fdbecb419941128554f1a91e6b8982",
          "128aa7090676495c830bc9a9f85cd374",
          "440bb22b3dc74e1abb33a9a872085c8a",
          "adf4afb6f2664889ae0bcb3d0e932d7f",
          "e9633a91eeeb42ee9d9c7f06ec7cf260"
        ],
        "HasNestedGroups": false,
        "Left": -456.02800199109606,
        "Top": 137.76567259800737,
        "Width": 2316.8983126023923,
        "Height": 393.00401181724573,
        "FontSize": 96.0,
        "InitialTop": 282.76567259800737,
        "InitialHeight": 261.00401181724567,
        "TextblockHeight": 135.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "62e8d3e6601148f18858918f74742cb9",
        "Title": "WM assign to Family Type",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "85849bb2b01d4860916af753a687d26c",
          "ab3b552f811d488f89f9e2a3776c034a"
        ],
        "HasNestedGroups": false,
        "Left": 3237.0944144283771,
        "Top": -3036.78047386484,
        "Width": 1451.2525226619159,
        "Height": 439.48788483335829,
        "FontSize": 36.0,
        "InitialTop": -2963.78047386484,
        "InitialHeight": 156.48788483335807,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "1d7252923a864d38a0f1623392199ba5",
        "Title": "산출규칙: 모델 파라미터",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "03de03734ffb44af8c2d34cb81a80d55",
          "6d8fc3cf653743a49c6e0fd1e50b130c"
        ],
        "HasNestedGroups": false,
        "Left": 4484.5837679933575,
        "Top": -2439.0617424326283,
        "Width": 493.71517824392504,
        "Height": 298.23612241116143,
        "FontSize": 36.0,
        "InitialTop": -2366.0617424326283,
        "InitialHeight": 147.23612241116143,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "f940444155694b54bee0eb7921a9b109",
        "Title": "산출규칙: 수동입력값",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "4c9ecbdab4ff428f905fb89f8c809536",
          "21dc329087f34308a81db054d3082341",
          "d7d0e292b59943e19fdb4fec5928c925"
        ],
        "HasNestedGroups": false,
        "Left": 3917.437730054462,
        "Top": -611.41943690599112,
        "Width": 532.0,
        "Height": 730.0,
        "FontSize": 36.0,
        "InitialTop": -538.41943690599112,
        "InitialHeight": 146.89837784651093,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c3fda598f00c4864a70a9a92e1f51fc4",
        "Title": "Final Calculation",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "6c8e0af59613498fa982b65cc2d464a4",
          "f72c46781e0e42e098da7494b365304a",
          "3c6ec5510c144ae1a90e6fca8933396a",
          "bec4607c6a2b413392afd1adbc35e75b",
          "f7668a412eaa47a3842cd21a11fc5662",
          "30bc18a95e2d41ba98499bf4658d9b72",
          "ac155af8dc95430d83db132a542409f5"
        ],
        "HasNestedGroups": false,
        "Left": 4232.76390633665,
        "Top": -5196.8225951813165,
        "Width": 2497.06725911192,
        "Height": 935.31266610903,
        "FontSize": 72.0,
        "InitialTop": -5080.8225951813165,
        "InitialHeight": 1099.3754810457,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "2ffdb36a370a4842aaaa991977296f2b",
        "Title": "하부면 하강 값",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "fbec1be90e014361bb2fcd1c03ff3959",
          "579225f9c4544ddb93a31271b5429ff2",
          "ee7eb09d38ca451d80425a3f5b50df0d",
          "86d0d851d5a349c19279b4c4457199ec"
        ],
        "HasNestedGroups": false,
        "Left": 4639.4953487325793,
        "Top": 276.05988124873988,
        "Width": 788.0,
        "Height": 353.0,
        "FontSize": 36.0,
        "InitialTop": 349.05988124873988,
        "InitialHeight": 239.13927847872674,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4bbe6b7a3a6d40a2aa3287598e8ba83c",
        "Title": "하부면 offset 값",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b9955abcae8942af80978a17476c42d6",
          "795f5cf12d5047e9b1879d99459eb88a",
          "52a8711ceeed4437a88cf08fbf6c5328",
          "8b8112b4e0c04ff69645e34bb66557f9"
        ],
        "HasNestedGroups": false,
        "Left": 6035.0412286439287,
        "Top": 398.78893694549186,
        "Width": 788.0,
        "Height": 353.0,
        "FontSize": 36.0,
        "InitialTop": 471.78893694549186,
        "InitialHeight": 237.0,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "6c962a64f25142df9a647240fe5bfe0c",
        "Title": "하부면 elevation 값",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1ac1d795befa43da9e0ac9ac9d5ab477",
          "59282b31444948069199283db8b9668c"
        ],
        "HasNestedGroups": false,
        "Left": 6020.7684108995591,
        "Top": 1703.8809971315068,
        "Width": 959.82478200554488,
        "Height": 301.66836564510049,
        "FontSize": 36.0,
        "InitialTop": 1776.8809971315068,
        "InitialHeight": 258.66836564510049,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "33428b436b6c4f3b8b2aaafe2bd908f5",
        "Title": "하부라인 상승 높이",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "3c9eff516bb5442982542baff5a8d5ce",
          "644a7b41292d43ccb9753c25f3c54cf3"
        ],
        "HasNestedGroups": false,
        "Left": 7541.1087719642856,
        "Top": 1331.6156541858516,
        "Width": 478.12166751092627,
        "Height": 364.63584018856591,
        "FontSize": 36.0,
        "InitialTop": 1404.6156541858516,
        "InitialHeight": 321.63584018856591,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "12fb094749c2421e865958664193b373",
        "Title": "상부라인 offset 값",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "0e017e713b394e25b62474efc65e3aff",
          "d6f7c513670b42a485947bf4b7a8ffec",
          "2f1d4cab1e42414c9b2485352b486f9a"
        ],
        "HasNestedGroups": false,
        "Left": 7569.73434694943,
        "Top": 432.06448463926881,
        "Width": 1124.7077162260648,
        "Height": 236.46969193018674,
        "FontSize": 36.0,
        "InitialTop": 505.06448463926881,
        "InitialHeight": 310.00000000000034,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -88.460588805674433,
    "Y": 190.9736802515306,
    "Zoom": 0.16799599983740049
  }
}