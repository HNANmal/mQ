{
  "Uuid": "85bcf151-2a93-40fc-b906-7644e4add275",
  "IsCustomNode": false,
  "Description": "",
  "Name": "[HSD kit]_하중분배_[1.0.5]",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "bc9a95c7fefd47c784a8f995f1770c56",
      "Name": "1. DL 층별 정보(kN/m²)",
      "Type": "string",
      "Type2": "string",
      "Value": "34.05\r\n15.05\r\n4.1\r\n0.35",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "e083674f7a764e36ac6f9e2a038d9e43",
      "Name": "2. LL 층별 정보(kN/m²)",
      "Type": "string",
      "Type2": "string",
      "Value": "7.5\r\n10\r\n15\r\n1",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "14121a0174a9447db3f1f8d2958c5478",
      "Name": "3. b :: Wind Information 입력 (대괄호 항목 다음줄에 입력) ",
      "Type": "string",
      "Type2": "string",
      "Value": "[Basic_Wind_Speed]:\r\n» 33.34\r\n\r\n[Exposur_Category]\r\n» C\r\n\r\n[Topographic_factor(Kzt)]\r\n» 1.0",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "60db081fa6bf49d1993b3d870e9ce937",
      "Name": "3. a :: Wind_Code 선택",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "ASCE-7",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "de8f6697fa7c4452832bff989fc47a53",
      "Name": "3. c :: Wind_Enclosure Classification",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "BD-Enclosed",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
      "Name": "0. 실행모드",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "해석모드",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 1
    },
    {
      "Id": "b271a34b43fa43868d041d32bf7a51f6",
      "Name": "4. a :: Seismic_Code 선택",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "ASCE-7",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "ef78688c111e484c8cb92b1ebde675ae",
      "Name": "4. b :: Seismic Information 입력 (대괄호 항목 다음줄에 입력) ",
      "Type": "string",
      "Type2": "string",
      "Value": "[Site_Class]:\r\n» 33.34\r\n\r\n[Risk_Category]\r\n» C\r\n\r\n[Response_modification_factor_X]\r\n» 3.0\r\n[Response_modification_factor_Y]\r\n» 3.0\r\n\r\n[Spectral_acceleration_parameters_Sds]\r\n» 0.091\r\n\r\n[Spectral_acceleration_parameters_Sd1]\r\n» 0.087",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "6ca49a2c991c431f80920fca235e81e1",
      "Name": "콘크리트 강도 선택",
      "Type": "number",
      "Type2": "number",
      "Value": "1",
      "MaximumValue": 40.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Integer",
      "Description": "A slider that produces integer values.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "b2a49b909bc541aeb001385b890bfea8",
      "Inputs": [
        {
          "Id": "14f1648433474e7580b1443397bd7356",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ce37ab31de545d9a49734c18d5c0c9c",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 612,
      "SelectedString": "OST_StructuralFraming",
      "NodeType": "ExtensionNode",
      "Id": "97c54e52b6d24fe8bc68f1f5535565b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1deee3be24b949e1941b47be2b544582",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.RoomsByStatus, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "dfee72e7cc844747b135c981fc877574",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f57a3755aaa2428d99627f7616d39764",
          "Name": "PlacedRooms",
          "Description": "Placed Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f58057e1e8f480e9de83fcff8a7229e",
          "Name": "UnplacedRooms",
          "Description": "Unplaced Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa12dba71a874da48507e41528144f89",
          "Name": "NotEnclosedRooms",
          "Description": "Not Enclosed Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cdb1fa6be1b64c269e5b429fa030d84c",
          "Name": "RedundantRooms",
          "Description": "Elements at the given level.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Returns all rooms in the document grouped by status"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Room.CoreCenterBoundary",
      "Id": "211688b734bd41209dba730bad6261bd",
      "Inputs": [
        {
          "Id": "c6ea57d8d9364ea2ac3cbababfcdc75a",
          "Name": "room",
          "Description": "Revit.Elements.Room",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ba074e1d7134cb182e2fa80a0c1a6dd",
          "Name": "Curve[][]",
          "Description": "Curve[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Core center boundary\n\nRoom.CoreCenterBoundary: Curve[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByJoinedCurves@Autodesk.DesignScript.Geometry.Curve[],double,bool,double",
      "Id": "1fa59893c2834090b96809dd740dce16",
      "Inputs": [
        {
          "Id": "ca0ece6f96a04bfd814175a989fc2fd0",
          "Name": "curves",
          "Description": "Curves to join into polycurve\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e47207c30602454ba3f2cb5d4b5642bd",
          "Name": "joinTolerance",
          "Description": "Tolerance to determine size of gap allowed between curves to be joined\n\ndouble\nDefault value : 0.001",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84d532d2400141c887d08a5aa454d065",
          "Name": "trimCurves",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b327cf00cc55484da6134e9b1a348b88",
          "Name": "trimLength",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e3d82d7c5b04971a8ad298431b6cbaa",
          "Name": "PolyCurve",
          "Description": "Polycurve created by joined curves",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by joining curves. Flips curve as needed for connectivity. Choose a preferred join tolerance between 1e-6 and 1e-3 units.\n\nPolyCurve.ByJoinedCurves (curves: Curve[], joinTolerance: double = 0.001, trimCurves: bool = false, trimLength: double = 0): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "d5924a99a9ff46cc9f9773b80b74086a",
      "Inputs": [
        {
          "Id": "c53c1089b02141c3860b9b2272c4052a",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00e98b6b89dd4c668502feec511cf309",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "49f1f8061310489ea5e64a764888e7ea",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Reference Level\";",
      "Id": "1288abe4e92e4f21b8b340b06eb1c81c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fa8e5f5b1e384e04a59d23b80faaae9e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "f0a071aa4b4b45a1a38beed1baf029b1",
      "Inputs": [
        {
          "Id": "920f662ab29649dd902121f861d04b09",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "486da1b94f944a1abe9370e9fe64f92e",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "6c2e1968b221451293a51d60f438750b",
      "Inputs": [
        {
          "Id": "462c3c81cc704c11bef99f23abb9f8a9",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2af6a0c3a4784aadb129e2bb9b09f000",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d00715250a44459096e0d6ce0227b2ee",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a9e94ec6619488a944d8fda6c22f1a4",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "ac0f890652e848559107af5797497836",
      "Inputs": [
        {
          "Id": "858159a77cf64a198be45b20beea7005",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f360321c9a0f49a09bc8b8c824383a5a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 584,
      "SelectedString": "OST_StructuralColumns",
      "NodeType": "ExtensionNode",
      "Id": "75c0ae7762784a6dbedc1aed2765c5cd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6df21ecf7a324927a1c2e211b0bf48f6",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "9254457efbcc4dd38af8a446011532fb",
      "Inputs": [
        {
          "Id": "4e367542af6442049b1557adfc88017d",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "493c48e8c7554f7b95990cdb049d799a",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncols = IN[0]\r\n# Place your code below this line\r\n\r\ndef getColumnCrv(el):\r\n    sttPt = el.GetLocation()\r\n    endPt = go\\\r\n    (\r\n        el,\r\n        lambda x: x.GetLocation(),\r\n        lambda x: x.Translate(0,0, el.GetParameterValueByName(\"Length\")),\r\n    )\r\n    \r\n    return Line.ByStartPointEndPoint(sttPt,endPt)\r\n# Assign your output to the OUT variable.\r\nOUT = map(getColumnCrv,cols)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8b448b05d212466ca09dac41f01a35ce",
      "Inputs": [
        {
          "Id": "c88710110069449f9d2ac0b7e074b619",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "90941572e374477d809649afabfb494e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncols = IN[0]\r\nexceptionRules = IN[1]\r\n# Place your code below this line\r\n\r\n#def getColumnCrv(els,exceptionRule):\r\n#    res = go\\\r\n#    (\r\n#        els,\r\n#        filter(lambda x: \"UG PED\" not in str(x.GetParameterValueByName(\"Family and Type\"))),\r\n#        filter(lambda x: exceptionRule not in str(x.GetParameterValueByName(\"Family and Type\"))),\r\n#    )\r\n#    \r\n#    return res\r\n\r\ndef getColumnCrv_(els,exceptionRules):\r\n    defaultFiltering = go\\\r\n    (\r\n        els,\r\n        filter(lambda x: \"UG PED\" not in str(x.GetParameterValueByName(\"Family and Type\"))),\r\n        list,\r\n    )\r\n    \r\n    res = defaultFiltering\r\n    for r in exceptionRules:\r\n        res = list(filter(lambda x: r not in str(x.GetParameterValueByName(\"Family and Type\")), res))\r\n    \r\n    \r\n    return res\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = getColumnCrv_(cols,exceptionRules)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5947929000cd4f26be10262504b830f5",
      "Inputs": [
        {
          "Id": "278c98882eda458ebded23c91549af06",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d495bc6537641c29fd06dc786c78e04",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9a342604dbaf4c3db5b9d48b95d0d101",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "W200xL200,\r\nW300xL300",
      "Id": "1d286349bcf440bd803fce47b14800ff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d18f09fb6f204558a89468e57121e209",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "5449b19eadde45b9a56e7fe0ad5bebe5",
      "Inputs": [
        {
          "Id": "2390ae9d68b84c8db44122a284c305fb",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c50e940e20c433a983fa9bb2ebf7990",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bccdcd8e73c44ad18899e2cdf022406f",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\n\";",
      "Id": "8f5ca1301b8c4a46bc8f3548ac020cad",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "24d0c9486f094465b0ae4e99c599bfd6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "69c45813c87f4708a0c3a1e08ada40be",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8aefbdb75047449aa73e43e18bb420f6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "b546379d151d42d68e463736694d38fe",
      "Inputs": [
        {
          "Id": "01d60ae1affd4e6e9dbb17332be1f88a",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "026ad89e39d847d1a3952f37d7e09472",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b452fb4deb3f4779a297bc2ad1f52daa",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "b07f43b4d8b041bc92d9c422b4a9415d",
      "Inputs": [
        {
          "Id": "199eaf9badc84c39b1d4aeecf59de002",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3f08ad6554b4f92940c9cd84e20dd6d",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8dde9279cf02476c92db815820d76aa3",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Contains@string,string,bool",
      "Id": "f915d82b309f43279c9d060434efc169",
      "Inputs": [
        {
          "Id": "0c5d66f8cde64c5e8ef8fed75f5d2106",
          "Name": "string",
          "Description": "String to search in\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b763ec672eb48539548147305c39089",
          "Name": "searchFor",
          "Description": "Substring to search for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "765702529b5e4f7cad704c94e5c2eb09",
          "Name": "ignoreCase",
          "Description": "Whether or not comparison takes case into account\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "647a0bba04264d0c896bb24112216ce0",
          "Name": "bool",
          "Description": "Whether the string contains the substring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given string contains the given substring.\n\nString.Contains (string: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "5c2ed3e93edc4db5aa7bc8b39d8e590a",
      "Inputs": [
        {
          "Id": "255def3172494cc09f9b2a54813159de",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a41cfa8918274edd934b608f64842fc7",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Name of the Element\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"G\";",
      "Id": "b8f76ad6bb9843a9bb2c5cd8881708e0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0e1ebfb5b32b40aab6acfa45d93801f9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "bd70d470ae2c4ebbbee75f5a3beef249",
      "Inputs": [
        {
          "Id": "4be04c74eeb343c29b042f53f1e6ba6e",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f74afd8f61874bd38b8cbc68bb36f323",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae5c640d9a314c7397d018e436fc7a5b",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "59d039fb0e0848acadd0be1166ddd620",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2];",
      "Id": "89a673db170c4bbe8fcbefad55010d62",
      "Inputs": [
        {
          "Id": "b9ff13b9efeb4506961d257aff8595be",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "128520d6cad440ff91fc8bf67b7c67d1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "7695c191e50548e4b07e493f33d6d32e",
      "Inputs": [
        {
          "Id": "3f840ad7b3a54ca08916fca1cf265a89",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "94a9fb266b734a34be8b6814f28c34e7",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5d9a55886495418594a44d46b4a6e351",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "34.05\r\n15.05\r\n4.1\r\n0.35",
      "Id": "bc9a95c7fefd47c784a8f995f1770c56",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "838544488ac84004b341aa2fddc1ebdc",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n    \r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\n#loadPerLevel = IN[1]\r\nelems_forAllLv = IN[1]\r\n#gridsX, gridsY = grids\r\n\r\n# Place your code below this line\r\n\r\n\r\ndef grp_XYbeamsLinesPerLv(elemsPerLv):\r\n    allLines = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        list,\r\n    )\r\n    directionsPerLevel = go(\r\n        allLines,\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(allLines, isParallel)[0]\r\n\r\ndef make_pairFrames(xGrps, yGrps):\r\n    pairX = go(\r\n        xGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        map(lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1]))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    pairY = go(\r\n        yGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),list,\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1])),\r\n        # 서브리스트 구조 Transpose\r\n        map(lambda x: list(zip(*chain(x)))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    return pairX, pairY\r\n\r\ndef get_IntersectInGrp(xGrp, yGrp):\r\n    res = []\r\n    for x in xGrp:\r\n        for y in yGrp:\r\n            res.append(x.Intersect(y))\r\n    return list(chain(*res))\r\n\r\ndef GetBoundingSrfs(intscts):\r\n    res = []\r\n    try:\r\n        crvSet = concave_hull(intscts, 100000)\r\n        polyCrv = PolyCurve.ByJoinedCurves(crvSet)\r\n        srf = Surface.ByPatch(polyCrv)\r\n        srfThick = srf.Thicken(10,False)\r\n#        bdCube = BoundingBox.ByGeometry(srfThick).ToCuboid()\r\n#        bdCubeSrfs = bdCube.Explode()\r\n#        bdBelowSrf = go(\r\n#            bdCube.Explode(),\r\n#            #bdCubeSrfs,\r\n#            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z != 0),\r\n#            list,\r\n#        )[0]\r\n        return srf\r\n    except: pass\r\n\r\ndef makeSrf_btwnFrame(xGrps, yGrps):\r\n    res = []\r\n    for xGrp in xGrps:\r\n        for yGrp in yGrps:\r\n            intscts = get_IntersectInGrp(xGrp, yGrp)\r\n            if GetBoundingSrfs(intscts):\r\n                res.append(GetBoundingSrfs(intscts))\r\n\r\n    return res\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nXY_elems_forAllLv = list(map(grp_XYbeamsLinesPerLv, elems_forAllLv))\r\npairFrames_forAllLv = list(map(lambda x: list(make_pairFrames(*x)), XY_elems_forAllLv))\r\nsrfs_forAllLv = list(map(lambda x: list(makeSrf_btwnFrame(*x)), pairFrames_forAllLv))\r\n\r\nOUT = srfs_forAllLv",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "88677a05d98744a4ada829a0f58fcc8c",
      "Inputs": [
        {
          "Id": "124a4897494c4906a4646dc1cfe26fcb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1ae9b14cac24169b3daf4a7e8b32fb6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6d65bddf65245708fe4fb496c1fcf80",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "9bc199a3fa4f49c7885122c0c6fd9f6f",
      "Inputs": [
        {
          "Id": "3edacdb4ab7d4aa1b0d7df65590677ca",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24c1779e1e1c46a0a3d18faf16b18b71",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ed5b3f059504f0d92a1b055e2939777",
          "Name": "separator1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "faad2ad8b60147e3a8847b0f319af9d5",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\" \";\n\"\\n\";",
      "Id": "61ceae660b9f49978d49b11d14ea19a4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "26799f02becc4a8baa7f20249309b3e6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd7006fb7d8348dd9305ad6720aa9f64",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "b92be98ed6fc4904b6fd7728d18671b2",
      "Inputs": [
        {
          "Id": "30d29722c47743c08b31ef2a41e25367",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3fa02196bfdc439094875986bbe6cd68",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "b573abeeac714845bb1aa2c6615f3f34",
      "Inputs": [
        {
          "Id": "054dbde7639d4f69a5f99ed66df5fc9f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "54f0a5f8326e4488aff611d1425cfb8e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "3072c1704ff94e318a4b33b65c80f5b9",
      "Inputs": [
        {
          "Id": "3274213193354c71b09cfc3b419c1eb0",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebe98ad1c8934981ab5c8a66cb85e919",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "22d2aacaae374c7f880d8475b9e63510",
      "Inputs": [
        {
          "Id": "b2b204c4efd040c38f9c9da0da49d2d2",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97a1f4244bda40a884700d4b99291542",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a6ca7e85da72498ca488bf575689265c",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Reference Level Elevation\";",
      "Id": "d028cf4ccc8d4ef39d562ce2a01e3fbf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1e65852073c44a4f8a2530548c80bfa3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\nsrfs_forAllLv = IN[1]\r\n# Place your code below this line\r\n\r\ndef find_allCorner(srf):\r\n    u_stt = srf.PointAtParameter(0,1)\r\n    u_end = srf.PointAtParameter(1,1)\r\n    b_stt = srf.PointAtParameter(0,0)\r\n    b_end = srf.PointAtParameter(1,0)\r\n    \r\n    return u_stt, u_end, b_stt, b_end\r\n\r\ndef find_shortSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide = Line.ByStartPointEndPoint(u_stt, u_end)\r\n    b_shortSide = Line.ByStartPointEndPoint(b_stt, b_end)\r\n    \r\n    return u_shortSide, b_shortSide\r\n    \r\ndef find_longSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    l_longSide = Line.ByStartPointEndPoint(u_stt, b_stt)\r\n    r_longSide = Line.ByStartPointEndPoint(u_end, b_end)\r\n    \r\n    return l_longSide, r_longSide\r\n    \r\ndef find_longSide_midLine(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = Line.ByStartPointEndPoint(u_midPt, b_midPt)\r\n    \r\n    return midLine\r\n\r\ndef find_2wayRefPts(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    shortSideLength = u_shortSide.Length\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = find_longSide_midLine(srf)\r\n    midLineVec = midLine.Direction\r\n    srfNormalVec = srf.NormalAtParameter(0.5,0.5)\r\n    \r\n    u_circle = Circle.ByCenterPointRadiusNormal(u_midPt, shortSideLength/2, srfNormalVec)\r\n    b_circle = Circle.ByCenterPointRadiusNormal(b_midPt, shortSideLength/2, srfNormalVec)\r\n    u_45d_pt = midLine.Intersect(u_circle)[0]\r\n    b_45d_pt = midLine.Intersect(b_circle)[0]\r\n    \r\n    return u_45d_pt, b_45d_pt\r\n\r\ndef div_srf_1way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    r_srf = go(\r\n        [u_end, b_end, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    \r\n    return l_srf, r_srf\r\n\r\ndef div_srf_2way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_45d_pt, b_45d_pt = find_2wayRefPts(srf)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_45d_pt, b_45d_pt],\r\n        #lambda x: concave_hull(x, 100000),  ## concave_hull 에서 근접점 오류 발생\r\n        Polygon.ByPoints,\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n#    r_srf = go(\r\n#        [u_end, b_end, u_45d_pt, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    u_srf =  go(\r\n#        [u_stt, u_end, u_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    b_srf = go(\r\n#        [b_stt, b_end, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n    \r\n    return l_srf, r_srf, u_srf, b_srf\r\n\r\ndef div_srf(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    shortSide = find_shortSide(srf)[0].Length\r\n    longSide = find_longSide(srf)[0].Length\r\n    ratio = longSide/shortSide\r\n    \r\n    if ratio < 2:\r\n        #res = [{\"srf\": x, \"load_path\": \"2way\"} for x in div_srf_2way(srf)] ## srfDict 형태로 반환\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    elif ratio >= 2:\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    \r\n    return res\r\n\r\ndef div_srf_perLv(srfsPerLv):\r\n    return list(chain(*map(div_srf, srfsPerLv)))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = map(div_srf_perLv, srfs_forAllLv)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d8b7cefba4d942fdb4b0995b1d4b353f",
      "Inputs": [
        {
          "Id": "2ce466dcf6e144a295f149de29917387",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "72b260e450524e6d932fdb1fd2c85b47",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb8edd0307f94b3f8c762acd43e2c342",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "// 1. case\n// DL = 부재자중(메인부재 + 그레이팅 하중) + 유관부서 EL\n// 2. case < -우선 구현\n// DL = 각 층의 Floor 로드를 정해서 입력하는 방식",
      "Id": "84498cb015cf4ed48c71273d029f2953",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "7.5\r\n10\r\n15\r\n1",
      "Id": "e083674f7a764e36ac6f9e2a038d9e43",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "56a2d6e39bd145cd873e98f6d9774051",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "[Basic_Wind_Speed]:\r\n» 33.34\r\n\r\n[Exposur_Category]\r\n» C\r\n\r\n[Topographic_factor(Kzt)]\r\n» 1.0",
      "Id": "14121a0174a9447db3f1f8d2958c5478",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e132961d9cc944e6ac1deeced94fcf4f",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "ASCE-7",
          "Item": "ASCE-7"
        },
        {
          "Name": "KDS 41 12 00",
          "Item": "KDS 41 12 00"
        },
        {
          "Name": "EN 1991-1-1-4",
          "Item": "EN 1991-1-1-4"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "ASCE-7",
      "NodeType": "ExtensionNode",
      "Id": "60db081fa6bf49d1993b3d870e9ce937",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a7664cd5511840d584a814a5cf2adfeb",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "BD-Enclosed",
          "Item": "BD-Enclosed"
        },
        {
          "Name": "BD-Partially Enclosed",
          "Item": "BD-Partially Enclosed"
        },
        {
          "Name": "BD-Open",
          "Item": "BD-Open"
        },
        {
          "Name": "Shelter",
          "Item": "Shelter"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "BD-Enclosed",
      "NodeType": "ExtensionNode",
      "Id": "de8f6697fa7c4452832bff989fc47a53",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8f7958cf2f244365b1bc81ec2cfbb8ad",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "ac901e7fe2b048ecb4171e194af680c0",
      "Inputs": [
        {
          "Id": "dd24d1d079a340f694466bcc7c50ee49",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f170f0015ff491a850154d10230ecd4",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f0d463dc926b4d9e8b876e6762f482c1",
          "Name": "separator1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5733fe99d71846adb89c0c25957eabde",
          "Name": "separator2",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "feba5c0940db4fdfb0a34be42c5a58aa",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\":\";\n\" \";\n\"\\n\";",
      "Id": "0d70a0a0391e4c2182beb0c3598ba223",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1f987238a98f47b3b7667c18be4f80f7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "77bc267fe87e480894b5f2c957d06399",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec7d0d4d23724025a775a629f1a0d898",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ninputStrs = IN[0]\r\n# Place your code below this line\r\ndef strToint(i):\r\n    try:\r\n        res = float(i)\r\n    except:\r\n        res = i\r\n    return res\r\ninputDatas = map(strToint, inputStrs)\r\n\r\ndef dictInput(inputStrs):\r\n    if inputStrs[0].startswith(\"[\"):\r\n        inputPairs = list(map(lambda n: inputStrs[n:n+1+1], range(0,len(inputStrs),2)))\r\n        res = dict(inputPairs)\r\n    else:\r\n        res = 0\r\n    return res\r\n    \r\n# Assign your output to the OUT variable.\r\nOUT = inputDatas",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f1dd1375c77646f3ae78cbade74e8767",
      "Inputs": [
        {
          "Id": "9136e7d31c3641408db1722d51cbdcba",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "05283deb19e9443789b8e1773e70aa6f",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "입력모드",
          "Item": "입력모드"
        },
        {
          "Name": "해석모드",
          "Item": "해석모드"
        }
      ],
      "SelectedIndex": 1,
      "SelectedString": "해석모드",
      "NodeType": "ExtensionNode",
      "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9dd1ef18eb494309a1549c7898dbdbf9",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport time\r\nimport subprocess\r\nimport os\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ndynTempServerPath = IN[0]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\n#cwd = find_cwd()\r\ncwd = os.getenv(\"HomePath\")\r\n\r\nfolderPath = f\"{cwd}\\\\{dynTempServerPath}\"\r\nif not os.path.exists(folderPath):\r\n    os.makedirs(folderPath)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = \"C:\"+folderPath",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "26406ae42bcb4b309436e92bb6941220",
      "Inputs": [
        {
          "Id": "67082223a9ca455e88b490bab96d47c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da1d93ee6aa540159be43fba2136d693",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".dynTemp\";",
      "Id": "9c0b7760c67e48adb51b9bb2a84794b7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "15b5683ddfc543739a615e7ac87853d5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "ASCE-7",
          "Item": "ASCE-7"
        },
        {
          "Name": "KDS 41 12 00",
          "Item": "KDS 41 12 00"
        },
        {
          "Name": "EN 1991-1-1-4",
          "Item": "EN 1991-1-1-4"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "ASCE-7",
      "NodeType": "ExtensionNode",
      "Id": "b271a34b43fa43868d041d32bf7a51f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f0e43b815b5c408b80659ade762d0c42",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "[Site_Class]:\r\n» 33.34\r\n\r\n[Risk_Category]\r\n» C\r\n\r\n[Response_modification_factor_X]\r\n» 3.0\r\n[Response_modification_factor_Y]\r\n» 3.0\r\n\r\n[Spectral_acceleration_parameters_Sds]\r\n» 0.091\r\n\r\n[Spectral_acceleration_parameters_Sd1]\r\n» 0.087",
      "Id": "ef78688c111e484c8cb92b1ebde675ae",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d44373623ba54b9b9bcee11bf4f4dfe5",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\ndef concave_hull_(points, alpha):\r\n    points = UnwrapElement(points)\r\n    res = []\r\n    \r\n    pLen = len(points)\r\n    alpha2 = alpha * alpha\r\n    if pLen < 2:\r\n        raise Exception('AlphaShape needs at least 2 points')\r\n\r\n    for i, p in enumerate(points):\r\n        for j in range(i+1, pLen):\r\n            if p.IsAlmostEqualTo(points[j]):\r\n                raise Exception('AlphaShape needs pairwise distinct points')\r\n            dist = hypot(p.X - points[j].X, p.Y - points[j].Y)                    \r\n            #if (dist > 2 * alpha) : continue #circle fits between points ==> p_i, p_j can't be alpha-exposed                    \r\n    \r\n            x1, y1, x2, y2 = p.X, p.Y, points[j].X, points[j].Y\r\n            midX, midY = (x1 + x2) / 2, (y1 + y2) / 2\r\n    \r\n            #find two circles that contain p_i and p_j; note that center1 == center2 if dist == 2*alpha\r\n            alphaDist = sqrt(alpha2 - (dist / 2) ** 2)\r\n            #alphaDist = alpha2 - (dist / 2) ** 2\r\n            deltaX, deltaY = (x2 - x1) / dist, (y1 - y2) / dist\r\n            c1x, c1y = midX + alphaDist * deltaY, midY + alphaDist * deltaX\r\n            c2x, c2y = midX - alphaDist * deltaY, midY - alphaDist * deltaX\r\n            \r\n            #check if one of the circles is alpha-exposed, i.e. no other point lies in it\r\n            c1_empty = True \r\n            c2_empty = True\r\n            for k in range(pLen):                \r\n                if i == k or j == k: \r\n                    continue\r\n                if ((c1x - points[k].X) * (c1x - points[k].X) + (c1y - points[k].Y) * (c1y - points[k].Y) < alpha2):\r\n                    c1_empty = False\r\n                if ((c2x - points[k].X) * (c2x - points[k].X) + (c2y - points[k].Y) * (c2y - points[k].Y) < alpha2):\r\n                    c2_empty = False\r\n                if not c1_empty and not c2_empty:\r\n                    break\r\n            if c1_empty or c2_empty:\r\n                res.append(Line.ByStartPointEndPoint(p, points[j]))\r\n                #res.append(c1_empty)\r\n    return res\r\n# Assign your output to the OUT variable.\r\nOUT = concave_hull_",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0d22839ba4e54ad4b810e4df27687cfb",
      "Inputs": [
        {
          "Id": "95b28c3957024fbf8f03f5d610e919c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "39e9a50723bf420a97a64c3518ffe3e6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsrfs_forAllLv = IN[1]\r\nelems_forAllLv = IN[2]\r\n# Place your code below this line\r\ndef grp_XYbeamsPerLv(elemsPerLv):\r\n#    allLines = go(\r\n#        elemsPerLv,\r\n#        map(lambda x: x.GetLocation()),\r\n#        list,\r\n#    )\r\n    directionsPerLevel = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.GetLocation(),\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(elemsPerLv, isParallel)[0]\r\n\r\nelemsX_forAllLv = go(\r\n    elems_forAllLv,\r\n    map(grp_XYbeamsPerLv),\r\n    list,\r\n    map(lambda x: x[1]),\r\n    list,\r\n)\r\n\r\nelemsY_forAllLv = go(\r\n    elems_forAllLv,\r\n    map(grp_XYbeamsPerLv),\r\n    list,\r\n    map(lambda x: x[0]),\r\n    list,\r\n)\r\n\r\ndef find_intsctSrfs(elem, srfs_perLv):\r\n    #elemGeo = elem.Geometry()\r\n    elemLineforChck = elem\\\r\n                        .GetLocation()\\\r\n                        .ExtendStart(-100)\\\r\n                        .ExtendEnd(-100)\r\n    assignedSrfs = go(\r\n        srfs_perLv,\r\n        filter(lambda x: x[\"load_path\"]==\"1way\"),\r\n        filter(lambda x: elemLineforChck.DoesIntersect(x[\"srf\"])),\r\n        list,\r\n    )\r\n    \r\n    res = {\r\n        \"elem\": elem,\r\n        \"location_line\": elem.GetLocation(),\r\n        \"length\": elem.GetLocation().Length,\r\n        \"asgned_Srfs\": list(map(lambda x: x[\"srf\"], assignedSrfs)),\r\n        \"asgned_area\": round(sum(list(map(lambda x: x[\"srf\"].Area/1000000, assignedSrfs))),2)\r\n    }\r\n    \r\n    return res\r\n\r\ndef find_intsctSrfsPerLv(elemsPerLv, srfs_perLv):\r\n    return list(map(lambda x: find_intsctSrfs(x, srfs_perLv), elemsPerLv))\r\n\r\nres = go(\r\n    elemsX_forAllLv,\r\n    lambda x: list(zip(x, srfs_forAllLv)),\r\n    map(lambda x: find_intsctSrfsPerLv(*x)),\r\n)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "64f3d4cc82c34fc9b0556c560a95808b",
      "Inputs": [
        {
          "Id": "be7d9d0518ca4a068b4fd3b407981041",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17bc8fb50a334c20b1e4429f15026d35",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ee70e151c8034b65b8ef487b0dfc11f1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3c2e9338490e4e928bb5c86fcdd26f12",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "elems_forAllLv;",
      "Id": "8c20f6b02473474e977352b740c944d5",
      "Inputs": [
        {
          "Id": "442fa8d96783469eb3af2d767a8cbc17",
          "Name": "elems_forAllLv",
          "Description": "elems_forAllLv",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "81b6b21d1e5943b4b42c1f37aa8d8631",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"asgned_Srfs\"];",
      "Id": "811f9cb11bdb4c839460e588b36af327",
      "Inputs": [
        {
          "Id": "e1d209f24b624d49af08ba3e98e43974",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "50147d49240d4f40a3af7c9ed1aeae4a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"elem\"].Geometry();",
      "Id": "4a233c39844b47c98359a5ac30199142",
      "Inputs": [
        {
          "Id": "6a15699ee095402d81ca1d985b442d04",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af3ecc1227c04b8db245baee2ed36c0c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i.Geometry();",
      "Id": "2a7a83f449b64744801eaf5c1067f8ef",
      "Inputs": [
        {
          "Id": "c360537a306a4a41865fd292303475bc",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e88a724d09d64c5fb954912238b6a19a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "770d677e7a1d44f384bc1bd380c6b233",
      "Inputs": [
        {
          "Id": "2bce01a281ac476fb39681a82d3da06d",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6d03979733a449fae4dce41c4c78b69",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 584,
      "SelectedString": "OST_StructuralColumns",
      "NodeType": "ExtensionNode",
      "Id": "1132aa09bbfe4b18bc908178c3de9028",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e2c2b8cbeb54082b23211013f0d7a34",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nframeDict_forAllLv = IN[0]\r\nallCols = IN[1]\r\nDL_forAllLv = IN[2]\r\n# Place your code below this line\r\ndef make_NamingRef(frameDict_forAllLv, allCols):\r\n    allElem_loc = \\\r\n        list(map(lambda x: x[\"location_line\"], list(chain(*frameDict_forAllLv))))\r\n    allCols_loc = \\\r\n        list(map(lambda x: x.GetLocation(), allCols))\r\n    allPts = [x.StartPoint for x in allElem_loc] +\\\r\n            [x.EndPoint for x in allElem_loc] +\\\r\n            [x.StartPoint for x in allCols_loc] +\\\r\n            [x.EndPoint for x in allCols_loc]\r\n    uniqAllPts = list(set(allPts))\r\n    \r\n    allUnique_X = sorted(list(set(map(lambda x: x.X, uniqAllPts))))\r\n    allUnique_Y = sorted(list(set(map(lambda x: x.Y, uniqAllPts))))\r\n    allUnique_Z = sorted(list(set(map(lambda x: x.Z, uniqAllPts))))\r\n    \r\n    xCnt = map(lambda x: \"0\"+str(x),range(1,len(allUnique_X)+1))\r\n    xNames = list(zip(xCnt, allUnique_X))\r\n    yCnt = map(lambda x: \"0\"+str(x),range(1,len(allUnique_Y)+1))\r\n    yNames = list(zip(yCnt, allUnique_Y))\r\n    zCnt = map(lambda x: \"0\"+str(x),range(1,len(allUnique_Z)+1))\r\n    zNames = list(zip(zCnt, allUnique_Z))\r\n    \r\n    res = {\r\n        \"xNames\": xNames,\r\n        \"yNames\": yNames,\r\n        \"zNames\": zNames,\r\n    }\r\n    \r\n    return res\r\n\r\nnamingRef = make_NamingRef(frameDict_forAllLv, allCols)\r\n\r\ndef add_nodeNamingToDic(elemDict, namingRef):\r\n    xNames, yNames, zNames = namingRef.values()\r\n    \r\n    sttPt = elemDict[\"location_line\"].StartPoint\r\n    endPt = elemDict[\"location_line\"].EndPoint\r\n    \r\n    xName_s = list(filter(lambda x: sttPt.X == x[1], xNames))[0][0]\r\n    yName_s = list(filter(lambda x: sttPt.Y == x[1], yNames))[0][0]\r\n    zName_s = list(filter(lambda x: sttPt.Z == x[1], zNames))[0][0]\r\n    \r\n    xName_e = list(filter(lambda x: endPt.X == x[1], xNames))[0][0]\r\n    yName_e = list(filter(lambda x: endPt.Y == x[1], yNames))[0][0]\r\n    zName_e = list(filter(lambda x: endPt.Z == x[1], zNames))[0][0]\r\n    \r\n    elemDict[\"node2\"] = \"1\" + xName_s + yName_s + zName_s\r\n    elemDict[\"node1\"] = \"1\" + xName_e + yName_e + zName_e\r\n    \r\n    return elemDict\r\n\r\ndef add_nodeNamingToDicPerLv(elemDict_perLv, namingRef):\r\n    return list(map(lambda x: add_nodeNamingToDic(x, namingRef), elemDict_perLv))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = map(lambda x: add_nodeNamingToDicPerLv(x, namingRef), frameDict_forAllLv)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "3c5f91a5c46b48d98b97a7f04c546eb9",
      "Inputs": [
        {
          "Id": "5dc77541fb0b459594ef443fab5d39fd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0abaff7595da47eda6f1c3a3cb5a64c7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2424796e8e014efa91c5e1523f169e42",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a911c58c94524fd1860e636f0140c817",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allCols;",
      "Id": "670b14e580c14f2197f7fffaf9705193",
      "Inputs": [
        {
          "Id": "b0b633c477e04d57843a343d80989b08",
          "Name": "allCols",
          "Description": "allCols",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59a27b105e5a4404a85f71c413683ee5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallFrames = IN[0]\r\nallCols = IN[1]\r\nuserinputStory = IN[2]\r\n# Place your code below this line\r\n\r\ndef chck_intsctWithCols(frame, allColsGeo):\r\n    frameLocation = frame\\\r\n                    .GetLocation()\\\r\n                    .ExtendStart(500)\\\r\n                    .ExtendEnd(500)\r\n    res = frameLocation.DoesIntersect(allColsGeo)\r\n    \r\n    return res\r\n\r\ndef filter_allGirders(allFrames, allCols):\r\n    allColsGeo = go(\r\n        allCols,\r\n        map(lambda x: x.Geometry()[0]),list,\r\n        Solid.ByUnion,\r\n    )\r\n    res = go(\r\n        allFrames,\r\n        filter(lambda x: chck_intsctWithCols(x, allColsGeo)),\r\n        list,\r\n    )\r\n    return res\r\n\r\nallGirders = filter_allGirders(allFrames, allCols)\r\n\r\ndef find_allLinePts(allGirders, allCols):\r\n    # 거더는 StartPoint 혹은 레퍼런스 레벨별로 그루핑해서\r\n    # Z 값은 레벨에서의 StartPoint 만 가져와서 구배는 반영안하도록\r\n    girdersPerRefLvGrp = grpBy(allGirders, lambda x: x.GetParameterValueByName(\"Reference Level Elevation\") )\r\n    \r\n    girdersLines = list(map(lambda x: x.GetLocation(), allGirders))\r\n    girdersPts = [x.StartPoint for x in girdersLines] + \\\r\n                 [x.EndPoint for x in girdersLines]\r\n    colsLines = go(\r\n        allCols,\r\n        map(lambda x: x.GetLocation()),\r\n        list,\r\n    )\r\n    colsPts = [x.StartPoint for x in colsLines] + \\\r\n              [x.EndPoint for x in colsLines]\r\n    allPts = girdersPts + colsPts\r\n    allX = go(\r\n        allPts,\r\n        map(lambda x: x.X), set,\r\n        sorted,\r\n    )\r\n    allY = go(\r\n        allPts,\r\n        map(lambda x: x.Y), set,\r\n        sorted,\r\n    )\r\n    allZ = go(\r\n        allPts,\r\n        map(lambda x: x.Z), set,\r\n        sorted,\r\n    )\r\n    \r\n    return girdersPerRefLvGrp, allZ\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = allGirders, find_allLinePts(allGirders, allCols)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "53998335930344b78674fc91ba55ee97",
      "Inputs": [
        {
          "Id": "720e3f8f0e954ed480896eaf69eebf7b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2c0142a1eaf14fddbd73ebc6160d0338",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7cfae125429c4b718275ccd500a64e44",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d3c5397b5de4ac5a0d791bbc299770e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "frames;",
      "Id": "0556ef865fa94493b462b8655d13bc1b",
      "Inputs": [
        {
          "Id": "6047c7768ffc4287a9c2b11b570f8053",
          "Name": "frames",
          "Description": "frames",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da4d0b9ae4b34786a592162be729ab3e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"srf\"];",
      "Id": "6ae730eaac264e25afe201b0e936ae26",
      "Inputs": [
        {
          "Id": "60759d0abb1c45f5b2a602dce03ba50d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5de29b62f994487c92760d91cd63835b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Polygon.ByPoints@Autodesk.DesignScript.Geometry.Point[]",
      "Id": "93fbc17d00384847a0ca59f2d9a9181d",
      "Inputs": [
        {
          "Id": "47e19a3d7d524e5b98cd2edd3d4668f8",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "24dfefb67e064bac82041a673a3fa1da",
          "Name": "Polygon",
          "Description": "Polygon",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a Polygon Curve by connecting Points.\n\nPolygon.ByPoints (points: Point[]): Polygon"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "6e002e40187e42cab28cc5747914bc72",
      "Inputs": [
        {
          "Id": "756599f028e64f45ba3fcc1c68b83923",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "42995d7d849e4db79c532e23bc58f8ac",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fcba9a65cda54c8795e3018b65c11362",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "29c73e5382a34d58bd6e448daa84d352",
      "Inputs": [
        {
          "Id": "5b88b01901d540d28d2115f9529f500e",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f6ab3e069f524f2d812bde8cf899450e",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "641731904fe546b188aef04c8fd14458",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0959e8161dcc41f08bd066b383218ed5",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"node1\"];",
      "Id": "9f436b964f3c49118be210e323deed07",
      "Inputs": [
        {
          "Id": "bdaed6d4583d40bda00935fa08736bb9",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d2f0d31ea12f4979b925fc72634a4396",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Substring@string,int,int",
      "Id": "9d124f84b798469181b8d9ff6e9e7c5b",
      "Inputs": [
        {
          "Id": "9cb67d8a7d9549e997a9c5d927fe6eb8",
          "Name": "string",
          "Description": "String to take substring of\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7264c90eb8d54d0cb5453bdc879073d3",
          "Name": "startIndex",
          "Description": "Starting character position of the substring in the original string\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fc0ddd4f79e64d9e8a2534e55304b764",
          "Name": "length",
          "Description": "Number of characters in the substring\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40336eee050a4136af3ac5032f8a42d9",
          "Name": "string",
          "Description": "Substring made from the original string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves a substring from the given string. The substring starts at the given character position and has the given length.\n\nString.Substring (string: string, startIndex: int, length: int): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n3;",
      "Id": "795bf8807f144be8b8758cda999b980b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1f06e6ce7f9a498a949204aeb5ac21a8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86c98c451e2948b58a3c103abc93acdd",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "29b6c5ea450f43be977d6086311a3882",
      "Inputs": [
        {
          "Id": "4b5eb500a0e646a2b5a2288b18f72da6",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2ff54cada1d40d9abb1488327774f7f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "593ed1db06f34e21ad35134f4490f650",
      "Inputs": [
        {
          "Id": "e59a5858e9e14e789368199150d0c032",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "80a963e0c61942c8b0b727ac550e112d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"asgned_Srfs\"];",
      "Id": "e5209b5fa7f4448191a67ce900c869b1",
      "Inputs": [
        {
          "Id": "45a0095bd67345f3a77f6e90fd289ad4",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "776eaa9225ad4404b1faec70a37b67fe",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "07eda9b656564a7b992e85bbb19a0d44",
      "Inputs": [
        {
          "Id": "58ab2b8287ee4c03bb870187239d9c7f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "739bdc2ddda04fb890c877de28647a5a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "dc19413b86db4011b56106f69b9996da",
      "Inputs": [
        {
          "Id": "bf24e560595847a9ab17ef11407cd91d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "de2741bb95fe49f7a715064f9361b6a7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "803c056c7418486e8dc24d9d331f24dc",
      "Inputs": [
        {
          "Id": "de2f151b3038461badc189ac2b79e2b6",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94d58f1ab44d44dd85db0c70e7cd7493",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "836198db033e4196a9f63fb11c803eec",
      "Inputs": [
        {
          "Id": "57a57cb929a942438f336642b4b403ac",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c91c170a6baa4dfea81b3d15061b8c96",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsrfs_forAllLv = IN[1]\r\nelems_forAllLv = IN[2]\r\n# Place your code below this line\r\ndef grp_XYbeamsPerLv(elemsPerLv):\r\n#    allLines = go(\r\n#        elemsPerLv,\r\n#        map(lambda x: x.GetLocation()),\r\n#        list,\r\n#    )\r\n    directionsPerLevel = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.GetLocation(),\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(elemsPerLv, isParallel)[0]\r\n\r\nelemsX_forAllLv = go(\r\n    elems_forAllLv,\r\n    map(grp_XYbeamsPerLv),\r\n    list,\r\n    map(lambda x: x[1]),\r\n    list,\r\n)\r\n\r\nelemsY_forAllLv = go(\r\n    elems_forAllLv,\r\n    map(grp_XYbeamsPerLv),\r\n    list,\r\n    map(lambda x: x[0]),\r\n    list,\r\n)\r\n\r\ndef find_intsctSrfs(elem, srfs_perLv):\r\n    #elemGeo = elem.Geometry()\r\n    elemLineforChck = elem\\\r\n                        .GetLocation()\\\r\n                        .ExtendStart(-100)\\\r\n                        .ExtendEnd(-100)\r\n    assignedSrfs = go(\r\n        srfs_perLv,\r\n        filter(lambda x: x[\"load_path\"]==\"1way\"),\r\n        filter(lambda x: elemLineforChck.DoesIntersect(x[\"srf\"])),\r\n        list,\r\n    )\r\n    \r\n    res = {\r\n        \"elem\": elem,\r\n        \"location_line\": elem.GetLocation(),\r\n        \"length\": elem.GetLocation().Length,\r\n        \"asgned_Srfs\": list(map(lambda x: x[\"srf\"], assignedSrfs)),\r\n        \"asgned_area\": round(sum(list(map(lambda x: x[\"srf\"].Area/1000000, assignedSrfs))),2)\r\n    }\r\n    \r\n    return res\r\n\r\ndef find_intsctSrfsPerLv(elemsPerLv, srfs_perLv):\r\n    return list(map(lambda x: find_intsctSrfs(x, srfs_perLv), elemsPerLv))\r\n\r\nres = go(\r\n    elemsX_forAllLv,\r\n    lambda x: list(zip(x, srfs_forAllLv)),\r\n    map(lambda x: find_intsctSrfsPerLv(*x)),\r\n)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1942c915de0c417cae1fa72f29adab5a",
      "Inputs": [
        {
          "Id": "f096b383c2aa41c48e83b55a24ddbdf2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5438ea0c5aea4135ba8123c0bf56aecd",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c156348daf83403c93749b6a8a9144b7",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "50397e96ce1e4b128a39fdbb3bad42bc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\nsrfs_forAllLv = IN[1]\r\n# Place your code below this line\r\n\r\ndef find_allCorner(srf):\r\n    u_stt = srf.PointAtParameter(0,1)\r\n    u_end = srf.PointAtParameter(1,1)\r\n    b_stt = srf.PointAtParameter(0,0)\r\n    b_end = srf.PointAtParameter(1,0)\r\n    \r\n    return u_stt, u_end, b_stt, b_end\r\n\r\ndef find_shortSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide = Line.ByStartPointEndPoint(u_stt, u_end)\r\n    b_shortSide = Line.ByStartPointEndPoint(b_stt, b_end)\r\n    \r\n    return u_shortSide, b_shortSide\r\n    \r\ndef find_longSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    l_longSide = Line.ByStartPointEndPoint(u_stt, b_stt)\r\n    r_longSide = Line.ByStartPointEndPoint(u_end, b_end)\r\n    \r\n    return l_longSide, r_longSide\r\n    \r\ndef find_longSide_midLine(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = Line.ByStartPointEndPoint(u_midPt, b_midPt)\r\n    \r\n    return midLine\r\n\r\ndef find_2wayRefPts(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    shortSideLength = u_shortSide.Length\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = find_longSide_midLine(srf)\r\n    midLineVec = midLine.Direction\r\n    srfNormalVec = srf.NormalAtParameter(0.5,0.5)\r\n    \r\n    u_circle = Circle.ByCenterPointRadiusNormal(u_midPt, shortSideLength/2, srfNormalVec)\r\n    b_circle = Circle.ByCenterPointRadiusNormal(b_midPt, shortSideLength/2, srfNormalVec)\r\n    u_45d_pt = midLine.Intersect(u_circle)[0]\r\n    b_45d_pt = midLine.Intersect(b_circle)[0]\r\n    \r\n    return u_45d_pt, b_45d_pt\r\n\r\ndef div_srf_1way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    r_srf = go(\r\n        [u_end, b_end, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    \r\n    return l_srf, r_srf\r\n\r\ndef div_srf_2way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_45d_pt, b_45d_pt = find_2wayRefPts(srf)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_45d_pt, b_45d_pt],\r\n        #lambda x: concave_hull(x, 100000),  ## concave_hull 에서 근접점 오류 발생\r\n        Polygon.ByPoints,\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n#    r_srf = go(\r\n#        [u_end, b_end, u_45d_pt, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    u_srf =  go(\r\n#        [u_stt, u_end, u_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    b_srf = go(\r\n#        [b_stt, b_end, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n    \r\n    return l_srf, r_srf, u_srf, b_srf\r\n\r\ndef div_srf(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    shortSide = find_shortSide(srf)[0].Length\r\n    longSide = find_longSide(srf)[0].Length\r\n    ratio = longSide/shortSide\r\n    \r\n    if ratio < 2:\r\n        #res = [{\"srf\": x, \"load_path\": \"2way\"} for x in div_srf_2way(srf)] ## srfDict 형태로 반환\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    elif ratio >= 2:\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    \r\n    return res\r\n\r\ndef div_srf_perLv(srfsPerLv):\r\n    return list(chain(*map(div_srf, srfsPerLv)))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = map(div_srf_perLv, srfs_forAllLv)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0adeb4e49b63401e86963ef97ca9dbc2",
      "Inputs": [
        {
          "Id": "9893a57176f94ae9adde62915eb789e7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a96efa07ab8a42cb95e8ad173eb5574e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0472186529c741a4a3118041f56ea836",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n    \r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\n#loadPerLevel = IN[1]\r\nelems_forAllLv = IN[1]\r\n#gridsX, gridsY = grids\r\n\r\n# Place your code below this line\r\n\r\n\r\ndef grp_XYbeamsLinesPerLv(elemsPerLv):\r\n    allLines = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        list,\r\n    )\r\n    directionsPerLevel = go(\r\n        allLines,\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(allLines, isParallel)[0]\r\n\r\ndef make_pairFrames(xGrps, yGrps):\r\n    pairX = go(\r\n        xGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        map(lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1]))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    pairY = go(\r\n        yGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),list,\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1])),\r\n        # 서브리스트 구조 Transpose\r\n        map(lambda x: list(zip(*chain(x)))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    return pairX, pairY\r\n\r\ndef get_IntersectInGrp(xGrp, yGrp):\r\n    res = []\r\n    for x in xGrp:\r\n        for y in yGrp:\r\n            res.append(x.Intersect(y))\r\n    return list(chain(*res))\r\n\r\ndef GetBoundingSrfs(intscts):\r\n    res = []\r\n    try:\r\n        crvSet = concave_hull(intscts, 100000)\r\n        polyCrv = PolyCurve.ByJoinedCurves(crvSet)\r\n        srf = Surface.ByPatch(polyCrv)\r\n        srfThick = srf.Thicken(10,False)\r\n#        bdCube = BoundingBox.ByGeometry(srfThick).ToCuboid()\r\n#        bdCubeSrfs = bdCube.Explode()\r\n#        bdBelowSrf = go(\r\n#            bdCube.Explode(),\r\n#            #bdCubeSrfs,\r\n#            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z != 0),\r\n#            list,\r\n#        )[0]\r\n        return srf\r\n    except: pass\r\n\r\ndef makeSrf_btwnFrame(xGrps, yGrps):\r\n    res = []\r\n    for xGrp in xGrps:\r\n        for yGrp in yGrps:\r\n            intscts = get_IntersectInGrp(xGrp, yGrp)\r\n            if GetBoundingSrfs(intscts):\r\n                res.append(GetBoundingSrfs(intscts))\r\n\r\n    return res\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nXY_elems_forAllLv = list(map(grp_XYbeamsLinesPerLv, elems_forAllLv))\r\npairFrames_forAllLv = list(map(lambda x: list(make_pairFrames(*x)), XY_elems_forAllLv))\r\nsrfs_forAllLv = list(map(lambda x: list(makeSrf_btwnFrame(*x)), pairFrames_forAllLv))\r\n\r\nsrfs_forAllSide\r\n\r\nOUT = srfs_forAllLv",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "eacc4712e5dc4a9c9a655a3e80d7ca8c",
      "Inputs": [
        {
          "Id": "4ba0da6f575e423e86a4e00687a3caef",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3a487d4c25a04d10a9522632c933e11e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "13cad9a3ad80430884c774a5f1611827",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallLvsDict = IN[1]\r\nallCols = IN[0]\r\nframeNoDict = IN[2]\r\nshortAxisNoDict = IN[3]\r\ninput_E = IN[4]\r\n# Place your code below this line\r\ndef get_BuilingBdBox(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBox = BoundingBox.ByGeometry(allCols_loc).ToCuboid()\r\n    return bdBox\r\n\r\ndef getSideDict(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBoxFaces = get_BuilingBdBox(allCols).Explode()\r\n    sideFaces = go(\r\n        bdBoxFaces,\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 0),\r\n        list,\r\n    )\r\n    resDict = go(\r\n        [\"south\",\"west\",\"north\",\"east\"],\r\n        lambda x: zip(x, sideFaces),\r\n        dict,\r\n    )\r\n    \r\n    return resDict\r\n\r\ndef toDict_allCols(allCols, frameNoDict, allLvsDict):\r\n\r\n    def find_Ix(elem):\r\n        _tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Web Thickness\") * 10\r\n        _tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Flange Thickness\") * 10\r\n        _h = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Height\") * 10\r\n        _bf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Width\") * 10\r\n        \r\n        Ix = (2*(_bf*_tf**3/12+_bf*_tf*((_h-2*_tf)/2+_tf/2)**2)+_tw*(_h-2*_tf)**3/12)\r\n        Ix_revit = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Moment of Inertia strong axis\") * 10**4\r\n        return Ix_revit\r\n\r\n    def find_numberNameByElem(elem, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": elem.GetLocation().StartPoint.X,\r\n            \"Y\": elem.GetLocation().StartPoint.Y,\r\n            \"Z\": elem.GetLocation().StartPoint.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_numberNameByPt(pt, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": pt.X,\r\n            \"Y\": pt.Y,\r\n            \"Z\": pt.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict):\r\n        sttPt = elem.GetLocation().StartPoint\r\n        \r\n        endPt = elem.GetLocation().EndPoint\r\n        \r\n        name_stt_X = find_numberNameByPt(sttPt, frameNoDict, \"X\")[0]\r\n        name_stt_Y = find_numberNameByPt(sttPt, shortAxisNoDict, \"Y\")[0]\r\n        name_stt_Z = find_numberNameByPt(sttPt, allLvsDict, \"Z\")[0]\r\n        name_stt = \"1\" + name_stt_X + name_stt_Y + name_stt_Z\r\n        \r\n        sttNodeDict = dict([(\"name\",name_stt), (\"X\",sttPt.X), (\"Z\",sttPt.Z)])\r\n        \r\n        name_end_X = find_numberNameByPt(endPt, frameNoDict, \"X\")[0]\r\n        name_end_Y = find_numberNameByPt(endPt, shortAxisNoDict, \"Y\")[0]\r\n        name_end_Z = find_numberNameByPt(endPt, allLvsDict, \"Z\")[0]\r\n        name_end = \"1\" + name_end_X + name_end_Y + name_end_Z\r\n        \r\n        endNodeDict = dict([(\"name\",name_end), (\"X\",endPt.X), (\"Z\",endPt.Z)])\r\n        \r\n        return name_stt, name_end\r\n\r\n    sideDict = getSideDict(allCols)    \r\n        \r\n    def findSide(col, sideDict):\r\n        res = []\r\n        for k,v in list(sideDict.items()):\r\n            if col.Geometry()[0].DoesIntersect(v):\r\n                res.append(k)\r\n        return res\r\n        \r\n    resDict = go(\r\n        allCols,\r\n        map( lambda x: {\r\n            \"elem\": x,\r\n            \"sectionProp\":{\r\n                \"A\": x.GetParameterValueByName(\"Family and Type\")\\\r\n                .GetParameterValueByName(\"Section Area\") * 10**2,\r\n                \"I\": find_Ix(x),\r\n                \"E\": input_E,\r\n            },\r\n            \"GUID\": x.GetParameterValueByName(\"IfcGUID\"),\r\n            \"role\": \"Column\",\r\n            \"location_line\": x.GetLocation(),\r\n            \"startNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[0],\r\n            \"endNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[1],\r\n            \"planeDirection\": \"n/a\",\r\n            \"length\": x.GetLocation().Length,\r\n            \"asgned_srfs\": [],\r\n            \"asgned_area\": 0,\r\n            \"frameNo\": find_numberNameByElem(x, frameNoDict, \"X\")[0],\r\n            \"lvBelong\": find_numberNameByElem(x, allLvsDict, \"Z\")[0],\r\n            \"sideBelong\": findSide(x, sideDict),\r\n        } )\r\n    )\r\n    \r\n    return resDict\r\n\r\nres = toDict_allCols(allCols, frameNoDict, allLvsDict)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "dede280c133c40acb099f11f00d0f716",
      "Inputs": [
        {
          "Id": "d2d63660695940d58828fcd01fabc812",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e0f9102c5c641ebbbdac5d1aff57f9f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "742bddf0378e49ec8a136fcfd44989f2",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c241d21172d2437991859c77c959dcb2",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41b4d87d300b469b90dc996f24d969f8",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aad53e0099054fa68cf49e2d4fb67f92",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "ㅑ;",
      "Id": "1593c16aad9c4090b6ecee01e4bc318b",
      "Inputs": [
        {
          "Id": "a916e34ed60d4736839134b64979d29e",
          "Name": "ㅑ",
          "Description": "ㅑ",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dde3464b44cb4f159100aa5005a268ca",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.BoundingBox.ByGeometry@Autodesk.DesignScript.Geometry.Geometry[]",
      "Id": "bbeeaf2a290040399367ee775f3dffc8",
      "Inputs": [
        {
          "Id": "2ae67857db1847ee85ccaca3f604d515",
          "Name": "geom",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08ce0735e6f940b58062b29200970970",
          "Name": "BoundingBox",
          "Description": "BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an axis-aligned BoundingBox around input Geometry.\n\nBoundingBox.ByGeometry (geom: Geometry[]): BoundingBox"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallFrames = IN[0]\r\n# Place your code below this line\r\n\r\ndef getAllFrameLvs(allFrames):\r\n    allFrames_loc = list(map(lambda x: x.GetLocation(),allFrames))\r\n    allFrameLvElevations = go(\r\n        allFrames_loc,\r\n        map(lambda x: x.StartPoint.Z),set,\r\n        sorted,\r\n    )\r\n    return allFrameLvElevations\r\n\r\ndef getAllLvs(allFrames):\r\n    allLvElevations = getAllFrameLvs(allFrames)\r\n    if 0 in allLvElevations:\r\n        res = allLvElevations\r\n    elif 0 not in allLvElevations:\r\n        res = [0] + allLvElevations\r\n    \r\n    return res\r\n\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n\r\ndef getLevelsDict(allFrames):\r\n    allFrames_loc = list(map(lambda x: x.GetLocation(), allFrames))\r\n    allLvElevations = getAllLvs(allFrames)\r\n    \r\n    lvNames = index_toName(allLvElevations)\r\n    \r\n    resDict = go(\r\n        zip(lvNames, allLvElevations),\r\n        dict,\r\n    )\r\n    \r\n    return resDict\r\n\r\nres = getLevelsDict(allFrames)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "83d28945b88647a18e1c648b417e808f",
      "Inputs": [
        {
          "Id": "59b8020eef344472a5b195fcea3784b7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70810211d2514fefa00e3c22a23c7579",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallLvsDict = IN[1]\r\nallBeams = IN[0]\r\nframeNoDict = IN[2]\r\nshortAxisNoDict = IN[3]\r\nallCols = IN[4]\r\ninput_E = IN[5]\r\n# Place your code below this line\r\ndef chck_intsctWithCols(frame, allColsGeo):\r\n    frameLocation = frame\\\r\n                    .GetLocation()\\\r\n                    .ExtendStart(500)\\\r\n                    .ExtendEnd(500)\r\n    res = frameLocation.DoesIntersect(allColsGeo)\r\n    \r\n    return res\r\n\r\ndef filter_allGirders(allBeamsDicts, allCols):\r\n    allColsGeo = go(\r\n        allCols,\r\n        map(lambda x: x.Geometry()[0]),list,\r\n        Solid.ByUnion,\r\n    )\r\n    res = go(\r\n        allBeamsDicts,list,\r\n        filter(lambda x: chck_intsctWithCols(x, allColsGeo)),\r\n        list,\r\n    )\r\n    return res\r\n\r\n\r\n\r\ndef toDict_allGirders(allGirders, frameNoDict, allLvsDict, shortAxisNoDict, input_E):\r\n    \r\n    def find_Ix(elem):\r\n        _tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Web Thickness\") * 10\r\n        _tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Flange Thickness\") * 10\r\n        _h = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Height\") * 10\r\n        _bf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Width\") * 10\r\n        \r\n        Ix = (2*(_bf*_tf**3/12+_bf*_tf*((_h-2*_tf)/2+_tf/2)**2)+_tw*(_h-2*_tf)**3/12)\r\n        Ix_revit = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Moment of Inertia strong axis\") * 10**4\r\n        return Ix_revit\r\n    \r\n    def find_numberNameByElem(elem, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": elem.GetLocation().StartPoint.X,\r\n            \"Y\": elem.GetLocation().StartPoint.Y,\r\n            \"Z\": elem.GetLocation().StartPoint.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_numberNameByPt(pt, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": pt.X,\r\n            \"Y\": pt.Y,\r\n            \"Z\": pt.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict):\r\n        sttPt = elem.GetLocation().StartPoint\r\n        \r\n        endPt = elem.GetLocation().EndPoint\r\n        \r\n        name_stt_X = find_numberNameByPt(sttPt, frameNoDict, \"X\")[0]\r\n        name_stt_Y = find_numberNameByPt(sttPt, shortAxisNoDict, \"Y\")[0]\r\n        name_stt_Z = find_numberNameByPt(sttPt, allLvsDict, \"Z\")[0]\r\n        name_stt = \"1\" + name_stt_X + name_stt_Y + name_stt_Z\r\n        \r\n        sttNodeDict = dict([(\"name\",name_stt), (\"X\",sttPt.X), (\"Z\",sttPt.Z)])\r\n        \r\n        name_end_X = find_numberNameByPt(endPt, frameNoDict, \"X\")[0]\r\n        name_end_Y = find_numberNameByPt(endPt, shortAxisNoDict, \"Y\")[0]\r\n        name_end_Z = find_numberNameByPt(endPt, allLvsDict, \"Z\")[0]\r\n        name_end = \"1\" + name_end_X + name_end_Y + name_end_Z\r\n        \r\n        endNodeDict = dict([(\"name\",name_end), (\"X\",endPt.X), (\"Z\",endPt.Z)])\r\n        \r\n        return sttNodeDict, endNodeDict\r\n        \r\n    def find_elemDirection(line):\r\n        lineVector = line.Direction.Normalized()\r\n        if abs(lineVector.X) > 0:\r\n            res = \"longAxis\"\r\n        elif abs(lineVector.Y) > 0:\r\n            res = \"shortAxis\"\r\n        return res\r\n        \r\n    resDict = go(\r\n        allGirders,\r\n        map( lambda x: {\r\n            \"elem\": x,\r\n            \"sectionProp\":{\r\n                \"A\": x.GetParameterValueByName(\"Family and Type\")\\\r\n                .GetParameterValueByName(\"Section Area\") * 10**2,\r\n                \"I\": find_Ix(x),\r\n                \"E\": input_E,\r\n            },\r\n            \"GUID\": x.GetParameterValueByName(\"IfcGUID\"),\r\n            \"role\": \"Girders\",\r\n            \"location_line\": x.GetLocation(),\r\n            # 노드 추가\r\n            \"startNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[0],\r\n            \"endNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[1],\r\n            \"planeDirection\": find_elemDirection(x.GetLocation()),\r\n            \"length\": x.GetLocation().Length,\r\n            \"asgned_srfs\": [],\r\n            \"asgned_area\": 0,\r\n            \"frameNo\": find_numberNameByElem(x, frameNoDict, \"X\")[0],\r\n            \"lvBelong\": find_numberNameByElem(x, allLvsDict, \"Z\")[0],\r\n            \"sideBelong\": [] #findSide(x, sideDict),\r\n        } )\r\n    )\r\n    return resDict\r\n\r\n#allBeamsDicts = toDict_allBeams(allBeams, frameNoDict, allLvsDict)\r\nallGirders = filter_allGirders(allBeams, allCols)\r\nallGirdersDicts = toDict_allGirders(allGirders, frameNoDict, allLvsDict, shortAxisNoDict, input_E)\r\n\r\nres = allGirdersDicts\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6f79eeb6bdc2403d813222c2c7013b9a",
      "Inputs": [
        {
          "Id": "37d15c60385f4a59b07073982620a34a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98700cf7b33a4325891ba90aa32db69d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "151f93a3425c4d23aa85e18df4ab2668",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7471d9243dd14a31a5c95d627f65e717",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d311d0dba104fa280c9c26ccc5bb263",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98a99171ca7f4fee9437d5b15cf9eda4",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eaf64d9b96ba47fa83a1be197a9d4722",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallCols = IN[0]\r\nbdLongiVec = IN[1]\r\n# Place your code below this line\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n    \r\ndef get_SpansDict(allCols, bdLongiVec):\r\n    xSpans = go(\r\n        allCols,\r\n        lambda x: grpBy(x, lambda x: x.GetLocation().StartPoint.X)[1],\r\n        sorted,list\r\n    )\r\n    ySpans = go(\r\n        allCols,\r\n        lambda x: grpBy(x, lambda x: x.GetLocation().StartPoint.Y)[1],\r\n        sorted,list\r\n    )\r\n    \r\n    if bdLongiVec.IsParallel(Vector.XAxis()):\r\n        spans = xSpans\r\n    elif bdLongiVec.IsParallel(Vector.YAxis()):\r\n        spans = ySpans\r\n    \r\n    spanNames = index_toName(spans)\r\n    resDict = go(\r\n        zip(spanNames, spans),\r\n        dict,\r\n    )\r\n    return resDict\r\n\r\n\r\nres = get_SpansDict(allCols, bdLongiVec), get_SpansDict(allCols, bdLongiVec.Rotate(Vector.ZAxis(), 90) )\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1d32b6df35d14f87a4e04e542e258462",
      "Inputs": [
        {
          "Id": "88a2199484764cb38f1148b3fef8f1a2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ab64cdf3788e454797089b392c23cef4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "03e29284cb7d4849bb8b1daeb4351d6d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallCols = IN[0]\r\n# Place your code below this line\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n    \r\ndef get_BuilingBdBox(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBox = BoundingBox.ByGeometry(allCols_loc).ToCuboid()\r\n    return bdBox\r\n\r\ndef find_longitudinalAxis(allCols):\r\n    bdBox = get_BuilingBdBox(allCols)\r\n    btmFace_PeriLine = go(\r\n        bdBox,\r\n        lambda x: x.Explode(),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == -1),\r\n        list, lambda x: x[0],\r\n        lambda x: x.PerimeterCurves(),\r\n    )\r\n    longitudinalVec = go(\r\n        btmFace_PeriLine,\r\n        map(lambda x: x.Length), max,\r\n        lambda x: filter(lambda y: y.Length == x, btmFace_PeriLine),\r\n        list,lambda x:x[0],\r\n        lambda x: x.Direction.Normalized(),\r\n    )\r\n    if longitudinalVec.X < 0 or longitudinalVec.Y < 0:\r\n        longitudinalVec = longitudinalVec.Reverse()\r\n    else:\r\n        pass\r\n    \r\n    return longitudinalVec\r\n\r\nres = find_longitudinalAxis(allCols)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "bc29062fddea4a51a1ce6b0c7b28a71e",
      "Inputs": [
        {
          "Id": "054d9ef0a32844799e4d24dcbd5ce1d1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "73f5a2850094462da6a97cff99a3d1a6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n    \r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\n\r\nelems_forAllLv = IN[1]\r\n#gridsX, gridsY = grids\r\n\r\n# Place your code below this line\r\n\r\n\r\ndef grp_XYbeamsLinesPerLv(elemsPerLv):\r\n    allLines = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        list,\r\n    )\r\n    directionsPerLevel = go(\r\n        allLines,\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(allLines, isParallel)[0]\r\n\r\ndef make_pairFrames(xGrps, yGrps):\r\n    pairX = go(\r\n        xGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        map(lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1]))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    pairY = go(\r\n        yGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),list,\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1])),\r\n        # 서브리스트 구조 Transpose\r\n        map(lambda x: list(zip(*chain(x)))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    return pairX, pairY\r\n\r\ndef get_IntersectInGrp(xGrp, yGrp):\r\n    res = []\r\n    for x in xGrp:\r\n        for y in yGrp:\r\n            res.append(x.Intersect(y))\r\n    return list(chain(*res))\r\n\r\ndef GetBoundingSrfs(intscts):\r\n    res = []\r\n    try:\r\n        crvSet = concave_hull(intscts, 100000)\r\n        polyCrv = PolyCurve.ByJoinedCurves(crvSet)\r\n        srf = Surface.ByPatch(polyCrv)\r\n        srfThick = srf.Thicken(10,False)\r\n#        bdCube = BoundingBox.ByGeometry(srfThick).ToCuboid()\r\n#        bdCubeSrfs = bdCube.Explode()\r\n#        bdBelowSrf = go(\r\n#            bdCube.Explode(),\r\n#            #bdCubeSrfs,\r\n#            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z != 0),\r\n#            list,\r\n#        )[0]\r\n        return srf\r\n    except: pass\r\n\r\ndef makeSrf_btwnFrame(xGrps, yGrps):\r\n    res = []\r\n    for xGrp in xGrps:\r\n        for yGrp in yGrps:\r\n            intscts = get_IntersectInGrp(xGrp, yGrp)\r\n            if GetBoundingSrfs(intscts):\r\n                res.append(GetBoundingSrfs(intscts))\r\n\r\n    return res\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nXY_elems_forAllLv = list(map(grp_XYbeamsLinesPerLv, elems_forAllLv))\r\npairFrames_forAllLv = list(map(lambda x: list(make_pairFrames(*x)), XY_elems_forAllLv))\r\nsrfs_forAllLv = list(map(lambda x: list(makeSrf_btwnFrame(*x)), pairFrames_forAllLv))\r\n\r\nOUT = srfs_forAllLv",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0d9b4f0427e14f4a96983dc34d03a01c",
      "Inputs": [
        {
          "Id": "f948e2fe69b545a69e1ae38f8f97be38",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1950e05ba4a84a84ad69e80a6ba98448",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7e77960ce99448daf15739964368db7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"planeDirection\"];",
      "Id": "047bc794d31c405c9c7a4440667f028b",
      "Inputs": [
        {
          "Id": "76d36b354ea947e09acdfdc8770f2cd9",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b0ee88cf70004048b5f3e81e3417a391",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "ed390b87b63f4aa0bf80c561ce54c9ad",
      "Inputs": [
        {
          "Id": "b7e9f348f52f42f8af213b7d8064ed47",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35fbf4e22b6049f8b90ab59a27c3fa15",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "c7e79d11f4714006979cacfbfb65a5e0",
      "Inputs": [
        {
          "Id": "30233787def34d7ebc1ed6c93ea7ddbe",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2df41e14a4e64d2080e6f495abd9abc5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allBeams;",
      "Id": "3512cf5aa683450f8eaeab5c0f4bf060",
      "Inputs": [
        {
          "Id": "ed9b157af08a4faead1214e0a342c5db",
          "Name": "allBeams",
          "Description": "allBeams",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5547584f0abc4508b245b6fee3a058ef",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allCols;",
      "Id": "234f7d4e5f214bc988c01f8f6cb9f393",
      "Inputs": [
        {
          "Id": "8d37cc1c8a2945ccb7f695732ba71707",
          "Name": "allCols",
          "Description": "allCols",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6b1e9bab85d4057a6de25b89351478a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "210000;",
      "Id": "27fca69ce6a2433cb655dfb9fd4aa094",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ac1e178f43c4457c9f4493f2c8619f4d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 1,
      "MaximumValue": 40,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "6ca49a2c991c431f80920fca235e81e1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "197eabd550254fd1b15ddbc1fd7408de",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    }
  ],
  "Connectors": [
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "c53c1089b02141c3860b9b2272c4052a",
      "Id": "9ec8c85f392243f79f445a40e6f32162",
      "IsHidden": "False"
    },
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "720e3f8f0e954ed480896eaf69eebf7b",
      "Id": "e03cdd72f060495bad9a091052001d3a",
      "IsHidden": "False"
    },
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "ed9b157af08a4faead1214e0a342c5db",
      "Id": "102747ccb0724046ba494fc15cb6ecbf",
      "IsHidden": "False"
    },
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "59b8020eef344472a5b195fcea3784b7",
      "Id": "914061411fa6424ab8e206e618d5cf04",
      "IsHidden": "False"
    },
    {
      "Start": "1deee3be24b949e1941b47be2b544582",
      "End": "14f1648433474e7580b1443397bd7356",
      "Id": "a40038268dfc455faac785ea80ab249b",
      "IsHidden": "False"
    },
    {
      "Start": "f57a3755aaa2428d99627f7616d39764",
      "End": "c6ea57d8d9364ea2ac3cbababfcdc75a",
      "Id": "6e2285f58dd34835af3d9524e87df8a6",
      "IsHidden": "False"
    },
    {
      "Start": "f57a3755aaa2428d99627f7616d39764",
      "End": "920f662ab29649dd902121f861d04b09",
      "Id": "e2b5ec36bb9e407ab7982585edaae841",
      "IsHidden": "False"
    },
    {
      "Start": "2ba074e1d7134cb182e2fa80a0c1a6dd",
      "End": "ca0ece6f96a04bfd814175a989fc2fd0",
      "Id": "0329fae082404d76bac034d611ca5822",
      "IsHidden": "False"
    },
    {
      "Start": "fa8e5f5b1e384e04a59d23b80faaae9e",
      "End": "00e98b6b89dd4c668502feec511cf309",
      "Id": "523cafcf1334402e8b6c9be780b8109e",
      "IsHidden": "False"
    },
    {
      "Start": "d00715250a44459096e0d6ce0227b2ee",
      "End": "858159a77cf64a198be45b20beea7005",
      "Id": "b36befaffb1845d4be01ee3e292c45bf",
      "IsHidden": "False"
    },
    {
      "Start": "d00715250a44459096e0d6ce0227b2ee",
      "End": "3274213193354c71b09cfc3b419c1eb0",
      "Id": "4af0d2e6f6e64654834fa467fff07025",
      "IsHidden": "False"
    },
    {
      "Start": "d00715250a44459096e0d6ce0227b2ee",
      "End": "b9ff13b9efeb4506961d257aff8595be",
      "Id": "abdc5abd179f40de892c6137cc891c95",
      "IsHidden": "False"
    },
    {
      "Start": "d00715250a44459096e0d6ce0227b2ee",
      "End": "442fa8d96783469eb3af2d767a8cbc17",
      "Id": "685c5c5611f74979a33340c18ea1302c",
      "IsHidden": "False"
    },
    {
      "Start": "d00715250a44459096e0d6ce0227b2ee",
      "End": "a1ae9b14cac24169b3daf4a7e8b32fb6",
      "Id": "7372ac9a88d342bd92b73952e7d3e111",
      "IsHidden": "False"
    },
    {
      "Start": "f360321c9a0f49a09bc8b8c824383a5a",
      "End": "255def3172494cc09f9b2a54813159de",
      "Id": "dd7bc06335df48c89cd344a9c621f5d7",
      "IsHidden": "False"
    },
    {
      "Start": "f360321c9a0f49a09bc8b8c824383a5a",
      "End": "4be04c74eeb343c29b042f53f1e6ba6e",
      "Id": "1f892a1290f34f53a9149c854e58e59c",
      "IsHidden": "False"
    },
    {
      "Start": "6df21ecf7a324927a1c2e211b0bf48f6",
      "End": "4e367542af6442049b1557adfc88017d",
      "Id": "568b79251ecf4d4a892206d754d32fe3",
      "IsHidden": "False"
    },
    {
      "Start": "493c48e8c7554f7b95990cdb049d799a",
      "End": "278c98882eda458ebded23c91549af06",
      "Id": "7026c9aee6154c999d3d18a4a4414de9",
      "IsHidden": "False"
    },
    {
      "Start": "9a342604dbaf4c3db5b9d48b95d0d101",
      "End": "c88710110069449f9d2ac0b7e074b619",
      "Id": "3054e5a78d3246e9b71eb70b5adbbf28",
      "IsHidden": "False"
    },
    {
      "Start": "d18f09fb6f204558a89468e57121e209",
      "End": "01d60ae1affd4e6e9dbb17332be1f88a",
      "Id": "a170a09302734a588e2194e80e407abf",
      "IsHidden": "False"
    },
    {
      "Start": "bccdcd8e73c44ad18899e2cdf022406f",
      "End": "199eaf9badc84c39b1d4aeecf59de002",
      "Id": "aeef61cc5b704e89b94ea11e529e4144",
      "IsHidden": "False"
    },
    {
      "Start": "24d0c9486f094465b0ae4e99c599bfd6",
      "End": "8c50e940e20c433a983fa9bb2ebf7990",
      "Id": "eeef57327a844dc2bb48193ee98dfda2",
      "IsHidden": "False"
    },
    {
      "Start": "8aefbdb75047449aa73e43e18bb420f6",
      "End": "026ad89e39d847d1a3952f37d7e09472",
      "Id": "1ecaa4caaccd41f7b7ff9489b71e588a",
      "IsHidden": "False"
    },
    {
      "Start": "b452fb4deb3f4779a297bc2ad1f52daa",
      "End": "2390ae9d68b84c8db44122a284c305fb",
      "Id": "c337c401198e4aa0b5b966fa5917221b",
      "IsHidden": "False"
    },
    {
      "Start": "8dde9279cf02476c92db815820d76aa3",
      "End": "1d495bc6537641c29fd06dc786c78e04",
      "Id": "79e02256ed9146618d89fd0966d873a6",
      "IsHidden": "False"
    },
    {
      "Start": "647a0bba04264d0c896bb24112216ce0",
      "End": "f74afd8f61874bd38b8cbc68bb36f323",
      "Id": "1436f967ba464f8daf5da7572964f007",
      "IsHidden": "False"
    },
    {
      "Start": "a41cfa8918274edd934b608f64842fc7",
      "End": "0c5d66f8cde64c5e8ef8fed75f5d2106",
      "Id": "7cca8521eb454ca58d1a7e157f602e53",
      "IsHidden": "False"
    },
    {
      "Start": "0e1ebfb5b32b40aab6acfa45d93801f9",
      "End": "2b763ec672eb48539548147305c39089",
      "Id": "ae7ed234d5c946239824904a2ef07a51",
      "IsHidden": "False"
    },
    {
      "Start": "128520d6cad440ff91fc8bf67b7c67d1",
      "End": "3f840ad7b3a54ca08916fca1cf265a89",
      "Id": "b889ba623ecc4c7d8260f3e2b6335098",
      "IsHidden": "False"
    },
    {
      "Start": "838544488ac84004b341aa2fddc1ebdc",
      "End": "3edacdb4ab7d4aa1b0d7df65590677ca",
      "Id": "7d66f153975344769866436ac600af4f",
      "IsHidden": "False"
    },
    {
      "Start": "e6d65bddf65245708fe4fb496c1fcf80",
      "End": "72b260e450524e6d932fdb1fd2c85b47",
      "Id": "bb6e22c404c345fb9775d3d496e9b290",
      "IsHidden": "False"
    },
    {
      "Start": "faad2ad8b60147e3a8847b0f319af9d5",
      "End": "30d29722c47743c08b31ef2a41e25367",
      "Id": "505b4bad683f4d33b720b9025adb540a",
      "IsHidden": "False"
    },
    {
      "Start": "faad2ad8b60147e3a8847b0f319af9d5",
      "End": "de2f151b3038461badc189ac2b79e2b6",
      "Id": "0cd11d19ec054e9ab7cf2f2a717e7950",
      "IsHidden": "False"
    },
    {
      "Start": "26799f02becc4a8baa7f20249309b3e6",
      "End": "24c1779e1e1c46a0a3d18faf16b18b71",
      "Id": "1c5f769b4d13405f9f4d9596ff66ad0e",
      "IsHidden": "False"
    },
    {
      "Start": "cd7006fb7d8348dd9305ad6720aa9f64",
      "End": "8ed5b3f059504f0d92a1b055e2939777",
      "Id": "a363b862d33d4854928ca74982f55733",
      "IsHidden": "False"
    },
    {
      "Start": "3fa02196bfdc439094875986bbe6cd68",
      "End": "054dbde7639d4f69a5f99ed66df5fc9f",
      "Id": "e1e44028749f491585fb151c8ca50037",
      "IsHidden": "False"
    },
    {
      "Start": "54f0a5f8326e4488aff611d1425cfb8e",
      "End": "2424796e8e014efa91c5e1523f169e42",
      "Id": "cc6c5eb6db314825b27dc9e4999d3306",
      "IsHidden": "False"
    },
    {
      "Start": "a6ca7e85da72498ca488bf575689265c",
      "End": "2af6a0c3a4784aadb129e2bb9b09f000",
      "Id": "1c15461527c54a0f83374fda2781a883",
      "IsHidden": "False"
    },
    {
      "Start": "1e65852073c44a4f8a2530548c80bfa3",
      "End": "97a1f4244bda40a884700d4b99291542",
      "Id": "40dc3afe5f7541b6b759fe297171a343",
      "IsHidden": "False"
    },
    {
      "Start": "eb8edd0307f94b3f8c762acd43e2c342",
      "End": "17bc8fb50a334c20b1e4429f15026d35",
      "Id": "2d767ad6f855421c9f44557630c29fd6",
      "IsHidden": "False"
    },
    {
      "Start": "eb8edd0307f94b3f8c762acd43e2c342",
      "End": "60759d0abb1c45f5b2a602dce03ba50d",
      "Id": "1f030798dc724a14a838fba32a860439",
      "IsHidden": "False"
    },
    {
      "Start": "e132961d9cc944e6ac1deeced94fcf4f",
      "End": "dd24d1d079a340f694466bcc7c50ee49",
      "Id": "44e6d659c4dd4202aecf2746c5234610",
      "IsHidden": "False"
    },
    {
      "Start": "feba5c0940db4fdfb0a34be42c5a58aa",
      "End": "9136e7d31c3641408db1722d51cbdcba",
      "Id": "58e625f83bcf4adbbe92e17837186d32",
      "IsHidden": "False"
    },
    {
      "Start": "1f987238a98f47b3b7667c18be4f80f7",
      "End": "8f170f0015ff491a850154d10230ecd4",
      "Id": "78241a32f3274737a250972ef9077b84",
      "IsHidden": "False"
    },
    {
      "Start": "77bc267fe87e480894b5f2c957d06399",
      "End": "f0d463dc926b4d9e8b876e6762f482c1",
      "Id": "f62360c4ecb1411cbf106821083d5f30",
      "IsHidden": "False"
    },
    {
      "Start": "ec7d0d4d23724025a775a629f1a0d898",
      "End": "5733fe99d71846adb89c0c25957eabde",
      "Id": "83eba8375a05482a82ed3cb73d598d70",
      "IsHidden": "False"
    },
    {
      "Start": "15b5683ddfc543739a615e7ac87853d5",
      "End": "67082223a9ca455e88b490bab96d47c1",
      "Id": "e6bc44e2a57b47d68c58031331cdef18",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "2ce466dcf6e144a295f149de29917387",
      "Id": "a42ecce783834bbe93ee054654f02bdb",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "124a4897494c4906a4646dc1cfe26fcb",
      "Id": "b1662a0a43e04de7a9f59839c5688484",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "9893a57176f94ae9adde62915eb789e7",
      "Id": "4305d3fa29de4150a0a4f0722a5bfa1e",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "4ba0da6f575e423e86a4e00687a3caef",
      "Id": "b23fd422243b4e96b1ec4d22906210fb",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "f948e2fe69b545a69e1ae38f8f97be38",
      "Id": "60347b4bd3ba40fdb6fee9bfdd4a6aa2",
      "IsHidden": "False"
    },
    {
      "Start": "3c2e9338490e4e928bb5c86fcdd26f12",
      "End": "e1d209f24b624d49af08ba3e98e43974",
      "Id": "c36b48ed1c1b4245bfc4c9bf5a0c8d4c",
      "IsHidden": "False"
    },
    {
      "Start": "3c2e9338490e4e928bb5c86fcdd26f12",
      "End": "6a15699ee095402d81ca1d985b442d04",
      "Id": "e07cd71deae2490fab91838418587ca0",
      "IsHidden": "False"
    },
    {
      "Start": "3c2e9338490e4e928bb5c86fcdd26f12",
      "End": "5dc77541fb0b459594ef443fab5d39fd",
      "Id": "379e2640eab8406aad5d56e1b3589cd4",
      "IsHidden": "False"
    },
    {
      "Start": "81b6b21d1e5943b4b42c1f37aa8d8631",
      "End": "ee70e151c8034b65b8ef487b0dfc11f1",
      "Id": "fa4ee16ba6c44caeaf2d2ab55b7c6f50",
      "IsHidden": "False"
    },
    {
      "Start": "81b6b21d1e5943b4b42c1f37aa8d8631",
      "End": "c156348daf83403c93749b6a8a9144b7",
      "Id": "c709b96e858147b68e7531ba2c4d2994",
      "IsHidden": "False"
    },
    {
      "Start": "d6d03979733a449fae4dce41c4c78b69",
      "End": "b0b633c477e04d57843a343d80989b08",
      "Id": "67d070d027724c19a3e4eaed9f02088d",
      "IsHidden": "False"
    },
    {
      "Start": "d6d03979733a449fae4dce41c4c78b69",
      "End": "2c0142a1eaf14fddbd73ebc6160d0338",
      "Id": "328b20e25cd442cd9fd2b59f718d5e0c",
      "IsHidden": "False"
    },
    {
      "Start": "d6d03979733a449fae4dce41c4c78b69",
      "End": "c360537a306a4a41865fd292303475bc",
      "Id": "164153672d4c4ef9a1b67f0003dd3fbb",
      "IsHidden": "False"
    },
    {
      "Start": "2e2c2b8cbeb54082b23211013f0d7a34",
      "End": "2bce01a281ac476fb39681a82d3da06d",
      "Id": "5c4fd64f279b4dd68416c5fbe27682eb",
      "IsHidden": "False"
    },
    {
      "Start": "a911c58c94524fd1860e636f0140c817",
      "End": "756599f028e64f45ba3fcc1c68b83923",
      "Id": "5d0e6e5e4b3e4b739a89a2f188b570b2",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "0abaff7595da47eda6f1c3a3cb5a64c7",
      "Id": "89364aa58965473480312d9405e0899a",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "3a487d4c25a04d10a9522632c933e11e",
      "Id": "0f472d551353405e8fdf0e159aa90f19",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "88a2199484764cb38f1148b3fef8f1a2",
      "Id": "aa1f0b89ad8e47f3984d885b1948f5d1",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "054d9ef0a32844799e4d24dcbd5ce1d1",
      "Id": "5bdb33cba82943d2a2ec7e6a08684b14",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "d2d63660695940d58828fcd01fabc812",
      "Id": "f92f9fc492fd48638e05dc0beed944eb",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "8d37cc1c8a2945ccb7f695732ba71707",
      "Id": "2eba61274f604be5a93785f9a808658e",
      "IsHidden": "False"
    },
    {
      "Start": "6d3c5397b5de4ac5a0d791bbc299770e",
      "End": "58ab2b8287ee4c03bb870187239d9c7f",
      "Id": "c0b48f4848ac46df83141cc17fc4fed7",
      "IsHidden": "False"
    },
    {
      "Start": "6d3c5397b5de4ac5a0d791bbc299770e",
      "End": "bf24e560595847a9ab17ef11407cd91d",
      "Id": "0fd8a8a8dc384d50bafbe5a1cc9ecfa8",
      "IsHidden": "False"
    },
    {
      "Start": "da4d0b9ae4b34786a592162be729ab3e",
      "End": "b2b204c4efd040c38f9c9da0da49d2d2",
      "Id": "675a05c43a654efa9f4f10a1c354932f",
      "IsHidden": "False"
    },
    {
      "Start": "da4d0b9ae4b34786a592162be729ab3e",
      "End": "462c3c81cc704c11bef99f23abb9f8a9",
      "Id": "961d19e7b1fe481cb84d989df3de362f",
      "IsHidden": "False"
    },
    {
      "Start": "fcba9a65cda54c8795e3018b65c11362",
      "End": "bdaed6d4583d40bda00935fa08736bb9",
      "Id": "226f12c0cdea4696aead59446fa39496",
      "IsHidden": "False"
    },
    {
      "Start": "fcba9a65cda54c8795e3018b65c11362",
      "End": "5b88b01901d540d28d2115f9529f500e",
      "Id": "69fef655a242457884e254b96b45a1ab",
      "IsHidden": "False"
    },
    {
      "Start": "641731904fe546b188aef04c8fd14458",
      "End": "4b5eb500a0e646a2b5a2288b18f72da6",
      "Id": "5e9604de005845259043bd08c19f3453",
      "IsHidden": "False"
    },
    {
      "Start": "d2f0d31ea12f4979b925fc72634a4396",
      "End": "9cb67d8a7d9549e997a9c5d927fe6eb8",
      "Id": "86346bf115c44eb597cac517c6cabe65",
      "IsHidden": "False"
    },
    {
      "Start": "40336eee050a4136af3ac5032f8a42d9",
      "End": "f6ab3e069f524f2d812bde8cf899450e",
      "Id": "111a20cb2abc406cb3f848a2d7752212",
      "IsHidden": "False"
    },
    {
      "Start": "1f06e6ce7f9a498a949204aeb5ac21a8",
      "End": "7264c90eb8d54d0cb5453bdc879073d3",
      "Id": "13a915645ef74ceb80e58cd0a241652e",
      "IsHidden": "False"
    },
    {
      "Start": "86c98c451e2948b58a3c103abc93acdd",
      "End": "fc0ddd4f79e64d9e8a2534e55304b764",
      "Id": "40aa1c4a099b412fb84ca4797fbd71b1",
      "IsHidden": "False"
    },
    {
      "Start": "c2ff54cada1d40d9abb1488327774f7f",
      "End": "e59a5858e9e14e789368199150d0c032",
      "Id": "d2938165426c43e295ba8b43ce5e372b",
      "IsHidden": "False"
    },
    {
      "Start": "c2ff54cada1d40d9abb1488327774f7f",
      "End": "45a0095bd67345f3a77f6e90fd289ad4",
      "Id": "9bd35e3dd4ea4b668c5117bbe78fff82",
      "IsHidden": "False"
    },
    {
      "Start": "739bdc2ddda04fb890c877de28647a5a",
      "End": "6047c7768ffc4287a9c2b11b570f8053",
      "Id": "a5c296d1eb8c4c89ab59141fec7969b4",
      "IsHidden": "False"
    },
    {
      "Start": "739bdc2ddda04fb890c877de28647a5a",
      "End": "57a57cb929a942438f336642b4b403ac",
      "Id": "38a54abbead54463873ad1ecdd2c4392",
      "IsHidden": "False"
    },
    {
      "Start": "94d58f1ab44d44dd85db0c70e7cd7493",
      "End": "7cfae125429c4b718275ccd500a64e44",
      "Id": "d1642edf419e4666aa68ed66ecc31a8f",
      "IsHidden": "False"
    },
    {
      "Start": "0472186529c741a4a3118041f56ea836",
      "End": "5438ea0c5aea4135ba8123c0bf56aecd",
      "Id": "85aa8656cc8a4b1d86fb427a0007fde3",
      "IsHidden": "False"
    },
    {
      "Start": "13cad9a3ad80430884c774a5f1611827",
      "End": "a96efa07ab8a42cb95e8ad173eb5574e",
      "Id": "cdbbf2c9f8634d5f9b023a8eddf3c95b",
      "IsHidden": "False"
    },
    {
      "Start": "aad53e0099054fa68cf49e2d4fb67f92",
      "End": "a916e34ed60d4736839134b64979d29e",
      "Id": "a2a82797b5854bc0ba38e0a467a81e2b",
      "IsHidden": "False"
    },
    {
      "Start": "70810211d2514fefa00e3c22a23c7579",
      "End": "98700cf7b33a4325891ba90aa32db69d",
      "Id": "6424744bf0bb44fbb6cdcd724fda94be",
      "IsHidden": "False"
    },
    {
      "Start": "70810211d2514fefa00e3c22a23c7579",
      "End": "7e0f9102c5c641ebbbdac5d1aff57f9f",
      "Id": "dd09b17f6a40473c977f474e7a54d5eb",
      "IsHidden": "False"
    },
    {
      "Start": "eaf64d9b96ba47fa83a1be197a9d4722",
      "End": "1950e05ba4a84a84ad69e80a6ba98448",
      "Id": "94e9114272a44df7a7586601b1fceda9",
      "IsHidden": "False"
    },
    {
      "Start": "eaf64d9b96ba47fa83a1be197a9d4722",
      "End": "76d36b354ea947e09acdfdc8770f2cd9",
      "Id": "439cc493c32840b2b90ba142f3678d60",
      "IsHidden": "False"
    },
    {
      "Start": "03e29284cb7d4849bb8b1daeb4351d6d",
      "End": "b7e9f348f52f42f8af213b7d8064ed47",
      "Id": "883cfbdc9f674cb499bc823b1d03ef76",
      "IsHidden": "False"
    },
    {
      "Start": "03e29284cb7d4849bb8b1daeb4351d6d",
      "End": "30233787def34d7ebc1ed6c93ea7ddbe",
      "Id": "f4cba825c9eb40fb8c26df193ddbae67",
      "IsHidden": "False"
    },
    {
      "Start": "73f5a2850094462da6a97cff99a3d1a6",
      "End": "ab64cdf3788e454797089b392c23cef4",
      "Id": "df6b22b3d2b24d1ba5e03a9d01cf0981",
      "IsHidden": "False"
    },
    {
      "Start": "35fbf4e22b6049f8b90ab59a27c3fa15",
      "End": "151f93a3425c4d23aa85e18df4ab2668",
      "Id": "9806904051c140e98771769f3378a18d",
      "IsHidden": "False"
    },
    {
      "Start": "35fbf4e22b6049f8b90ab59a27c3fa15",
      "End": "742bddf0378e49ec8a136fcfd44989f2",
      "Id": "09954183592f4ed0bcef5cb9acbe5113",
      "IsHidden": "False"
    },
    {
      "Start": "2df41e14a4e64d2080e6f495abd9abc5",
      "End": "7471d9243dd14a31a5c95d627f65e717",
      "Id": "0741d7c12af14c7896a1c95324471a3c",
      "IsHidden": "False"
    },
    {
      "Start": "2df41e14a4e64d2080e6f495abd9abc5",
      "End": "c241d21172d2437991859c77c959dcb2",
      "Id": "f81fa10dfa354738b2e82316472a36c6",
      "IsHidden": "False"
    },
    {
      "Start": "5547584f0abc4508b245b6fee3a058ef",
      "End": "37d15c60385f4a59b07073982620a34a",
      "Id": "4d0c711a6fb84d589dbd0a9cc67760bb",
      "IsHidden": "False"
    },
    {
      "Start": "c6b1e9bab85d4057a6de25b89351478a",
      "End": "9d311d0dba104fa280c9c26ccc5bb263",
      "Id": "63998270f3c849f58bdf2edcad6b7af5",
      "IsHidden": "False"
    },
    {
      "Start": "ac1e178f43c4457c9f4493f2c8619f4d",
      "End": "98a99171ca7f4fee9437d5b15cf9eda4",
      "Id": "a1d9dd115d19460a89aa690c3e7af0e0",
      "IsHidden": "False"
    },
    {
      "Start": "ac1e178f43c4457c9f4493f2c8619f4d",
      "End": "41b4d87d300b469b90dc996f24d969f8",
      "Id": "307cf4422fd84367bc1c1d0470833074",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 31515.4921875,
      "EyeY": 14482.4248046875,
      "EyeZ": 11990.5078125,
      "LookX": -27634.48828125,
      "LookY": -15379.1982421875,
      "LookZ": -23760.939453125,
      "UpX": -0.1381860077381134,
      "UpY": 0.9832533597946167,
      "UpZ": -0.11881717294454575
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "b2a49b909bc541aeb001385b890bfea8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3773.83820946107,
        "Y": 393.63428948766636
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "97c54e52b6d24fe8bc68f1f5535565b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4130.83820946107,
        "Y": 393.63428948766636
      },
      {
        "Name": "Rooms By Status",
        "ShowGeometry": true,
        "Id": "dfee72e7cc844747b135c981fc877574",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 79.380174098571388,
        "Y": 4430.4517807478587
      },
      {
        "Name": "Room.CoreCenterBoundary",
        "ShowGeometry": false,
        "Id": "211688b734bd41209dba730bad6261bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 898.16787753260519,
        "Y": 4456.2186983682732
      },
      {
        "Name": "PolyCurve.ByJoinedCurves",
        "ShowGeometry": false,
        "Id": "1fa59893c2834090b96809dd740dce16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1267.8828240956946,
        "Y": 4558.2948789008424
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": false,
        "Id": "d5924a99a9ff46cc9f9773b80b74086a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2130.0517324698349,
        "Y": -224.2518349983327
      },
      {
        "Name": "Code Block",
        "ShowGeometry": false,
        "Id": "1288abe4e92e4f21b8b340b06eb1c81c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2539.9403150352005,
        "Y": -160.55438005934093
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "f0a071aa4b4b45a1a38beed1baf029b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 679.29235595423643,
        "Y": 4809.9927486942979
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": false,
        "Id": "6c2e1968b221451293a51d60f438750b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1218.2335397750828,
        "Y": -129.88746193503528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": false,
        "Id": "ac0f890652e848559107af5797497836",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1257.4034954044696,
        "Y": -950.9160136860994
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "75c0ae7762784a6dbedc1aed2765c5cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 130.52881041696867,
        "Y": 3287.1667269057125
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "9254457efbcc4dd38af8a446011532fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.52881041696844,
        "Y": 3281.1667269057125
      },
      {
        "Name": "getColumnCrv",
        "ShowGeometry": true,
        "Id": "8b448b05d212466ca09dac41f01a35ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 1486.1236859622534,
        "Y": 3279.969714222063
      },
      {
        "Name": "filterAGCols",
        "ShowGeometry": true,
        "Id": "5947929000cd4f26be10262504b830f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1081.9374552114118,
        "Y": 3282.0950805795246
      },
      {
        "Name": "제외단면",
        "ShowGeometry": true,
        "Id": "1d286349bcf440bd803fce47b14800ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -613.46261030574351,
        "Y": 3873.3783501100797
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "5449b19eadde45b9a56e7fe0ad5bebe5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 259.87266277506671,
        "Y": 3945.3783501100797
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8f5ca1301b8c4a46bc8f3548ac020cad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -121.12733722493329,
        "Y": 4051.20585011008
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "69c45813c87f4708a0c3a1e08ada40be",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -375.1273372249334,
        "Y": 3907.20585011008
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "b546379d151d42d68e463736694d38fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -121.12733722493329,
        "Y": 3873.3783501100797
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "b07f43b4d8b041bc92d9c422b4a9415d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 640.87266277506671,
        "Y": 3945.3783501100797
      },
      {
        "Name": "String.Contains",
        "ShowGeometry": false,
        "Id": "f915d82b309f43279c9d060434efc169",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -672.4810770257568,
        "Y": -827.98601130638758
      },
      {
        "Name": "Element.Name",
        "ShowGeometry": false,
        "Id": "5c2ed3e93edc4db5aa7bc8b39d8e590a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -974.0366537373817,
        "Y": -827.98601130638747
      },
      {
        "Name": "Code Block",
        "ShowGeometry": false,
        "Id": "b8f76ad6bb9843a9bb2c5cd8881708e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -902.93462604370325,
        "Y": -642.79618439591491
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Id": "bd70d470ae2c4ebbbee75f5a3beef249",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -369.06519401213825,
        "Y": -951.67932150019487
      },
      {
        "Name": "Code Block",
        "ShowGeometry": false,
        "Id": "89a673db170c4bbe8fcbefad55010d62",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -192.61799315476196,
        "Y": 214.52577948034227
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "7695c191e50548e4b07e493f33d6d32e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 61.382006845238038,
        "Y": 214.69827948034228
      },
      {
        "Name": "1. DL 층별 정보(kN/m²)",
        "ShowGeometry": true,
        "Id": "bc9a95c7fefd47c784a8f995f1770c56",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5148.6903681437043,
        "Y": 2030.8546977075268
      },
      {
        "Name": "전층 경간 면 생성",
        "ShowGeometry": true,
        "Id": "88677a05d98744a4ada829a0f58fcc8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 441.74665996568319,
        "Y": 637.5505138785453
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "9bc199a3fa4f49c7885122c0c6fd9f6f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4516.3778520573906,
        "Y": 2033.2277561267611
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "61ceae660b9f49978d49b11d14ea19a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4790.771349868126,
        "Y": 2157.5577366573757
      },
      {
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Id": "b92be98ed6fc4904b6fd7728d18671b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3992.7666982395749,
        "Y": 2039.0849291393101
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b573abeeac714845bb1aa2c6615f3f34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -688.1748268832157,
        "Y": 1505.3188561724346
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "3072c1704ff94e318a4b33b65c80f5b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -858.54477190528769,
        "Y": 82.045349798669463
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "22d2aacaae374c7f880d8475b9e63510",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1641.78959623515,
        "Y": -12.146439964810327
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d028cf4ccc8d4ef39d562ce2a01e3fbf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1967.3712108350767,
        "Y": 55.782901006795839
      },
      {
        "Name": "전층 경간면 내부 등분선 찾기",
        "ShowGeometry": true,
        "Id": "d8b7cefba4d942fdb4b0995b1d4b353f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1168.4359281830646,
        "Y": 548.21720144259928
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "84498cb015cf4ed48c71273d029f2953",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5922.2895038824718,
        "Y": 2040.3464392466256
      },
      {
        "Name": "2. LL 층별 정보(kN/m²)",
        "ShowGeometry": true,
        "Id": "e083674f7a764e36ac6f9e2a038d9e43",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5137.855138338502,
        "Y": 2427.8603071065672
      },
      {
        "Name": "3. b :: Wind Information 입력 (대괄호 항목 다음줄에 입력) ",
        "ShowGeometry": true,
        "Id": "14121a0174a9447db3f1f8d2958c5478",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5153.4781850472218,
        "Y": 3303.4735810017087
      },
      {
        "Name": "3. a :: Wind_Code 선택",
        "ShowGeometry": true,
        "Id": "60db081fa6bf49d1993b3d870e9ce937",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5144.0086767545372,
        "Y": 2759.2804647705811
      },
      {
        "Name": "3. c :: Wind_Enclosure Classification",
        "ShowGeometry": true,
        "Id": "de8f6697fa7c4452832bff989fc47a53",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5140.6216690111487,
        "Y": 3838.9410937975022
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "ac901e7fe2b048ecb4171e194af680c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4103.21113570229,
        "Y": 3422.5772681952044
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0d70a0a0391e4c2182beb0c3598ba223",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4324.1261535110589,
        "Y": 3505.0864679126248
      },
      {
        "Name": "input 제어기",
        "ShowGeometry": true,
        "Id": "f1dd1375c77646f3ae78cbade74e8767",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3693.9460747956227,
        "Y": 3423.0579462361497
      },
      {
        "Name": "0. 실행모드",
        "ShowGeometry": true,
        "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5164.6179558387839,
        "Y": 1725.8417482942828
      },
      {
        "Name": "filePath",
        "ShowGeometry": true,
        "Id": "26406ae42bcb4b309436e92bb6941220",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5792.3867891392447,
        "Y": 1762.5264262218202
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9c0b7760c67e48adb51b9bb2a84794b7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6011.9137792152942,
        "Y": 1764.6911096293488
      },
      {
        "Name": "4. a :: Seismic_Code 선택",
        "ShowGeometry": true,
        "Id": "b271a34b43fa43868d041d32bf7a51f6",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5153.9967340866442,
        "Y": 4192.8969451644361
      },
      {
        "Name": "4. b :: Seismic Information 입력 (대괄호 항목 다음줄에 입력) ",
        "ShowGeometry": true,
        "Id": "ef78688c111e484c8cb92b1ebde675ae",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5163.1763898934478,
        "Y": 4419.8236735786786
      },
      {
        "Name": "concave_hull",
        "ShowGeometry": true,
        "Id": "0d22839ba4e54ad4b810e4df27687cfb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1047.6493274650179,
        "Y": 510.54062775308091
      },
      {
        "Name": "Element 별 하중srf 할당_frame",
        "ShowGeometry": true,
        "Id": "64f3d4cc82c34fc9b0556c560a95808b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1637.5788985496258,
        "Y": 794.24822803700886
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8c20f6b02473474e977352b740c944d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -175.76639211149677,
        "Y": 500.04989140149019
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "811f9cb11bdb4c839460e588b36af327",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2055.6112698625475,
        "Y": 241.74697999963934
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4a233c39844b47c98359a5ac30199142",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2648.3637973053,
        "Y": 400.75516910456196
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2a7a83f449b64744801eaf5c1067f8ef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3019.4395185254921,
        "Y": 1271.3826647930862
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "770d677e7a1d44f384bc1bd380c6b233",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3847.7609724616204,
        "Y": 987.11349551874446
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "1132aa09bbfe4b18bc908178c3de9028",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4170.7925624589552,
        "Y": 988.90130657151644
      },
      {
        "Name": "부재 별 노드명명 및 하중 값 계산",
        "ShowGeometry": true,
        "Id": "3c5f91a5c46b48d98b97a7f04c546eb9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2011.4608650362156,
        "Y": 963.8419445571958
      },
      {
        "Name": "allCols",
        "ShowGeometry": true,
        "Id": "670b14e580c14f2197f7fffaf9705193",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3031.18680842347,
        "Y": 1042.529332232019
      },
      {
        "Name": "거더 필터링(기둥과 교차 여부)",
        "ShowGeometry": true,
        "Id": "53998335930344b78674fc91ba55ee97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3206.0811954877272,
        "Y": -492.92950571222332
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0556ef865fa94493b462b8655d13bc1b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2550.2348622636714,
        "Y": -710.77141839734122
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6ae730eaac264e25afe201b0e936ae26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1612.0,
        "Y": 492.0
      },
      {
        "Name": "Polygon.ByPoints",
        "ShowGeometry": true,
        "Id": "93fbc17d00384847a0ca59f2d9a9181d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 878.57994175589511,
        "Y": 273.79183824279409
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "6e002e40187e42cab28cc5747914bc72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2458.3995950096996,
        "Y": 1022.8290897258653
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "29c73e5382a34d58bd6e448daa84d352",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3601.5046961823209,
        "Y": 1034.5252417494094
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9f436b964f3c49118be210e323deed07",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2845.3783821201114,
        "Y": 1303.7697294303912
      },
      {
        "Name": "String.Substring",
        "ShowGeometry": true,
        "Id": "9d124f84b798469181b8d9ff6e9e7c5b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3268.6644946108463,
        "Y": 1329.4360376121956
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "795bf8807f144be8b8758cda999b980b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3057.0,
        "Y": 1393.0
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "29b6c5ea450f43be977d6086311a3882",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3963.9313099820756,
        "Y": 1096.334602455222
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "593ed1db06f34e21ad35134f4490f650",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4279.6335606607672,
        "Y": 1002.0795152496783
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e5209b5fa7f4448191a67ce900c869b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4268.76870616746,
        "Y": 1306.3268338031924
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "07eda9b656564a7b992e85bbb19a0d44",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2753.4555136776653,
        "Y": -702.6184793000607
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "dc19413b86db4011b56106f69b9996da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2596.3513785314544,
        "Y": -955.69151894540482
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "803c056c7418486e8dc24d9d331f24dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3633.1682273955075,
        "Y": 1531.9918125198851
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "836198db033e4196a9f63fb11c803eec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1536.9211903215541,
        "Y": 1868.9678394134946
      },
      {
        "Name": "Element 별 하중srf 할당_col",
        "ShowGeometry": true,
        "Id": "1942c915de0c417cae1fa72f29adab5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1644.8656359151262,
        "Y": 1351.1174271852494
      },
      {
        "Name": "전층 경간면 내부 등분선 찾기_col",
        "ShowGeometry": true,
        "Id": "0adeb4e49b63401e86963ef97ca9dbc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1144.9321698737281,
        "Y": 1156.4614553686915
      },
      {
        "Name": "전입면 경간 면 생성_col",
        "ShowGeometry": true,
        "Id": "eacc4712e5dc4a9c9a655a3e80d7ca8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 474.87832489170523,
        "Y": 1185.2580664328036
      },
      {
        "Name": "toDict_allCols",
        "ShowGeometry": true,
        "Id": "dede280c133c40acb099f11f00d0f716",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1379.0374736393944,
        "Y": 1204.1505156099986
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1593c16aad9c4090b6ecee01e4bc318b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 16.89098343108185,
        "Y": 1173.856753456238
      },
      {
        "Name": "BoundingBox.ByGeometry",
        "ShowGeometry": true,
        "Id": "bbeeaf2a290040399367ee775f3dffc8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -338.05192028289662,
        "Y": 1785.8980550971307
      },
      {
        "Name": "getLevelsDict",
        "ShowGeometry": true,
        "Id": "83d28945b88647a18e1c648b417e808f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2118.9262489514654,
        "Y": 569.27034286746152
      },
      {
        "Name": "toDict_allBeams",
        "ShowGeometry": true,
        "Id": "6f79eeb6bdc2403d813222c2c7013b9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1386.7551631698886,
        "Y": 575.48556613475739
      },
      {
        "Name": "get_frameNoDict(장축방향)",
        "ShowGeometry": true,
        "Id": "1d32b6df35d14f87a4e04e542e258462",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2168.6301979296309,
        "Y": 929.01080398254567
      },
      {
        "Name": "find_longitudinalAxis(건물의 장축방향 벡터)",
        "ShowGeometry": true,
        "Id": "bc29062fddea4a51a1ce6b0c7b28a71e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2664.3074079735979,
        "Y": 876.55101849143466
      },
      {
        "Name": "전층 경간 면 생성_new",
        "ShowGeometry": true,
        "Id": "0d9b4f0427e14f4a96983dc34d03a01c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -682.88543453312582,
        "Y": 692.736526022731
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "047bc794d31c405c9c7a4440667f028b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -865.09661009253682,
        "Y": 979.51595573221289
      },
      {
        "Name": "longAxis",
        "ShowGeometry": true,
        "Id": "ed390b87b63f4aa0bf80c561ce54c9ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1823.2790289145726,
        "Y": 843.91246449359323
      },
      {
        "Name": "shortAxis",
        "ShowGeometry": true,
        "Id": "c7e79d11f4714006979cacfbfb65a5e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1819.1169858773962,
        "Y": 1005.7969191047412
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3512cf5aa683450f8eaeab5c0f4bf060",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2142.9770780520257,
        "Y": 379.99727733637735
      },
      {
        "Name": "allCols",
        "ShowGeometry": true,
        "Id": "234f7d4e5f214bc988c01f8f6cb9f393",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1840.9775132902096,
        "Y": 1226.7647947445312
      },
      {
        "Name": "탄성계수",
        "ShowGeometry": true,
        "Id": "27fca69ce6a2433cb655dfb9fd4aa094",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2240.0,
        "Y": 1642.0
      },
      {
        "Name": "콘크리트 강도 선택",
        "ShowGeometry": true,
        "Id": "6ca49a2c991c431f80920fca235e81e1",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5737.509534100479,
        "Y": 3146.2289673257128
      }
    ],
    "Annotations": [
      {
        "Id": "53073e6821ef4c498138d68d19ba94d3",
        "Title": "제외 단면 명 리스트 정리구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "5449b19eadde45b9a56e7fe0ad5bebe5",
          "8f5ca1301b8c4a46bc8f3548ac020cad",
          "69c45813c87f4708a0c3a1e08ada40be",
          "b546379d151d42d68e463736694d38fe",
          "b07f43b4d8b041bc92d9c422b4a9415d"
        ],
        "HasNestedGroups": false,
        "Left": -385.1273372249334,
        "Top": 3800.3783501100797,
        "Width": 1231.0,
        "Height": 382.82750000000033,
        "FontSize": 36.0,
        "InitialTop": 3873.3783501100797,
        "InitialHeight": 322.82750000000033,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "7546f83289ef4f72a03eb921f38390ef",
        "Title": "소속 입면 정보도 딕셔너리 추가\n\n외부기둥만(판별은 기둥 로케이션 라인 전체 바운딩 박스로)\n내부기둥은 정보 없음으로\n\nNside\nEside\nSside\nWside",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": -451.78479166914167,
        "Top": 1070.3027837947309,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 1096.8455783180539,
    "Y": -322.930630420296,
    "Zoom": 0.54970109376769649
  }
}