{
  "Uuid": "85bcf151-2a93-40fc-b906-7644e4add275",
  "IsCustomNode": false,
  "Description": "",
  "Name": "[HSD kit]_하중분배 및 부재 해석_[1.1.4]",
  "ElementResolver": {
    "ResolutionMap": {
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "DesignScript.Builtin.Dictionary": {
        "Key": "DesignScript.Builtin.Dictionary",
        "Value": "DesignScriptBuiltin.dll"
      }
    }
  },
  "Inputs": [
    {
      "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
      "Name": "0. 실행모드",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "입력모드",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "6ca49a2c991c431f80920fca235e81e1",
      "Name": "콘크리트 강도 선택 (MPa)",
      "Type": "number",
      "Type2": "number",
      "Value": "28",
      "MaximumValue": 40.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Integer",
      "Description": "A slider that produces integer values.",
      "SelectedIndex": 0
    },
    {
      "Id": "14eed113613e4654a80635709f99cb88",
      "Name": "Set Port Number: 기본값-8500 (작동 오류 없다면 변경 금지)",
      "Type": "string",
      "Type2": "string",
      "Value": "8500",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "aeb818053a804a8cbd97ec6a8f81210e",
      "Name": "1. 구조형식",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "Steel",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 1
    }
  ],
  "Outputs": [
    {
      "Id": "03655d38fc55463ca6c1516d9a800ba9",
      "Name": "하중분배결과파일 이름 생성",
      "Type": "integer",
      "InitialValue": "0",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "b2a49b909bc541aeb001385b890bfea8",
      "Inputs": [
        {
          "Id": "14f1648433474e7580b1443397bd7356",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ce37ab31de545d9a49734c18d5c0c9c",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 612,
      "SelectedString": "OST_StructuralFraming",
      "NodeType": "ExtensionNode",
      "Id": "97c54e52b6d24fe8bc68f1f5535565b1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1deee3be24b949e1941b47be2b544582",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.RoomsByStatus, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "dfee72e7cc844747b135c981fc877574",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f57a3755aaa2428d99627f7616d39764",
          "Name": "PlacedRooms",
          "Description": "Placed Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f58057e1e8f480e9de83fcff8a7229e",
          "Name": "UnplacedRooms",
          "Description": "Unplaced Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa12dba71a874da48507e41528144f89",
          "Name": "NotEnclosedRooms",
          "Description": "Not Enclosed Rooms in the document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cdb1fa6be1b64c269e5b429fa030d84c",
          "Name": "RedundantRooms",
          "Description": "Elements at the given level.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Returns all rooms in the document grouped by status"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Room.CoreCenterBoundary",
      "Id": "211688b734bd41209dba730bad6261bd",
      "Inputs": [
        {
          "Id": "c6ea57d8d9364ea2ac3cbababfcdc75a",
          "Name": "room",
          "Description": "Revit.Elements.Room",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ba074e1d7134cb182e2fa80a0c1a6dd",
          "Name": "Curve[][]",
          "Description": "Curve[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Core center boundary\n\nRoom.CoreCenterBoundary: Curve[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByJoinedCurves@Autodesk.DesignScript.Geometry.Curve[],double,bool,double",
      "Id": "1fa59893c2834090b96809dd740dce16",
      "Inputs": [
        {
          "Id": "ca0ece6f96a04bfd814175a989fc2fd0",
          "Name": "curves",
          "Description": "Curves to join into polycurve\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e47207c30602454ba3f2cb5d4b5642bd",
          "Name": "joinTolerance",
          "Description": "Tolerance to determine size of gap allowed between curves to be joined\n\ndouble\nDefault value : 0.001",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84d532d2400141c887d08a5aa454d065",
          "Name": "trimCurves",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b327cf00cc55484da6134e9b1a348b88",
          "Name": "trimLength",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e3d82d7c5b04971a8ad298431b6cbaa",
          "Name": "PolyCurve",
          "Description": "Polycurve created by joined curves",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by joining curves. Flips curve as needed for connectivity. Choose a preferred join tolerance between 1e-6 and 1e-3 units.\n\nPolyCurve.ByJoinedCurves (curves: Curve[], joinTolerance: double = 0.001, trimCurves: bool = false, trimLength: double = 0): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "f0a071aa4b4b45a1a38beed1baf029b1",
      "Inputs": [
        {
          "Id": "920f662ab29649dd902121f861d04b09",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "486da1b94f944a1abe9370e9fe64f92e",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n    \r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\n#loadPerLevel = IN[1]\r\nelems_forAllLv = IN[1]\r\n#gridsX, gridsY = grids\r\n\r\n# Place your code below this line\r\n\r\n\r\ndef grp_XYbeamsLinesPerLv(elemsPerLv):\r\n    allLines = go(\r\n        elemsPerLv,\r\n        map(lambda x: x.GetLocation()),\r\n        list,\r\n    )\r\n    directionsPerLevel = go(\r\n        allLines,\r\n        map(lambda x: x.Direction),\r\n        map(lambda x: x.Normalized()),\r\n        list,\r\n    )\r\n    \r\n    isParallel = lambda e: go(\r\n        e,\r\n        lambda x: x.Direction,\r\n        lambda x: x.Normalized(),\r\n        lambda x: not x.IsParallel(directionsPerLevel[0]),\r\n    )\r\n    \r\n    \r\n    return grpBy(allLines, isParallel)[0]\r\n\r\ndef make_pairFrames(xGrps, yGrps):\r\n    pairX = go(\r\n        xGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        map(lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1]))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    pairY = go(\r\n        yGrps,\r\n        lambda x: sorted(x, key=lambda e: e.StartPoint.X),\r\n        lambda x: grpBy(x, key=lambda e: e.StartPoint.X)[0],\r\n        map(lambda x: sorted(x, key=lambda e: e.StartPoint.Y)),list,\r\n        #2개씩 1간격으로 서브리스트 생성\r\n        lambda x: list(map(lambda n: x[n:n+1+1], range(len(x))[:-1])),\r\n        # 서브리스트 구조 Transpose\r\n        map(lambda x: list(zip(*chain(x)))),\r\n        lambda x: list(chain(*x)),\r\n    )\r\n    return pairX, pairY\r\n\r\ndef get_IntersectInGrp(xGrp, yGrp):\r\n    res = []\r\n    for x in xGrp:\r\n        for y in yGrp:\r\n            res.append(x.Intersect(y))\r\n    return list(chain(*res))\r\n\r\ndef GetBoundingSrfs(intscts):\r\n    res = []\r\n    try:\r\n        crvSet = concave_hull(intscts, 100000)\r\n        polyCrv = PolyCurve.ByJoinedCurves(crvSet)\r\n        srf = Surface.ByPatch(polyCrv)\r\n        srfThick = srf.Thicken(10,False)\r\n#        bdCube = BoundingBox.ByGeometry(srfThick).ToCuboid()\r\n#        bdCubeSrfs = bdCube.Explode()\r\n#        bdBelowSrf = go(\r\n#            bdCube.Explode(),\r\n#            #bdCubeSrfs,\r\n#            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z != 0),\r\n#            list,\r\n#        )[0]\r\n        return srf\r\n    except: pass\r\n\r\ndef makeSrf_btwnFrame(xGrps, yGrps):\r\n    res = []\r\n    for xGrp in xGrps:\r\n        for yGrp in yGrps:\r\n            intscts = get_IntersectInGrp(xGrp, yGrp)\r\n            if GetBoundingSrfs(intscts):\r\n                res.append(GetBoundingSrfs(intscts))\r\n\r\n    return res\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nXY_elems_forAllLv = list(map(grp_XYbeamsLinesPerLv, elems_forAllLv))\r\npairFrames_forAllLv = list(map(lambda x: list(make_pairFrames(*x)), XY_elems_forAllLv))\r\nsrfs_forAllLv = list(map(lambda x: list(makeSrf_btwnFrame(*x)), pairFrames_forAllLv))\r\n\r\nOUT = srfs_forAllLv",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "88677a05d98744a4ada829a0f58fcc8c",
      "Inputs": [
        {
          "Id": "124a4897494c4906a4646dc1cfe26fcb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1ae9b14cac24169b3daf4a7e8b32fb6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6d65bddf65245708fe4fb496c1fcf80",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "b573abeeac714845bb1aa2c6615f3f34",
      "Inputs": [
        {
          "Id": "3df5cf940ae74d5484839dfbbc290541",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c9134415f38468dbb305770029249e9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nconcave_hull = IN[0]\r\nsrfs_forAllLv = IN[1]\r\n# Place your code below this line\r\n\r\ndef find_allCorner(srf):\r\n    u_stt = srf.PointAtParameter(0,1)\r\n    u_end = srf.PointAtParameter(1,1)\r\n    b_stt = srf.PointAtParameter(0,0)\r\n    b_end = srf.PointAtParameter(1,0)\r\n    \r\n    return u_stt, u_end, b_stt, b_end\r\n\r\ndef find_shortSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide = Line.ByStartPointEndPoint(u_stt, u_end)\r\n    b_shortSide = Line.ByStartPointEndPoint(b_stt, b_end)\r\n    \r\n    return u_shortSide, b_shortSide\r\n    \r\ndef find_longSide(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    l_longSide = Line.ByStartPointEndPoint(u_stt, b_stt)\r\n    r_longSide = Line.ByStartPointEndPoint(u_end, b_end)\r\n    \r\n    return l_longSide, r_longSide\r\n    \r\ndef find_longSide_midLine(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = Line.ByStartPointEndPoint(u_midPt, b_midPt)\r\n    \r\n    return midLine\r\n\r\ndef find_2wayRefPts(srf):\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    shortSideLength = u_shortSide.Length\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    midLine = find_longSide_midLine(srf)\r\n    midLineVec = midLine.Direction\r\n    srfNormalVec = srf.NormalAtParameter(0.5,0.5)\r\n    \r\n    u_circle = Circle.ByCenterPointRadiusNormal(u_midPt, shortSideLength/2, srfNormalVec)\r\n    b_circle = Circle.ByCenterPointRadiusNormal(b_midPt, shortSideLength/2, srfNormalVec)\r\n    u_45d_pt = midLine.Intersect(u_circle)[0]\r\n    b_45d_pt = midLine.Intersect(b_circle)[0]\r\n    \r\n    return u_45d_pt, b_45d_pt\r\n\r\ndef div_srf_1way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_shortSide, b_shortSide = find_shortSide(srf)\r\n    u_midPt = u_shortSide.PointAtParameter(0.5)\r\n    b_midPt = b_shortSide.PointAtParameter(0.5)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    r_srf = go(\r\n        [u_end, b_end, u_midPt, b_midPt],\r\n        lambda x: concave_hull(x, 100000),\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n    \r\n    return l_srf, r_srf\r\n\r\ndef div_srf_2way(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    u_45d_pt, b_45d_pt = find_2wayRefPts(srf)\r\n    \r\n    l_srf = go(\r\n        [u_stt, b_stt, u_45d_pt, b_45d_pt],\r\n        #lambda x: concave_hull(x, 100000),  ## concave_hull 에서 근접점 오류 발생\r\n        Polygon.ByPoints,\r\n        PolyCurve.ByJoinedCurves,\r\n        Surface.ByPatch,\r\n    )\r\n#    r_srf = go(\r\n#        [u_end, b_end, u_45d_pt, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    u_srf =  go(\r\n#        [u_stt, u_end, u_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n#    b_srf = go(\r\n#        [b_stt, b_end, b_45d_pt],\r\n#        lambda x: concave_hull(x, 100000),\r\n#        PolyCurve.ByJoinedCurves,\r\n#        Surface.ByPatch,\r\n#    )\r\n    \r\n    return l_srf, r_srf, u_srf, b_srf\r\n\r\ndef div_srf(srf):\r\n    u_stt, u_end, b_stt, b_end = find_allCorner(srf)\r\n    shortSide = find_shortSide(srf)[0].Length\r\n    longSide = find_longSide(srf)[0].Length\r\n    ratio = longSide/shortSide\r\n    \r\n    if ratio < 2:\r\n        #res = [{\"srf\": x, \"load_path\": \"2way\"} for x in div_srf_2way(srf)] ## srfDict 형태로 반환\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    elif ratio >= 2:\r\n        res = [{\"srf\": x, \"load_path\": \"1way\"} for x in div_srf_1way(srf)]\r\n    \r\n    return res\r\n\r\ndef div_srf_perLv(srfsPerLv):\r\n    return list(chain(*map(div_srf, srfsPerLv)))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = map(div_srf_perLv, srfs_forAllLv)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d8b7cefba4d942fdb4b0995b1d4b353f",
      "Inputs": [
        {
          "Id": "2ce466dcf6e144a295f149de29917387",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "72b260e450524e6d932fdb1fd2c85b47",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb8edd0307f94b3f8c762acd43e2c342",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "// 1. case\n// DL = 부재자중(메인부재 + 그레이팅 하중) + 유관부서 EL\n// 2. case < -우선 구현\n// DL = 각 층의 Floor 로드를 정해서 입력하는 방식",
      "Id": "84498cb015cf4ed48c71273d029f2953",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "입력모드",
          "Item": "입력모드"
        },
        {
          "Name": "하중분배모드",
          "Item": "하중분배모드"
        },
        {
          "Name": "프레임해석모드",
          "Item": "프레임해석모드"
        },
        {
          "Name": "부재해석모드",
          "Item": "부재해석모드"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "입력모드",
      "NodeType": "ExtensionNode",
      "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9dd1ef18eb494309a1549c7898dbdbf9",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom math import sqrt, hypot\r\nfrom itertools import combinations\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\ndef concave_hull_(points, alpha):\r\n    points = UnwrapElement(points)\r\n    res = []\r\n    \r\n    pLen = len(points)\r\n    alpha2 = alpha * alpha\r\n    if pLen < 2:\r\n        raise Exception('AlphaShape needs at least 2 points')\r\n\r\n    for i, p in enumerate(points):\r\n        for j in range(i+1, pLen):\r\n            if p.IsAlmostEqualTo(points[j]):\r\n                raise Exception('AlphaShape needs pairwise distinct points')\r\n            dist = hypot(p.X - points[j].X, p.Y - points[j].Y)                    \r\n            #if (dist > 2 * alpha) : continue #circle fits between points ==> p_i, p_j can't be alpha-exposed                    \r\n    \r\n            x1, y1, x2, y2 = p.X, p.Y, points[j].X, points[j].Y\r\n            midX, midY = (x1 + x2) / 2, (y1 + y2) / 2\r\n    \r\n            #find two circles that contain p_i and p_j; note that center1 == center2 if dist == 2*alpha\r\n            alphaDist = sqrt(alpha2 - (dist / 2) ** 2)\r\n            #alphaDist = alpha2 - (dist / 2) ** 2\r\n            deltaX, deltaY = (x2 - x1) / dist, (y1 - y2) / dist\r\n            c1x, c1y = midX + alphaDist * deltaY, midY + alphaDist * deltaX\r\n            c2x, c2y = midX - alphaDist * deltaY, midY - alphaDist * deltaX\r\n            \r\n            #check if one of the circles is alpha-exposed, i.e. no other point lies in it\r\n            c1_empty = True \r\n            c2_empty = True\r\n            for k in range(pLen):                \r\n                if i == k or j == k: \r\n                    continue\r\n                if ((c1x - points[k].X) * (c1x - points[k].X) + (c1y - points[k].Y) * (c1y - points[k].Y) < alpha2):\r\n                    c1_empty = False\r\n                if ((c2x - points[k].X) * (c2x - points[k].X) + (c2y - points[k].Y) * (c2y - points[k].Y) < alpha2):\r\n                    c2_empty = False\r\n                if not c1_empty and not c2_empty:\r\n                    break\r\n            if c1_empty or c2_empty:\r\n                res.append(Line.ByStartPointEndPoint(p, points[j]))\r\n                #res.append(c1_empty)\r\n    return res\r\n# Assign your output to the OUT variable.\r\nOUT = concave_hull_",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0d22839ba4e54ad4b810e4df27687cfb",
      "Inputs": [
        {
          "Id": "95b28c3957024fbf8f03f5d610e919c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "39e9a50723bf420a97a64c3518ffe3e6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "770d677e7a1d44f384bc1bd380c6b233",
      "Inputs": [
        {
          "Id": "2bce01a281ac476fb39681a82d3da06d",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6d03979733a449fae4dce41c4c78b69",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 584,
      "SelectedString": "OST_StructuralColumns",
      "NodeType": "ExtensionNode",
      "Id": "1132aa09bbfe4b18bc908178c3de9028",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e2c2b8cbeb54082b23211013f0d7a34",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allCols;",
      "Id": "670b14e580c14f2197f7fffaf9705193",
      "Inputs": [
        {
          "Id": "b0b633c477e04d57843a343d80989b08",
          "Name": "allCols",
          "Description": "allCols",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59a27b105e5a4404a85f71c413683ee5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallLvsDict = IN[1]\r\nallCols = IN[0]\r\nframeNoDict = IN[2]\r\nshortAxisNoDict = IN[3]\r\nmaterialPropDict = IN[4]\r\n# Place your code below this line\r\ndef get_BuilingBdBox(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBox = BoundingBox.ByGeometry(allCols_loc).ToCuboid()\r\n    return bdBox\r\n\r\ndef getSideDict(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBoxFaces = get_BuilingBdBox(allCols).Explode()\r\n    sideFaces = go(\r\n        bdBoxFaces,\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 0),\r\n        list,\r\n    )\r\n    resDict = go(\r\n        [\"south\",\"west\",\"north\",\"east\"],\r\n        lambda x: zip(x, sideFaces),\r\n        dict,\r\n    )\r\n    \r\n    return resDict\r\n\r\ndef toDict_allCols(allCols, frameNoDict, allLvsDict, materialPropDict):\r\n\r\n    def find_Ix(elem):\r\n        _tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Web Thickness\") * 10\r\n        _tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Flange Thickness\") * 10\r\n        _h = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Height\") * 10\r\n        _bf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Width\") * 10\r\n        \r\n        Ix = (2*(_bf*_tf**3/12+_bf*_tf*((_h-2*_tf)/2+_tf/2)**2)+_tw*(_h-2*_tf)**3/12)\r\n        Ix_revit = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Moment of Inertia strong axis\") * 10**4\r\n        return Ix_revit\r\n\r\n    def find_numberNameByElem(elem, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": elem.GetLocation().StartPoint.X,\r\n            \"Y\": elem.GetLocation().StartPoint.Y,\r\n            \"Z\": elem.GetLocation().StartPoint.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_numberNameByPt(pt, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": pt.X,\r\n            \"Y\": pt.Y,\r\n            \"Z\": pt.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict):\r\n        sttPt = elem.GetLocation().StartPoint\r\n        \r\n        endPt = elem.GetLocation().EndPoint\r\n        \r\n        name_stt_X = find_numberNameByPt(sttPt, frameNoDict, \"X\")[0]\r\n        name_stt_Y = find_numberNameByPt(sttPt, shortAxisNoDict, \"Y\")[0]\r\n        name_stt_Z = find_numberNameByPt(sttPt, allLvsDict, \"Z\")[0]\r\n        name_stt = \"1\" + name_stt_X + name_stt_Y + name_stt_Z\r\n        \r\n        sttNodeDict = dict([(\"name\",name_stt), (\"Y\",sttPt.Y), (\"Z\",sttPt.Z)])\r\n        \r\n        name_end_X = find_numberNameByPt(endPt, frameNoDict, \"X\")[0]\r\n        name_end_Y = find_numberNameByPt(endPt, shortAxisNoDict, \"Y\")[0]\r\n        name_end_Z = find_numberNameByPt(endPt, allLvsDict, \"Z\")[0]\r\n        name_end = \"1\" + name_end_X + name_end_Y + name_end_Z\r\n        \r\n        endNodeDict = dict([(\"name\",name_end), (\"Y\",endPt.Y), (\"Z\",endPt.Z)])\r\n        \r\n        return sttNodeDict, endNodeDict\r\n\r\n    sideDict = getSideDict(allCols)    \r\n        \r\n    def findSide(col, sideDict):\r\n        res = []\r\n        for k,v in list(sideDict.items()):\r\n            if col.Geometry()[0].DoesIntersect(v):\r\n                res.append(k)\r\n        return res\r\n    \r\n    def convertElementName(elem, replaceIDX, replaceChar):\r\n        element_name = list(find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict)[0][\"name\"])\r\n        element_name[replaceIDX] = replaceChar\r\n        element_name_modified = \"\".join(element_name)\r\n        return element_name_modified\r\n    \r\n    resDict = go(\r\n        allCols,\r\n        map( lambda x: {\r\n            \"elem\": x,\r\n            \"element_name\": convertElementName(x, 0, \"2\"),\r\n            \"sectionProp\":{\r\n                \"name\": x.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\"),\r\n                \"sectionRotating\": x.GetParameterValueByName(\"Cross-Section Rotation\"),\r\n                \"A\": x.GetParameterValueByName(\"Family and Type\")\\\r\n                .GetParameterValueByName(\"Section Area\") * 10**2,\r\n                \"I\": find_Ix(x),\r\n            },\r\n            \"GUID\": x.GetParameterValueByName(\"IfcGUID\"),\r\n            \"role\": \"Column\",\r\n            \"location_line\": x.GetLocation(),\r\n            \"startNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[0],\r\n            \"endNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[1],\r\n            \"planeDirection\": \"n/a\",\r\n            \"length\": x.GetLocation().Length,\r\n            \"asgned_srfs\": [],\r\n            \"asgned_area\": 0,\r\n            \"frameNo\": find_numberNameByElem(x, frameNoDict, \"X\")[0],\r\n            \"lvBelong\": find_numberNameByElem(x, allLvsDict, \"Z\")[0],\r\n            \"sideBelong\": findSide(x, sideDict),\r\n            \"materialPropDict\": materialPropDict,\r\n        } )\r\n    )\r\n    \r\n    return resDict\r\n\r\nres = toDict_allCols(allCols, frameNoDict, allLvsDict, materialPropDict)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "dede280c133c40acb099f11f00d0f716",
      "Inputs": [
        {
          "Id": "d2d63660695940d58828fcd01fabc812",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e0f9102c5c641ebbbdac5d1aff57f9f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "742bddf0378e49ec8a136fcfd44989f2",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c241d21172d2437991859c77c959dcb2",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41b4d87d300b469b90dc996f24d969f8",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aad53e0099054fa68cf49e2d4fb67f92",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallFrames = IN[0]\r\n# Place your code below this line\r\n\r\ndef getAllFrameLvs(allFrames):\r\n    allFrames_loc = list(map(lambda x: x.GetLocation(),allFrames))\r\n    allFrameLvElevations = go(\r\n        allFrames_loc,\r\n        map(lambda x: x.StartPoint.Z),set,\r\n        sorted,\r\n    )\r\n    return allFrameLvElevations\r\n\r\ndef getAllLvs(allFrames):\r\n    allLvElevations = getAllFrameLvs(allFrames)\r\n    if 0 in allLvElevations:\r\n        res = allLvElevations\r\n    elif 0 not in allLvElevations:\r\n        res = [0] + allLvElevations\r\n    \r\n    return res\r\n\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n\r\ndef getLevelsDict(allFrames):\r\n    allFrames_loc = list(map(lambda x: x.GetLocation(), allFrames))\r\n    allLvElevations = getAllLvs(allFrames)\r\n    \r\n    lvNames = index_toName(allLvElevations)\r\n    \r\n    resDict = go(\r\n        zip(lvNames, allLvElevations),\r\n        dict,\r\n    )\r\n    \r\n    return resDict\r\n\r\nres = getLevelsDict(allFrames)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "83d28945b88647a18e1c648b417e808f",
      "Inputs": [
        {
          "Id": "59b8020eef344472a5b195fcea3784b7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70810211d2514fefa00e3c22a23c7579",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallLvsDict = IN[1]\r\nallBeams = IN[0]\r\nframeNoDict = IN[2]\r\nshortAxisNoDict = IN[3]\r\nallCols = IN[4]\r\nmaterialPropDict = IN[5]\r\n# Place your code below this line\r\ndef chck_intsctWithCols(frame, allColsGeo):\r\n    frameLocation = frame\\\r\n                    .GetLocation()\\\r\n                    .ExtendStart(500)\\\r\n                    .ExtendEnd(500)\r\n    res = frameLocation.DoesIntersect(allColsGeo)\r\n    \r\n    return res\r\n\r\ndef filter_allGirders(allBeamsDicts, allCols):\r\n    allColsGeo = go(\r\n        allCols,\r\n        map(lambda x: x.Geometry()[0]),list,\r\n        Solid.ByUnion,\r\n    )\r\n    girders = go(\r\n        allBeamsDicts,list,\r\n        filter(lambda x: chck_intsctWithCols(x, allColsGeo)),\r\n        list,\r\n    )\r\n    beams = go(\r\n        allBeamsDicts,list,\r\n        filter(lambda x: not chck_intsctWithCols(x, allColsGeo)),\r\n        list,\r\n    )\r\n    \r\n    return girders, beams\r\n\r\n\r\n\r\ndef toDict_allGirders(allGirders, frameNoDict, allLvsDict, shortAxisNoDict, materialPropDict):\r\n    \r\n    def find_Ix(elem):\r\n        _tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Web Thickness\") * 10\r\n        _tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Flange Thickness\") * 10\r\n        _h = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Height\") * 10\r\n        _bf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Width\") * 10\r\n        \r\n        Ix = (2*(_bf*_tf**3/12+_bf*_tf*((_h-2*_tf)/2+_tf/2)**2)+_tw*(_h-2*_tf)**3/12)\r\n        Ix_revit = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Moment of Inertia strong axis\") * 10**4\r\n        return Ix_revit\r\n    \r\n    def find_numberNameByElem(elem, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": elem.GetLocation().StartPoint.X,\r\n            \"Y\": elem.GetLocation().StartPoint.Y,\r\n            \"Z\": min(\r\n                [\r\n                elem.GetLocation().StartPoint.Z,\r\n                elem.GetLocation().EndPoint.Z\r\n                ]),\r\n                \r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_numberNameByPt(pt, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": pt.X,\r\n            \"Y\": pt.Y,\r\n            \"Z\": pt.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict):\r\n        sttPt = elem.GetLocation().StartPoint\r\n        \r\n        endPt = elem.GetLocation().EndPoint\r\n        \r\n        name_stt_X = find_numberNameByPt(sttPt, frameNoDict, \"X\")[0]\r\n        name_stt_Y = find_numberNameByPt(sttPt, shortAxisNoDict, \"Y\")[0]\r\n        name_stt_Z = find_numberNameByPt(sttPt, allLvsDict, \"Z\")[0]\r\n        name_stt = \"1\" + name_stt_X + name_stt_Y + name_stt_Z\r\n        \r\n        sttNodeDict = dict([(\"name\",name_stt), (\"Y\",sttPt.Y), (\"Z\",sttPt.Z)])\r\n        \r\n        name_end_X = find_numberNameByPt(endPt, frameNoDict, \"X\")[0]\r\n        name_end_Y = find_numberNameByPt(endPt, shortAxisNoDict, \"Y\")[0]\r\n        name_end_Z = find_numberNameByPt(endPt, allLvsDict, \"Z\")[0]\r\n        name_end = \"1\" + name_end_X + name_end_Y + name_end_Z\r\n        \r\n        endNodeDict = dict([(\"name\",name_end), (\"Y\",endPt.Y), (\"Z\",endPt.Z)])\r\n        \r\n        return sttNodeDict, endNodeDict\r\n        \r\n    def find_elemDirection(line):\r\n        lineVector = line.Direction.Normalized()\r\n        if abs(lineVector.X) > 0:\r\n            res = \"longAxis\"\r\n        elif abs(lineVector.Y) > 0:\r\n            res = \"shortAxis\"\r\n        return res\r\n\r\n    def convertElementName(elem, replaceIDX, replaceChar):\r\n        element_name = list(find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict)[0][\"name\"])\r\n        element_name[replaceIDX] = replaceChar\r\n        element_name_modified = \"\".join(element_name)\r\n        return element_name_modified\r\n\r\n    resDict = go(\r\n        allGirders,\r\n        map( lambda x: {\r\n            \"elem\": x,\r\n            \"element_name\": convertElementName(x, 0, \"3\"),\r\n            \"sectionProp\":{\r\n                \"name\": x.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\"),\r\n                \"sectionRotating\": x.GetParameterValueByName(\"Cross-Section Rotation\"),\r\n                \"A\": x.GetParameterValueByName(\"Family and Type\")\\\r\n                .GetParameterValueByName(\"Section Area\") * 10**2,\r\n                \"I\": find_Ix(x),\r\n            },\r\n            \"GUID\": x.GetParameterValueByName(\"IfcGUID\"),\r\n            \"role\": \"Girders\",\r\n            \"location_line\": x.GetLocation(),\r\n            # 노드 추가\r\n            \"startNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[0],\r\n            \"endNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[1],\r\n            \"planeDirection\": find_elemDirection(x.GetLocation()),\r\n            \"length\": x.GetLocation().Length,\r\n            \"asgned_srfs\": [],\r\n            \"asgned_area\": 0,\r\n            \"frameNo\": find_numberNameByElem(x, frameNoDict, \"X\")[0],\r\n            \"lvBelong\": find_numberNameByElem(x, allLvsDict, \"Z\")[0],\r\n            \"sideBelong\": [] ,\r\n            \"materialPropDict\": materialPropDict,\r\n        } )\r\n    )\r\n    return resDict\r\n\r\ndef toDict_allBeams(allBeams, frameNoDict, allLvsDict, shortAxisNoDict, input_E):\r\n    \r\n    def find_Ix(elem):\r\n        _tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Web Thickness\") * 10\r\n        _tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Flange Thickness\") * 10\r\n        _h = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Height\") * 10\r\n        _bf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Width\") * 10\r\n        \r\n        Ix = (2*(_bf*_tf**3/12+_bf*_tf*((_h-2*_tf)/2+_tf/2)**2)+_tw*(_h-2*_tf)**3/12)\r\n        Ix_revit = elem.GetParameterValueByName(\"Family and Type\")\\\r\n            .GetParameterValueByName(\"Moment of Inertia strong axis\") * 10**4\r\n        return Ix_revit\r\n    \r\n    def find_numberNameByElem(elem, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": elem.GetLocation().StartPoint.X,\r\n            \"Y\": elem.GetLocation().StartPoint.Y,\r\n            \"Z\": min(\r\n                [\r\n                elem.GetLocation().StartPoint.Z,\r\n                elem.GetLocation().EndPoint.Z\r\n                ]),\r\n                \r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_numberNameByPt(pt, nameDict, axis):\r\n        tgtDict = {\r\n            \"X\": pt.X,\r\n            \"Y\": pt.Y,\r\n            \"Z\": pt.Z,\r\n        }\r\n        res = []\r\n        tgt = tgtDict[axis]\r\n        for k,v in list(nameDict.items()):\r\n            if v == tgt:\r\n                res.append(k)\r\n        return res\r\n\r\n    def find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict):\r\n        sttPt = elem.GetLocation().StartPoint\r\n        \r\n        endPt = elem.GetLocation().EndPoint\r\n        \r\n        #name_stt_X = find_numberNameByPt(sttPt, frameNoDict, \"X\")[0]\r\n        #name_stt_Y = find_numberNameByPt(sttPt, shortAxisNoDict, \"Y\")[0]\r\n        #name_stt_Z = find_numberNameByPt(sttPt, allLvsDict, \"Z\")[0]\r\n        name_stt = \"tbd\"#\"1\" + name_stt_X + name_stt_Y + name_stt_Z\r\n        \r\n        sttNodeDict = dict([(\"name\",name_stt), (\"Y\",sttPt.Y), (\"Z\",sttPt.Z)])\r\n        \r\n        #name_end_X = find_numberNameByPt(endPt, frameNoDict, \"X\")[0]\r\n        #name_end_Y = find_numberNameByPt(endPt, shortAxisNoDict, \"Y\")[0]\r\n        #name_end_Z = find_numberNameByPt(endPt, allLvsDict, \"Z\")[0]\r\n        name_end = \"tbd\"#\"1\" + name_end_X + name_end_Y + name_end_Z\r\n        \r\n        endNodeDict = dict([(\"name\",name_end), (\"Y\",endPt.Y), (\"Z\",endPt.Z)])\r\n        \r\n        return sttNodeDict, endNodeDict\r\n        \r\n    def find_elemDirection(line):\r\n        lineVector = line.Direction.Normalized()\r\n        if abs(lineVector.X) > 0:\r\n            res = \"longAxis\"\r\n        elif abs(lineVector.Y) > 0:\r\n            res = \"shortAxis\"\r\n        return res\r\n\r\n    def convertElementName(elem, replaceIDX, replaceChar):\r\n        element_name = list(find_nodeName(elem, frameNoDict, shortAxisNoDict, allLvsDict)[0][\"name\"])\r\n        element_name[replaceIDX] = replaceChar\r\n        element_name_modified = \"\".join(element_name)\r\n        return element_name_modified\r\n\r\n    resDict = go(\r\n        allBeams,\r\n        map( lambda x: {\r\n            \"elem\": x,\r\n            \"element_name\": convertElementName(x, 0, \"3\"),\r\n            \"sectionProp\":{\r\n                \"name\": x.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\"),\r\n                \"sectionRotating\": x.GetParameterValueByName(\"Cross-Section Rotation\"),\r\n                \"A\": x.GetParameterValueByName(\"Family and Type\")\\\r\n                .GetParameterValueByName(\"Section Area\") * 10**2,\r\n                \"I\": find_Ix(x),\r\n            },\r\n            \"GUID\": x.GetParameterValueByName(\"IfcGUID\"),\r\n            \"role\": \"Beams\",\r\n            \"location_line\": x.GetLocation(),\r\n            # 노드 추가\r\n            \"startNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[0],\r\n            \"endNode\": find_nodeName(x, frameNoDict, shortAxisNoDict, allLvsDict)[1],\r\n            \"planeDirection\": find_elemDirection(x.GetLocation()),\r\n            \"length\": x.GetLocation().Length,\r\n            \"asgned_srfs\": [],\r\n            \"asgned_area\": 0,\r\n            \"frameNo\": \"tbd\",#find_numberNameByElem(x, frameNoDict, \"X\")[0],\r\n            \"lvBelong\": find_numberNameByElem(x, allLvsDict, \"Z\")[0],\r\n            \"sideBelong\": [] ,\r\n            \"materialPropDict\": materialPropDict,\r\n        } )\r\n    )\r\n    return resDict\r\n\r\n#allBeamsDicts = toDict_allBeams(allBeams, frameNoDict, allLvsDict)\r\nallGirders = filter_allGirders(allBeams, allCols)[0]\r\nallBeams = filter_allGirders(allBeams, allCols)[1]\r\n\r\nallGirdersDicts = toDict_allGirders(allGirders, frameNoDict, allLvsDict, shortAxisNoDict, materialPropDict)\r\n\r\nallBeamsDicts = toDict_allBeams(allBeams, frameNoDict, allLvsDict, shortAxisNoDict, materialPropDict)\r\n\r\n#allBeamsDicts = toDict_allGirders(allBeams, frameNoDict, allLvsDict, shortAxisNoDict, input_E)\r\n#allGirdersDicts_X = list(filter(lambda x: x[\"planeDirection\"]==\"shortAxis\", allGirdersDicts))\r\n\r\nres = allGirdersDicts, allBeamsDicts\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6f79eeb6bdc2403d813222c2c7013b9a",
      "Inputs": [
        {
          "Id": "37d15c60385f4a59b07073982620a34a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98700cf7b33a4325891ba90aa32db69d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "151f93a3425c4d23aa85e18df4ab2668",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7471d9243dd14a31a5c95d627f65e717",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d311d0dba104fa280c9c26ccc5bb263",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98a99171ca7f4fee9437d5b15cf9eda4",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eaf64d9b96ba47fa83a1be197a9d4722",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallCols = IN[0]\r\nbdLongiVec = IN[1]\r\n# Place your code below this line\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n    \r\ndef get_SpansDict(allCols, bdLongiVec):\r\n    xSpans = go(\r\n        allCols,\r\n        lambda x: grpBy(x, lambda x: x.GetLocation().StartPoint.X)[1],\r\n        sorted,list\r\n    )\r\n    ySpans = go(\r\n        allCols,\r\n        lambda x: grpBy(x, lambda x: x.GetLocation().StartPoint.Y)[1],\r\n        sorted,list\r\n    )\r\n    \r\n    if bdLongiVec.IsParallel(Vector.XAxis()):\r\n        spans = xSpans\r\n    elif bdLongiVec.IsParallel(Vector.YAxis()):\r\n        spans = ySpans\r\n    \r\n    spanNames = index_toName(spans)\r\n    resDict = go(\r\n        zip(spanNames, spans),\r\n        dict,\r\n    )\r\n    return resDict\r\n\r\n\r\nres = get_SpansDict(allCols, bdLongiVec), get_SpansDict(allCols, bdLongiVec.Rotate(Vector.ZAxis(), 90) )\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1d32b6df35d14f87a4e04e542e258462",
      "Inputs": [
        {
          "Id": "88a2199484764cb38f1148b3fef8f1a2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ab64cdf3788e454797089b392c23cef4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "03e29284cb7d4849bb8b1daeb4351d6d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallCols = IN[0]\r\n# Place your code below this line\r\ndef index_toName(datas):\r\n    rngsStr = list(map(str, range(len(datas))))\r\n    allNames = go(\r\n        rngsStr,\r\n        map(lambda x: \"0\" + x if len(x) < 2 else x)\r\n    )\r\n    return allNames\r\n    \r\ndef get_BuilingBdBox(allCols):\r\n    allCols_loc = list(map(lambda x: x.GetLocation(),allCols))\r\n    bdBox = BoundingBox.ByGeometry(allCols_loc).ToCuboid()\r\n    return bdBox\r\n\r\ndef find_longitudinalAxis(allCols):\r\n    bdBox = get_BuilingBdBox(allCols)\r\n    btmFace_PeriLine = go(\r\n        bdBox,\r\n        lambda x: x.Explode(),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == -1),\r\n        list, lambda x: x[0],\r\n        lambda x: x.PerimeterCurves(),\r\n    )\r\n    longitudinalVec = go(\r\n        btmFace_PeriLine,\r\n        map(lambda x: x.Length), max,\r\n        lambda x: filter(lambda y: y.Length == x, btmFace_PeriLine),\r\n        list,lambda x:x[0],\r\n        lambda x: x.Direction.Normalized(),\r\n    )\r\n    if longitudinalVec.X < 0 or longitudinalVec.Y < 0:\r\n        longitudinalVec = longitudinalVec.Reverse()\r\n    else:\r\n        pass\r\n    \r\n    return longitudinalVec\r\n\r\nres = find_longitudinalAxis(allCols)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "bc29062fddea4a51a1ce6b0c7b28a71e",
      "Inputs": [
        {
          "Id": "054d9ef0a32844799e4d24dcbd5ce1d1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "73f5a2850094462da6a97cff99a3d1a6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "ed390b87b63f4aa0bf80c561ce54c9ad",
      "Inputs": [
        {
          "Id": "b7e9f348f52f42f8af213b7d8064ed47",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35fbf4e22b6049f8b90ab59a27c3fa15",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "c7e79d11f4714006979cacfbfb65a5e0",
      "Inputs": [
        {
          "Id": "30233787def34d7ebc1ed6c93ea7ddbe",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2df41e14a4e64d2080e6f495abd9abc5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allBeams;",
      "Id": "3512cf5aa683450f8eaeab5c0f4bf060",
      "Inputs": [
        {
          "Id": "ed9b157af08a4faead1214e0a342c5db",
          "Name": "allBeams",
          "Description": "allBeams",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5547584f0abc4508b245b6fee3a058ef",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allCols;",
      "Id": "234f7d4e5f214bc988c01f8f6cb9f393",
      "Inputs": [
        {
          "Id": "8d37cc1c8a2945ccb7f695732ba71707",
          "Name": "allCols",
          "Description": "allCols",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6b1e9bab85d4057a6de25b89351478a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2.00000e+02*1000;",
      "Id": "27fca69ce6a2433cb655dfb9fd4aa094",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdb93307e8824cb5adf1ebbee59aec51",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 28,
      "MaximumValue": 40,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "6ca49a2c991c431f80920fca235e81e1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "197eabd550254fd1b15ddbc1fd7408de",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.GroupByKey(i[\"elem\"], i[\"elem\"].GetParameterValueByName(\"Reference Level Elevation\"))[\"groups\"];",
      "Id": "7dbc102f4cae4b558c7c259d1cee4b68",
      "Inputs": [
        {
          "Id": "3338151f6d344c8f951bce401a060735",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "23180c6f610342f8a271825364040b55",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsrfs_forAllLv = IN[1]\r\n#elems_forAllLv = IN[2]\r\nelemDicts = IN[2]\r\nelemDicts_forAllLv = go(\r\n    elemDicts,\r\n    lambda x: grpBy(x, lambda e: e[\"elem\"].GetParameterValueByName(\"Reference Level Elevation\")),\r\n    lambda x: x[0]\r\n)\r\n# Place your code below this line\r\nelemDictsX_forAllLv = go(\r\n    elemDicts_forAllLv,\r\n    map(lambda x: grpBy(x, lambda d: d[\"planeDirection\"])[0]),\r\n    map(lambda x: x[1]),list,\r\n)\r\n\r\nelemDictsY_forAllLv = go(\r\n    elemDicts_forAllLv,\r\n    map(lambda x: grpBy(x, lambda d: d[\"planeDirection\"])[0]),\r\n    map(lambda x: x[1]),list,\r\n)\r\n\r\ndef find_intsctSrfs(elemDict, srfs_perLv):\r\n    \r\n    elemLineforChck = elemDict[\"elem\"]\\\r\n                        .GetLocation()\\\r\n                        .ExtendStart(-100)\\\r\n                        .ExtendEnd(-100)\r\n    assignedSrfs = go(\r\n        srfs_perLv,\r\n        filter(lambda x: x[\"load_path\"]==\"1way\"),\r\n        filter(lambda x: elemLineforChck.DoesIntersect(x[\"srf\"])),\r\n        list,\r\n    )\r\n    elemDict[\"asgned_srfs\"] = list(map(lambda x: x[\"srf\"], assignedSrfs))\r\n    elemDict[\"asgned_area\"] = round(sum(list(map(lambda x: x[\"srf\"].Area, assignedSrfs))),2)\r\n    elemDict[\"load\"] = {}\r\n    \r\n    return elemDict\r\n\r\n\r\ndef find_intsctSrfsPerLv(elemDictsPerLv, srfs_perLv):\r\n    res = go(\r\n        elemDictsPerLv,\r\n        map(lambda x: find_intsctSrfs(x, srfs_perLv)),\r\n        list\r\n    )\r\n    return res\r\n\r\nres = go(\r\n    elemDictsX_forAllLv,\r\n    lambda x: list(zip(x, srfs_forAllLv)),\r\n    map(lambda x: find_intsctSrfsPerLv(*x)),\r\n)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "99238dde94e54e6988f0ac2ad90fb861",
      "Inputs": [
        {
          "Id": "4937ad44f9524293ab10dd66376e65f5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84bc9cca1b7449558f253209028ca18f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a3703eb78b74745807f6bb3d4259531",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2912c06ecbc34c75bf98d4e082a56137",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "1fb0de46b77e4c90a43cbef4af5cb6c4",
      "Inputs": [
        {
          "Id": "62f723d6cc864cb8b99cb8f0c7a2d91f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f476384a13254de3a0e643276aeb784c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nframeDict_forAllLv = IN[0]\r\nallCols = IN[1]\r\nDL_forAllLv = IN[2]\r\n# Place your code below this line\r\nallLvsDict_DL = go(\r\n    frameDict_forAllLv,\r\n    map(lambda DictsPerLv: \r\n        set(map(lambda d: d[\"lvBelong\"], DictsPerLv))\r\n    ), list,\r\n    lambda x: chain(*x), list,sorted,\r\n    lambda x: dict(zip(x, DL_forAllLv)),\r\n)\r\n\r\ndef calcLoad(elemDict, loadKind, loadType, allLvsLoadDict):\r\n    elemLv = elemDict[\"lvBelong\"]\r\n    elemLength = elemDict[\"length\"]\r\n    asgned_area = elemDict[\"asgned_area\"]\r\n    DL_unitValueforElem = allLvsLoadDict[elemLv]\r\n    calcRes = DL_unitValueforElem * asgned_area / (1000) \r\n    resDict = {\r\n        \"load_type\": loadType,\r\n        \"wx\": 0,\r\n        \"wy\": -calcRes / elemDict[\"length\"],\r\n    }\r\n    \r\n    elemDict[\"load\"][loadKind] = resDict\r\n    \r\n    return elemDict\r\n\r\ndef calcLoadPerLv(elemDictsPerLv, loadKind, loadType, allLvsLoadDict):\r\n    return list(map(lambda x: calcLoad(x, loadKind, loadType, allLvsLoadDict), elemDictsPerLv))\r\n\r\ndef calcLoad_forAllLv(elemDicts_forAllLv, loadKind, loadType, allLvsLoadDict):\r\n    return list(map(lambda x: calcLoadPerLv(x, loadKind, loadType, allLvsLoadDict), elemDicts_forAllLv))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = calcLoad_forAllLv(frameDict_forAllLv, \"DL\", \"uniform\", allLvsDict_DL)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "c3313e2050a0486b8144627463b3eff4",
      "Inputs": [
        {
          "Id": "e2901e7759304f2f826b093e00d47692",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "189416b849aa451aaec6dffa9c767fd8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89a5d4cc35e74218b84a196ec1c3763c",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c75a2ddf07eb4b06b3629556d58860dc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allColDicts;",
      "Id": "fc0bb7b97efa4cee9b958ef9c5a94bb9",
      "Inputs": [
        {
          "Id": "a343b522a2a140518a5053d6e8691427",
          "Name": "allColDicts",
          "Description": "allColDicts",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2080ba0e96ab49b297763e694aa565a2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "4d25aa8d87b74435ac4a749f0fb6bb07",
      "Inputs": [
        {
          "Id": "22af7d97bc664a778a4384e06ef7eae0",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "14e428fbf057432c84c835ecec9ba2eb",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d58fd9e15f0b45ab8f1246585b526ce3",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "76261c18b24c4f949032a3c229967ab1",
      "Inputs": [
        {
          "Id": "952a3867dd8745b2bd7c824b4f9825f7",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4da3c4ac12f443c59999d8851b59050e",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7de3847a8b8d47cc912a19320c667a04",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "3f5e80071311457581b6263a3a2d485c",
      "Inputs": [
        {
          "Id": "8262d8f440ef4ebca01f688d4d717231",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e129bd0bcc6459a97fd9391a78ab5cc",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "676e318f412645a48a1d7e67348fc1c7",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da955dafb9094ee3a7507b7a77a553a0",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"frameNo\"];",
      "Id": "77355716e37d43cd849b1585cf474467",
      "Inputs": [
        {
          "Id": "1f9274e2f51b47a489e84eb969490754",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db77b9daa610448190607ce6c72f661e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "a567c6e866f8449dbd65d29ad8004a5a",
      "Inputs": [
        {
          "Id": "d8b579f56f25461ba1d11ba08024cccf",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "28db9ca74ed242cdb4f3222fd896be51",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.RemoveKeys@string[]",
      "Id": "6f1ca965fe4a476d930d236583843989",
      "Inputs": [
        {
          "Id": "0aeac3b5f47c4fa5967eb501d1f3e954",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bdc34fe7d5024199802b26e361c33070",
          "Name": "keys",
          "Description": "The key in the Dictionary to remove\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35edc92ca54b46a187e1c09f7f596ba2",
          "Name": "dictionary",
          "Description": "New dictionary with keys removed",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produce a new Dictionary with the given keys removed.\n\nDictionary.RemoveKeys (keys: string[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"elem\";\n\"location_line\";\n\"asgned_srfs\";",
      "Id": "70e60bd531a64097b7a60c2a6d09d1a5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fee0467e0ff84c07a228e611c6aae7dc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0289f1b4ce46452b95e9b7e6f2b454d7",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0998d857e9054e10a62a4cf4d529f061",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Data.StringifyJSON@var[]..[]",
      "Id": "325a2ec57f6f434da4b4e5fb0d1300de",
      "Inputs": [
        {
          "Id": "851d110d0f2f41e9ab9533da84f5f74a",
          "Name": "values",
          "Description": "A List of values\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c4e4ad75f754789bcb602c51e9bf5d9",
          "Name": "json",
          "Description": "A JSON string where primitive types (e.g. double, int, boolean), Lists, and Dictionary's will be turned into the associated JSON type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Stringify converts an arbitrary value or a list of arbitrary values to JSON. Replication can be used to apply the operation over a list, producing a list of JSON strings.\n\nData.StringifyJSON (values: var[]..[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.RemoveKeys@string[]",
      "Id": "9a103d8aec6d47b6819d7042ea3c00c6",
      "Inputs": [
        {
          "Id": "a7f7827aeffc491bac21bf9b932ab205",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "88ed36984c4343ba9aa3e1e93bef2eca",
          "Name": "keys",
          "Description": "The key in the Dictionary to remove\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b99a85a709e84e82ab6a9b1ec97c42a6",
          "Name": "dictionary",
          "Description": "New dictionary with keys removed",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produce a new Dictionary with the given keys removed.\n\nDictionary.RemoveKeys (keys: string[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.RemoveKeys@string[]",
      "Id": "9076d666cf614e479fb477fcf57e3f95",
      "Inputs": [
        {
          "Id": "97521b6324fa4a57b846758433c5a04c",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d46cb51ce884ea2a381ac3c095970dd",
          "Name": "keys",
          "Description": "The key in the Dictionary to remove\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c88028b121a24a6ca44fe3a3daaf31ee",
          "Name": "dictionary",
          "Description": "New dictionary with keys removed",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produce a new Dictionary with the given keys removed.\n\nDictionary.RemoveKeys (keys: string[]): Dictionary"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallColDicts = IN[0]\r\n\r\n# Place your code below this line\r\ndef find_btmCols(allColDicts):\r\n    t = go(\r\n        allColDicts,\r\n        filter(lambda x: min([x[\"startNode\"][\"Z\"],x[\"endNode\"][\"Z\"]]) == 0),\r\n        list,\r\n    )\r\n    f = go(\r\n        allColDicts,\r\n        filter(lambda x: min([x[\"startNode\"][\"Z\"],x[\"endNode\"][\"Z\"]]) != 0),\r\n        list,\r\n    )\r\n    return t,f\r\n\r\ndef add_bndryToColDict(elemDict, condition):\r\n    elemDict[\"boundary\"] = {\r\n        \"node_name\": elemDict[\"startNode\"][\"name\"],\r\n        \"condition\": condition\r\n    }\r\n    return elemDict\r\n\r\ndef add_bndryToAllColDict(elemDicts, conditions):\r\n    if isinstance(conditions[0],list):\r\n        inputPairs = zip(elemDicts, conditions)\r\n        res = list(map(lambda x: add_bndryToColDict(*x), elemDicts))\r\n    elif not isinstance(conditions[0],list):\r\n        res = list(map(lambda x: add_bndryToColDict(x, conditions), elemDicts))\r\n    \r\n    return res\r\n\r\nbtmCols, otherCols = find_btmCols(allColDicts)\r\n\r\nnew_btmCols = add_bndryToAllColDict(btmCols, [1,1,1])\r\n\r\n\r\nres = new_btmCols + otherCols\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "e1662a72bde64978935c65ebb412b6c3",
      "Inputs": [
        {
          "Id": "b1cdd31faeae4764afe5c19f448120a2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34caa870d46443e1bb0de061b9031c7d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n\r\n# Place your code below this line\r\njsPart = '''\r\n\r\nfunction hideAllPages() {\r\n  document.querySelector(\"#frame_MenuBtn\").style.fontWeight = \"normal\";\r\n  document.querySelector(\"#framePage\").style.display = \"None\";\r\n  document.querySelector(\"#material_MenuBtn\").style.fontWeight = \"normal\";\r\n  document.querySelector(\"#materialPage\").style.display = \"None\";\r\n  document.querySelector(\"#load_MenuBtn\").style.fontWeight = \"normal\";\r\n  document.querySelector(\"#loadPage\").style.display = \"None\";\r\n\r\n}\r\n\r\n\r\n// 페이지가 로드되면 실행될 함수\r\nwindow.addEventListener('load', init);\r\n\r\n\r\nfunction init() {\r\n  // canvas 엘리먼트 생성\r\n  const canvas = document.createElement('canvas');\r\n  canvas.setAttribute('id', 'framePage');\r\n  console.log(canvas)\r\n\r\n  // canvas 크기 설정\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n\r\n  // HTML 문서의 body 요소에 canvas 추가\r\n  document.body.appendChild(canvas);\r\n \r\n  // WebGLRenderer 생성 및 설정\r\n  const renderer = new THREE.WebGLRenderer({ canvas });\r\n  renderer.setSize(canvas.width, canvas.height);\r\n  renderer.setClearColor(0xfdfdfd, 0.5);\r\n\r\n  // 씬(Scene) 생성\r\n  const scene = new THREE.Scene();\r\n\r\n  // 카메라(Camera) 생성 (원근 투영 카메라)\r\n  const camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight,1,500);\r\n \r\n  // 카메라 위치 설정 (x, y, z 좌표)\r\n  //camera.position.z =5;\r\n  camera.position.set(50, 50, 100);\r\n  camera.lookAt(0, 0, 0)\r\n  \r\n  // 오빗컨트롤 설정\r\n  //new OrbitControls(camera, canvas);\r\n  \r\n  // 큐브(Geometry) 생성\r\n  //const geometry = new THREE.BoxGeometry();\r\n \r\n  // 재질(Material) 생성 (색상 지정)\r\n  //const material = new THREE.MeshBasicMaterial({ color:\"red\" });\r\n  const material = new THREE.LineBasicMaterial( { color: \"black\" } );\r\n \r\n  // 메쉬(Mesh) 생성 (큐브와 재질을 결합)\r\n  //const cube = new THREE.Mesh(geometry, material);\r\n  \r\n  // 선 생성\r\n  const points = [];\r\n  points.push( new THREE.Vector3( - 10, 0, 0 ) );\r\n  points.push( new THREE.Vector3( 0, 10, 0 ) );\r\n  points.push( new THREE.Vector3( 10, 0, 0 ) );\r\n  \r\n  const geometry = new THREE.BufferGeometry().setFromPoints( points );\r\n  const line = new THREE.Line( geometry, material );\r\n \r\n  // 씬에 메쉬 추가 \r\n  //scene.add(cube);\r\n  scene.add(line);\r\n  renderer.render( scene, camera );\r\n\r\n  \r\n  function animate() {\r\n    requestAnimationFrame(animate); \r\n    \r\n    cube.rotation.x +=0.01;\r\n    cube.rotation.y +=0.01;\r\n   \r\n    renderer.render(scene,camera); \r\n  }\r\n  \r\n  //animate(); \r\n}\r\n\r\nfunction getCheckboxValue() {\r\n    const query = 'input[name=\"isSlab\"]'//:checked'\r\n    const selectedEls = document.querySelectorAll(query);\r\n    console.log(selectedEls[0]);\r\n    \r\n    //let result = '';\r\n    let result = [];\r\n    selectedEls.forEach((el) => {\r\n        //result += el.value + ' ';\r\n        if (el.checked) {\r\n            result.push(el.value);\r\n        } else {\r\n            result.push('off');\r\n        }\r\n        \r\n    });\r\n    \r\n    const resElem = document.getElementById('DL-result');\r\n    resElem.setAttribute('data-result', result);\r\n}\r\n\r\nfunction setEventListener(target) {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        const increaseButton = document.getElementById('increaseButton');\r\n        const decreaseButton = document.getElementById('decreaseButton');\r\n        const inputContainer = document.getElementById(target + 'inputContainer');\r\n        console.log(target=='DL');\r\n        console.log(target=='LL');\r\n        let inputCount = 0;\r\n\r\n        increaseButton.addEventListener('click', () => {\r\n            inputCount++;\r\n            const inputGroup = document.createElement('div');\r\n            inputGroup.className = target + 'inputGroup';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = inputCount + '.';\r\n\r\n            const newInput = document.createElement('input');\r\n            newInput.type = 'number';\r\n            newInput.setAttribute('display', 'inline');\r\n            newInput.placeholder = 'Enter load in kN/m²';\r\n            \r\n            const new_chkBoxLabel = document.createElement('label');\r\n            const newInput_chkBox = document.createElement('input');\r\n            \r\n            if ( target == 'DL' ) {\r\n                new_chkBoxLabel.textContent = \"slab 여부 - \"\r\n                new_chkBoxLabel.setAttribute('display', 'inline');\r\n                \r\n                newInput_chkBox.type = 'checkbox';\r\n                newInput_chkBox.setAttribute('name', 'isSlab');\r\n                newInput_chkBox.setAttribute('onclick', 'getCheckboxValue()');\r\n                newInput_chkBox.setAttribute('checked', 'checked');\r\n                newInput_chkBox.setAttribute('display', 'inline');\r\n            } else if ( target == 'LL' ) {\r\n                new_chkBoxLabel.textContent = \"slab 여부 - \"\r\n                new_chkBoxLabel.setAttribute('display', 'inline');\r\n                new_chkBoxLabel.setAttribute('style', 'color:white');\r\n                newInput_chkBox.type = 'checkbox';\r\n                newInput_chkBox.setAttribute('name', 'noUse');\r\n                newInput_chkBox.setAttribute('disabled', 'true');\r\n            }\r\n            \r\n            \r\n            inputGroup.appendChild(label);\r\n            inputGroup.appendChild(newInput);\r\n            inputGroup.appendChild(new_chkBoxLabel);\r\n            inputGroup.appendChild(newInput_chkBox);\r\n            inputContainer.appendChild(inputGroup);\r\n        });\r\n\r\n        decreaseButton.addEventListener('click', () => {\r\n            if (inputContainer.lastChild) {\r\n                inputContainer.removeChild(inputContainer.lastChild);\r\n                inputCount--;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nfunction download(filename, text) {\r\n    var element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n    const timeFilename = filename + Date.now().toString()\r\n    element.setAttribute('download', timeFilename);\r\n  \r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n  \r\n    element.click();\r\n  \r\n    document.body.removeChild(element);\r\n}\r\n\r\n// download('test.txt', 'Hello world!');\r\n\r\nfunction get_DL_json() {\r\n    const inputs = document.querySelectorAll('.DLinputGroup input');\r\n    let isSlab = document.getElementById('DL-result').getAttribute('data-result');\r\n    console.log(isSlab);\r\n    const res = inputs.values()\r\n    const load_values = [];\r\n    inputs.forEach((input, index) => {\r\n        if (input.value != 'on') {\r\n            load_values.push({ id: index + 1, value: input.value });\r\n        }\r\n        \r\n    });\r\n    if ( isSlab == null ) {\r\n        isSlab = [];\r\n        for (let i=0; i<load_values.length; i++){\r\n            isSlab.push('on');\r\n        };\r\n    };\r\n    console.log(load_values);\r\n    \r\n    const final = {\r\n      \"DL_info\": load_values,\r\n      \"isSlab\": isSlab\r\n    };\r\n    const jsonStr = JSON.stringify(final);\r\n    return jsonStr;\r\n}\r\n\r\nfunction get_LL_json() {\r\n    const inputs = document.querySelectorAll('.LLinputGroup input');\r\n    const res = inputs.values()\r\n    const values = [];\r\n    inputs.forEach((input, index) => {\r\n        if (input.value != 'on') {\r\n            values.push({ id: index + 1, value: input.value });\r\n        }\r\n    });\r\n    console.log(values);\r\n    const jsonStr = JSON.stringify(values);\r\n    return jsonStr;\r\n}\r\n\r\nfunction get_WindInfo_json() {\r\n    const labels_ = document.querySelectorAll('.form-group-wind label');\r\n    \r\n    const labels = [];\r\n    labels_.forEach((e) => {\r\n        labels.push(e.innerHTML)\r\n    });\r\n\r\n    var vals_ = document.querySelectorAll('.wind_vals');\r\n    const vals = [];\r\n    vals_.forEach((e) => {\r\n        vals.push(e.value)\r\n    });\r\n\r\n    const kvPairDict = {};\r\n    for (let i = 0; i < labels.length; i++) {\r\n        kvPairDict[labels[i]] = vals[i];\r\n      };\r\n    \r\n    const resDict = {\r\n        \"wind_info\": kvPairDict\r\n    };\r\n    const jsonStr = JSON.stringify(resDict);\r\n    console.log(jsonStr);\r\n    return jsonStr;\r\n}\r\n\r\nfunction get_SeismicInfo_json() {\r\n    const labels_ = document.querySelectorAll('.form-group-seismic label');\r\n    \r\n    const labels = [];\r\n    labels_.forEach((e) => {\r\n        labels.push(e.innerHTML)\r\n    });\r\n\r\n    var vals_ = document.querySelectorAll('.seismic_vals');\r\n    const vals = [];\r\n    vals_.forEach((e) => {\r\n        vals.push(e.value)\r\n    });\r\n\r\n    const kvPairDict = {};\r\n    for (let i = 0; i < labels.length; i++) {\r\n        kvPairDict[labels[i]] = vals[i];\r\n      };\r\n    \r\n    const resDict = {\r\n        \"seismic_info\": kvPairDict\r\n    };\r\n    const jsonStr = JSON.stringify(resDict);\r\n    console.log(jsonStr);\r\n    return jsonStr;\r\n}\r\n\r\nfunction saveLoadData_asJson(filename,jsonStr) {\r\n    \r\n    download(filename, jsonStr);\r\n    alert(\"Save Completed!\");\r\n\r\n}\r\n\r\ndocument.querySelector(\"#frame_MenuBtn\").onclick = function() {\r\n  hideAllPages();\r\n  document.querySelector(\"#frame_MenuBtn\").style.fontWeight = \"bolder\";\r\n  document.querySelector(\"#framePage\").style.display = \"inline\";\r\n};\r\n\r\ndocument.querySelector(\"#material_MenuBtn\").onclick = function() {\r\n  hideAllPages();\r\n  document.querySelector(\"#material_MenuBtn\").style.fontWeight = \"bolder\";\r\n  document.querySelector(\"#materialPage\").style.display = \"inline\";\r\n};\r\n\r\ndocument.querySelector(\"#load_MenuBtn\").onclick = function() {\r\n  hideAllPages();\r\n  document.querySelector(\"#load_MenuBtn\").style.fontWeight = \"bolder\";\r\n  document.querySelector(\"#loadPage\").style.display = \"inline\";\r\n};\r\n\r\n\r\nsetEventListener('DL');\r\nsetEventListener('LL');\r\n\t\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = jsPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "512a05c1bd764f3daa71c3bd3789bf09",
      "Inputs": [
        {
          "Id": "2def9c8ff5ae4bbdbc79656f6a83f9b8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "107fff5ab3bc4103849decbe95df4575",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "875d09def91541d1b9e58ea63e179b59",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07df22f4ea1d459a9d5266728b3d95a8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\ncssPart = '''\r\n/* style.css */\r\n:root {\r\n  --text-color: #f0f4f5;\r\n  --background-color: #263343;\r\n  --accent-color: orange;\r\n  --icons-color: rgb(152, 187, 201);\r\n  --bodybackground-color: lightgray;\r\n}\r\n\r\ncanvas {\r\n    display: block;\r\n    }\r\n\r\nbody {\r\n    font-family: Arial, sans-serif;\r\n    /*display: flex;\r\n    justify-content: center;\r\n    align-items: center;*/\r\n    height: 100vh;\r\n    margin: 0;\r\n    background-color: #f0f0f0;\r\n}\r\n\r\n.header {\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    margin: 20px 20px 20px 20px;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: var(--text-color);\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0px; /* 도달했을때 고정시킬 위치 */\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: var(--background-color);\r\n  padding: 8px 12px;\r\n  font-family: 'STIX Two Math';\r\n}\r\n\r\n.navbar__logo i {\r\n  color: var(--accent-color);\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__menu {\r\n  list-style: none;\r\n  display: flex;\r\n  margin: 0;\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__menu li {\r\n  padding: 8px 30px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.navbar__menu li:hover {\r\n  background-color: var(--accent-color);\r\n  border-radius: 3px;\r\n}\r\n\r\n.navbar__icons {\r\n  list-style: none;\r\n  display: flex;\r\n  color: var(--icons-color);\r\n  margin: 0;\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__icons li {\r\n  padding: 8px 12px;\r\n  margin: 0;\r\n}\r\n\r\n.content {\r\n    font-family: Arial, sans-serif;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    height: 100vh;\r\n    margin: 0;\r\n    background-color: #f0f0f0;\r\n}\r\n.container {\r\n    background: #fff;\r\n    padding: 20px;\r\n    margin: 20px 5px 5px 5px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    width: 350px;\r\n    text-align: center;\r\n    align-content: stretch;\r\n    /*align-items: flex-start;*/\r\n}\r\n\r\nh1 {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n    margin-bottom: 15px;\r\n    text-align: left;\r\n}\r\n.form-group-wind {\r\n    margin-bottom: 15px;\r\n    text-align: left;\r\n}\r\n.form-group-seismic {\r\n    margin-bottom: 15px;\r\n    text-align: left;\r\n}\r\n\r\nlabel {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n}\r\n\r\ninput, select {\r\n    width: 100%;\r\n    padding: 8px;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    background: #007bff;\r\n    border: none;\r\n    color: #fff;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n    background: #0056b3;\r\n}\r\n\r\n#result {\r\n    margin-top: 20px;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n}\r\n\r\n#increaseButton, #decreaseButton {\r\n    font-size: 2rem;\r\n    padding: 5px 5px;\r\n    margin: 5px;\r\n}\r\n\r\n#inputContainer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.inputGroup {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 5px 0;\r\n}\r\n\r\n.inputGroup label {\r\n    margin-right: 10px;\r\n    font-size: 1rem;\r\n}\r\n\r\n\r\n#framePage {\r\n  display: inline;\r\n}\r\n\r\n#materialPage {\r\n  display: None;\r\n}\r\n\r\n#loadPage {\r\n  display: None;\r\n}\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = cssPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "964f79903b234e20b7310e1beebb01be",
      "Inputs": [
        {
          "Id": "3b27fe862cab4a0ba984217e278fc85c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "67e02b17826b4ca8b4d7bba7ec9a3784",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a4681144e6344b7954539985e27426f",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e87daa5787664fcaa13e59b422e1f84c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\njsPart = IN[0]\r\ncssPart = IN[1]\r\nnav_part = IN[2]\r\n\r\ncontents = IN[4]\r\nmaterial_part = contents[1]\r\nload_part = contents[2]\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>HSD tool-kit Input Window</title>\r\n</head>\r\n<style>\r\n{cssPart}\r\n</style>\r\n\r\n<body>\r\n\r\n<div class=\"header\">\r\n<h1>::: HSD tool-kit Input Center :::</h1>\r\n</div>\r\n\r\n{nav_part}\r\n\r\n{material_part}\r\n\r\n{load_part}\r\n    \r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/examples/js/controls/OrbitControls.js\"></script>\r\n    <script src=\"js/script.js\"></script>\r\n    \r\n</body>\r\n</html>\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1b441b8fa1b046d2bf46e40f5277bb87",
      "Inputs": [
        {
          "Id": "0e33ab6b4b634454b4792c5ae6a587af",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "20bd2ffc97e74fc6ac5be844787c17b6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b2249cb0df9245fea24dc067c7426721",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0303780df2be43a888cb232219cac354",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da4345ec91794616a88b5b8b1ebb79c2",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "877afc6567254252a42a93efff65c7f4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "htmlStr;",
      "Id": "e21e75097cd24652ad27db98fd19aa73",
      "Inputs": [
        {
          "Id": "74e066dfb4664b39951455dc0199445d",
          "Name": "htmlStr",
          "Description": "htmlStr",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1a59fa368c7848ea8d5112c8aa2dcb38",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nnavPart = f'''\r\n\r\n<nav class=\"navbar\">\r\n\r\n  <ul class=\"navbar__menu\">\r\n    <li id=\"frame_MenuBtn\">Frame View</li>\r\n    <li id=\"material_MenuBtn\">About Material</li>\r\n    <li id=\"load_MenuBtn\">About Load Info.</li>\r\n  </ul>\r\n\r\n</nav>\r\n\r\n'''\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = navPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "29f0a1fd5815420fae3a8fd2b1c493f5",
      "Inputs": [
        {
          "Id": "57568141c4294815bf44f33c6afbd6f3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "95a6a9302877408f9b8e1aed30e8751a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\nimport asyncio\r\nimport multiprocessing\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncontents = IN[0]\r\nfolderPath = IN[1]\r\ncwd = folderPath\r\nportNo = IN[2]\r\nexecutionMode = IN[3]\r\n# Place your code below this line\r\n\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\ndef make_resultHTMLname(htmlStr,title,cwd):\r\n    #timeStamp = time.strftime('%H_%M_%S', time.localtime(time.time()))\r\n    #folderPath = f\"{cwd}\\\\.dynLog\"\r\n    folderPath = cwd\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    fileName = f\"index.html\"\r\n    filePath = f\"{folderPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(htmlStr)\r\n    f.close()\r\n    return fileName\r\n\r\n\r\ndef execute_browser(cwd):\r\n    #cwd = find_cwd()\r\n    folderPath = cwd\r\n    os.chdir(folderPath)\r\n    #cmdStr = \"start chrome http:localhost:8000\"\r\n    cmdStr = f\"start msedge http:localhost:{portNo}\"\r\n    cmdList= cmdStr.split(' ')\r\n    #subprocess.run(args=[fileName], shell=True)\r\n    #subprocess.run(args=['start','excel',fileName], shell=True)\r\n    subprocess.run(args=cmdList, shell=True)\r\n    return cmdList\r\n\r\n\r\nfileName = make_resultHTMLname(contents,\"test\",cwd)\r\n\r\nif executionMode != \"입력모드\":\r\n    res = 0\r\nelif executionMode == \"입력모드\":\r\n    res = execute_browser(cwd)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res, fileName",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "50f753964398423db6a489753b327d5f",
      "Inputs": [
        {
          "Id": "cbfc937889bd4f31ac0d39ef319cee39",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1280bff07abb4627a613fbca4184bdcf",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "925f9ee8811f4a23ab7d6ff1ac2f51a3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "83bb5e400c8c445194181a115b0d30ec",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db9d3617ec4b42bcbea1b4d504513f5a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncontents = IN[0]\r\nfolderPath = IN[1]\r\nexecutionMode = IN[2]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\n#cwd = find_cwd()\r\ncwd = folderPath\r\n\r\ndef make_resultHTMLname(jsStr,cwd):\r\n    #timeStamp = time.strftime('%H_%M_%S', time.localtime(time.time()))\r\n    #folderPath = f\"{cwd}\\\\.dynLog\"\r\n    folderPath = cwd\r\n    jsPath = cwd + \"\\\\js\"\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    if not os.path.exists(jsPath):\r\n        os.makedirs(jsPath)\r\n    fileName = \"script.js\"\r\n    filePath = f\"{jsPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(jsStr)\r\n    f.close()\r\n    return fileName\r\n\r\ndef execute_file(fileName):\r\n    #cwd = find_cwd()\r\n    folderPath = cwd\r\n    os.chdir(folderPath)\r\n    subprocess.run(args=[fileName], shell=True)\r\n    #subprocess.run(args=['start','excel',fileName], shell=True)\r\n    \r\n\r\n#fileName = make_resultHTMLname(contents,cwd)\r\n\r\n\r\nif executionMode != \"입력모드\":\r\n    res = 0\r\nelif executionMode == \"입력모드\":\r\n    res = make_resultHTMLname(contents,cwd)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a5eb0ff6135341a0b1114f3b143cd80b",
      "Inputs": [
        {
          "Id": "15d7cd0b35494bad81ac4479a6f453fc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "350b09ad74a04eeb8d21535f73f128de",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f4d74d6373fe4598bb3e36c31b6e81c0",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b6bacc06de2e4d36a740e198c8d942ec",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\njsPart = IN[0]\r\ncssPart = IN[1]\r\ntablePart = IN[2]\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>my first three.js app</title>\r\n    <style>\r\n        {cssPart}\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n\r\n\r\n<div class=\"wrapper\">\r\n\r\n  <a data-fslightbox=\"gallery\" href=\"#custom-source\">\r\n    유튜브 라이트박스\r\n  </a>\r\n\r\n  <iframe id=\"custom-source\"\r\n          frameborder=\"0\"\r\n          width=\"1920px\"\r\n          height=\"1080px\"\r\n          allow=\"autoplay; fullscreen\"\r\n          src=\"https://www.youtube.com/embed/qgBSiRwsbNw?autoplay=1\">\r\n  </iframe>\r\n</div>\r\n\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fslightbox/3.3.1/index.min.js\" integrity=\"sha512-EqNNJuepkw5P9vxCml8eBk7C4Ld+4kAnvzOD/jG21rkxWPILGoQa5EvD62UieiJF0u3xoQrcVnce4i83VnYj/Q==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n\r\n</body>\r\n\r\n</html>\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "109be601447847c29d5896ee787c7028",
      "Inputs": [
        {
          "Id": "820754c62ba146f6917c04d2c4e462ce",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d9a33fef63db4cccae3c9d6a454aa4b1",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7609ac852cc942c9833e872b20ffb6d0",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f6c2acc12de4fbba692e5598eb96b5c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "1ae21a8ccba240838e5f62787415e708",
      "Inputs": [
        {
          "Id": "79cc0bd4e1ee4547940ac6b8d3a55a72",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dec89e00b00749e68506b9fb50fe7765",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0dd9aa0f3c374a62a3cfe546bee413ed",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0410148b62cd44248ee8f53a966f2ce9",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport os\r\nimport asyncio\r\nimport multiprocessing\r\nimport subprocess\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncwd = IN[0]\r\nportNo = IN[1]\r\nexecutionMode = IN[2]\r\n# Place your code below this line\r\nbatStr = f\"\"\"\r\n@echo on\r\npython -m http.server {portNo}\r\ncmd /k\r\n\"\"\"\r\n##cmd /k\r\ntitle = \"localWebserver\"\r\n\r\ndef make_startSever_bat(batStr,title,cwd):\r\n    folderPath = cwd\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    fileName = f\"{title}.bat\"\r\n    filePath = f\"{folderPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(batStr)\r\n    f.close()\r\n    return fileName\r\n\r\ndef startBat(fileName, cwd):\r\n    cmdStr = f\".\\\\{fileName}\"\r\n    cmdList= cmdStr.split(' ')\r\n    os.chdir(cwd)\r\n    \r\n    res = subprocess.Popen(args=cmdList, shell=True)\r\n    return res\r\n\r\nbatFileName = make_startSever_bat(batStr,title,cwd)\r\n\r\nif executionMode != \"입력모드\":\r\n    res = 0\r\nelif executionMode == \"입력모드\":\r\n    res = startBat(batFileName, cwd)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res\r\n\r\n#startBat(fileName, cwd)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7ee76eb91d8b46698f3daab5719e02a9",
      "Inputs": [
        {
          "Id": "d2b6fbffd7cf490aa35a08da10ec88f2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a47dc0cf3444982949adc49f68ec2b4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03f6a8fdc4ef4a618084339f60b84924",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a045d03a6bb94e578f9886a292053774",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "8500",
      "Id": "14eed113613e4654a80635709f99cb88",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "87307234f91844d89128fc1c2c3347a7",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "htmlPath;",
      "Id": "3a7e5a49982d4a90a41cac98681f21fe",
      "Inputs": [
        {
          "Id": "9dbb2df8fe2f4027a35eb3a669f19759",
          "Name": "htmlPath",
          "Description": "htmlPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf924f913a3c45a9aff3c8cdfb852de9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"HSD_DL\",\n\"HSD_LL\",\n\"HSD_WL\",\n\"HSD_SL\"\n];",
      "Id": "ae8a0e95c44e4ac7b0f1c248fa6ffe37",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0cd8eace47814c71be31ce6ec0b55f27",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.IO.FileSystem.GetDirectoryContents@var,string,bool",
      "Id": "5fb9c95c02bf4ab593a27008cb50eca0",
      "Inputs": [
        {
          "Id": "89cbb494a451441bab04de521a630390",
          "Name": "directory",
          "Description": "Directory to get contents of\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "75cc376b1d094fc684adf6d61a99af2f",
          "Name": "searchString",
          "Description": "Search string used to filter results\n\nstring\nDefault value : \"*.*\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e37ae81c05f143f09c0cdf3cfcd1a9db",
          "Name": "includeSubdirectories",
          "Description": "Set to true to include files and folders in subdirectories (recursive) or set to false to include results from top-level of given directory only.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5da55e31499a4017aeb887ae464ab37b",
          "Name": "files",
          "Description": "Resulting files from query",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8cb58b9cd6e24dd58bcabcff5145b7ee",
          "Name": "directories",
          "Description": "Resulting directories from query",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Will return a list of files and directories that are contained within a given directory. An optional searchString can be used to filter the results.\n\nFileSystem.GetDirectoryContents (directory: var, searchString: string = \"*.*\", includeSubdirectories: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DirectoryObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6c38437c7af844ecb656a68486ce296c",
      "Inputs": [
        {
          "Id": "f43f7979705e4d02b5d4287ef4f947e8",
          "Name": "path",
          "Description": "Path to the directory (type: string)",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94e20330d73443bc88d12efa055ca88c",
          "Name": "directory",
          "Description": "Directory object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a directory object from a path"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport os\r\nimport shutil\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nfileNames = IN[0]\r\nloadKinds = IN[1]\r\ntmpPath = IN[2]\r\nsubPath = IN[3]\r\nexecutionMode = IN[4]\r\n\r\n# Place your code below this line\r\ndef find_downloadPath():\r\n    download = os.path.join(os.path.expanduser('~'), 'downloads')\r\n    return download\r\n    \r\ndef find_allHSD_loads(fileNames, loadKind):\r\n    allHSDs = go(\r\n        fileNames,\r\n        filter(lambda x: loadKind in x),\r\n        list,\r\n    )\r\n    return allHSDs\r\n    \r\ndef select_lastHSD(fileNames, loadKind):\r\n    allHSDs = find_allHSD_loads(fileNames, loadKind)\r\n    if len(allHSDs) == 1:\r\n        res = allHSDs[0]\r\n    elif len(allHSDs) > 2:\r\n        res = go(\r\n            allHSDs,\r\n            filter(lambda x: '(' in x),\r\n            sorted,\r\n            lambda x: x[-1],\r\n        )\r\n    return res\r\n\r\ndef chk_allLastHSDs(fileNames, loadKinds):\r\n    vals = []\r\n    for x in loadKinds:\r\n        try:\r\n            vals.append(select_lastHSD(fileNames, x))\r\n        except:\r\n            vals.append(0)\r\n            \r\n    \r\n    resDict = dict(zip(loadKinds, vals))\r\n    \r\n    return resDict\r\n\r\ndef read_allHSDsJson(loadDict):\r\n    resDict = {}\r\n    for k,v in loadDict.items():\r\n        if v == 0:\r\n            resDict[k] = \"noData\"\r\n        else:\r\n            with open(v, 'r', encoding='utf-8') as f:\r\n                resDict[k] = f.read()\r\n    return resDict\r\n    \r\nloadDict = chk_allLastHSDs(fileNames, loadKinds)\r\n\r\n\r\n## copy allSrcFiles to .dynTemp\r\n\r\nallSrcFilesFullPath = list(map(lambda x: find_allHSD_loads(fileNames, x), loadKinds))\r\nallSrcFilesNameOnly = go(\r\n    allSrcFilesFullPath,\r\n    map(lambda grp: go(\r\n        grp,\r\n        map(lambda x: x.split('\\\\')),\r\n        map(lambda x: x[-1]),\r\n        map(lambda x: '\\\\'+ x),\r\n        )\r\n    ),\r\n    lambda x: chain(*x),\r\n    list,\r\n)\r\n\r\ndef moveSrcToTemp(filename, tmpPath, subPath):\r\n    tgtPath = tmpPath + subPath\r\n    if not os.path.exists(tgtPath):\r\n        os.makedirs(tgtPath)\r\n    src = find_downloadPath()\r\n    dir = tgtPath\r\n    shutil.move(src + filename, dir + filename)\r\n    return dir + filename\r\n\r\nif executionMode == \"하중분배모드\":\r\n    res = map(lambda x: moveSrcToTemp(x, tmpPath, subPath), allSrcFilesNameOnly)\r\nelif executionMode != \"하중분배모드\":\r\n    res = 0\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = allSrcFilesNameOnly\r\n\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "d851a9e56caf48cb9719d6b17d4d4dc6",
      "Inputs": [
        {
          "Id": "065a0961f59c41e7b038bb6e35d96d6c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eecca253973d46a198881a244bbab9dc",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8eb2ad0a76c34893a08d0edb837abab1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9906872e994e4a7d966bdaccae3899ff",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0bb540faa5574650b5f4cc6307e33c80",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6b26523ab86043e0affe3ccb193d23f4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport json\r\nimport os\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nloadDict = IN[0]\r\n# Place your code below this line\r\n    \r\ndef del_noDataKey_inDict(loadDict):\r\n    resDict = {}\r\n    for k,v in loadDict.items():\r\n        if v == \"noData\":\r\n            pass\r\n        else:\r\n            resDict[k] = json.loads(v)\r\n    return resDict\r\n# Assign your output to the OUT variable.\r\nOUT = del_noDataKey_inDict(loadDict)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1aa0152446c04939b2fd2f194d3b821b",
      "Inputs": [
        {
          "Id": "057de3c3c8714183bb5cd46c40191258",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15a877e843354c43bbc74b75f8c8b47b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport os\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\ndef find_downloadPath():\r\n    download = os.path.join(os.path.expanduser('~'), 'downloads')\r\n    return download\r\n# Assign your output to the OUT variable.\r\nOUT = find_downloadPath()",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a236f78d50184453af3945a52da7cb8b",
      "Inputs": [
        {
          "Id": "7375349b708f443eb7bd5be5e165c13d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "708f8bdfafda4b44931cf80f79c1fb47",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\.dynTemp\\\\\";",
      "Id": "df436224246845aa8bbf408723609d33",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdc8a1afc2074eba84bb4c4e90b0b527",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport time\r\nimport subprocess\r\nimport os\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsubPath = IN[0]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\n#cwd = find_cwd()\r\n#cwd = os.getenv(\"HomePath\")\r\n#\r\n#folderPath = f\"{cwd}\\\\{dynTempServerPath}\"\r\n#if not os.path.exists(folderPath):\r\n#    os.makedirs(folderPath)\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = map(lambda x: find_cwd() + x, subPaths) \r\nOUT = find_cwd() + subPath",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f6be8f75e6e3433a84f974530b176bdf",
      "Inputs": [
        {
          "Id": "80b072dbcfac45c1a76bbcad51cfa0f6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7e86a83b1eee4e8f8a0e3a94d6afa211",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport os\r\nimport shutil\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nmoveResult = IN[0]\r\nloadKinds = IN[1]\r\ntmpPath = IN[2]\r\nsubPath = IN[3]\r\ntgtPath = tmpPath + subPath\r\n\r\n# Place your code below this line\r\ndef find_downloadPath():\r\n    download = os.path.join(os.path.expanduser('~'), 'downloads')\r\n    return download\r\n\r\ndef get_allSrcFromTemp(tmpPath):\r\n    fileNames = os.listdir(tmpPath)\r\n    res = list(map(lambda x: tmpPath + '\\\\' + x, fileNames))\r\n    return res\r\n\r\ndef find_allHSD_loads(fileNames, loadKind):\r\n    allHSDs = go(\r\n        fileNames,\r\n        filter(lambda x: loadKind in x),\r\n        list,\r\n    )\r\n    return allHSDs\r\n    \r\ndef select_lastHSD(fileNames, loadKind):\r\n    allHSDs = find_allHSD_loads(fileNames, loadKind)\r\n    allCreatedTimes = list(map(lambda x: os.path.getctime(x), fileNames))\r\n    if len(allHSDs) == 1:\r\n        res = allHSDs[0]\r\n    elif len(allHSDs) > 1:\r\n        res = go(\r\n            zip(allHSDs,allCreatedTimes),list,\r\n            lambda x: sorted(x, key=lambda x: x[1]),\r\n            lambda x: x[-1][0],\r\n        )\r\n    return res\r\n\r\ndef chk_allLastHSDs(fileNames, loadKinds):\r\n    vals = []\r\n    for x in loadKinds:\r\n        try:\r\n            vals.append(select_lastHSD(fileNames, x))\r\n        except:\r\n            vals.append(0)\r\n            \r\n    \r\n    resDict = dict(zip(loadKinds, vals))\r\n    \r\n    return resDict\r\n\r\ndef read_allHSDsJson(loadDict):\r\n    resDict = {}\r\n    for k,v in loadDict.items():\r\n        if v == 0:\r\n            resDict[k] = \"noData\"\r\n        else:\r\n            with open(v, 'r', encoding='utf-8') as f:\r\n                resDict[k] = f.read()\r\n    return resDict\r\nfileNames = get_allSrcFromTemp(tgtPath)\r\n\r\nloadDict = chk_allLastHSDs(fileNames, loadKinds)\r\n\r\n\r\n## delete all in downloads\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = read_allHSDsJson(loadDict), loadDict",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "9253d39f2f364b5d9eef14a2ca0afeba",
      "Inputs": [
        {
          "Id": "f000f4548c934d0fa921902c0823b121",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d77cea26b354fda8ae45d571261db3f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f6c42e0e245f4384b1dba1d5b716d03c",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2150ac211caf4f4b907313cfeb53a649",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "73406de133d74b51b2d89a8dff0c1185",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\\\\jsons\";",
      "Id": "a1384d430ef44419972fd96eb39eadf9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5c811fc5ad014d30b8783742009bc47f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "6c56dd6c983c46ebbc4ca505db793b0c",
      "Inputs": [
        {
          "Id": "28914052c9644eb18632f7905a19ab53",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6dd845da6198402c8298ff254bb33f0b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "fa85ebe69d3a4a0ab1efe64dbea0c04d",
      "Inputs": [
        {
          "Id": "0b5ec3fab7864fdbbed4cc24b68acd65",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b63f1455a2914b1fb2beceee53449481",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "bce26fb86b8e4f39847a36c920cf9ea7",
      "Inputs": [
        {
          "Id": "422d807b5642461880f59a9de50ce98d",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3a52fe789a454e59b5a4fc92a02db4f2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "eea3f32fa119476fac3be21a6fe2f881",
      "Inputs": [
        {
          "Id": "88c5ce6ef5eb45dab20c4ebb4cb14dde",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fc5101cf5e949da943569037d94d542",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"HSD_DL\"][\"DL_info\"][\"value\"];",
      "Id": "716857638daa4d178ad6bcabcd494adc",
      "Inputs": [
        {
          "Id": "56741a155da14c53ab1a1638ca77de80",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b5ae89aa0f94bf9aa4df31dc7c11479",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "6265054058124e71ac70600186923e52",
      "Inputs": [
        {
          "Id": "786f97b5c20c4cc2899cac0e26d7a7c0",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6387ea970bdc46019752b248df96a0f0",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "folderPath;",
      "Id": "fb5606478fac490b96192d6fd917d0d4",
      "Inputs": [
        {
          "Id": "86970dd3d9c340b8b135dd3e273d4a8a",
          "Name": "folderPath",
          "Description": "folderPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4aec9979caf147f78dd82f6ea291c5f9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "folderPath;",
      "Id": "a57e34cd8cc94c21b6f6b7a39a478ba1",
      "Inputs": [
        {
          "Id": "65f16d7a2e2c4b85b16685da8bdcbf5c",
          "Name": "folderPath",
          "Description": "folderPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a49762ea397547e7b010e3bad9269758",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "folderPath;",
      "Id": "a9f82b0568434805924c6972b44676cb",
      "Inputs": [
        {
          "Id": "afbf68c009684d3a97877515b2ae1397",
          "Name": "folderPath",
          "Description": "folderPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "20d260cc6f4048b3abb5df9d679fad6d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport datetime\r\nimport os\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nexecutionMode = IN[0]\r\nfolderPath = IN[1]\r\nfileNameMain = IN[2]\r\nfileContent = IN[3]\r\n# Place your code below this line\r\ndef getTimeStamp():\r\n    #timeStr = datetime.datetime.now().strftime('_%Y-%m-%d_%H_%M')\r\n    timeStr = datetime.datetime.now().strftime('_%Y-%m-%d_%H%M%S')\r\n    res = timeStr\r\n    return res\r\n\r\ndef make_resultFile(content, folderPath, fileName):\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    fileNamefull = fileNameMain + getTimeStamp()\r\n    filePath = f\"{folderPath}\\\\{fileNamefull}.txt\"\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(content)\r\n    f.close()\r\n    return filePath\r\n\r\nif executionMode == \"하중분배모드\":\r\n    res = make_resultFile(fileContent, folderPath+'.\\\\loadDist', fileNameMain)\r\nelif executionMode != \"하중분배모드\":\r\n    res = 0\r\n\r\n#res = make_resultFile(fileContent, folderPath, fileNameMain)\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "03655d38fc55463ca6c1516d9a800ba9",
      "Inputs": [
        {
          "Id": "3805247c23414c0e8b25db909c9a22c6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5440056d12544c9ea76f8c80036721b8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47be24d7755b4e8ebcaab2d9cd66a562",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eac1a3efb42c47c488ae65b176eddef3",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1200d1e4f824c428e73aeb960ef2acb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"HSD_load distribution\";",
      "Id": "66d2c27e6c0241ca948462a9c0506bc1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7589e174ec474bceb8f335db25a5c93c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "68b6eeb06f9e4e39a41bff7ce89d17ec",
      "Inputs": [
        {
          "Id": "3ab394e2c1214a3d9d11b791dc9555e9",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d65b69a27d874dca964949f776759bbc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "36cefb107a5c4e0ba1c71a9d2cc5b848",
      "Inputs": [
        {
          "Id": "b32b620594d84ec995647dd81233f6e4",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cd0938b0a9484f40837ccd9642483441",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "a0a83da8bb93440f944a16d2cc53b430",
      "Inputs": [
        {
          "Id": "d3db3e5cb4a342ff9e534cfd77262887",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "698effddae854c1ca4d9c666ef6c2d04",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"HSD_LL\"][\"value\"];",
      "Id": "b88b17e65e9748028ff671f38c9ca57e",
      "Inputs": [
        {
          "Id": "dbad7381ff9c488fa3f2045909c95ef7",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6550308bb9544ac7943142e991b1aae8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "1de02dc5a9ab48098bb0e8c1a5c35385",
      "Inputs": [
        {
          "Id": "467a59e1590a4082b544b88b0ae280d7",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8cae2a76886549c9a6a14f9ef7a735c5",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nframeDict_forAllLv = IN[0]\r\nallCols = IN[1]\r\nLL_forAllLv = IN[2]\r\n# Place your code below this line\r\nallLvsDict_LL = go(\r\n    frameDict_forAllLv,\r\n    map(lambda DictsPerLv: \r\n        set(map(lambda d: d[\"lvBelong\"], DictsPerLv))\r\n    ), list,\r\n    lambda x: chain(*x), list,sorted,\r\n    lambda x: dict(zip(x, LL_forAllLv)),\r\n)\r\n\r\ndef calcLoad(elemDict, loadKind, loadType, allLvsLoadDict):\r\n    elemLv = elemDict[\"lvBelong\"]\r\n    elemLength = elemDict[\"length\"]\r\n    asgned_area = elemDict[\"asgned_area\"]\r\n    LL_unitValueforElem = allLvsLoadDict[elemLv]\r\n    calcRes = LL_unitValueforElem * asgned_area / (1000) \r\n    resDict = {\r\n        \"load_type\": loadType,\r\n        \"wx\": 0,\r\n        \"wy\": -calcRes / elemDict[\"length\"],\r\n    }\r\n    \r\n    elemDict[\"load\"][loadKind] = resDict\r\n    \r\n    return elemDict\r\n\r\ndef calcLoadPerLv(elemDictsPerLv, loadKind, loadType, allLvsLoadDict):\r\n    return list(map(lambda x: calcLoad(x, loadKind, loadType, allLvsLoadDict), elemDictsPerLv))\r\n\r\ndef calcLoad_forAllLv(elemDicts_forAllLv, loadKind, loadType, allLvsLoadDict):\r\n    return list(map(lambda x: calcLoadPerLv(x, loadKind, loadType, allLvsLoadDict), elemDicts_forAllLv))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = calcLoad_forAllLv(frameDict_forAllLv, \"LL\", \"uniform\", allLvsDict_LL)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f9c2a22d7b37402e84b657d0eb08d6aa",
      "Inputs": [
        {
          "Id": "ab1d6e849b994808b5a942fe5bae452e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4711a218cad14465908e2aa587df9b06",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a101667eb86341d0a0afcb17ed777a95",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7c504c5a37864d389ce62f903eb33ff8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "32458bc649bf4eac85a73ac65a40bb0a",
      "Inputs": [
        {
          "Id": "c1454595e956418ebeb492b82951d58c",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a17632b3c2544aa3b4cfb144f32df1c2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allCols;",
      "Id": "aa997a130fed4f479435dc6be352b111",
      "Inputs": [
        {
          "Id": "0a02b4a0d05d465f8309528fa3205aca",
          "Name": "allCols",
          "Description": "allCols",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a98912866db45b19c3774470ea92002",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"HSD_WL\"][\"wind_info\"];",
      "Id": "5a99da869d874dd4b3b72b16f7eb72d7",
      "Inputs": [
        {
          "Id": "cbcd2d65d2094f4dbc5f69603dc509ba",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7bff69e758b843e2aa36d9399569ffb2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"HSD_SL\"][\"seismic_info\"];",
      "Id": "9f196c6cde4b434198e94b9cd63af915",
      "Inputs": [
        {
          "Id": "7c4ec8396540415bb358ab72827351d3",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d40a88dda93e450c8fb05ef1977ba3fa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"asgned_srfs\"];",
      "Id": "2ea7dd46ca95432a8dc4f5e90a6ec274",
      "Inputs": [
        {
          "Id": "07a802f25e064081aaecd5e2571c5583",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "19597a36517c4067b593b0ff1311e8cf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "391b617204f842d2904a7cc0e6753ac9",
      "Inputs": [
        {
          "Id": "f4b92b01111246c69b891f6deb576812",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29bcb990193c4af6bcb7f5706b742a3b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "RC",
          "Item": "RC"
        },
        {
          "Name": "Steel",
          "Item": "Steel"
        }
      ],
      "SelectedIndex": 1,
      "SelectedString": "Steel",
      "NodeType": "ExtensionNode",
      "Id": "aeb818053a804a8cbd97ec6a8f81210e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "67157663ea4d455287008f39ab105a9c",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n<div id=\"loadPage\">\r\n<div class=\"content\">\r\n    <div class=\"container\">\r\n        <h2>Dead Load Information 입력기</h2>\r\n        <div class=\"form-group\">\r\n            <label for=\"DLinput\">층별 DL 입력 (kN/m²)</label>\r\n                <button id=\"increaseButton\">+</button>\r\n                <button id=\"decreaseButton\">-</button>\r\n                <div id=\"DLinputContainer\"></div>\r\n        </div>\r\n        <button onclick=\"saveLoadData_asJson('HSD_DL.json', get_DL_json())\">Save Data</button>\r\n        <div id=\"DL-result\"></div>\r\n    </div>\r\n    \r\n    <div class=\"container\">\r\n        <h2>Live Load Information 입력기</h2>\r\n        <div class=\"form-group\">\r\n            <label for=\"LLinput\">층별 LL 입력 (kN/m²)</label>\r\n                <button id=\"increaseButton\">+</button>\r\n                <button id=\"decreaseButton\">-</button>\r\n                <div id=\"LLinputContainer\"></div>\r\n        </div>\r\n        <button onclick=\"saveLoadData_asJson('HSD_LL.json', get_LL_json())\">Save Data</button>\r\n        <div id=\"LL-result\"></div>\r\n    </div>\r\n    \r\n    <div class=\"container\" id=\"wind-Pane\">\r\n        <h2>Wind Load Info. 입력기</h2>\r\n        <div class=\"form-group-wind\">\r\n            <label for=\"wind-codeSelect\">코드선택</label>\r\n            <select class=\"wind_vals\" id=\"wind-codeSelect\">\r\n                <option value=\"NA\">None Application</option>\r\n                <option value=\"ASCE\" selected>ASCE 7-22</option>\r\n                <option value=\"KDS\">KDS 41 12 00</option>\r\n                <option value=\"EN\">EN1991-1-1-4</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group-wind\">\r\n            <label for=\"BasicWindSpeed\">Basic Wind Speed (m/s)</label>\r\n            <input class=\"wind_vals\" type=\"number\" id=\"BasicWindSpeed\" placeholder=\"Enter wind speed in m/s\">\r\n        </div>\r\n        <div class=\"form-group-wind\">\r\n            <label for=\"exposureCategory\">Exposure Category</label>\r\n            <select class=\"wind_vals\" id=\"exposureCategory\">\r\n                <option value=\"A\">A</option>\r\n                <option value=\"B\">B</option>\r\n                <option value=\"C\">C</option>\r\n                <option value=\"D\">D</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group-wind\">\r\n            <label for=\"TopoFactor\">Topographic factor(Kzt)</label>\r\n            <input class=\"wind_vals\" type=\"number\" id=\"TopoFactor\" placeholder=\"Enter factor value\">\r\n        </div>\r\n        <div class=\"form-group-wind\">\r\n            <label for=\"enclosureClass\">Enclosure Classification</label>\r\n            <select class=\"wind_vals\" id=\"exposureCategory\">\r\n                <option value=\"A\">Shelter</option>\r\n                <option value=\"B\">Building - Enclosed</option>\r\n                <option value=\"C\">Building - Parially Enclosed</option>\r\n                <option value=\"D\">Building - Open</option>\r\n            </select>\r\n        </div>\r\n\r\n        <button onclick=\"saveLoadData_asJson('HSD_WL.json',get_WindInfo_json())\">Save Data</button>\r\n        <div id=\"wind-result\"></div>\r\n    </div>\r\n    \r\n    <div class=\"container\">\r\n        <h2>Seismic Load Info. 입력기</h2>\r\n        <div class=\"form-group-seismic\">\r\n            <label for=\"codeSelect\">코드선택</label>\r\n            <select class=\"seismic_vals\" id=\"codeSelect\">\r\n                <option value=\"NA\">None Application</option>\r\n                <option value=\"ASCE\" selected>ASCE 7-05</option>\r\n                <option value=\"KDS\">KDS 41 12 00</option>\r\n                <option value=\"EN\">EN1991-8</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group-seismic\">\r\n            <label for=\"siteClass\">Site Class</label>\r\n            <select class=\"seismic_vals\" id=\"siteClass\">\r\n                <option value=\"A\">A</option>\r\n                <option value=\"B\">B</option>\r\n                <option value=\"C\">C</option>\r\n                <option value=\"D\">D</option>\r\n                <option value=\"E\">E</option>\r\n                <option value=\"F\">F</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group-seismic\">\r\n            <label for=\"riskCategory\">Risk Category</label>\r\n            <select class=\"seismic_vals\" id=\"riskCategory\">\r\n                <option value=\"1\">Ⅰ</option>\r\n                <option value=\"2\">Ⅱ</option>\r\n                <option value=\"3\">Ⅲ</option>\r\n                <option value=\"4\">Ⅳ</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"rmf\">Response modification factor</label>\r\n            <blockquote>\r\n            <div class=\"form-group-seismic\">\r\n                <label for=\"rmfLong\">Longitude Side (X-axis)</label>\r\n                <input class=\"seismic_vals\" type=\"number\" id=\"rmfLong\" placeholder=\"Enter factor value\">\r\n            </div>\r\n            <div class=\"form-group-seismic\">\r\n                <label for=\"rmfTrans\">Transverse Side (Y-axis)</label>\r\n                <input class=\"seismic_vals\" type=\"number\" id=\"rmfTrans\" placeholder=\"Enter factor value\">\r\n            </div>\r\n            </blockquote>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"spectralAccelParam\">Spectral acceleration parameters</label>\r\n            <blockquote>\r\n            <div class=\"form-group-seismic\">\r\n                <label for=\"sapSds\">Sds</label>\r\n                <input class=\"seismic_vals\" type=\"number\" id=\"sapSds\" placeholder=\"Enter factor value\">\r\n            </div>\r\n            <div class=\"form-group-seismic\">\r\n                <label for=\"sapSd1\">Sd1</label>\r\n                <input class=\"seismic_vals\" type=\"number\" id=\"sapSd1\" placeholder=\"Enter factor value\">\r\n            </div>\r\n            </blockquote>\r\n        </div>\r\n        \r\n\r\n        <button onclick=\"saveLoadData_asJson('HSD_SL.json',get_SeismicInfo_json())\">Save Data</button>\r\n        <div id=\"seismic-result\"></div>\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7933181f6d844810904e2f4de7016562",
      "Inputs": [
        {
          "Id": "073f87bcd78442bc8dda73530d25d57c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "82ea009a129e4fdc9c0d527afbe36166",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n\r\n\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "55d4da44d59747728c3e81d0084bd430",
      "Inputs": [
        {
          "Id": "5d144454ca2f4ab8869b2480b70103f6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a13fba588c2b44d9af30275188e98f88",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n\r\n<div id=\"materialPage\">\r\n\r\n    <div class=\"container\" id=\"material-Pane\">\r\n        <h2>[추가예정] 강종 선택기 & RC 강도 입력기</h2>\r\n\r\n\r\n        <button>Save Data</button>\r\n        <div id=\"mat-result\"></div>\r\n    </div>\r\n\r\n</div>\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fbca63399bbe4683b9e91079418dfba8",
      "Inputs": [
        {
          "Id": "26104295724546cb8df946b59b0bca7d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "319c2388664242cdb7adc51bbff35a85",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "a45a2489a2854fd2a42fe555cc3ee2cb",
      "Inputs": [
        {
          "Id": "697ccf8f1ec84e0abf9ca4e989bba5bb",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f054f73462924867883312479fa27389",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "069328be58ba4cfa8cff1b8174f071bc",
      "Inputs": [
        {
          "Id": "0792cc92f0fe4712b028a89c514f4a01",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ccd01688b5db4fa1a625631534d04eda",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "4e3206674a054bd493a86a047713f78a",
      "Inputs": [
        {
          "Id": "b29311cc13124207bd75f40c4686897d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6f04ba8c192b4769998aa76446734d68",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"element_name\"];",
      "Id": "ef2dd3b5e2414ad8a0036a7c058ebc04",
      "Inputs": [
        {
          "Id": "31f25e6a5c1d4b72a3c72e442de26311",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "03a658596b5046f5bf038889ba78eab9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"element_name\"];",
      "Id": "26a867b589784f87936bf616bd524613",
      "Inputs": [
        {
          "Id": "f894b459a84b4df78686b5086037fc9f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d847387ed46247e68222259aab688f47",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "85e9c3560ba84b9f8675acf4b315050d",
      "Inputs": [
        {
          "Id": "fc51fc3f03654cf782f10b2e796c708e",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "10cc323609d6405ca768ac9feca8f61c",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d3e681d5f24c43adaa7211db4dc11f7e",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6145e9a30be64ce28c6e8058341664a4",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"frameNo\"];",
      "Id": "8eae6cebb549424ba06d76dff9983fa5",
      "Inputs": [
        {
          "Id": "0adc5dfebf224feb9c9724f9482b072a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4dd39a9d1b94457c940f34cc892a401d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "a691dd34b6104ab1b2df5811c312d8ae",
      "Inputs": [
        {
          "Id": "ad9e48c3c3a146de893ff2c87c0ff4e1",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94f936235d61404c9ddff38bb68dfaec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "93e031a10903451da1a02754815d8de1",
      "Inputs": [
        {
          "Id": "92a7587465ee46808f82264b84ab297e",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b05103fb83d04578b708fa1699ad92c4",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "330d6326be1c4c36baa0061b555567cc",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e861010426ba47099d6c40d798ee80c8",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"role\"]==\"Girders\";",
      "Id": "b668ef0df73b4916835e10874a0691f4",
      "Inputs": [
        {
          "Id": "d21af779886e4737b96c96e67efbe381",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7471b6c07644480baae8ed8d0fdfc26e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[4];",
      "Id": "4437e757224c40d2a6081ab7014d7669",
      "Inputs": [
        {
          "Id": "d0618090f6194c19a679b606c24693b9",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f77f72ee9fc42ff86c4b8dded9057aa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[5];",
      "Id": "22c8849972a54b359b1a98d94d66c0fa",
      "Inputs": [
        {
          "Id": "defd7cc4585c4fde9aef7f50577b5e2d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "53faf92710c7404d9ccd1aee75e3636a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[5];",
      "Id": "5bf036b6676a46c982bbbc4bf7a0c66d",
      "Inputs": [
        {
          "Id": "2cb1fc7896fd49808e5f183a3b13ae75",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b45d899af3174917b608ef99c64e1f3e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[4];",
      "Id": "bfd1965cad5c4988b3ed716b973318f5",
      "Inputs": [
        {
          "Id": "5683b7c333174daba7a26f179bce7d4b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d60d2333921b4c6caf3f05289bcf9bcd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"load\"][\"DL\"];",
      "Id": "d3cea1ffdfa740e48f3df9b235400c32",
      "Inputs": [
        {
          "Id": "904a15b7f8ce4390bf2b10b42b3bc8d6",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a755b7cf58ba4802a92221579bad026e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"load\"][\"DL\"];",
      "Id": "ddaf55f66107407790f017113181a039",
      "Inputs": [
        {
          "Id": "be946254ff3b4377b94feeadd2993d63",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b582d5fa75354d908aa89151f356851b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"lvBelong\"];",
      "Id": "0a71d2376e924881ab45824c329527b3",
      "Inputs": [
        {
          "Id": "0f77a95dba534c90ba65afdc25531f95",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb1ed3834ebe4f03b34a5d9fc11542b0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"lvBelong\"];",
      "Id": "057859739ffe4fed995a397af706e0b9",
      "Inputs": [
        {
          "Id": "9a07e0b4efd648abbc6282543fb0af0a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "739528790b164618bfcc1ed71f84e4d5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"unbr_segment\"];",
      "Id": "bcc59f662d42417390408b1fcbe1d6f1",
      "Inputs": [
        {
          "Id": "07f46b5474234c4ca53a36cf9d2f3017",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a13f1362503c47928a0309b49dd8fd2f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"role\"];",
      "Id": "f986f8bb0d2e46f993c6e41e3a9306e9",
      "Inputs": [
        {
          "Id": "e3193378bef74f9090dade5afeaafe94",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7647d19f66a24cce9d8dd3915a51a18e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "60d9f5bf3cc54476b7ce6fcaef87c424",
      "Inputs": [
        {
          "Id": "e89835f678e94133a80984998510b52d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db56eee90e9d4b78b2ab6a3ad46ce771",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\nfrom DSCore import List\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallBeamsDicts = IN[0]\r\nallGirdersDicts = IN[1]\r\nallGirdersLocations = list(map(lambda x: x[\"location_line\"], allGirdersDicts))\r\n# Place your code below this line\r\ndef find_attachedGirderDict(elemDict, allGirdersDicts):\r\n    elemLine = elemDict[\"location_line\"]\r\n    res = go(\r\n        allGirdersDicts,\r\n        \r\n        filter(lambda x: elemLine.DoesIntersect(x[\"location_line\"])),\r\n#        map(lambda x: x.Length),\r\n        list,\r\n        lambda x: x[0], \r\n    )\r\n    return res\r\n    \r\ndef find_attachedGirderLength(elemDict, allGirdersLocations):\r\n    elemLine = elemDict[\"location_line\"]\r\n    res = go(\r\n        allGirdersLocations,\r\n        filter(lambda x: elemLine.DoesIntersect(x)),\r\n        map(lambda x: x.Length),\r\n        list,\r\n        lambda x: x[0], \r\n    )\r\n    return res\r\n    \r\ndef add_attachedGirderInfo_toDict(elemDict, allGirdersLocations):\r\n    #if elemDict[\"role\"] == \"beam\"\r\n    attachedGirderLength = find_attachedGirderDict(elemDict, allGirdersDicts)[\"length\"]\r\n    attchedGirder_Unbr_segment = find_attachedGirderDict(elemDict, allGirdersDicts)[\"unbr_segment\"]\r\n    elemDict[\"attch_girderLength\"] = attachedGirderLength\r\n    elemDict[\"attch_girder_unbr_segment\"] = attchedGirder_Unbr_segment\r\n    return elemDict\r\n# Assign your output to the OUT variable.\r\nOUT = list(map(lambda x: add_attachedGirderInfo_toDict(x, allGirdersLocations), allBeamsDicts))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5cd85d0ecf13400286a2c3e843a4e72d",
      "Inputs": [
        {
          "Id": "2cd7aa7583574e1ab4247700fc4a0678",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "be421dc00bbf46aba2665140ff0c47a0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8bfaedec182340d1967f325c6dd5ae6c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "{\n\"01\": \"slab\",\n\"02\": \"slab\",\n\"03\": \"non-slab\",\n\"04\": \"non-slab\"\n};",
      "Id": "30e985b8b1f442ec925a0bfd6090ba7c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "46259814aea94fd188e4cf2fcadcf103",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i!=0;",
      "Id": "49e8aec4318b4471ad5dc74af5fca754",
      "Inputs": [
        {
          "Id": "1188136149c84843b81e8e00e48d41f8",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1886f880d7914b46955d99b2409247e9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.CountTrue@var[]..[]",
      "Id": "30ccdf1ddbc143709b7c5749c0e34dd8",
      "Inputs": [
        {
          "Id": "a994a4158e6c4a6a824cc1ce28c56f1d",
          "Name": "list",
          "Description": "The list find the true boolean values.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4edd58ad3bb644c5a2637e8607754175",
          "Name": "int",
          "Description": "The number of true boolean values in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of true boolean values in the given list.\n\nList.CountTrue (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"lvBelong\"];",
      "Id": "48e78d57bd764e8eacf27579bb473060",
      "Inputs": [
        {
          "Id": "7bbeb7c98078412b957650d0230ddf07",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4a38be4a8024f2a9c06bfc3bdb05c8e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "7c7a67ca3d8b4f9e91093a7048b12aba",
      "Inputs": [
        {
          "Id": "6a37bb2bd7f74909b1f6cfa38e1a9046",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2b9ff89c532462c97054283d0ff2dae",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1990ad4bad794ffa9728e9032df2ff41",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "91ea99d2d1ca400aa2812f8c0b76383f",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "048580436c5d4902bd88b1cd652c6a9b",
      "Inputs": [
        {
          "Id": "a0cb7831455341609cfede5780a29bef",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "486c7755b77a4612ad1f332286882612",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "05f91b0e8f8d45049ae491408971d0b6",
      "Inputs": [
        {
          "Id": "7c8cc882605c447781fd7a77ae4080e8",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2f60054033f543a98d950969066b6f32",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"HSD_DL\"][\"isSlab\"];",
      "Id": "7193ea5fb41f4ca1abb836039f7bc736",
      "Inputs": [
        {
          "Id": "18f6ad6061674684b54e65847ef83367",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb4c5a7ae775417793835f7a6062bb73",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "ba57bc3e18884edeb47a5d03ba356104",
      "Inputs": [
        {
          "Id": "e0521adc0cbd430bbff53c0ad8b25688",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5b48e7037556458ab66a169a19e95abb",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ac751397e98488bbdee0a343a4da789",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "2f669ccbadd44e239949ea8901958b83",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6b50033e54174eeebd9861efd66539ec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlvsDict = IN[0]\r\njson_input = IN[1]\r\n# Place your code below this line\r\ndef dict_forSlabBln(json_input):\r\n    cnt = len(json_input)\r\n    storyStrs = list(map(lambda x: \"0\"+ str(x), range(0,cnt)))\r\n    res = dict(zip(storyStrs, json_input))\r\n    return res\r\n\r\ndef find_noMatch_LvName(lvsDict, jsonDict):\r\n    dictKeys = lvsDict.keys()\r\n    jsonKeys = jsonDict.keys()\r\n    lastValuefromjsonDict = list(jsonDict.values())[-1]\r\n    noMatchLv = list(set(dictKeys).difference(set(jsonKeys)))\r\n    for i in noMatchLv:\r\n        jsonDict[i] = lastValuefromjsonDict\r\n    return jsonDict\r\n\r\njsonDict = dict_forSlabBln(json_input)\r\n# Assign your output to the OUT variable.\r\nOUT = find_noMatch_LvName(lvsDict, jsonDict)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1b897a9d99b4463ebc8254c371d9fce0",
      "Inputs": [
        {
          "Id": "5fbd4639ad714fc682ee9553dc67cb11",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "77a402a9242b4de886c3e11ba39f9c5b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3f4aef40bca94b4f8a7a741ecf0d0c92",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LevelsDict;",
      "Id": "d87abb3e919c43f9928af1c5ae62ee72",
      "Inputs": [
        {
          "Id": "d2b8eaca535a4ee7957d8cd23bf8889b",
          "Name": "LevelsDict",
          "Description": "LevelsDict",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "23821c4078354485a278e53e83cb5fbe",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "jsonLvDict;",
      "Id": "dfbe734bdd974a888c474c6989052d52",
      "Inputs": [
        {
          "Id": "1efa94d38f6f4ad0afe51d0de2401f57",
          "Name": "jsonLvDict",
          "Description": "jsonLvDict",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "625ee7aa294b4b6eafe9561dd1b048d6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "9080d86677934dd7870dc014dbb3b9a0",
      "Inputs": [
        {
          "Id": "beabdb6872a3404b83c5d611012d31af",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "feabd0480f444dafa94462b48d41e94b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "dfe209aea9104aec9ade9eabf532b62f",
      "Inputs": [
        {
          "Id": "d7552cd9e1b64f9681e609a7a795358d",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9276cdb62e234adc80bf432da81f58e7",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a48f2d52b77443b7bed1871f2f878d0a",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c7f9b9bdfa842dda7c849843aa41f6e",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"role\"]==\"Girders\";",
      "Id": "82c1adbaeac84ee4bbd96e2e1d30954b",
      "Inputs": [
        {
          "Id": "25c192dca64246dbbb3d97f1efc50099",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9da422418bb4458d8f1a11b97141b8f2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "436ee12540ef4c4c82c2bcbbde3773c1",
      "Inputs": [
        {
          "Id": "36085a96c29f49bba10a62ca3cb568d8",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36268846570a4daeb7f7003a3919bb87",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"load\"][\"DL\"];",
      "Id": "e7567ab324b24a22a7a8fe90fd271298",
      "Inputs": [
        {
          "Id": "e2a524698fa64052904c2fb8dc8601e5",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0302958c6504b528776159f95d27c30",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"location_line\"];",
      "Id": "674059d006f24411818c06084dfc4f85",
      "Inputs": [
        {
          "Id": "47803a50c87d4749849b9c4a4cdf6024",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "edbc130c96ce43b095bedffd97527cf5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "0b60930c5f434bf590f23ff7e6c95d22",
      "Inputs": [
        {
          "Id": "991890b19e7e4ba0bee56edac22f3e42",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e4ae19ca04443b097a34b4b8b70c2aa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"frameNo\"];",
      "Id": "8d9be76aac1b4175a6236438f33ad9e8",
      "Inputs": [
        {
          "Id": "9641f7f0db6d4d99b0d49db0f04236c8",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8122e80e069e40f9b239f5f51dbc33b6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "8b93eb3623914589906a7f57d62cbf41",
      "Inputs": [
        {
          "Id": "23d1e1d8cdfc4b36884602f98b88d0bb",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8e08453aa034466996352bfd1fb6c4a3",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b7f7ca4c62942d8ac9877a285c89679",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a5467217b2ce460c8229e8b96b116406",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"asgned_srfs\"];",
      "Id": "2654cc78151a4a26b434070fee6c30ff",
      "Inputs": [
        {
          "Id": "0b8c5909a5654980be8e80ae2b8b30f4",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7f43fc406d14171a04692b5f629344e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\nfrom DSCore import List\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallElemsDicts = IN[0]\r\n# Place your code below this line\r\ndef add_sectionPropsToDict(elemDict):\r\n    elem = elemDict[\"elem\"]\r\n    sectionID = elemDict[\"sectionProp\"][\"name\"]#.split('_')[-1]\r\n    Area = elemDict[\"sectionProp\"][\"A\"]\r\n    SW = Area*77.22/10**6 * (10**2)\r\n    \r\n    tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Web Thickness\") * 10\r\n    tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Flange Thickness\") * 10\r\n    D = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Height\") * 10\r\n    W = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Width\") * 10\r\n    radi = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Web Fillet\") * 10\r\n        \r\n    Iyy = \\\r\n        (2*(W*tf**3/12+W*tf*((D-2*tf)/2+tf/2)**2)+tw*(D-2*tf)**3/12)\r\n    Izz = \\\r\n        2*(tf*(W)**3/12)+(D-2*tf)*(tw)**3/12\r\n    Syy = Iyy/(D/2)\r\n    Szz = Izz/(W/2)\r\n    Zyy = W*tf*(D-tf)+0.25*(D-2*tf)**2*tw\r\n    Zzz = 0.5*(W)**2*tf+0.25*(D-2*tf)*(tw)**2\r\n    \r\n    J = (2*W*tf**3+(D-tf)*tw**3)/3\r\n    \r\n    Cwp = (D-tf)**2*W**3*tf/24\r\n    \r\n    ry = (Iyy/Area)**0.5\r\n    rz = (Izz/Area)**0.5\r\n    rts = ((Izz*Cwp)**0.5/Syy)**0.5\r\n    \r\n    secDict = {\r\n        \"sectionID\": sectionID,\r\n        \"sectionRotating\": elem.GetParameterValueByName(\"Cross-Section Rotation\"),\r\n        \"Area\": Area,\r\n        \"SW\": SW,\r\n        \"tw\": tw,\r\n        \"tf\": tf,\r\n        \"D\": D,\r\n        \"W\": W,\r\n        \"radi\": radi,\r\n        \"Iyy\": Iyy,\r\n        \"Izz\": Izz,\r\n        \"Syy\": Syy,\r\n        \"Szz\": Szz,\r\n        \"Zyy\": Zyy,\r\n        \"Zzz\": Zzz,\r\n        \"J\": J,\r\n        \"Cwp\": Cwp,\r\n        \"ry\": ry,\r\n        \"rz\": rz,\r\n        \"rts\": rts,\r\n    }\r\n    \r\n    elemDict[\"secDict\"] = secDict\r\n    return elemDict\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = add_sectionPropsToDict(allElemsDicts[0])\r\nOUT = map(add_sectionPropsToDict, allElemsDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f246c0b1390e454fabed22f60896d46d",
      "Inputs": [
        {
          "Id": "0758756035ac4bdf83513f1ef54210f2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2867c3e9a4ac4e0291e28db7a18a0153",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "bfa3de554cf24700ac59926331ef8f8d",
      "Inputs": [
        {
          "Id": "7ea21d66cde34693b1a70ff512499ff0",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "440c590bf9e34c16a406fe4b60a67db9",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\nfrom DSCore import List\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n#allBeamsLocations = IN[0]\r\nallBeamsDicts = IN[0]\r\nallBeamsLocations = list(map(lambda x: x[\"location_line\"], allBeamsDicts))\r\nallGirdersDicts = IN[1]\r\nlv_slab_info = IN[2]\r\n# Place your code below this line\r\ndef extendBeamLocations(loc_crv, gap):\r\n    extLine = loc_crv.ExtendStart(gap).ExtendEnd(gap)\r\n    upSrf = extLine.Extrude(Vector.ByCoordinates(0,0,1), 100)\r\n    blSrf = extLine.Extrude(Vector.ByCoordinates(0,0,-1), 100)\r\n    res = PolySurface.ByJoinedSurfaces([upSrf, blSrf])\r\n    return res\r\n\r\ndef find_segmentCnt(elemDict, allBeamsLocations):\r\n    elemLine = elemDict[\"location_line\"]\r\n    res = []\r\n    for beam in allBeamsLocations:\r\n        intsct = elemLine.Intersect(beam)\r\n        res.append( intsct )\r\n    flattenRes = list(chain(*res))\r\n    def find_coordiStr(pt):\r\n        #res = \",\".join([str(pt.X), str(pt.Y), str(pt.Z)])\r\n        res = [pt.X, pt.Y, pt.Z]\r\n        return res\r\n        \r\n    def find_uniqCoordiStrInPts(pts):\r\n        allStrs = list(map(find_coordiStr, pts))\r\n        return list(set(allStrs))\r\n    \r\n    segmentCnt = len( List.UniqueItems(flattenRes) ) + 1\r\n    \r\n    return segmentCnt\r\n\r\nextended_allBeamsLocation = list(map(lambda x: extendBeamLocations(x,300), allBeamsLocations))\r\n\r\ndef add_divSegment_toDict(elemDict, allBeamsLocations, lv_slab_info):\r\n    segmentCnt = find_segmentCnt(elemDict, allBeamsLocations)\r\n    lvBelong = elemDict[\"lvBelong\"]\r\n    if lv_slab_info[lvBelong] == \"on\": # slab인 경우\r\n        #elemDict[\"unbr_segment\"] = 0\r\n        elemDict[\"unbr_segment\"] = 1\r\n    elif lv_slab_info[lvBelong] == \"off\": # slab 아닌 경우\r\n        elemDict[\"unbr_segment\"] = segmentCnt\r\n    return elemDict\r\n    \r\n# Assign your output to the OUT variable.\r\nOUT = list(map(lambda x: add_divSegment_toDict(x, extended_allBeamsLocation, lv_slab_info), allGirdersDicts))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "3a532b60e40f4663a9a44e11ab75dac5",
      "Inputs": [
        {
          "Id": "cec5951584ec46089d0d3512893603bb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "42bbd38de17842b98a180bdde6d402cc",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a41ec9816a534df6bbad68036d0814c4",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08c2edd2dbe945fa80c663677fa1b0a1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"role\"]==\"Girders\";",
      "Id": "d22b5c286d964befbfa198e55c9ba181",
      "Inputs": [
        {
          "Id": "c9c45a7294684e7f9d7d15be578b45b5",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b43d5a5ba0c042b4bcb86d92c5a73e3d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "8005e085d18149aea924b43e5c1b6d7a",
      "Inputs": [
        {
          "Id": "5c4c90ff88704d3c962516d1a9f0b8af",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ca82f0bfd5e94f75ac39829887b5c086",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f742fe6c5dd4a4c8687cc37806458a4",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "3dd601f03be84e929ec8d01f61986d53",
      "Inputs": [
        {
          "Id": "f314e8a2c44247479669284b583ef653",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c97fecfbb0e4eafb0fc67b069e2151a",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3f870cf773f0424daad3731116bf3736",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "617ed7412023456783c43dcba19ef423",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "{\n\"Fy\": Fy,\n\"E\": E,\n\"u\": u,\n\"G\": E/(2*(1+u))\n};",
      "Id": "62643f67de184bbbbd6c34e1e991f750",
      "Inputs": [
        {
          "Id": "70091f040c4148cb8f0961ba54b972d7",
          "Name": "Fy",
          "Description": "Fy",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86576d0713ad49499284c5192cffe814",
          "Name": "E",
          "Description": "E",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "43b015ce3c0446d28b277b79fd621002",
          "Name": "u",
          "Description": "u",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cc63385d62c24d15b11734f3f4928b97",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2.65000e-01*1000;",
      "Id": "c9bfb6e870a347dda9752ade8a9aac46",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7ca2d3126c9e42bd8f7141da4e960db0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.3;",
      "Id": "c97eae4cc07c41e188eb28ba91a657d6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9f937532ceec41108cd2acedd229ff1a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\nfrom DSCore import List\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nallElemsDicts = IN[0]\r\n# Place your code below this line\r\ndef add_sectionPropsToDict(elemDict):\r\n    elem = elemDict[\"elem\"]\r\n    sectionID = elemDict[\"sectionProp\"][\"name\"]#.split('_')[-1]\r\n    Area = elemDict[\"sectionProp\"][\"A\"]\r\n    SW = Area*77.22/10**6 * (10**2)\r\n    \r\n    tw = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Web Thickness\") * 10\r\n    tf = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Flange Thickness\") * 10\r\n    D = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Height\") * 10\r\n    W = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Width\") * 10\r\n    radi = elem.GetParameterValueByName(\"Family and Type\")\\\r\n        .GetParameterValueByName(\"Web Fillet\") * 10\r\n        \r\n    Iyy = \\\r\n        (2*(W*tf**3/12+W*tf*((D-2*tf)/2+tf/2)**2)+tw*(D-2*tf)**3/12)\r\n    Izz = \\\r\n        2*(tf*(W)**3/12)+(D-2*tf)*(tw)**3/12\r\n    Syy = Iyy/(D/2)\r\n    Szz = Izz/(W/2)\r\n    Zyy = W*tf*(D-tf)+0.25*(D-2*tf)**2*tw\r\n    Zzz = 0.5*(W)**2*tf+0.25*(D-2*tf)*(tw)**2\r\n    \r\n    J = (2*W*tf**3+(D-tf)*tw**3)/3\r\n    \r\n    Cwp = (D-tf)**2*W**3*tf/24\r\n    \r\n    ry = (Iyy/Area)**0.5\r\n    rz = (Izz/Area)**0.5\r\n    rts = ((Izz*Cwp)**0.5/Syy)**0.5\r\n    \r\n    secDict = {\r\n        \"sectionID\": sectionID,\r\n        \"sectionRotating\": elem.GetParameterValueByName(\"Cross-Section Rotation\"),\r\n        \"Area\": Area,\r\n        \"SW\": SW,\r\n        \"tw\": tw,\r\n        \"tf\": tf,\r\n        \"D\": D,\r\n        \"W\": W,\r\n        \"radi\": radi,\r\n        \"Iyy\": Iyy,\r\n        \"Izz\": Izz,\r\n        \"Syy\": Syy,\r\n        \"Szz\": Szz,\r\n        \"Zyy\": Zyy,\r\n        \"Zzz\": Zzz,\r\n        \"J\": J,\r\n        \"Cwp\": Cwp,\r\n        \"ry\": ry,\r\n        \"rz\": rz,\r\n        \"rts\": rts,\r\n    }\r\n    \r\n    elemDict[\"secDict\"] = secDict\r\n    return elemDict\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = add_sectionPropsToDict(allElemsDicts[0])\r\nOUT = map(add_sectionPropsToDict, allElemsDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "4ee5593128894da3856130cb041551ed",
      "Inputs": [
        {
          "Id": "e6294a82e04a4333a499c9592c00e669",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed54f5e66b484ddda66e0d4a7f84c334",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\nfrom DSCore import List\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n#allBeamsLocations = IN[0]\r\nallColsDicts = IN[0]\r\n#allBeamsLocations = list(map(lambda x: x[\"location_line\"], allBeamsDicts))\r\n#allGirdersDicts = IN[1]\r\n#lv_slab_info = IN[2]\r\n# Place your code below this line\r\ndef extendBeamLocations(loc_crv, gap):\r\n    extLine = loc_crv.ExtendStart(gap).ExtendEnd(gap)\r\n    upSrf = extLine.Extrude(Vector.ByCoordinates(0,0,1), 100)\r\n    blSrf = extLine.Extrude(Vector.ByCoordinates(0,0,-1), 100)\r\n    res = PolySurface.ByJoinedSurfaces([upSrf, blSrf])\r\n    return res\r\n\r\ndef find_segmentCnt(elemDict, allBeamsLocations):\r\n    elemLine = elemDict[\"location_line\"]\r\n    res = []\r\n    for beam in allBeamsLocations:\r\n        intsct = elemLine.Intersect(beam)\r\n        res.append( intsct )\r\n    flattenRes = list(chain(*res))\r\n    def find_coordiStr(pt):\r\n        #res = \",\".join([str(pt.X), str(pt.Y), str(pt.Z)])\r\n        res = [pt.X, pt.Y, pt.Z]\r\n        return res\r\n        \r\n    def find_uniqCoordiStrInPts(pts):\r\n        allStrs = list(map(find_coordiStr, pts))\r\n        return list(set(allStrs))\r\n    \r\n    segmentCnt = len( List.UniqueItems(flattenRes) ) + 1\r\n    \r\n    return segmentCnt\r\n\r\n#extended_allBeamsLocation = list(map(lambda x: extendBeamLocations(x,300), allBeamsLocations))\r\n\r\ndef add_divSegment_toDict(elemDict):\r\n#    segmentCnt = find_segmentCnt(elemDict, allBeamsLocations)\r\n#    lvBelong = elemDict[\"lvBelong\"]\r\n#    if lv_slab_info[lvBelong] == \"on\": # slab인 경우\r\n#        #elemDict[\"unbr_segment\"] = 0\r\n#        elemDict[\"unbr_segment\"] = 1\r\n#    elif lv_slab_info[lvBelong] == \"off\": # slab 아닌 경우\r\n#        elemDict[\"unbr_segment\"] = segmentCnt\r\n    elemDict[\"unbr_segment\"] = 1\r\n    return elemDict\r\n    \r\n# Assign your output to the OUT variable.\r\nOUT = list(map(lambda x: add_divSegment_toDict(x), allColsDicts))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a5b74dec8e964fe8aaafcd783c6738dc",
      "Inputs": [
        {
          "Id": "f90a7d9853f5467c8c8a62777a68747e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9b89492a2a642c69e2ef8fdb391bea2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3b8a075f0d66479495ba4cb662c8fe69",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a3cde42477e84f27a2736dad26a265e5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "folderPath;",
      "Id": "1a4998808d6741a9a61153c7ea7967bd",
      "Inputs": [
        {
          "Id": "7d75e8a664d647edb7054fc7cd966cee",
          "Name": "folderPath",
          "Description": "folderPath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b10288d977f84266b832128414743028",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"HSD_frame_module_IO\";",
      "Id": "cbea69d3757949b696720746af796a9d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca301787bd3848a6bf892d15149bdc1d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport os\r\nimport shutil\r\nimport json\r\n#import DSCore\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nexecutionMode = IN[0]\r\ntmpPath = IN[1]\r\nsubPath = IN[2]\r\ntgtPath = tmpPath + subPath\r\n\r\n# Place your code below this line\r\ndef find_downloadPath():\r\n    download = os.path.join(os.path.expanduser('~'), 'downloads')\r\n    return download\r\n\r\ndef get_allSrcFromTemp(tmpPath):\r\n    fileNames = os.listdir(tmpPath)\r\n    res = list(map(lambda x: tmpPath + '\\\\' + x, fileNames))\r\n    return res\r\n\r\ndef find_allHSD(fileNames, tgtStr):\r\n    allHSDs = go(\r\n        fileNames,\r\n        filter(lambda x: tgtStr in x),\r\n        list,\r\n    )\r\n    return allHSDs\r\n    \r\ndef select_lastHSD(files):\r\n\r\n    allCreatedTimes = list(map(lambda x: os.path.getctime(x), files))\r\n    if len(files) == 1:\r\n        res = files[0]\r\n    elif len(files) > 1:\r\n        res = go(\r\n            zip(files,allCreatedTimes),list,\r\n            lambda x: sorted(x, key=lambda x: x[1]),\r\n            lambda x: x[-1][0],\r\n        )\r\n    return res\r\n    \r\ndef readFile(path):\r\n    #res = []\r\n    with open(path, 'r', encoding='utf-8') as f:\r\n        res = f.readlines()\r\n    return res\r\n    \r\n\r\n\r\ndef getData_fromLatestFile(tgtPath, tgtStr):\r\n    fileNames = get_allSrcFromTemp(tgtPath)\r\n    all_data = find_allHSD(fileNames, tgtStr)\r\n    latest_data = readFile(select_lastHSD(all_data))[0]\r\n    return latest_data\r\n\r\n\r\n\r\nif executionMode == \"부재해석모드\":\r\n#    res = [\r\n#        DSCore.Data.ParseJSON(getData_fromLatestFile(tgtPath, \"HSD_frame_result\")),\r\n#        DSCore.Data.ParseJSON(getData_fromLatestFile(tgtPath, \"HSD_element_force\")),\r\n#        ]\r\n    res = [\r\n        json.loads(getData_fromLatestFile(tgtPath, \"HSD_frame_result\")),\r\n        json.loads(getData_fromLatestFile(tgtPath, \"HSD_element_force\")),\r\n        ]\r\nelif executionMode != \"부재해석모드\":\r\n    res = 0\r\n# Assign your output to the OUT variable.\r\nOUT = res#latest_FrameData, latest_ElemForce",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "e9265f5863fe409490fd43acd05d21c9",
      "Inputs": [
        {
          "Id": "69c3771b755a43f2b87cbdbbf49ff53f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bf4f3be218e047f899a7fede99d65c0a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2909f837cb7d496ca7ac1b62041ef2b3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f2304b6bcb39470cafe943d549a5486a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "load_dist_result;",
      "Id": "80e639c7b3234db7b718f6c712f48e12",
      "Inputs": [
        {
          "Id": "f81e6c99dc4f47eda8f6add34c813edd",
          "Name": "load_dist_result",
          "Description": "load_dist_result",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7fac2447ca234c6fad5e16b27b99c3fa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport os\r\nimport shutil\r\nimport json\r\nimport math\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsrcsFrom_frameModule = IN[0]\r\nif srcsFrom_frameModule != 0:\r\n    frameData = srcsFrom_frameModule[0]\r\n    elemForceData = srcsFrom_frameModule[1]\r\nelse:\r\n    pass\r\nloadDistData = IN[1]\r\nglobalRefDict = IN[2]\r\n\r\n\r\n# Place your code below this line\r\ndef makeUnionDict_forAllFrame(loadDistData, frameData, elemForceData):\r\n    for_allFrame = loadDistData\r\n    # testElem = testFrame[0]\r\n    def makeUnionDictPerElem_byLoad(elemDict, load):\r\n        elemName = elemDict[\"element_name\"]\r\n        \r\n        newFy = elemDict[\"materialPropDict\"][\"Fy\"]#/1000\r\n        newE = elemDict[\"materialPropDict\"][\"E\"]#/1000\r\n        newG = elemDict[\"materialPropDict\"][\"G\"]#/1000\r\n        elemDict[\"materialPropDict\"][\"Fy\"] = newFy\r\n        elemDict[\"materialPropDict\"][\"E\"] = newE\r\n        elemDict[\"materialPropDict\"][\"G\"] = newG\r\n        \r\n        tgtFrameNo = \"frame\" + str(int(elemDict[\"frameNo\"])+1)\r\n        tgtFrameData = frameData[tgtFrameNo][load]\r\n        tgtEfData = elemForceData[tgtFrameNo][load]\r\n        \r\n        sttNodeName, endNodeName = elemDict[\"startNode\"][\"name\"], elemDict[\"endNode\"][\"name\"]\r\n        sttNodeResult = tgtFrameData[\"node\"][sttNodeName]\r\n        endNodeResult = tgtFrameData[\"node\"][endNodeName]\r\n        elemDict[\"sttNodeResult\"] = sttNodeResult\r\n        elemDict[\"endNodeResult\"] = endNodeResult\r\n        \r\n        elemForcesDict = tgtEfData[elemName]\r\n        maxX = max(elemForcesDict[\"x\"])\r\n        maxP = max(elemForcesDict[\"P\"])\r\n        maxV = max(elemForcesDict[\"V\"])\r\n        maxMz = max(elemForcesDict[\"Mz\"])\r\n        \r\n        loadDict = {\r\n            load: {\r\n                \"P_list\": elemForcesDict[\"P\"],\r\n                \"Mz_list\": elemForcesDict[\"Mz\"],\r\n                \"V_list\": elemForcesDict[\"V\"],\r\n                \"Pu\": maxP,\r\n                \"Muy\": maxMz,\r\n                \"Muz\": 0,\r\n                \"Vuy\": 0,\r\n                \"Vuz\": maxV,\r\n            }\r\n        }\r\n        \r\n        if \"memberForce\" in elemDict.keys():\r\n            elemDict[\"memberForce\"] = dict(elemDict[\"memberForce\"], **loadDict)\r\n        else:\r\n            elemDict[\"memberForce\"] = loadDict\r\n        \r\n        res = elemDict\r\n        return res\r\n    \r\n    def makeUnionDictPerFrame_byLoad(elemDicts_perFrame, load):\r\n        list(map(lambda x: makeUnionDictPerElem_byLoad(x,load), elemDicts_perFrame))\r\n        return elemDicts_perFrame\r\n\r\n    list(map(lambda elemDicts_perFrame: makeUnionDictPerFrame_byLoad(elemDicts_perFrame, \"DL\"), for_allFrame))\r\n    res = list(map(lambda elemDicts_perFrame: makeUnionDictPerFrame_byLoad(elemDicts_perFrame, \"LL\"), for_allFrame))\r\n    \r\n    return for_allFrame\r\n    \r\ndef Calculate_Slenderness_Ratio (globalRefDict, elemDict, n, Ly_):\r\n    secDict = elemDict[\"secDict\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Lz_ = Ly_/n\r\n    ry = secDict[\"ry\"]\r\n    rz = secDict[\"rz\"]\r\n    SR = max(K*Ly_/ry, K*Lz_/rz)\r\n\r\n    return SR\r\n\r\ndef Calculate_Tensile_Strength (globalRefDict, elemDict) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Ag = secDict[\"Area\"]\r\n    Pn = Fy*Ag\r\n\r\n    ΦPn = PhiP * Pn\r\n\r\n    return ΦPn\r\n\r\ndef Calculate_Flexural_Buckling(globalRefDict, elemDict,n,Ly_) : \r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Lz_ = Ly_/n\r\n    Ag = secDict[\"Area\"]\r\n    Iyy, Izz = secDict[\"Iyy\"], secDict[\"Izz\"]\r\n    ry, rz = secDict[\"ry\"], secDict[\"rz\"]\r\n    J, Cwp = secDict[\"J\"], secDict[\"Cwp\"]\r\n    D, W = secDict[\"D\"], secDict[\"W\"]\r\n    tw, tf, radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    \r\n    SR = max(K*Ly_/ry, K*Lz_/rz)\r\n    Fe1 = (math.pi**2)*E/(SR**2)\r\n    Fe2 = ((math.pi**2)*E*Cwp/((K*Ly_)**2)+77.2*J)/(Iyy+Izz)\r\n    Fe = Fe1\r\n    # print(Fe1,Fe2)\r\n\r\n    λrf = 0.56*math.sqrt(E/Fy)\r\n    λrw = 1.49*math.sqrt(E/Fy)\r\n    λf = W/(2*tf)\r\n    λw = (D-2*tf-2*radi)/tw\r\n    \r\n    if SR <= 4.71*math.sqrt(E/(Fy)) : \r\n        Fn = 0.658**(Fy/Fe)*Fy\r\n    else : \r\n        Fn = 0.877*Fe\r\n\r\n\r\n    if (λrf > λf) and (λrw > λw) :      # Flexural Buckling of Member without Slender Element\r\n        ΦPn = PhiP*Fn*Ag\r\n\r\n    elif (λrf < λf) and (λrw > λw) :    # Flexural Buckling of Member with Slender Flange\r\n        Fel = (1.49*(λrf/λf))**2*Fy\r\n        if λf <= λrf*math.sqrt(Fy/Fn) : \r\n            Ae = Ag\r\n        else : \r\n            be = (W/2)*(1-0.22*math.sqrt(Fel/Fn))*math.sqrt(Fel/Fn)\r\n            Ae = Ag-((W-2*be)*tf)*2\r\n        \r\n        ΦPn = PhiP*Fn*Ae\r\n\r\n    elif (λrf > λf) and (λrw < λw) :    # Flexural Buckling of Member with Slender Web\r\n        Fel = (1.31*(λrw/λw))**2*Fy\r\n        if λw <= λrw*math.sqrt(Fy/Fn) : \r\n            Ae = Ag\r\n        else : \r\n            be = (D-2*tf-2*radi)*(1-0.18*math.sqrt(Fel/Fn))*math.sqrt(Fel/Fn)\r\n            Ae = Ag-(((D-2*tf-2*radi)-be)*tw)\r\n\r\n        ΦPn = PhiP*Fn*Ae\r\n\r\n    else :                              # Flexural Buckling of Member with Slender Flange & Web\r\n        Felf = (1.49*(λrf/λf))**2*Fy\r\n        Felw = (1.31*(λrw/λw))**2*Fy\r\n        if λf <= λrf*math.sqrt(Fy/Fn) and λw <= λrw*math.sqrt(Fy/Fn) : \r\n            Ae = Ag\r\n        elif λf > λrf*math.sqrt(Fy/Fn) and λw <= λrw*math.sqrt(Fy/Fn) : \r\n            be = (W/2)*(1-0.22*math.sqrt(Felf/Fn))*math.sqrt(Felf/Fn)\r\n            Ae = Ag-((W-2*be)*tf)*2\r\n        elif λf <= λrf*math.sqrt(Fy/Fn) and λw > λrw*math.sqrt(Fy/Fn) : \r\n            be = (D-2*tf-2*radi)*(1-0.18*math.sqrt(Felw/Fn))*math.sqrt(Felw/Fn)\r\n            Ae = Ag-(((D-2*tf-2*radi)-be)*tw)\r\n        else : \r\n            be = (W/2)*(1-0.22*math.sqrt(Felf/Fn))*math.sqrt(Felf/Fn)\r\n            he = (D-2*tf-2*radi)*(1-0.18*math.sqrt(Felw/Fn))*math.sqrt(Felw/Fn)\r\n            Ae = (be*2*tf)*2+(he*tw)\r\n\r\n        ΦPn = PhiP*Fn*Ae\r\n\r\n    return ΦPn\r\n\r\ndef Calculate_Lateral_Torsional_Buckling(globalRefDict, elemDict,n,Ly_) : \r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Syy, Zyy, Izz, rz = secDict[\"Syy\"], secDict[\"Zyy\"], secDict[\"Izz\"], secDict[\"rz\"]\r\n    J, Cwp, D, W = secDict[\"J\"], secDict[\"Cwp\"], secDict[\"D\"], secDict[\"W\"]\r\n    tw, tf, radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    Mp = Fy*Zyy\r\n    Cb = 1.0\r\n\r\n    λw = (D-2*tf-2*radi)/tw\r\n    λpw = 3.76*math.sqrt(E/Fy)\r\n    λrw = 5.70*math.sqrt(E/Fy)\r\n\r\n    if n == 0 :\r\n        Lz_ = 0\r\n    else : \r\n        Lz_ = Ly_/n\r\n\r\n    if λw <= λpw :                                       # Compact Web & Compact/Non-Compact/Slender Flange\r\n        Lb = Lz_\r\n        rts = math.sqrt(math.sqrt(Izz*Cwp)/Syy)\r\n        Lp = 1.76*rz*math.sqrt(E/Fy)\r\n        Lr = 1.95*rts*E/(0.7*Fy)*math.sqrt(J/(Syy*(D-tf))+math.sqrt((J/(Syy*(D-tf)))**2+6.76*(0.7*Fy/E)**2))\r\n        Fcr = Cb*math.pi**2*E/(Lb/rts)**2*math.sqrt(1+0.078*J/(Syy*(D-tf))*(Lb/rts)**2)\r\n\r\n        if Lb <= Lp : \r\n            Mny = Mp\r\n        elif Lp < Lb <= Lr : \r\n            Mny = min(Cb*(Mp-(Mp-0.7*Fy*Syy)*(Lb-Lp)/(Lr-Lp)),Mp)\r\n        elif Lb > Lr : \r\n            Mny = min(Fcr*Syy,Mp)\r\n\r\n    elif λpw < λw <= λrw :                                # Non-Compact Web & Compact/Non-Compact/Slender Flange\r\n        Lb = Lz_\r\n        Izc = (tf*W**3)/12\r\n        Syc = Syy\r\n        Myc = Fy * Syc\r\n        if Izc/Izz > 0.23 : \r\n            if λw <= λpw : \r\n                Rpc = Mp/Myc\r\n                J_ = J\r\n            else : \r\n                Rpc = min((Mp/Myc-(Mp/Myc-1)*(λw-λpw)/(λrw-λpw)),Mp-Myc)\r\n                J_ = J\r\n        else : \r\n            Rpc = 1\r\n            J_ = 0\r\n\r\n        FL = 0.7*Fy\r\n        aw = ((D-2*tf-2*radi)*tw)/(W*tf)\r\n        rt = W/math.sqrt(12*(1+1/6*aw))\r\n        Lp = 1.1*rt*math.sqrt(E/Fy)\r\n        Lr = 1.95*rt*(E/FL)*math.sqrt(J_/(Syy*(D-tf))+math.sqrt((J_/(Syy*(D-tf)))**2+6.76*(0.7*FL/E)**2))\r\n\r\n        Fcr = Cb*math.pi**2*E/(Lb/rt)**2*math.sqrt(1+0.078*J_/(Syy*(D-tf))*(Lb/rt)**2)\r\n\r\n        if Lb <= Lp : \r\n            Mny = Rpc*Myc\r\n        elif Lp < Lb <= Lr : \r\n            Mny = min(Cb*(Rpc*Myc-(Rpc*Myc-0.7*FL*Syy)*(Lb-Lp)/(Lr-Lp)),Rpc*Myc)\r\n        elif Lb > Lr : \r\n            Mny = min(Fcr*Syy,Rpc*Myc)\r\n\r\n    else :                                                 # Slender Web & Compact/Non-Compact/Slender Flange\r\n        Lb = Lz_\r\n        Syc = Syy\r\n        aw = ((D-2*tf-2*radi)*tw)/(W*tf)\r\n        rt = W/math.sqrt(12*(1+1/6*aw))\r\n        Lp = 1.1*rt*math.sqrt(E/Fy)\r\n        Lr = math.pi*rt*math.sqrt(E/(0.7*Fy))\r\n        Rpg = min(1-(aw/(1200+300*aw))*((D-2*tf-2*radi)/tw-5.7*math.sqrt(E/Fy)),1)\r\n\r\n        if Lb <= Lp : \r\n            Mny = Rpg*Fy*Syc\r\n        elif Lp < Lb <= Lr : \r\n            Fcr = Cb*(Fy-(0.3*Fy)*(Lb-Lp)/(Lr-Lp))\r\n            Mny = min(Rpg*Fcr*Syc,Fy)\r\n        elif Lb > Lr : \r\n            Fcr = Cb*math.pi**2*E/(Lb/((W/2)/math.sqrt(12*(1+1/6*(((D-2*tf-2*radi)*tw)/((W/2)*tf))))))**2\r\n            Mny = min(Rpg*Fcr*Syc,Fy)\r\n\r\n    ΦMny = PhiM*Mny\r\n\r\n    return ΦMny\r\n\r\ndef Calculate_Compression_Flange_Local_Buckling(globalRefDict, elemDict) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Syy, Zyy, Izz, rz = secDict[\"Syy\"], secDict[\"Zyy\"], secDict[\"Izz\"], secDict[\"rz\"]\r\n    J, Cwp, D, W = secDict[\"J\"], secDict[\"Cwp\"], secDict[\"D\"], secDict[\"W\"]\r\n    tw, tf, radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    Mp = Fy*Zyy\r\n\r\n    λf = W/(2*tf)\r\n    λw = (D-2*tf-2*radi)/tw\r\n    λpf = 0.38*math.sqrt(E/Fy)\r\n    λpw = 3.76*math.sqrt(E/Fy)\r\n    λrf = 1.00*math.sqrt(E/Fy)\r\n    λrw = 5.70*math.sqrt(E/Fy)\r\n\r\n    if λw <= λpw :\r\n        if λf <= λpf :                                                   # Compact Web & Compact Flange\r\n            Mny = Mp\r\n        elif λpf < λf <= λrf :                                           # Compact Web & Non-Compact Flange\r\n            Mny = Mp-(Mp-0.7*Fy*Syy)*(λf-λpf)/(λrf-λpf)\r\n        elif λrf < λf :                                                  # Compact Web & Slender Flange\r\n            kc = min(max(4/(math.sqrt((D-2*tf-2*radi)/tw)),0.35),0.76)\r\n            Mny = 0.9*E*kc*Syy/λf**2\r\n\r\n\r\n    elif λpw < λw <= λrw :\r\n        Izc = (tf*D**3)/12\r\n        Syc = Syy\r\n        Myc = Fy * Syc\r\n        FL = 0.7*Fy\r\n        if Izc/Izz > 0.23 : \r\n            if λw <= λpw : \r\n                Rpc = Mp/Myc\r\n            else : \r\n                Rpc = min((Mp/Myc-(Mp/Myc-1)*(λw-λpw)/(λrw-λpw)),Mp-Myc)\r\n        else : \r\n            Rpc = 1\r\n\r\n        if λf <= λpf :                                                   # Non-Compact Web & Compact Flange\r\n            Mny = Rpc*Myc\r\n        elif λpf < λf <= λrf :                                           # Non-Compact Web & Non-Compact Flange\r\n            Mny = Rpc*Myc-(Rpc*Myc-FL*Syc)*(λf-λpf)/(λrf-λpf)\r\n        elif λrf < λf :                                                  # Non-Compact Web & Slender Flange\r\n            kc = min(max(4/(math.sqrt((D-2*tf-2*radi)/tw)),0.35),0.76)\r\n            Mny = 0.9*E*kc*Syc/λf**2\r\n\r\n    elif λrw < λw : \r\n        Syc = Syy\r\n        aw = ((D-2*tf-2*radi)*tw)/((W/2)*tf)\r\n        Rpg = min(1-(aw/(1200+300*aw))*((D-2*tf-2*radi)/tw-5.7*math.sqrt(E/Fy)),1)\r\n\r\n        if λf <= λpf :                                                   # Slender Web & Compact Flange\r\n            Mny = Rpg*Fy*Syc\r\n        elif λpf < λf <= λrf :                                           # Slender Web & Non-Compact Flange\r\n            Fcr = Fy-(0.3*Fy)*(λf-λpf)/(λrf-λpf)\r\n            Mny = Rpg*Fcr*Syc\r\n        elif λrf < λf :                                                  # Slender Web & Slender Flange\r\n            kc = min(max(4/(math.sqrt((D-2*tf-2*radi)/tw)),0.35),0.76)\r\n            Fcr = 0.9*E*kc/λf**2\r\n            Mny = Rpg*Fcr*Syc\r\n    \r\n    ΦMny = PhiM*Mny\r\n\r\n    return ΦMny\r\n\r\ndef Calculate_Tension_Flange_Yielding(globalRefDict, elemDict) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Syy, Zyy, Izz, rz = secDict[\"Syy\"], secDict[\"Zyy\"], secDict[\"Izz\"], secDict[\"rz\"]\r\n    J, Cwp, D, W = secDict[\"J\"], secDict[\"Cwp\"], secDict[\"D\"], secDict[\"W\"]\r\n    tw, tf, radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    Mp = Fy*Zyy\r\n\r\n    λw = (D-2*tf-2*radi)/tw\r\n    λpw = 3.76*math.sqrt(E/Fy)\r\n    λrw = 5.70*math.sqrt(E/Fy)\r\n\r\n    if λw <= λpw :\r\n        Mny = Mp                                                            # Compact Web & Compact/Non-Compact/Slender Flange\r\n\r\n    elif λpw < λw <= λrw :\r\n        Mny = Mp                                                            # Non-Compact Web & Compact/Non-Compact/Slender Flange\r\n\r\n    elif λrw < λw : \r\n        Mny = Mp                                                            # Slender Web & Compact/Non-Compact/Slender Flange\r\n\r\n    ΦMny = PhiM*Mny\r\n\r\n    return ΦMny\r\n\r\ndef Calculate_Minor_Axis_Flange_Local_Buckling(globalRefDict, elemDict) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    Szz, Zzz, Zyy, rz = secDict[\"Szz\"], secDict[\"Zzz\"], secDict[\"Zyy\"], secDict[\"rz\"]\r\n    J, Cwp, D, W = secDict[\"J\"], secDict[\"Cwp\"], secDict[\"D\"], secDict[\"W\"]\r\n    tw, tf, radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    Mp = Fy*Zyy\r\n\r\n    λf = W/(2*tf)\r\n    λpf = 0.38*math.sqrt(E/Fy)\r\n    λrf = 1.00*math.sqrt(E/Fy)\r\n\r\n    if λf <= λpf :                                                   # Compact Flange\r\n        Mnz = min(Fy*Zzz, 1.6*Fy*Szz)\r\n    elif λpf < λf <= λrf :                                           # Non-Compact Flange\r\n        Mnz = Mp-(Mp-0.7*Fy*Szz)*(λf-λpf)/(λrf-λpf)\r\n    elif λrf < λf :                                                  # lender Flange\r\n        Fcr = 0.7*E/λf**2\r\n        Mnz = Fcr*Szz\r\n\r\n    ΦMnz = PhiM*Mnz\r\n\r\n    return ΦMnz\r\n\r\ndef Calculate_Shear_Capacity(globalRefDict, elemDict) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    D,W = secDict[\"D\"], secDict[\"W\"], \r\n    tw,tf,radi = secDict[\"tw\"], secDict[\"tf\"], secDict[\"radi\"]\r\n    λw = (D-2*tf-2*radi)/tw\r\n    λf = W/(2*tf)\r\n\r\n    if λw <= 2.24*math.sqrt(E/Fy) : \r\n        Cv1 = 1.0\r\n        PhiV = 1.0\r\n    else : \r\n        if λw <= 1.1*math.sqrt(5.34*E/Fy) : \r\n            Cv1 = 1.0\r\n            PhiV = 0.9\r\n        else : \r\n            Cv1 = 1.1*math.sqrt(5.34*E/Fy)/λw\r\n            PhiV = 0.9\r\n\r\n    ΦVnz = PhiV*0.6*Fy*tw*D*Cv1      # Shear Strength of Webs\r\n\r\n    if λf <= 1.1*math.sqrt(1.2*E/Fy) : \r\n        Cv2 = 1.0\r\n        PhiV = 0.9\r\n    elif 1.1*math.sqrt(1.2*E/Fy) < λf <= 1.37*math.sqrt(1.2*E/Fy) :\r\n        Cv2 = 1.1*math.sqrt(1.2*E/Fy)/λw\r\n        PhiV = 0.9\r\n    else : \r\n        Cv2 = 1.51*1.2*E/(λw**2*Fy)\r\n        PhiV = 0.9\r\n\r\n    ΦVny = PhiV*0.6*Fy*W*tf*Cv2*2    # Shear Strength of Flanges\r\n\r\n    return ΦVnz, ΦVny\r\n\r\ndef Calculate_Combined_Ratio(forceDict, Pc, Mcy, Mcz) :\r\n    if forceDict[\"Pu\"]/Pc >= 0.2 : \r\n        CR = forceDict[\"Pu\"]/Pc+(8/9)*(forceDict[\"Muy\"]/Mcy+forceDict[\"Muz\"]/Mcz)\r\n    else : \r\n        CR = forceDict[\"Pu\"]/(2*Pc)+(forceDict[\"Muy\"]/Mcy+forceDict[\"Muz\"]/Mcz)\r\n    return CR\r\n\r\ndef Calculate_Column_Capacity(globalRefDict, elemDict, load) :\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    materialPropDict = elemDict[\"materialPropDict\"]\r\n    elementType = elemDict[\"role\"]\r\n    forceDict = elemDict[\"memberForce\"][load]\r\n    length = elemDict[\"length\"]\r\n    # res = []\r\n    n = elemDict['unbr_segment'] #Column_Unbraced_Segment\r\n    SR = Calculate_Slenderness_Ratio(globalRefDict, elemDict,n,length)\r\n    ΦPn1 = Calculate_Tensile_Strength(globalRefDict, elemDict)\r\n    ΦPn2 = Calculate_Flexural_Buckling(globalRefDict, elemDict,n,length)\r\n    if forceDict[\"Pu\"] > 0 : \r\n        ΦPn = ΦPn1\r\n    else : \r\n        ΦPn = ΦPn2\r\n    ΦMny1 = Calculate_Lateral_Torsional_Buckling(globalRefDict, elemDict,n,length)\r\n    ΦMny2 = Calculate_Compression_Flange_Local_Buckling(globalRefDict, elemDict)\r\n    ΦMny3 = Calculate_Tension_Flange_Yielding(globalRefDict, elemDict)\r\n    ΦMny = min(ΦMny1, ΦMny2, ΦMny3)\r\n    ΦMnz = Calculate_Minor_Axis_Flange_Local_Buckling(globalRefDict, elemDict)\r\n    ΦVnz, ΦVny = Calculate_Shear_Capacity(globalRefDict, elemDict)\r\n    # CR = Calculate_Combined_Ratio(Column_Data[0], Column_Data[1], Column_Data[2], ΦPn, ΦMny, ΦMnz)\r\n    # CR = Calculate_Combined_Ratio([Column_Data[0], Column_Data[1], Column_Data[2]], ΦPn, ΦMny, ΦMnz)\r\n    CR = Calculate_Combined_Ratio(forceDict, ΦPn, ΦMny, ΦMnz)\r\n    \r\n    ratioDict = {\r\n        \"sectionName\": secDict[\"sectionID\"],\r\n        \"SR\": SR,\r\n        \"ΦPn\": ΦPn, \r\n        \"ΦMny\": ΦMny, \r\n        \"ΦMnz\": ΦMnz, \r\n        \"ΦVnz\": ΦVnz, \r\n        \"ΦVny\": ΦVny,\r\n        \"pRatio\": abs(forceDict[\"Pu\"])/ΦPn,\r\n        \"myRatio\": abs(forceDict[\"Muy\"])/ΦMny,\r\n        \"mzRatio\": abs(forceDict[\"Muz\"])/ΦMnz,\r\n        \"vzRatio\": abs(forceDict[\"Vuz\"])/ΦVnz,\r\n        \"vyRatio\": abs(forceDict[\"Vuy\"])/ΦVny,\r\n        \"CR\": CR,\r\n    }\r\n    elemDict[\"ratioDict\"] = ratioDict\r\n    \r\n    if ratioDict[\"SR\"] < 200 and ratioDict[\"pRatio\"]<1 and ratioDict[\"myRatio\"]<1 and ratioDict[\"mzRatio\"]<1 and ratioDict[\"vzRatio\"]<1 and ratioDict[\"vyRatio\"]<1 and ratioDict[\"CR\"]<1 :\r\n        elemDict[\"chk_result\"] = 'OK'\r\n    else : \r\n        elemDict[\"chk_result\"] = 'NG'\r\n\r\n    return elemDict\r\n\r\ndef Calculate_Girder_Beam_Capacity(globalRefDict, elemDict, load) :\r\n    globalRefDict = globalRefDict\r\n    secDict = elemDict[\"secDict\"]\r\n    Fy,E,u,G = elemDict[\"materialPropDict\"][\"Fy\"], elemDict[\"materialPropDict\"][\"E\"],\\\r\n           elemDict[\"materialPropDict\"][\"u\"], elemDict[\"materialPropDict\"][\"G\"]\r\n    K, PhiP, PhiM = globalRefDict[\"K\"], globalRefDict[\"PhiP\"], globalRefDict[\"PhiM\"]\r\n    elementType = elemDict[\"role\"]\r\n    forceDict = elemDict[\"memberForce\"][load]\r\n    length = elemDict[\"length\"]\r\n    # res = []\r\n    if elementType == 'Girders' :\r\n        n = elemDict['unbr_segment'] #Girder_Unbraced_Segment\r\n        SR = Calculate_Slenderness_Ratio(globalRefDict, elemDict,n,length)\r\n        ΦPn1 = Calculate_Tensile_Strength(globalRefDict, elemDict)\r\n        ΦPn2 = Calculate_Flexural_Buckling(globalRefDict, elemDict,n,length)\r\n        if forceDict[\"Pu\"] > 0 : \r\n            ΦPn = ΦPn1\r\n        else : \r\n            ΦPn = ΦPn2\r\n        ΦMny1 = Calculate_Lateral_Torsional_Buckling(globalRefDict, elemDict,n,length)\r\n        ΦMny2 = Calculate_Compression_Flange_Local_Buckling(globalRefDict, elemDict)\r\n        ΦMny3 = Calculate_Tension_Flange_Yielding(globalRefDict, elemDict)\r\n        ΦMny = min(ΦMny1, ΦMny2, ΦMny3)\r\n        ΦMnz = Calculate_Minor_Axis_Flange_Local_Buckling(globalRefDict, elemDict)\r\n        ΦVnz, ΦVny = Calculate_Shear_Capacity(globalRefDict, elemDict)\r\n        CR = Calculate_Combined_Ratio(forceDict, ΦPn, ΦMny, ΦMnz)\r\n\r\n        ratioDict = {\r\n        \"sectionName\": secDict[\"sectionID\"],\r\n        \"SR\": SR,\r\n        \"ΦPn\": ΦPn, \r\n        \"ΦMny\": ΦMny, \r\n        \"ΦMnz\": ΦMnz, \r\n        \"ΦVnz\": ΦVnz, \r\n        \"ΦVny\": ΦVny,\r\n        \"pRatio\": abs(forceDict[\"Pu\"])/ΦPn,\r\n        \"myRatio\": abs(forceDict[\"Muy\"])/ΦMny,\r\n        \"mzRatio\": abs(forceDict[\"Muz\"])/ΦMnz,\r\n        \"vzRatio\": abs(forceDict[\"Vuz\"])/ΦVnz,\r\n        \"vyRatio\": abs(forceDict[\"Vuy\"])/ΦVny,\r\n        \"CR\": CR,\r\n         }   \r\n        elemDict[\"ratioDict\"] = ratioDict\r\n        \r\n        if ratioDict[\"SR\"] < 200 and ratioDict[\"pRatio\"]<1 and ratioDict[\"myRatio\"]<1 and ratioDict[\"mzRatio\"]<1 and ratioDict[\"vzRatio\"]<1 and ratioDict[\"vyRatio\"]<1 and ratioDict[\"CR\"]<1 :\r\n            elemDict[\"chk_result\"] = 'OK'\r\n        else : \r\n            elemDict[\"chk_result\"] = 'NG'\r\n\r\n    elif elementType == 'Beams' :\r\n        attached_Girder_Length = elemDict[\"attch_girderLength\"]\r\n        attached_Girder_Unbraced_Segment = elemDict[\"attch_girder_unbr_segment\"]\r\n        n = 1\r\n        SR = Calculate_Slenderness_Ratio(globalRefDict, elemDict,n, length)\r\n        ## Brace 용도 / Start\r\n        Lbr = attached_Girder_Length / attached_Girder_Unbraced_Segment\r\n        Pr = forceDict[\"Pu\"]\r\n        Mr = forceDict[\"Muz\"]\r\n        Cd = 2\r\n        ho = secDict[\"D\"]\r\n        Pbr = 0.01*Pr+0.02*(Mr*Cd/ho)\r\n        βbr = 1/0.75*(8*Pr/Lbr)+1/0.75*(10*Mr*Cd/(Lbr*ho))\r\n        Mbr = 2*length*Pbr/4\r\n        Stiffness = 48*E*secDict[\"Zzz\"]/(attached_Girder_Length*2)**3\r\n        Stiffness_Ratio = βbr/Stiffness\r\n        ## Brace 용도 / End\r\n        ΦPn1 = Calculate_Tensile_Strength(globalRefDict, elemDict)\r\n        ΦPn2 = Calculate_Flexural_Buckling(globalRefDict, elemDict,n,length)\r\n        if forceDict[\"Pu\"] > 0 : \r\n            ΦPn = ΦPn1\r\n        else : \r\n            ΦPn = ΦPn2\r\n        ΦMny1 = Calculate_Lateral_Torsional_Buckling(globalRefDict, elemDict,n,length)\r\n        ΦMny2 = Calculate_Compression_Flange_Local_Buckling(globalRefDict, elemDict)\r\n        ΦMny3 = Calculate_Tension_Flange_Yielding(globalRefDict, elemDict)\r\n        ΦMny = min(ΦMny1, ΦMny2, ΦMny3)\r\n        ΦMnz = Calculate_Minor_Axis_Flange_Local_Buckling(globalRefDict, elemDict)\r\n        ΦVnz, ΦVny = Calculate_Shear_Capacity(globalRefDict, elemDict)\r\n        # CR = Calculate_Combined_Ratio(Beam_Data[0], Beam_Data[1], Beam_Data[2], ΦPn, ΦMny, ΦMnz)\r\n        CR = Calculate_Combined_Ratio(forceDict, ΦPn, ΦMny, ΦMnz)\r\n\r\n        ratioDict = {\r\n        \"sectionName\": secDict[\"Section_Name\"],\r\n        \"SR\": SR,\r\n        \"ΦPn\": ΦPn, \r\n        \"ΦMny\": ΦMny, \r\n        \"ΦMnz\": ΦMnz, \r\n        \"ΦVnz\": ΦVnz, \r\n        \"ΦVny\": ΦVny,\r\n        \"pRatio\": abs(forceDict[\"Pu\"])/ΦPn,\r\n        \"myRatio\": abs(forceDict[\"Muy\"])/ΦMny,\r\n        \"mzRatio\": abs(forceDict[\"Muz\"])/ΦMnz,\r\n        \"vzRatio\": abs(forceDict[\"Vuz\"])/ΦVnz,\r\n        \"vyRatio\": abs(forceDict[\"Vuy\"])/ΦVny,\r\n        \"CR\": CR,\r\n         }   \r\n        elemDict[\"ratioDict\"] = ratioDict\r\n        \r\n        if ratioDict[\"SR\"] < 200 and ratioDict[\"pRatio\"]<1 and ratioDict[\"myRatio\"]<1 and ratioDict[\"mzRatio\"]<1 and ratioDict[\"vzRatio\"]<1 and ratioDict[\"vyRatio\"]<1 and ratioDict[\"CR\"]<1 and Stiffness_Ratio<1 :\r\n            elemDict[\"chk_result\"] = 'OK'\r\n        else : \r\n            elemDict[\"chk_result\"] = 'NG'\r\n\r\n    return elemDict\r\n\r\ndef Calculate_element_Capacity(globalRefDict, elemDict, load):\r\n    elementType = elemDict[\"role\"]\r\n    if elementType == \"Column\":\r\n        Calculate_Column_Capacity(globalRefDict, elemDict, load)\r\n    elif elementType == \"Girders\" or elementType == \"Beams\":\r\n        Calculate_Girder_Beam_Capacity(globalRefDict, elemDict, load)\r\n    return elemDict\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nif srcsFrom_frameModule != 0:\r\n    allUnionDictsforAllFrame = list(chain(*makeUnionDict_forAllFrame(loadDistData, frameData, elemForceData)))\r\n\r\n    total_res = go(\r\n    allUnionDictsforAllFrame,\r\n    map(lambda x: Calculate_element_Capacity(globalRefDict, x, \"DL\")),\r\n    # map(lambda x: [x[\"element_name\"],x[\"chk_result\"]]),\r\n    list,\r\n    )\r\n    total_res\r\nelse:\r\n    total_res = 0\r\n    \r\nOUT = total_res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "62eb6bd250c645b1ac13400a0556e1b3",
      "Inputs": [
        {
          "Id": "13ee26123ec74de697e7cdf2dd1fd24c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54ef04578ebe43a1aa5ac2f1995a778b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7549442d9d0455e9467e80ea1b8ab99",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87541dab270a4c739e7bc1f2e56e6f19",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "globalRefDict = {\n    \"K\": 1,\n    \"PhiP\": 0.9,\n    \"PhiM\": 0.9\n};",
      "Id": "e778ad449afd4b6c9d19543b3ab6ce3b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "26af500e34fd43dd84129be3a847237e",
          "Name": "",
          "Description": "globalRefDict",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Data.ParseJSON@string",
      "Id": "27ba954708b14c4188af4f7dc6d3589e",
      "Inputs": [
        {
          "Id": "95ce82c8ba014e7cb3c65d566daa4b8e",
          "Name": "json",
          "Description": "A JSON string\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc839dd2a5ba4eb19f9313a5afb8a88f",
          "Name": "result",
          "Description": "The result type depends on the content of the input string. The result type can be a primitive value (e.g. string, boolean, double), a List, or a Dictionary.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Parse converts an arbitrary JSON string to a value. It is the opposite of JSON.Stringify.\n\nData.ParseJSON (json: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "67e94a1605b1490ab0693f7b957c0a9d",
      "Inputs": [
        {
          "Id": "53d6cf2a75a6461bb46ac6c54c9d7575",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b465f7729ad44a9eb6488ef78253ecd7",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2905079bd172403fad5404b11ab1a4f5",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allElems;",
      "Id": "586fd5cad8084aed89d737f00de64cec",
      "Inputs": [
        {
          "Id": "0b8b2dd1768144149edd1444a9fc6f03",
          "Name": "allElems",
          "Description": "allElems",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c0884655d9854ba9be8a14de49307d01",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allElems;",
      "Id": "7d7006c42cdf4bd199285b90914b0edc",
      "Inputs": [
        {
          "Id": "b8d29abbcff8451d80ca80f4dff787f9",
          "Name": "allElems",
          "Description": "allElems",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c19f4740c3c4b478509d02b1dc0bb8f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allElems;",
      "Id": "611f0bb778114792bb60c42591b4a38f",
      "Inputs": [
        {
          "Id": "2f38578401ca4797a753cb6e1b2809e3",
          "Name": "allElems",
          "Description": "allElems",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "18dc369e45a648b0a549668d078ca2b7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allElems;",
      "Id": "66f3a625690c4576a091cdc2ab05bae6",
      "Inputs": [
        {
          "Id": "79330206eeb74c868c17e4ad2e752902",
          "Name": "allElems",
          "Description": "allElems",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "679bbfad1dc14065a9ccb54a1c1e3fec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "7847723570b74261a329b2628b2b415a",
      "Inputs": [
        {
          "Id": "d516fc81cc12492db191a56771662b17",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9eb8a15cc0364d819fac74592a233dbf",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83cad7b70ba5413ca8cdd27389f9d1b8",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"IfcGUID\";",
      "Id": "856e35e22132441fa171e914959b6285",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0ab4be4754db4e81b755489022b18c8a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"HSD_member_analysis\";",
      "Id": "8361cc2f2a40430caa7f08b9874213d1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bfe9cc337b164cb3b7a98943720d7353",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"elem\"];",
      "Id": "df92f71d47f644e7b48643b129ec40e6",
      "Inputs": [
        {
          "Id": "d2f21d554a104bb197e014720638e1ea",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68cbc0347d6949be8d0dac4dade53c69",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "mode;",
      "Id": "a277afd5888f4f38ae77c00d15958356",
      "Inputs": [
        {
          "Id": "05c467b64aab440fab5554ed8cd7344f",
          "Name": "mode",
          "Description": "mode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "550854543a704b53979dd17e00d24e3e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport os\r\nimport shutil\r\nimport json\r\nimport math\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce; from itertools import chain\r\nfrom itertools import groupby; import operator\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n\r\ndef grpBy(iter, key):\r\n    f,keys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        keys.append(key); grps.append(list(grp_data))\r\n    return grps,keys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nmemberDicts = IN[0]\r\nallElems = IN[1]\r\nparamName = IN[2]\r\n# Place your code below this line\r\ndef find_elems_in_memberDicts(allElems, memberDicts):\r\n    allMembersGUIDs = list(map(lambda x: x[\"GUID\"], memberDicts))\r\n    allMembersGUIDs_No = list(enumerate(allMembersGUIDs))\r\n    \r\n    elems_byMembersOrder = go(\r\n        allElems,\r\n        filter(lambda x: x.GetParameterValueByName(\"IfcGUID\") in allMembersGUIDs),\r\n        list,\r\n        #map(lambda x: allMembersGUIDs.index(x.GetParameterValueByName(\"IfcGUID\")))\r\n        lambda x: sorted(x, key=lambda x: allMembersGUIDs.index(x.GetParameterValueByName(\"IfcGUID\")))\r\n    )\r\n    return elems_byMembersOrder\r\n\r\ndef setColorToElem(elems_byMembersOrder, memberDicts, paramName):\r\n    zippedList = zip(elems_byMembersOrder, memberDicts)\r\n    res = go(\r\n        zippedList,\r\n        map(lambda x: x[0].SetParameterByName(paramName, x[1][\"chk_result\"])),\r\n        list,\r\n    )\r\n\r\nif memberDicts != 0:\r\n    elems_byMembersOrder = find_elems_in_memberDicts(allElems, memberDicts)\r\n    res = setColorToElem(elems_byMembersOrder, memberDicts, paramName)\r\nelse:\r\n    res = 0\r\n# Assign your output to the OUT variable.\r\n\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "70bb6280a2564e68805d95a21277d35a",
      "Inputs": [
        {
          "Id": "e424f9cdb9a24bc88181a178513180a0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "01717e78bbd7401ba8dca6126a4cae82",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0e88289961fa4525b1eeb69382b0e3ae",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "635e2ac2981140fca347a084c9410378",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "ed9b157af08a4faead1214e0a342c5db",
      "Id": "102747ccb0724046ba494fc15cb6ecbf",
      "IsHidden": "False"
    },
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "59b8020eef344472a5b195fcea3784b7",
      "Id": "914061411fa6424ab8e206e618d5cf04",
      "IsHidden": "False"
    },
    {
      "Start": "8ce37ab31de545d9a49734c18d5c0c9c",
      "End": "53d6cf2a75a6461bb46ac6c54c9d7575",
      "Id": "f583009c77d44de186916f726154384a",
      "IsHidden": "False"
    },
    {
      "Start": "1deee3be24b949e1941b47be2b544582",
      "End": "14f1648433474e7580b1443397bd7356",
      "Id": "a40038268dfc455faac785ea80ab249b",
      "IsHidden": "False"
    },
    {
      "Start": "f57a3755aaa2428d99627f7616d39764",
      "End": "c6ea57d8d9364ea2ac3cbababfcdc75a",
      "Id": "6e2285f58dd34835af3d9524e87df8a6",
      "IsHidden": "False"
    },
    {
      "Start": "f57a3755aaa2428d99627f7616d39764",
      "End": "920f662ab29649dd902121f861d04b09",
      "Id": "e2b5ec36bb9e407ab7982585edaae841",
      "IsHidden": "False"
    },
    {
      "Start": "2ba074e1d7134cb182e2fa80a0c1a6dd",
      "End": "ca0ece6f96a04bfd814175a989fc2fd0",
      "Id": "0329fae082404d76bac034d611ca5822",
      "IsHidden": "False"
    },
    {
      "Start": "e6d65bddf65245708fe4fb496c1fcf80",
      "End": "72b260e450524e6d932fdb1fd2c85b47",
      "Id": "bb6e22c404c345fb9775d3d496e9b290",
      "IsHidden": "False"
    },
    {
      "Start": "2c9134415f38468dbb305770029249e9",
      "End": "89a5d4cc35e74218b84a196ec1c3763c",
      "Id": "ef7368dfac04445d9c548ae3d6630619",
      "IsHidden": "False"
    },
    {
      "Start": "eb8edd0307f94b3f8c762acd43e2c342",
      "End": "84bc9cca1b7449558f253209028ca18f",
      "Id": "bb82edfa76d441a2b235c7ad7c8004e6",
      "IsHidden": "False"
    },
    {
      "Start": "9dd1ef18eb494309a1549c7898dbdbf9",
      "End": "0b5ec3fab7864fdbbed4cc24b68acd65",
      "Id": "925dbc7c1e4f4e82b577594e65d8a052",
      "IsHidden": "False"
    },
    {
      "Start": "9dd1ef18eb494309a1549c7898dbdbf9",
      "End": "422d807b5642461880f59a9de50ce98d",
      "Id": "9f56ed354ae0401a8f4aef27cd3dbf7e",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "2ce466dcf6e144a295f149de29917387",
      "Id": "a42ecce783834bbe93ee054654f02bdb",
      "IsHidden": "False"
    },
    {
      "Start": "39e9a50723bf420a97a64c3518ffe3e6",
      "End": "124a4897494c4906a4646dc1cfe26fcb",
      "Id": "b1662a0a43e04de7a9f59839c5688484",
      "IsHidden": "False"
    },
    {
      "Start": "d6d03979733a449fae4dce41c4c78b69",
      "End": "b0b633c477e04d57843a343d80989b08",
      "Id": "67d070d027724c19a3e4eaed9f02088d",
      "IsHidden": "False"
    },
    {
      "Start": "d6d03979733a449fae4dce41c4c78b69",
      "End": "b465f7729ad44a9eb6488ef78253ecd7",
      "Id": "31daa34354c5487f9f2e16a1befe84a1",
      "IsHidden": "False"
    },
    {
      "Start": "2e2c2b8cbeb54082b23211013f0d7a34",
      "End": "2bce01a281ac476fb39681a82d3da06d",
      "Id": "5c4fd64f279b4dd68416c5fbe27682eb",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "88a2199484764cb38f1148b3fef8f1a2",
      "Id": "aa1f0b89ad8e47f3984d885b1948f5d1",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "054d9ef0a32844799e4d24dcbd5ce1d1",
      "Id": "5bdb33cba82943d2a2ec7e6a08684b14",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "d2d63660695940d58828fcd01fabc812",
      "Id": "f92f9fc492fd48638e05dc0beed944eb",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "8d37cc1c8a2945ccb7f695732ba71707",
      "Id": "2eba61274f604be5a93785f9a808658e",
      "IsHidden": "False"
    },
    {
      "Start": "59a27b105e5a4404a85f71c413683ee5",
      "End": "0a02b4a0d05d465f8309528fa3205aca",
      "Id": "ccd089cb1ea54214b04f52c049002b12",
      "IsHidden": "False"
    },
    {
      "Start": "aad53e0099054fa68cf49e2d4fb67f92",
      "End": "f90a7d9853f5467c8c8a62777a68747e",
      "Id": "e4cbb7697ce84231ad0e5e20755f36cd",
      "IsHidden": "False"
    },
    {
      "Start": "70810211d2514fefa00e3c22a23c7579",
      "End": "98700cf7b33a4325891ba90aa32db69d",
      "Id": "6424744bf0bb44fbb6cdcd724fda94be",
      "IsHidden": "False"
    },
    {
      "Start": "70810211d2514fefa00e3c22a23c7579",
      "End": "7e0f9102c5c641ebbbdac5d1aff57f9f",
      "Id": "dd09b17f6a40473c977f474e7a54d5eb",
      "IsHidden": "False"
    },
    {
      "Start": "70810211d2514fefa00e3c22a23c7579",
      "End": "d2b8eaca535a4ee7957d8cd23bf8889b",
      "Id": "f8a43f327ebe4b4da5813a22e663d632",
      "IsHidden": "False"
    },
    {
      "Start": "eaf64d9b96ba47fa83a1be197a9d4722",
      "End": "697ccf8f1ec84e0abf9ca4e989bba5bb",
      "Id": "760ca5032ad245e1b2491db6596b6a79",
      "IsHidden": "False"
    },
    {
      "Start": "eaf64d9b96ba47fa83a1be197a9d4722",
      "End": "0792cc92f0fe4712b028a89c514f4a01",
      "Id": "1f96ad6defab454e968aa762f014edb6",
      "IsHidden": "False"
    },
    {
      "Start": "03e29284cb7d4849bb8b1daeb4351d6d",
      "End": "b7e9f348f52f42f8af213b7d8064ed47",
      "Id": "883cfbdc9f674cb499bc823b1d03ef76",
      "IsHidden": "False"
    },
    {
      "Start": "03e29284cb7d4849bb8b1daeb4351d6d",
      "End": "30233787def34d7ebc1ed6c93ea7ddbe",
      "Id": "f4cba825c9eb40fb8c26df193ddbae67",
      "IsHidden": "False"
    },
    {
      "Start": "73f5a2850094462da6a97cff99a3d1a6",
      "End": "ab64cdf3788e454797089b392c23cef4",
      "Id": "df6b22b3d2b24d1ba5e03a9d01cf0981",
      "IsHidden": "False"
    },
    {
      "Start": "35fbf4e22b6049f8b90ab59a27c3fa15",
      "End": "151f93a3425c4d23aa85e18df4ab2668",
      "Id": "9806904051c140e98771769f3378a18d",
      "IsHidden": "False"
    },
    {
      "Start": "35fbf4e22b6049f8b90ab59a27c3fa15",
      "End": "742bddf0378e49ec8a136fcfd44989f2",
      "Id": "09954183592f4ed0bcef5cb9acbe5113",
      "IsHidden": "False"
    },
    {
      "Start": "2df41e14a4e64d2080e6f495abd9abc5",
      "End": "7471d9243dd14a31a5c95d627f65e717",
      "Id": "0741d7c12af14c7896a1c95324471a3c",
      "IsHidden": "False"
    },
    {
      "Start": "2df41e14a4e64d2080e6f495abd9abc5",
      "End": "c241d21172d2437991859c77c959dcb2",
      "Id": "f81fa10dfa354738b2e82316472a36c6",
      "IsHidden": "False"
    },
    {
      "Start": "5547584f0abc4508b245b6fee3a058ef",
      "End": "37d15c60385f4a59b07073982620a34a",
      "Id": "4d0c711a6fb84d589dbd0a9cc67760bb",
      "IsHidden": "False"
    },
    {
      "Start": "c6b1e9bab85d4057a6de25b89351478a",
      "End": "9d311d0dba104fa280c9c26ccc5bb263",
      "Id": "63998270f3c849f58bdf2edcad6b7af5",
      "IsHidden": "False"
    },
    {
      "Start": "bdb93307e8824cb5adf1ebbee59aec51",
      "End": "86576d0713ad49499284c5192cffe814",
      "Id": "618684d0a10a4568906950f310335f8e",
      "IsHidden": "False"
    },
    {
      "Start": "23180c6f610342f8a271825364040b55",
      "End": "a1ae9b14cac24169b3daf4a7e8b32fb6",
      "Id": "9bfc98706e4f4b58a0f3a706dcf0ccb0",
      "IsHidden": "False"
    },
    {
      "Start": "2912c06ecbc34c75bf98d4e082a56137",
      "End": "e2901e7759304f2f826b093e00d47692",
      "Id": "cfa594d946764341884fc5cd339b8e91",
      "IsHidden": "False"
    },
    {
      "Start": "f476384a13254de3a0e643276aeb784c",
      "End": "2a3703eb78b74745807f6bb3d4259531",
      "Id": "59787e6b8a4a49b7812de5251eb6553a",
      "IsHidden": "False"
    },
    {
      "Start": "c75a2ddf07eb4b06b3629556d58860dc",
      "End": "ab1d6e849b994808b5a942fe5bae452e",
      "Id": "0c3d43b2fae540f4beb9830acbf646c6",
      "IsHidden": "False"
    },
    {
      "Start": "2080ba0e96ab49b297763e694aa565a2",
      "End": "4da3c4ac12f443c59999d8851b59050e",
      "Id": "8efbb58f73fb413b9399a1bf08f74238",
      "IsHidden": "False"
    },
    {
      "Start": "2080ba0e96ab49b297763e694aa565a2",
      "End": "f4b92b01111246c69b891f6deb576812",
      "Id": "a42c0f0c4f3e47cc828f5e6b33c93756",
      "IsHidden": "False"
    },
    {
      "Start": "d58fd9e15f0b45ab8f1246585b526ce3",
      "End": "952a3867dd8745b2bd7c824b4f9825f7",
      "Id": "691d7f2e5f504c2ebc7c072d9399a31e",
      "IsHidden": "False"
    },
    {
      "Start": "7de3847a8b8d47cc912a19320c667a04",
      "End": "0aeac3b5f47c4fa5967eb501d1f3e954",
      "Id": "2c0f7073341640ff9fdd29487854a28a",
      "IsHidden": "False"
    },
    {
      "Start": "7de3847a8b8d47cc912a19320c667a04",
      "End": "fc51fc3f03654cf782f10b2e796c708e",
      "Id": "c8e0e959c459466ab2923d3281482e28",
      "IsHidden": "False"
    },
    {
      "Start": "7de3847a8b8d47cc912a19320c667a04",
      "End": "0adc5dfebf224feb9c9724f9482b072a",
      "Id": "1f6b33fa4aa344dfae85fd4d67f930eb",
      "IsHidden": "False"
    },
    {
      "Start": "7de3847a8b8d47cc912a19320c667a04",
      "End": "e3193378bef74f9090dade5afeaafe94",
      "Id": "c2ed5baddc9a4db7967f37522c0f6ce4",
      "IsHidden": "False"
    },
    {
      "Start": "7de3847a8b8d47cc912a19320c667a04",
      "End": "991890b19e7e4ba0bee56edac22f3e42",
      "Id": "b11a0eecafdb465d9cd74d9f6e99e95f",
      "IsHidden": "False"
    },
    {
      "Start": "676e318f412645a48a1d7e67348fc1c7",
      "End": "851d110d0f2f41e9ab9533da84f5f74a",
      "Id": "3c6cfd31a57b4b4d84a62ddf27a98849",
      "IsHidden": "False"
    },
    {
      "Start": "db77b9daa610448190607ce6c72f661e",
      "End": "9e129bd0bcc6459a97fd9391a78ab5cc",
      "Id": "78264c9afcfa4bddac3c2fe0a251a3ed",
      "IsHidden": "False"
    },
    {
      "Start": "28db9ca74ed242cdb4f3222fd896be51",
      "End": "8262d8f440ef4ebca01f688d4d717231",
      "Id": "ed06ad37357a46399a9f09edd6d2dc71",
      "IsHidden": "False"
    },
    {
      "Start": "28db9ca74ed242cdb4f3222fd896be51",
      "End": "1f9274e2f51b47a489e84eb969490754",
      "Id": "9e483c5d469c404ab3c5df62cef4fa12",
      "IsHidden": "False"
    },
    {
      "Start": "35edc92ca54b46a187e1c09f7f596ba2",
      "End": "a7f7827aeffc491bac21bf9b932ab205",
      "Id": "66e8a12fcead4f12823381b51be12e0a",
      "IsHidden": "False"
    },
    {
      "Start": "fee0467e0ff84c07a228e611c6aae7dc",
      "End": "bdc34fe7d5024199802b26e361c33070",
      "Id": "7757dd126f144f9c8fc3f0fd666fc98f",
      "IsHidden": "False"
    },
    {
      "Start": "0289f1b4ce46452b95e9b7e6f2b454d7",
      "End": "88ed36984c4343ba9aa3e1e93bef2eca",
      "Id": "9a596840c0b3458bbebe7caf88a6fbb6",
      "IsHidden": "False"
    },
    {
      "Start": "0998d857e9054e10a62a4cf4d529f061",
      "End": "5d46cb51ce884ea2a381ac3c095970dd",
      "Id": "f1e79274645742e69e2503622c37f8a3",
      "IsHidden": "False"
    },
    {
      "Start": "8c4e4ad75f754789bcb602c51e9bf5d9",
      "End": "eac1a3efb42c47c488ae65b176eddef3",
      "Id": "31a33d2451394911a77150d88c4ae435",
      "IsHidden": "False"
    },
    {
      "Start": "8c4e4ad75f754789bcb602c51e9bf5d9",
      "End": "f81e6c99dc4f47eda8f6add34c813edd",
      "Id": "20d928026ec5426684192c8fd19cac51",
      "IsHidden": "False"
    },
    {
      "Start": "b99a85a709e84e82ab6a9b1ec97c42a6",
      "End": "97521b6324fa4a57b846758433c5a04c",
      "Id": "b029b10a6e394bc89fbcf912563ca890",
      "IsHidden": "False"
    },
    {
      "Start": "c88028b121a24a6ca44fe3a3daaf31ee",
      "End": "d8b579f56f25461ba1d11ba08024cccf",
      "Id": "2a3081f057fb44f993b86bec1826c08e",
      "IsHidden": "False"
    },
    {
      "Start": "34caa870d46443e1bb0de061b9031c7d",
      "End": "a343b522a2a140518a5053d6e8691427",
      "Id": "5acb1288250c4f6790162905e9fc6be2",
      "IsHidden": "False"
    },
    {
      "Start": "07df22f4ea1d459a9d5266728b3d95a8",
      "End": "0e33ab6b4b634454b4792c5ae6a587af",
      "Id": "1b743e357f9748478769f02b78c36e8b",
      "IsHidden": "False"
    },
    {
      "Start": "07df22f4ea1d459a9d5266728b3d95a8",
      "End": "15d7cd0b35494bad81ac4479a6f453fc",
      "Id": "946d5bba93cf4aea8e9d018fb55cde57",
      "IsHidden": "False"
    },
    {
      "Start": "07df22f4ea1d459a9d5266728b3d95a8",
      "End": "820754c62ba146f6917c04d2c4e462ce",
      "Id": "0e54ce7d78a041c9bee4e00ff7ea1360",
      "IsHidden": "False"
    },
    {
      "Start": "e87daa5787664fcaa13e59b422e1f84c",
      "End": "20bd2ffc97e74fc6ac5be844787c17b6",
      "Id": "b78888f7260b43acb41b5bd9feffcbe2",
      "IsHidden": "False"
    },
    {
      "Start": "e87daa5787664fcaa13e59b422e1f84c",
      "End": "d9a33fef63db4cccae3c9d6a454aa4b1",
      "Id": "0929d93a293742d09694b20e4996e91e",
      "IsHidden": "False"
    },
    {
      "Start": "877afc6567254252a42a93efff65c7f4",
      "End": "74e066dfb4664b39951455dc0199445d",
      "Id": "bb69f553dd974492b8f3d86a7111e58d",
      "IsHidden": "False"
    },
    {
      "Start": "1a59fa368c7848ea8d5112c8aa2dcb38",
      "End": "cbfc937889bd4f31ac0d39ef319cee39",
      "Id": "bf751427e7ac4fcdbcf535f2e2a2a06b",
      "IsHidden": "False"
    },
    {
      "Start": "95a6a9302877408f9b8e1aed30e8751a",
      "End": "b2249cb0df9245fea24dc067c7426721",
      "Id": "15f5deeb2aa54fd0a5852ce4d4d7d98f",
      "IsHidden": "False"
    },
    {
      "Start": "0410148b62cd44248ee8f53a966f2ce9",
      "End": "da4345ec91794616a88b5b8b1ebb79c2",
      "Id": "6acd03aca62349b3b748d86e8953c166",
      "IsHidden": "False"
    },
    {
      "Start": "87307234f91844d89128fc1c2c3347a7",
      "End": "925f9ee8811f4a23ab7d6ff1ac2f51a3",
      "Id": "151544bb7d46476fbeac287043f9cd82",
      "IsHidden": "False"
    },
    {
      "Start": "87307234f91844d89128fc1c2c3347a7",
      "End": "2a47dc0cf3444982949adc49f68ec2b4",
      "Id": "7c94a37ea55541618e0cb55998ce413a",
      "IsHidden": "False"
    },
    {
      "Start": "cf924f913a3c45a9aff3c8cdfb852de9",
      "End": "350b09ad74a04eeb8d21535f73f128de",
      "Id": "2d5f439e32bc4939b72bbd6d08487c52",
      "IsHidden": "False"
    },
    {
      "Start": "cf924f913a3c45a9aff3c8cdfb852de9",
      "End": "1280bff07abb4627a613fbca4184bdcf",
      "Id": "52e1d58c93224f009fb96b40ebd0b4b5",
      "IsHidden": "False"
    },
    {
      "Start": "cf924f913a3c45a9aff3c8cdfb852de9",
      "End": "d2b6fbffd7cf490aa35a08da10ec88f2",
      "Id": "0a849a0852c4487abf09dddab61f3240",
      "IsHidden": "False"
    },
    {
      "Start": "cf924f913a3c45a9aff3c8cdfb852de9",
      "End": "86970dd3d9c340b8b135dd3e273d4a8a",
      "Id": "85fcc25a932f4696925f056878125e56",
      "IsHidden": "False"
    },
    {
      "Start": "0cd8eace47814c71be31ce6ec0b55f27",
      "End": "eecca253973d46a198881a244bbab9dc",
      "Id": "0856bdfb3e7e4d94898f9258a27ff0e2",
      "IsHidden": "False"
    },
    {
      "Start": "0cd8eace47814c71be31ce6ec0b55f27",
      "End": "6d77cea26b354fda8ae45d571261db3f",
      "Id": "e4492a5546d94ff99a2179b121a9f3e6",
      "IsHidden": "False"
    },
    {
      "Start": "5da55e31499a4017aeb887ae464ab37b",
      "End": "065a0961f59c41e7b038bb6e35d96d6c",
      "Id": "1223a28991e14a30b568d3bcb547b53d",
      "IsHidden": "False"
    },
    {
      "Start": "94e20330d73443bc88d12efa055ca88c",
      "End": "89cbb494a451441bab04de521a630390",
      "Id": "951e13b665a6445492add7ea73554257",
      "IsHidden": "False"
    },
    {
      "Start": "6b26523ab86043e0affe3ccb193d23f4",
      "End": "f000f4548c934d0fa921902c0823b121",
      "Id": "d8d12a34de5740c49bbdac7051c3743b",
      "IsHidden": "False"
    },
    {
      "Start": "15a877e843354c43bbc74b75f8c8b47b",
      "End": "dbad7381ff9c488fa3f2045909c95ef7",
      "Id": "44f0d527480d4ead8fbded8824e0f424",
      "IsHidden": "False"
    },
    {
      "Start": "15a877e843354c43bbc74b75f8c8b47b",
      "End": "cbcd2d65d2094f4dbc5f69603dc509ba",
      "Id": "69804c4d08464bf2903d222e34c167ad",
      "IsHidden": "False"
    },
    {
      "Start": "15a877e843354c43bbc74b75f8c8b47b",
      "End": "7c4ec8396540415bb358ab72827351d3",
      "Id": "4749587e5ff84a4f8a1a4e56e7e78696",
      "IsHidden": "False"
    },
    {
      "Start": "15a877e843354c43bbc74b75f8c8b47b",
      "End": "18f6ad6061674684b54e65847ef83367",
      "Id": "a90d066fb2ca4fe69397194b475f1b7b",
      "IsHidden": "False"
    },
    {
      "Start": "15a877e843354c43bbc74b75f8c8b47b",
      "End": "56741a155da14c53ab1a1638ca77de80",
      "Id": "29ac0f2f2d16407480fa15f388aef0fd",
      "IsHidden": "False"
    },
    {
      "Start": "708f8bdfafda4b44931cf80f79c1fb47",
      "End": "f43f7979705e4d02b5d4287ef4f947e8",
      "Id": "45cadd88a22f46f3b6e74c02ef8f6f9d",
      "IsHidden": "False"
    },
    {
      "Start": "bdc8a1afc2074eba84bb4c4e90b0b527",
      "End": "80b072dbcfac45c1a76bbcad51cfa0f6",
      "Id": "02e8eaccf9c44a208c2005b6a3ddd903",
      "IsHidden": "False"
    },
    {
      "Start": "7e86a83b1eee4e8f8a0e3a94d6afa211",
      "End": "8eb2ad0a76c34893a08d0edb837abab1",
      "Id": "08cc6dbb3bcc49949d6118efe539d306",
      "IsHidden": "False"
    },
    {
      "Start": "7e86a83b1eee4e8f8a0e3a94d6afa211",
      "End": "f6c42e0e245f4384b1dba1d5b716d03c",
      "Id": "c674bb50639f41f985d80d43bd168765",
      "IsHidden": "False"
    },
    {
      "Start": "7e86a83b1eee4e8f8a0e3a94d6afa211",
      "End": "9dbb2df8fe2f4027a35eb3a669f19759",
      "Id": "3b74593573bb4633b040d5dbe504c3f1",
      "IsHidden": "False"
    },
    {
      "Start": "73406de133d74b51b2d89a8dff0c1185",
      "End": "28914052c9644eb18632f7905a19ab53",
      "Id": "fbdcdf7e6f654c8fb4faf8e730743a96",
      "IsHidden": "False"
    },
    {
      "Start": "5c811fc5ad014d30b8783742009bc47f",
      "End": "9906872e994e4a7d966bdaccae3899ff",
      "Id": "d8c392d56e9345f782f1e3475cf6922f",
      "IsHidden": "False"
    },
    {
      "Start": "5c811fc5ad014d30b8783742009bc47f",
      "End": "2150ac211caf4f4b907313cfeb53a649",
      "Id": "796e973ed3494fc59a97159158d498d0",
      "IsHidden": "False"
    },
    {
      "Start": "6dd845da6198402c8298ff254bb33f0b",
      "End": "057de3c3c8714183bb5cd46c40191258",
      "Id": "a54e4ecaa86a4ef98d501269cfe1de38",
      "IsHidden": "False"
    },
    {
      "Start": "b63f1455a2914b1fb2beceee53449481",
      "End": "0bb540faa5574650b5f4cc6307e33c80",
      "Id": "2404ceb4b11549f785c3aa8e611cd8cd",
      "IsHidden": "False"
    },
    {
      "Start": "3a52fe789a454e59b5a4fc92a02db4f2",
      "End": "88c5ce6ef5eb45dab20c4ebb4cb14dde",
      "Id": "2de3d28760f5461b911edf9c6916b45c",
      "IsHidden": "False"
    },
    {
      "Start": "3a52fe789a454e59b5a4fc92a02db4f2",
      "End": "3ab394e2c1214a3d9d11b791dc9555e9",
      "Id": "ce73a72dca884f688e23554f7411f094",
      "IsHidden": "False"
    },
    {
      "Start": "2fc5101cf5e949da943569037d94d542",
      "End": "f4d74d6373fe4598bb3e36c31b6e81c0",
      "Id": "45ebdd8a6e844358b9eebec83ab9ad71",
      "IsHidden": "False"
    },
    {
      "Start": "2fc5101cf5e949da943569037d94d542",
      "End": "83bb5e400c8c445194181a115b0d30ec",
      "Id": "640b556669f04613b2b9b9f29cfa8eb4",
      "IsHidden": "False"
    },
    {
      "Start": "2fc5101cf5e949da943569037d94d542",
      "End": "03f6a8fdc4ef4a618084339f60b84924",
      "Id": "d64292d175dd4b84a7223eb4d8a2a231",
      "IsHidden": "False"
    },
    {
      "Start": "5b5ae89aa0f94bf9aa4df31dc7c11479",
      "End": "786f97b5c20c4cc2899cac0e26d7a7c0",
      "Id": "f4ca3a5938d24f44ab29bafee24795dd",
      "IsHidden": "False"
    },
    {
      "Start": "6387ea970bdc46019752b248df96a0f0",
      "End": "3df5cf940ae74d5484839dfbbc290541",
      "Id": "510fb6ae51234440b2c8b0611f1aa08b",
      "IsHidden": "False"
    },
    {
      "Start": "4aec9979caf147f78dd82f6ea291c5f9",
      "End": "65f16d7a2e2c4b85b16685da8bdcbf5c",
      "Id": "4524ec0d64e946beafd6bfef0ee08297",
      "IsHidden": "False"
    },
    {
      "Start": "a49762ea397547e7b010e3bad9269758",
      "End": "afbf68c009684d3a97877515b2ae1397",
      "Id": "581b822e3cee4211b3b7de8fa41b424d",
      "IsHidden": "False"
    },
    {
      "Start": "a49762ea397547e7b010e3bad9269758",
      "End": "7d75e8a664d647edb7054fc7cd966cee",
      "Id": "6a503271d6374b4d9858d23d2d9ab23f",
      "IsHidden": "False"
    },
    {
      "Start": "20d260cc6f4048b3abb5df9d679fad6d",
      "End": "5440056d12544c9ea76f8c80036721b8",
      "Id": "d48a433c3c7548b38377e5d9f7980bdb",
      "IsHidden": "False"
    },
    {
      "Start": "7589e174ec474bceb8f335db25a5c93c",
      "End": "47be24d7755b4e8ebcaab2d9cd66a562",
      "Id": "86b70379cb5b463cbcc65b0a58d0be3e",
      "IsHidden": "False"
    },
    {
      "Start": "d65b69a27d874dca964949f776759bbc",
      "End": "b32b620594d84ec995647dd81233f6e4",
      "Id": "5c82851f4ebe4f7487624047993f0e15",
      "IsHidden": "False"
    },
    {
      "Start": "cd0938b0a9484f40837ccd9642483441",
      "End": "d3db3e5cb4a342ff9e534cfd77262887",
      "Id": "4dc5b44baa54449cbdaaa04442d24043",
      "IsHidden": "False"
    },
    {
      "Start": "698effddae854c1ca4d9c666ef6c2d04",
      "End": "3805247c23414c0e8b25db909c9a22c6",
      "Id": "2b6514f6412748ce9e3fa52187fa2932",
      "IsHidden": "False"
    },
    {
      "Start": "698effddae854c1ca4d9c666ef6c2d04",
      "End": "05c467b64aab440fab5554ed8cd7344f",
      "Id": "71ca9047fc9a40e3aeccb2cdac2e0e37",
      "IsHidden": "False"
    },
    {
      "Start": "6550308bb9544ac7943142e991b1aae8",
      "End": "467a59e1590a4082b544b88b0ae280d7",
      "Id": "c53b439b69964efc8a7aacbd004aa648",
      "IsHidden": "False"
    },
    {
      "Start": "8cae2a76886549c9a6a14f9ef7a735c5",
      "End": "c1454595e956418ebeb492b82951d58c",
      "Id": "91104963cee445b0aa3c3d23d0ec7fa0",
      "IsHidden": "False"
    },
    {
      "Start": "7c504c5a37864d389ce62f903eb33ff8",
      "End": "22af7d97bc664a778a4384e06ef7eae0",
      "Id": "6ca5f772471643fe8ea79baf0d9e6357",
      "IsHidden": "False"
    },
    {
      "Start": "7c504c5a37864d389ce62f903eb33ff8",
      "End": "07a802f25e064081aaecd5e2571c5583",
      "Id": "7aa24ffe62ff487a91105cfa9c45b592",
      "IsHidden": "False"
    },
    {
      "Start": "7c504c5a37864d389ce62f903eb33ff8",
      "End": "7ea21d66cde34693b1a70ff512499ff0",
      "Id": "04a3b70fab694141a361c67da315cdfe",
      "IsHidden": "False"
    },
    {
      "Start": "a17632b3c2544aa3b4cfb144f32df1c2",
      "End": "a101667eb86341d0a0afcb17ed777a95",
      "Id": "447decb0a6fb43ed91d135512ee74d4c",
      "IsHidden": "False"
    },
    {
      "Start": "2a98912866db45b19c3774470ea92002",
      "End": "189416b849aa451aaec6dffa9c767fd8",
      "Id": "920cc689eda44c728ef7275ed8f3a9ba",
      "IsHidden": "False"
    },
    {
      "Start": "2a98912866db45b19c3774470ea92002",
      "End": "4711a218cad14465908e2aa587df9b06",
      "Id": "c47ea16e42544e2182ffcfd55f6889a8",
      "IsHidden": "False"
    },
    {
      "Start": "82ea009a129e4fdc9c0d527afbe36166",
      "End": "0dd9aa0f3c374a62a3cfe546bee413ed",
      "Id": "2846917d5a384f31afdfaeca3e76e952",
      "IsHidden": "False"
    },
    {
      "Start": "a13fba588c2b44d9af30275188e98f88",
      "End": "79cc0bd4e1ee4547940ac6b8d3a55a72",
      "Id": "7e7f0cd21b8645afb43732da65072a65",
      "IsHidden": "False"
    },
    {
      "Start": "319c2388664242cdb7adc51bbff35a85",
      "End": "dec89e00b00749e68506b9fb50fe7765",
      "Id": "1c8848b7e2244d7a87d4a19d80e417bc",
      "IsHidden": "False"
    },
    {
      "Start": "f054f73462924867883312479fa27389",
      "End": "7bbeb7c98078412b957650d0230ddf07",
      "Id": "f08ab41c74354f40b09939b570c30f1b",
      "IsHidden": "False"
    },
    {
      "Start": "f054f73462924867883312479fa27389",
      "End": "42bbd38de17842b98a180bdde6d402cc",
      "Id": "99c6c64c88bc493b97a26f2e8fd501ae",
      "IsHidden": "False"
    },
    {
      "Start": "f054f73462924867883312479fa27389",
      "End": "d2f21d554a104bb197e014720638e1ea",
      "Id": "a98620216a9b4bb197d0a6ca5a6fa004",
      "IsHidden": "False"
    },
    {
      "Start": "ccd01688b5db4fa1a625631534d04eda",
      "End": "e89835f678e94133a80984998510b52d",
      "Id": "9a139b4581fe4234b14ab3665f858064",
      "IsHidden": "False"
    },
    {
      "Start": "ccd01688b5db4fa1a625631534d04eda",
      "End": "2cd7aa7583574e1ab4247700fc4a0678",
      "Id": "f88c35df11414205a864300e1628e334",
      "IsHidden": "False"
    },
    {
      "Start": "ccd01688b5db4fa1a625631534d04eda",
      "End": "cec5951584ec46089d0d3512893603bb",
      "Id": "6efd5e9954864425a2715b442da47fc4",
      "IsHidden": "False"
    },
    {
      "Start": "6f04ba8c192b4769998aa76446734d68",
      "End": "31f25e6a5c1d4b72a3c72e442de26311",
      "Id": "24389d2711694cd9b32d24e99b5afced",
      "IsHidden": "False"
    },
    {
      "Start": "6f04ba8c192b4769998aa76446734d68",
      "End": "f894b459a84b4df78686b5086037fc9f",
      "Id": "aa6938c426c345388be4b2154d2c1b2f",
      "IsHidden": "False"
    },
    {
      "Start": "6f04ba8c192b4769998aa76446734d68",
      "End": "92a7587465ee46808f82264b84ab297e",
      "Id": "467f3c3a151c4878b64a443780c1e764",
      "IsHidden": "False"
    },
    {
      "Start": "6f04ba8c192b4769998aa76446734d68",
      "End": "d21af779886e4737b96c96e67efbe381",
      "Id": "10eef0adceaf40358dd7d80dc4e099be",
      "IsHidden": "False"
    },
    {
      "Start": "d3e681d5f24c43adaa7211db4dc11f7e",
      "End": "b29311cc13124207bd75f40c4686897d",
      "Id": "1c37f92cc0dd44edbeca599dccaab9c1",
      "IsHidden": "False"
    },
    {
      "Start": "4dd39a9d1b94457c940f34cc892a401d",
      "End": "10cc323609d6405ca768ac9feca8f61c",
      "Id": "080b9c9eb28143ccbe17bcb3d55400c8",
      "IsHidden": "False"
    },
    {
      "Start": "94f936235d61404c9ddff38bb68dfaec",
      "End": "d0618090f6194c19a679b606c24693b9",
      "Id": "623765b8460d410ca2230531788934f5",
      "IsHidden": "False"
    },
    {
      "Start": "94f936235d61404c9ddff38bb68dfaec",
      "End": "defd7cc4585c4fde9aef7f50577b5e2d",
      "Id": "e039da8e638347eea94bac6a51b37c93",
      "IsHidden": "False"
    },
    {
      "Start": "330d6326be1c4c36baa0061b555567cc",
      "End": "ad9e48c3c3a146de893ff2c87c0ff4e1",
      "Id": "6b0eec24fd9a43abb9cfb433997a1136",
      "IsHidden": "False"
    },
    {
      "Start": "330d6326be1c4c36baa0061b555567cc",
      "End": "5683b7c333174daba7a26f179bce7d4b",
      "Id": "38a256c59059417c8585ca5807c9ce7c",
      "IsHidden": "False"
    },
    {
      "Start": "330d6326be1c4c36baa0061b555567cc",
      "End": "2cb1fc7896fd49808e5f183a3b13ae75",
      "Id": "4b1a8e013c1d44b4bff855c5a7f89a48",
      "IsHidden": "False"
    },
    {
      "Start": "7471b6c07644480baae8ed8d0fdfc26e",
      "End": "b05103fb83d04578b708fa1699ad92c4",
      "Id": "e815fe7072d64cf499a4bbced9fe683b",
      "IsHidden": "False"
    },
    {
      "Start": "b45d899af3174917b608ef99c64e1f3e",
      "End": "be946254ff3b4377b94feeadd2993d63",
      "Id": "fc85950d92b64151823c345d6a4b8e65",
      "IsHidden": "False"
    },
    {
      "Start": "b45d899af3174917b608ef99c64e1f3e",
      "End": "9a07e0b4efd648abbc6282543fb0af0a",
      "Id": "1c619e0ca6f84925ae9c685eb9360122",
      "IsHidden": "False"
    },
    {
      "Start": "d60d2333921b4c6caf3f05289bcf9bcd",
      "End": "904a15b7f8ce4390bf2b10b42b3bc8d6",
      "Id": "7e5997682b594746bc9eeddb6481007e",
      "IsHidden": "False"
    },
    {
      "Start": "d60d2333921b4c6caf3f05289bcf9bcd",
      "End": "0f77a95dba534c90ba65afdc25531f95",
      "Id": "de03f81436ca4f1f9ca74afde0a5ec5a",
      "IsHidden": "False"
    },
    {
      "Start": "a13f1362503c47928a0309b49dd8fd2f",
      "End": "1188136149c84843b81e8e00e48d41f8",
      "Id": "3da84d31e9734afe91604857f6314a47",
      "IsHidden": "False"
    },
    {
      "Start": "8bfaedec182340d1967f325c6dd5ae6c",
      "End": "5c4c90ff88704d3c962516d1a9f0b8af",
      "Id": "df355fe1e3ae4bafb72eef8b76390f47",
      "IsHidden": "False"
    },
    {
      "Start": "1886f880d7914b46955d99b2409247e9",
      "End": "a994a4158e6c4a6a824cc1ce28c56f1d",
      "Id": "50e70cbccfeb4111b548648fde19bf68",
      "IsHidden": "False"
    },
    {
      "Start": "1886f880d7914b46955d99b2409247e9",
      "End": "d2b9ff89c532462c97054283d0ff2dae",
      "Id": "790909c145034277b48badb9bdf7cd22",
      "IsHidden": "False"
    },
    {
      "Start": "1990ad4bad794ffa9728e9032df2ff41",
      "End": "a0cb7831455341609cfede5780a29bef",
      "Id": "e05bdb2f26c44008aa295b4918879f72",
      "IsHidden": "False"
    },
    {
      "Start": "2f60054033f543a98d950969066b6f32",
      "End": "07f46b5474234c4ca53a36cf9d2f3017",
      "Id": "293062d5fae0471eb9271429ffc38e0f",
      "IsHidden": "False"
    },
    {
      "Start": "2f60054033f543a98d950969066b6f32",
      "End": "6a37bb2bd7f74909b1f6cfa38e1a9046",
      "Id": "aa5286026eaa403a88bee46dda822c24",
      "IsHidden": "False"
    },
    {
      "Start": "fb4c5a7ae775417793835f7a6062bb73",
      "End": "e0521adc0cbd430bbff53c0ad8b25688",
      "Id": "12f6ee8ce2f44327a57578d7fccaea02",
      "IsHidden": "False"
    },
    {
      "Start": "8ac751397e98488bbdee0a343a4da789",
      "End": "77a402a9242b4de886c3e11ba39f9c5b",
      "Id": "cff217028cb94b5b9477f109c235c98c",
      "IsHidden": "False"
    },
    {
      "Start": "6b50033e54174eeebd9861efd66539ec",
      "End": "5b48e7037556458ab66a169a19e95abb",
      "Id": "8749f1a1ca0847a08222d999efe5909c",
      "IsHidden": "False"
    },
    {
      "Start": "3f4aef40bca94b4f8a7a741ecf0d0c92",
      "End": "1efa94d38f6f4ad0afe51d0de2401f57",
      "Id": "52ca40402b4f4fc484c752688e804a79",
      "IsHidden": "False"
    },
    {
      "Start": "23821c4078354485a278e53e83cb5fbe",
      "End": "5fbd4639ad714fc682ee9553dc67cb11",
      "Id": "4500bae8ad404729adf82be009a96627",
      "IsHidden": "False"
    },
    {
      "Start": "625ee7aa294b4b6eafe9561dd1b048d6",
      "End": "a41ec9816a534df6bbad68036d0814c4",
      "Id": "95363c0819854b3f86c42a0527491b7f",
      "IsHidden": "False"
    },
    {
      "Start": "feabd0480f444dafa94462b48d41e94b",
      "End": "d7552cd9e1b64f9681e609a7a795358d",
      "Id": "4cfd0323fde4412895f6b1a7c6c2ce99",
      "IsHidden": "False"
    },
    {
      "Start": "feabd0480f444dafa94462b48d41e94b",
      "End": "25c192dca64246dbbb3d97f1efc50099",
      "Id": "e2cf9656b501460287246d85e67a7812",
      "IsHidden": "False"
    },
    {
      "Start": "a48f2d52b77443b7bed1871f2f878d0a",
      "End": "36085a96c29f49bba10a62ca3cb568d8",
      "Id": "29b5fe0298c14a4d856de4d0225ccfb0",
      "IsHidden": "False"
    },
    {
      "Start": "9da422418bb4458d8f1a11b97141b8f2",
      "End": "9276cdb62e234adc80bf432da81f58e7",
      "Id": "5d1f446059e546488c6e2e1a59e4f9bc",
      "IsHidden": "False"
    },
    {
      "Start": "36268846570a4daeb7f7003a3919bb87",
      "End": "e2a524698fa64052904c2fb8dc8601e5",
      "Id": "6b0db926d5bd4a77854ec27d3cd92303",
      "IsHidden": "False"
    },
    {
      "Start": "36268846570a4daeb7f7003a3919bb87",
      "End": "47803a50c87d4749849b9c4a4cdf6024",
      "Id": "9be57e87f71c4465b57136d0df18cf58",
      "IsHidden": "False"
    },
    {
      "Start": "36268846570a4daeb7f7003a3919bb87",
      "End": "0b8c5909a5654980be8e80ae2b8b30f4",
      "Id": "2274ac81efce4107b40f0cd953039553",
      "IsHidden": "False"
    },
    {
      "Start": "1e4ae19ca04443b097a34b4b8b70c2aa",
      "End": "23d1e1d8cdfc4b36884602f98b88d0bb",
      "Id": "c9ad4500818c4ccdb0c3b05242f1a4ce",
      "IsHidden": "False"
    },
    {
      "Start": "1e4ae19ca04443b097a34b4b8b70c2aa",
      "End": "9641f7f0db6d4d99b0d49db0f04236c8",
      "Id": "64d4425bd42b4572882d42f1f544ccdc",
      "IsHidden": "False"
    },
    {
      "Start": "8122e80e069e40f9b239f5f51dbc33b6",
      "End": "8e08453aa034466996352bfd1fb6c4a3",
      "Id": "4c15e14237f84a0c915d36b3de48cb4f",
      "IsHidden": "False"
    },
    {
      "Start": "7b7f7ca4c62942d8ac9877a285c89679",
      "End": "beabdb6872a3404b83c5d611012d31af",
      "Id": "4aefcc61c4b34b739b05153b3dfa102a",
      "IsHidden": "False"
    },
    {
      "Start": "2867c3e9a4ac4e0291e28db7a18a0153",
      "End": "c9c45a7294684e7f9d7d15be578b45b5",
      "Id": "5671d40acb8a4cd0921238dd5008abfe",
      "IsHidden": "False"
    },
    {
      "Start": "2867c3e9a4ac4e0291e28db7a18a0153",
      "End": "f314e8a2c44247479669284b583ef653",
      "Id": "fbbdf66359434e5f979097f3abe34b07",
      "IsHidden": "False"
    },
    {
      "Start": "08c2edd2dbe945fa80c663677fa1b0a1",
      "End": "be421dc00bbf46aba2665140ff0c47a0",
      "Id": "13e4244a02fd4752be2effed3e55d8d4",
      "IsHidden": "False"
    },
    {
      "Start": "08c2edd2dbe945fa80c663677fa1b0a1",
      "End": "ca82f0bfd5e94f75ac39829887b5c086",
      "Id": "0ecb3a0cb0ad45828e77b45eca8ea00b",
      "IsHidden": "False"
    },
    {
      "Start": "b43d5a5ba0c042b4bcb86d92c5a73e3d",
      "End": "4c97fecfbb0e4eafb0fc67b069e2151a",
      "Id": "c858cacdd7194c3e876adb543a0ee626",
      "IsHidden": "False"
    },
    {
      "Start": "5f742fe6c5dd4a4c8687cc37806458a4",
      "End": "0758756035ac4bdf83513f1ef54210f2",
      "Id": "1c1c2b83659b442691e2179cc400611a",
      "IsHidden": "False"
    },
    {
      "Start": "3f870cf773f0424daad3731116bf3736",
      "End": "3338151f6d344c8f951bce401a060735",
      "Id": "aa9f97a03b8a49e2912cba6243211b9e",
      "IsHidden": "False"
    },
    {
      "Start": "3f870cf773f0424daad3731116bf3736",
      "End": "7c8cc882605c447781fd7a77ae4080e8",
      "Id": "70a8e8a541974529b80fcbc3f8fdc36c",
      "IsHidden": "False"
    },
    {
      "Start": "3f870cf773f0424daad3731116bf3736",
      "End": "62f723d6cc864cb8b99cb8f0c7a2d91f",
      "Id": "3c94352951d04ce6a279f10fea0099df",
      "IsHidden": "False"
    },
    {
      "Start": "cc63385d62c24d15b11734f3f4928b97",
      "End": "41b4d87d300b469b90dc996f24d969f8",
      "Id": "385b521df57e4b80a1fec6af361ba8a7",
      "IsHidden": "False"
    },
    {
      "Start": "cc63385d62c24d15b11734f3f4928b97",
      "End": "98a99171ca7f4fee9437d5b15cf9eda4",
      "Id": "ead7813e213a4a788720c0d687c0e535",
      "IsHidden": "False"
    },
    {
      "Start": "7ca2d3126c9e42bd8f7141da4e960db0",
      "End": "70091f040c4148cb8f0961ba54b972d7",
      "Id": "dc0cdab423d14cc39ca059c197b35b8f",
      "IsHidden": "False"
    },
    {
      "Start": "9f937532ceec41108cd2acedd229ff1a",
      "End": "43b015ce3c0446d28b277b79fd621002",
      "Id": "d0ff7b7fc9244c01901f39862a6c02e1",
      "IsHidden": "False"
    },
    {
      "Start": "ed54f5e66b484ddda66e0d4a7f84c334",
      "End": "b1cdd31faeae4764afe5c19f448120a2",
      "Id": "be4bd87b4580441b876f339099e93a70",
      "IsHidden": "False"
    },
    {
      "Start": "a3cde42477e84f27a2736dad26a265e5",
      "End": "e6294a82e04a4333a499c9592c00e669",
      "Id": "5652a2c7661848c7be6ad15e4a9dd8ee",
      "IsHidden": "False"
    },
    {
      "Start": "b10288d977f84266b832128414743028",
      "End": "bf4f3be218e047f899a7fede99d65c0a",
      "Id": "ff2b2b5d88ac44b1a329be65804b34ad",
      "IsHidden": "False"
    },
    {
      "Start": "ca301787bd3848a6bf892d15149bdc1d",
      "End": "2909f837cb7d496ca7ac1b62041ef2b3",
      "Id": "4d02aa7f52a44e5aa3c63ba88b14ad5f",
      "IsHidden": "False"
    },
    {
      "Start": "f2304b6bcb39470cafe943d549a5486a",
      "End": "13ee26123ec74de697e7cdf2dd1fd24c",
      "Id": "55200b952d494efc93ee6570c2bd1679",
      "IsHidden": "False"
    },
    {
      "Start": "7fac2447ca234c6fad5e16b27b99c3fa",
      "End": "95ce82c8ba014e7cb3c65d566daa4b8e",
      "Id": "fab5463680414f11b0aa4561caf48ab1",
      "IsHidden": "False"
    },
    {
      "Start": "87541dab270a4c739e7bc1f2e56e6f19",
      "End": "e424f9cdb9a24bc88181a178513180a0",
      "Id": "ab27c073bc8041ef9d6e0aa348d2495f",
      "IsHidden": "False"
    },
    {
      "Start": "26af500e34fd43dd84129be3a847237e",
      "End": "a7549442d9d0455e9467e80ea1b8ab99",
      "Id": "cc8ee4003147421f9488fd2fc396d334",
      "IsHidden": "False"
    },
    {
      "Start": "dc839dd2a5ba4eb19f9313a5afb8a88f",
      "End": "54ef04578ebe43a1aa5ac2f1995a778b",
      "Id": "ff683e6d6e2646bcb7e31f3c114a1774",
      "IsHidden": "False"
    },
    {
      "Start": "2905079bd172403fad5404b11ab1a4f5",
      "End": "0b8b2dd1768144149edd1444a9fc6f03",
      "Id": "31d383e4390d43949c6faeef82c8e39f",
      "IsHidden": "False"
    },
    {
      "Start": "c0884655d9854ba9be8a14de49307d01",
      "End": "b8d29abbcff8451d80ca80f4dff787f9",
      "Id": "2fc1ff7db04d461fa8fbb73ba3ed5a87",
      "IsHidden": "False"
    },
    {
      "Start": "9c19f4740c3c4b478509d02b1dc0bb8f",
      "End": "2f38578401ca4797a753cb6e1b2809e3",
      "Id": "d66bcce1cf7c42248299f941fed5cd51",
      "IsHidden": "False"
    },
    {
      "Start": "18dc369e45a648b0a549668d078ca2b7",
      "End": "79330206eeb74c868c17e4ad2e752902",
      "Id": "8013b34692024b8c9446bd6d26f179fd",
      "IsHidden": "False"
    },
    {
      "Start": "679bbfad1dc14065a9ccb54a1c1e3fec",
      "End": "d516fc81cc12492db191a56771662b17",
      "Id": "91a27e9fa11846c585ec35fe5ee7f35d",
      "IsHidden": "False"
    },
    {
      "Start": "679bbfad1dc14065a9ccb54a1c1e3fec",
      "End": "01717e78bbd7401ba8dca6126a4cae82",
      "Id": "baa4f13175ea4e3183c1f4f0fd6a6450",
      "IsHidden": "False"
    },
    {
      "Start": "0ab4be4754db4e81b755489022b18c8a",
      "End": "9eb8a15cc0364d819fac74592a233dbf",
      "Id": "baa24a016a9d4bb99db270c3446f7a95",
      "IsHidden": "False"
    },
    {
      "Start": "bfe9cc337b164cb3b7a98943720d7353",
      "End": "0e88289961fa4525b1eeb69382b0e3ae",
      "Id": "c38a6c8426754f0d88c5c6b9b4d18e56",
      "IsHidden": "False"
    },
    {
      "Start": "550854543a704b53979dd17e00d24e3e",
      "End": "69c3771b755a43f2b87cbdbbf49ff53f",
      "Id": "f02e651017f04647af58eff79b844d17",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -6515.9189453125,
      "EyeY": 14310.1796875,
      "EyeZ": 4787.3984375,
      "LookX": 15178.8671875,
      "LookY": -20518.00390625,
      "LookZ": -24586.357421875,
      "UpX": 0.20526467263698578,
      "UpY": 0.92050105333328247,
      "UpZ": -0.33248195052146912
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "b2a49b909bc541aeb001385b890bfea8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6007.7785474659995,
        "Y": -1172.9776313444561
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "97c54e52b6d24fe8bc68f1f5535565b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6364.7785474659995,
        "Y": -1172.9776313444563
      },
      {
        "Name": "Rooms By Status",
        "ShowGeometry": true,
        "Id": "dfee72e7cc844747b135c981fc877574",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9233.4131947327242,
        "Y": 5112.313337617974
      },
      {
        "Name": "Room.CoreCenterBoundary",
        "ShowGeometry": false,
        "Id": "211688b734bd41209dba730bad6261bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8414.62549129869,
        "Y": 5138.0802552383884
      },
      {
        "Name": "PolyCurve.ByJoinedCurves",
        "ShowGeometry": false,
        "Id": "1fa59893c2834090b96809dd740dce16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -8044.9105447356005,
        "Y": 5240.1564357709576
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "f0a071aa4b4b45a1a38beed1baf029b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8633.50101287706,
        "Y": 5491.8543055644132
      },
      {
        "Name": "전층 경간 면 생성",
        "ShowGeometry": true,
        "Id": "88677a05d98744a4ada829a0f58fcc8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15.067301593133152,
        "Y": -1183.7705211148934
      },
      {
        "Name": "DL 층별 정보(kN/m²)",
        "ShowGeometry": true,
        "Id": "b573abeeac714845bb1aa2c6615f3f34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -795.4153564370456,
        "Y": 718.73539569225557
      },
      {
        "Name": "전층 경간면 내부 등분선 찾기",
        "ShowGeometry": true,
        "Id": "d8b7cefba4d942fdb4b0995b1d4b353f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 316.7905890878115,
        "Y": -1245.2350058440634
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "84498cb015cf4ed48c71273d029f2953",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8581.4481666700649,
        "Y": 1943.3979463324947
      },
      {
        "Name": "0. 실행모드",
        "ShowGeometry": true,
        "Id": "49a74bd5d45d48ed991b03fb724ae6e7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9869.4597534631685,
        "Y": 916.3666779865805
      },
      {
        "Name": "concave_hull",
        "ShowGeometry": true,
        "Id": "0d22839ba4e54ad4b810e4df27687cfb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -321.8646384596363,
        "Y": -1358.802004643019
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "770d677e7a1d44f384bc1bd380c6b233",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5997.7400327066625,
        "Y": -489.95205423812854
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "1132aa09bbfe4b18bc908178c3de9028",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6358.7400327066625,
        "Y": -489.95205423812854
      },
      {
        "Name": "allCols",
        "ShowGeometry": true,
        "Id": "670b14e580c14f2197f7fffaf9705193",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5634.1643731854083,
        "Y": -489.95205423812854
      },
      {
        "Name": "toDict_allCols",
        "ShowGeometry": true,
        "Id": "dede280c133c40acb099f11f00d0f716",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3634.0446254746425,
        "Y": -319.46744258884087
      },
      {
        "Name": "getLevelsDict",
        "ShowGeometry": true,
        "Id": "83d28945b88647a18e1c648b417e808f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5035.1175978932461,
        "Y": -963.211043602686
      },
      {
        "Name": "toDict_allBeams",
        "ShowGeometry": true,
        "Id": "6f79eeb6bdc2403d813222c2c7013b9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3646.1780121177853,
        "Y": -924.58200746328976
      },
      {
        "Name": "get_frameNoDict(장축방향)",
        "ShowGeometry": true,
        "Id": "1d32b6df35d14f87a4e04e542e258462",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4795.1581472923617,
        "Y": -677.06553436507761
      },
      {
        "Name": "find_longitudinalAxis(건물의 장축방향 벡터)",
        "ShowGeometry": true,
        "Id": "bc29062fddea4a51a1ce6b0c7b28a71e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5267.284972735536,
        "Y": -655.93036797871287
      },
      {
        "Name": "longAxis",
        "ShowGeometry": true,
        "Id": "ed390b87b63f4aa0bf80c561ce54c9ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4449.8069782773027,
        "Y": -762.16387385403
      },
      {
        "Name": "shortAxis",
        "ShowGeometry": true,
        "Id": "c7e79d11f4714006979cacfbfb65a5e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4445.6449352401269,
        "Y": -600.27941924288211
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3512cf5aa683450f8eaeab5c0f4bf060",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5077.5459944548011,
        "Y": -1382.7442190862262
      },
      {
        "Name": "allCols",
        "ShowGeometry": true,
        "Id": "234f7d4e5f214bc988c01f8f6cb9f393",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4678.07340283255,
        "Y": -368.45024062117682
      },
      {
        "Name": "탄성계수",
        "ShowGeometry": true,
        "Id": "27fca69ce6a2433cb655dfb9fd4aa094",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5010.9697526457521,
        "Y": -1812.094105611571
      },
      {
        "Name": "콘크리트 강도 선택 (MPa)",
        "ShowGeometry": true,
        "Id": "6ca49a2c991c431f80920fca235e81e1",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9852.4676842044446,
        "Y": 1564.1519412247894
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7dbc102f4cae4b558c7c259d1cee4b68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -828.88557195676526,
        "Y": -1093.5326144896565
      },
      {
        "Name": "Element 별 하중srf 할당_frame",
        "ShowGeometry": true,
        "Id": "99238dde94e54e6988f0ac2ad90fb861",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 852.28503340403313,
        "Y": -801.567082763189
      },
      {
        "Name": "allGirdersDict",
        "ShowGeometry": true,
        "Id": "1fb0de46b77e4c90a43cbef4af5cb6c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 31.178611803194315,
        "Y": -731.76555887269012
      },
      {
        "Name": "DL 하중 값 계산",
        "ShowGeometry": true,
        "Id": "c3313e2050a0486b8144627463b3eff4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1457.8567486891909,
        "Y": -551.57186713148064
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fc0bb7b97efa4cee9b958ef9c5a94bb9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2162.7377779822586,
        "Y": 92.395999853072567
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "4d25aa8d87b74435ac4a749f0fb6bb07",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2335.0964828017509,
        "Y": -429.18691010950317
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "76261c18b24c4f949032a3c229967ab1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2930.13925053273,
        "Y": -265.676843012307
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "3f5e80071311457581b6263a3a2d485c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5764.3162554812834,
        "Y": -703.68939692859658
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "77355716e37d43cd849b1585cf474467",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5452.3162554812834,
        "Y": -669.86189692859671
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a567c6e866f8449dbd65d29ad8004a5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5198.3162554812834,
        "Y": -686.94814692859654
      },
      {
        "Name": "Dictionary.RemoveKeys",
        "ShowGeometry": true,
        "Id": "6f1ca965fe4a476d930d236583843989",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4154.3162554812834,
        "Y": -686.94814692859654
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "70e60bd531a64097b7a60c2a6d09d1a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3844.3162554812834,
        "Y": -669.46564692859647
      },
      {
        "Name": "Data.StringifyJSON",
        "ShowGeometry": true,
        "Id": "325a2ec57f6f434da4b4e5fb0d1300de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6088.3162554812834,
        "Y": -703.68939692859658
      },
      {
        "Name": "Dictionary.RemoveKeys",
        "ShowGeometry": true,
        "Id": "9a103d8aec6d47b6819d7042ea3c00c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4502.3162554812834,
        "Y": -686.94814692859654
      },
      {
        "Name": "Dictionary.RemoveKeys",
        "ShowGeometry": true,
        "Id": "9076d666cf614e479fb477fcf57e3f95",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4850.3162554812834,
        "Y": -686.94814692859654
      },
      {
        "Name": "최하단 기둥 지점조건 부여",
        "ShowGeometry": true,
        "Id": "e1662a72bde64978935c65ebb412b6c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -133.50552220002805,
        "Y": 93.803386110406109
      },
      {
        "Name": "javascriptPart",
        "ShowGeometry": true,
        "Id": "512a05c1bd764f3daa71c3bd3789bf09",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7950.6702784168292,
        "Y": -1788.560833699979
      },
      {
        "Name": "cssPart",
        "ShowGeometry": true,
        "Id": "964f79903b234e20b7310e1beebb01be",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7946.0229771539434,
        "Y": -1537.9607081257284
      },
      {
        "Name": "make_htmlStr__",
        "ShowGeometry": true,
        "Id": "1b441b8fa1b046d2bf46e40f5277bb87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7539.47650544886,
        "Y": -1365.21235951702
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e21e75097cd24652ad27db98fd19aa73",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7263.3655939631244,
        "Y": -1281.7873978679652
      },
      {
        "Name": "navHTML_Part",
        "ShowGeometry": true,
        "Id": "29f0a1fd5815420fae3a8fd2b1c493f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8219.5410535144638,
        "Y": -1401.0835859297856
      },
      {
        "Name": "Create HTML file and Open",
        "ShowGeometry": true,
        "Id": "50f753964398423db6a489753b327d5f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6951.8051045536376,
        "Y": -1130.1934549073544
      },
      {
        "Name": "Create JS file",
        "ShowGeometry": true,
        "Id": "a5eb0ff6135341a0b1114f3b143cd80b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6951.3655939631244,
        "Y": -1349.2873978679652
      },
      {
        "Name": "make_htmlStr",
        "ShowGeometry": true,
        "Id": "109be601447847c29d5896ee787c7028",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -6951.3655939631244,
        "Y": -1562.7873978679652
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "1ae21a8ccba240838e5f62787415e708",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8447.3843464177335,
        "Y": -1151.1001874182755
      },
      {
        "Name": "start Webserver",
        "ShowGeometry": true,
        "Id": "7ee76eb91d8b46698f3daab5719e02a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6952.4969288727762,
        "Y": -848.98563603661341
      },
      {
        "Name": "Set Port Number: 기본값-8500 (작동 오류 없다면 변경 금지)",
        "ShowGeometry": true,
        "Id": "14eed113613e4654a80635709f99cb88",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7594.5218112881339,
        "Y": -785.54968422669958
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "3a7e5a49982d4a90a41cac98681f21fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7853.8218656032986,
        "Y": -1037.1812400104106
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ae8a0e95c44e4ac7b0f1c248fa6ffe37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7687.0345312301242,
        "Y": 311.12922566625531
      },
      {
        "Name": "FileSystem.GetDirectoryContents",
        "ShowGeometry": true,
        "Id": "5fb9c95c02bf4ab593a27008cb50eca0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7687.0345312301242,
        "Y": 98.301725666255322
      },
      {
        "Name": "Directory From Path",
        "ShowGeometry": true,
        "Id": "6c38437c7af844ecb656a68486ce296c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8009.0345312301242,
        "Y": 98.301725666255322
      },
      {
        "Name": "moveToTempFolder",
        "ShowGeometry": true,
        "Id": "d851a9e56caf48cb9719d6b17d4d4dc6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7267.0345312301242,
        "Y": 355.30172566625532
      },
      {
        "Name": "값 있는 항목만 필터링",
        "ShowGeometry": true,
        "Id": "1aa0152446c04939b2fd2f194d3b821b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6096.257167750211,
        "Y": 447.05732257963592
      },
      {
        "Name": "Download폴더 경로",
        "ShowGeometry": true,
        "Id": "a236f78d50184453af3945a52da7cb8b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8325.0345312301251,
        "Y": 98.301725666255322
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "df436224246845aa8bbf408723609d33",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8009.0345312301242,
        "Y": 533.12922566625525
      },
      {
        "Name": "folderPath",
        "ShowGeometry": true,
        "Id": "f6be8f75e6e3433a84f974530b176bdf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7687.0345312301242,
        "Y": 533.30172566625538
      },
      {
        "Name": "filter the last HSD 파일",
        "ShowGeometry": true,
        "Id": "9253d39f2f364b5d9eef14a2ca0afeba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6949.0345312301242,
        "Y": 355.30172566625532
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a1384d430ef44419972fd96eb39eadf9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7687.0345312301242,
        "Y": 682.12922566625525
      },
      {
        "Name": "latest HSD",
        "ShowGeometry": true,
        "Id": "6c56dd6c983c46ebbc4ca505db793b0c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6395.1483531503563,
        "Y": 488.26119354514822
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fa85ebe69d3a4a0ab1efe64dbea0c04d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7587.8827682136016,
        "Y": 917.29428194389527
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "bce26fb86b8e4f39847a36c920cf9ea7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8864.855497109811,
        "Y": -389.50918815455179
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "eea3f32fa119476fac3be21a6fe2f881",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7423.09394997912,
        "Y": -979.05326711910061
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "716857638daa4d178ad6bcabcd494adc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5072.0315719742466,
        "Y": 718.73539569225454
      },
      {
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Id": "6265054058124e71ac70600186923e52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3926.0430768159167,
        "Y": 718.73539569225454
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fb5606478fac490b96192d6fd917d0d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5014.36362009362,
        "Y": -3036.63040244302
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a57e34cd8cc94c21b6f6b7a39a478ba1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3992.31390972399,
        "Y": -3036.63040244302
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a9f82b0568434805924c6972b44676cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5883.8008201839,
        "Y": -1555.4927852031612
      },
      {
        "Name": "하중분배결과파일 이름 생성",
        "ShowGeometry": true,
        "Id": "03655d38fc55463ca6c1516d9a800ba9",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 7302.5103024771815,
        "Y": -1287.1365116570603
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "66d2c27e6c0241ca948462a9c0506bc1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6023.3545494916516,
        "Y": -1143.785833585752
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "68b6eeb06f9e4e39a41bff7ce89d17ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6789.8617861710254,
        "Y": -389.34643002277994
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "36cefb107a5c4e0ba1c71a9d2cc5b848",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4976.1200984077,
        "Y": -2808.3176724467
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a0a83da8bb93440f944a16d2cc53b430",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5842.73974749218,
        "Y": -2808.3176724467
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b88b17e65e9748028ff671f38c9ca57e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5066.4490926707094,
        "Y": 1313.164078852973
      },
      {
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Id": "1de02dc5a9ab48098bb0e8c1a5c35385",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3920.4605975123795,
        "Y": 1313.164078852973
      },
      {
        "Name": "LL 하중 값 계산",
        "ShowGeometry": true,
        "Id": "f9c2a22d7b37402e84b657d0eb08d6aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1844.0293102760961,
        "Y": -426.4704588365
      },
      {
        "Name": "LL 층별 정보(kN/m²)",
        "ShowGeometry": true,
        "Id": "32458bc649bf4eac85a73ac65a40bb0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -760.0757558429118,
        "Y": 1321.0156129252148
      },
      {
        "Name": "allCols",
        "ShowGeometry": true,
        "Id": "aa997a130fed4f479435dc6be352b111",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 45.922725548129392,
        "Y": -352.36410310740132
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5a99da869d874dd4b3b72b16f7eb72d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5078.07692612194,
        "Y": 1656.9851393700435
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9f196c6cde4b434198e94b9cd63af915",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5077.9559437021107,
        "Y": 2021.2805599317692
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2ea7dd46ca95432a8dc4f5e90a6ec274",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2553.4144832830352,
        "Y": -1019.6256546165544
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "391b617204f842d2904a7cc0e6753ac9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2604.2325852589224,
        "Y": 426.17076785520828
      },
      {
        "Name": "1. 구조형식",
        "ShowGeometry": true,
        "Id": "aeb818053a804a8cbd97ec6a8f81210e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9798.6284421083274,
        "Y": 1287.0488987766196
      },
      {
        "Name": "loadPart",
        "ShowGeometry": true,
        "Id": "7933181f6d844810904e2f4de7016562",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8934.2343342881377,
        "Y": -901.18211190235957
      },
      {
        "Name": "framePart_미사용(js 에서 자동생성)",
        "ShowGeometry": true,
        "Id": "55d4da44d59747728c3e81d0084bd430",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9097.4721078852981,
        "Y": -1387.8715570514773
      },
      {
        "Name": "materialPart",
        "ShowGeometry": true,
        "Id": "fbca63399bbe4683b9e91079418dfba8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8940.0740648555147,
        "Y": -1144.8816671255227
      },
      {
        "Name": "allGirdersDicts",
        "ShowGeometry": true,
        "Id": "a45a2489a2854fd2a42fe555cc3ee2cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3252.3155884849275,
        "Y": -862.29855846487283
      },
      {
        "Name": "all Beams",
        "ShowGeometry": true,
        "Id": "069328be58ba4cfa8cff1b8174f071bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3235.495141327609,
        "Y": -1219.5839112862229
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4e3206674a054bd493a86a047713f78a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4866.8820719169962,
        "Y": 1348.6236204109221
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ef2dd3b5e2414ad8a0036a7c058ebc04",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 944.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "26a867b589784f87936bf616bd524613",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1091.132370410922
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "85e9c3560ba84b9f8675acf4b315050d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4542.8820719169962,
        "Y": 1348.6236204109221
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8eae6cebb549424ba06d76dff9983fa5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4230.8820719169962,
        "Y": 1382.4511204109222
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a691dd34b6104ab1b2df5811c312d8ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5830.8820719169962,
        "Y": 1311.4598704109221
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "93e031a10903451da1a02754815d8de1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5495.8820719169962,
        "Y": 1606.4598704109223
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b668ef0df73b4916835e10874a0691f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5120.8820719169962,
        "Y": 1640.2873704109222
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4437e757224c40d2a6081ab7014d7669",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1238.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "22c8849972a54b359b1a98d94d66c0fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1385.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5bf036b6676a46c982bbbc4bf7a0c66d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5830.8820719169962,
        "Y": 1900.4598704109221
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "bfd1965cad5c4988b3ed716b973318f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5830.8820719169962,
        "Y": 1606.4598704109221
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d3cea1ffdfa740e48f3df9b235400c32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1680.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ddaf55f66107407790f017113181a039",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1974.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0a71d2376e924881ab45824c329527b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1533.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "057859739ffe4fed995a397af706e0b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.8820719169962,
        "Y": 1827.132370410922
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "bcc59f662d42417390408b1fcbe1d6f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -502.97191529415613,
        "Y": -2058.893461295062
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f986f8bb0d2e46f993c6e41e3a9306e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3284.989710342687,
        "Y": 30.776001254599578
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "60d9f5bf3cc54476b7ce6fcaef87c424",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2572.8802817439428,
        "Y": -1419.9037996314792
      },
      {
        "Name": "add_AttachedGirderLength_toBeamDict",
        "ShowGeometry": true,
        "Id": "5cd85d0ecf13400286a2c3e843a4e72d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2602.2658087960726,
        "Y": -1117.99161444608
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "30e985b8b1f442ec925a0bfd6090ba7c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2442.5528427235658,
        "Y": -617.25288421641471
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "49e8aec4318b4471ad5dc74af5fca754",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -151.97191529415613,
        "Y": -2058.7209612950619
      },
      {
        "Name": "List.CountTrue",
        "ShowGeometry": true,
        "Id": "30ccdf1ddbc143709b7c5749c0e34dd8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 437.02808470584387,
        "Y": -2001.5484612950618
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "48e78d57bd764e8eacf27579bb473060",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2745.4294223896,
        "Y": -464.16668256718333
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "7c7a67ca3d8b4f9e91093a7048b12aba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 102.02808470584387,
        "Y": -2149.5484612950618
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "048580436c5d4902bd88b1cd652c6a9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 437.02808470584387,
        "Y": -2149.5484612950618
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "05f91b0e8f8d45049ae491408971d0b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -756.97191529415613,
        "Y": -2104.393461295062
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7193ea5fb41f4ca1abb836039f7bc736",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5052.1049047225015,
        "Y": 462.67611512401845
      },
      {
        "Name": "String.Split",
        "ShowGeometry": true,
        "Id": "ba57bc3e18884edeb47a5d03ba356104",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4487.8780752386456,
        "Y": 464.66212197446384
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2f669ccbadd44e239949ea8901958b83",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4677.2074073091226,
        "Y": 545.79983075647829
      },
      {
        "Name": "dict_forSlabBln",
        "ShowGeometry": true,
        "Id": "1b897a9d99b4463ebc8254c371d9fce0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3689.633087542134,
        "Y": 422.19126428520065
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d87abb3e919c43f9928af1c5ae62ee72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5378.442264389807,
        "Y": 14.939881468142971
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "dfbe734bdd974a888c474c6989052d52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3338.8707147217388,
        "Y": -567.362515841055
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9080d86677934dd7870dc014dbb3b9a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8425.9798340522339,
        "Y": 295.87157687313095
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "dfe209aea9104aec9ade9eabf532b62f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9143.076091748233,
        "Y": 290.79404693042477
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "82c1adbaeac84ee4bbd96e2e1d30954b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8763.2072350237686,
        "Y": 489.52973638063042
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "436ee12540ef4c4c82c2bcbbde3773c1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9524.9145978743054,
        "Y": 306.46719727912944
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e7567ab324b24a22a7a8fe90fd271298",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9858.3738700004942,
        "Y": 749.53133021435451
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "674059d006f24411818c06084dfc4f85",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9855.28380699534,
        "Y": 7.1461767104563592
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0b60930c5f434bf590f23ff7e6c95d22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7353.4785785620725,
        "Y": 309.14077130119733
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8d9be76aac1b4175a6236438f33ad9e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7607.4785785620725,
        "Y": 326.22702130119728
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "8b93eb3623914589906a7f57d62cbf41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7919.4785785620725,
        "Y": 292.3995213011973
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2654cc78151a4a26b434070fee6c30ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9851.99064357829,
        "Y": 311.95498786378869
      },
      {
        "Name": "add_sectionProperties",
        "ShowGeometry": true,
        "Id": "f246c0b1390e454fabed22f60896d46d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1887.9156190593221,
        "Y": -1014.8534750143946
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "bfa3de554cf24700ac59926331ef8f8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2402.3438070885286,
        "Y": -2020.3413141729266
      },
      {
        "Name": "add_divSegment_Info",
        "ShowGeometry": true,
        "Id": "3a532b60e40f4663a9a44e11ab75dac5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2952.1007807239284,
        "Y": -944.57557292189892
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d22b5c286d964befbfa198e55c9ba181",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1544.9156190593221,
        "Y": -997.93972501439464
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "8005e085d18149aea924b43e5c1b6d7a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2139.9156190593221,
        "Y": -1014.8534750143946
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "3dd601f03be84e929ec8d01f61986d53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1169.9156190593221,
        "Y": -1031.7672250143946
      },
      {
        "Name": "materialPropDict",
        "ShowGeometry": true,
        "Id": "62643f67de184bbbbd6c34e1e991f750",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4703.5110618458866,
        "Y": -1886.1972144344213
      },
      {
        "Name": "항복강도",
        "ShowGeometry": true,
        "Id": "c9bfb6e870a347dda9752ade8a9aac46",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5003.08294652391,
        "Y": -1977.0626158489431
      },
      {
        "Name": "포아송 수",
        "ShowGeometry": true,
        "Id": "c97eae4cc07c41e188eb28ba91a657d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4937.4815694287927,
        "Y": -1674.5664761643502
      },
      {
        "Name": "add_sectionProperties",
        "ShowGeometry": true,
        "Id": "4ee5593128894da3856130cb041551ed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2369.8794987369479,
        "Y": -249.81873248411512
      },
      {
        "Name": "add_divSegment_Info_columns",
        "ShowGeometry": true,
        "Id": "a5b74dec8e964fe8aaafcd783c6738dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3151.5858348985225,
        "Y": -253.11188682098634
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1a4998808d6741a9a61153c7ea7967bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7277.803067658795,
        "Y": -5091.98420260803
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "cbea69d3757949b696720746af796a9d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7277.803067658795,
        "Y": -4943.98420260803
      },
      {
        "Name": "filter the last HSD 파일 and read",
        "ShowGeometry": true,
        "Id": "e9265f5863fe409490fd43acd05d21c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7642.4318427424441,
        "Y": -5151.9831838932141
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "80e639c7b3234db7b718f6c712f48e12",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7990.1950561162084,
        "Y": -4847.8130832984134
      },
      {
        "Name": "chk_memberForce",
        "ShowGeometry": true,
        "Id": "62eb6bd250c645b1ac13400a0556e1b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8814.6111124078743,
        "Y": -4948.2067542415834
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e778ad449afd4b6c9d19543b3ab6ce3b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8452.2917150997473,
        "Y": -4418.3566249260139
      },
      {
        "Name": "Data.ParseJSON",
        "ShowGeometry": true,
        "Id": "27ba954708b14c4188af4f7dc6d3589e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8423.1950561162084,
        "Y": -4847.6405832984128
      },
      {
        "Name": "allElems",
        "ShowGeometry": true,
        "Id": "67e94a1605b1490ab0693f7b957c0a9d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5574.93177877703,
        "Y": -918.82734281586374
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "586fd5cad8084aed89d737f00de64cec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4987.03617934873,
        "Y": -2658.47912661279
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7d7006c42cdf4bd199285b90914b0edc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5048.2923112758854,
        "Y": -2676.5521665072215
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "611f0bb778114792bb60c42591b4a38f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7538.0918278482395,
        "Y": -4029.8287100961056
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "66f3a625690c4576a091cdc2ab05bae6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8891.4412357727069,
        "Y": -4026.9144867910459
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "7847723570b74261a329b2628b2b415a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9251.6235697906777,
        "Y": -3924.8638284238764
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "856e35e22132441fa171e914959b6285",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8958.12279069513,
        "Y": -3822.1994453370016
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8361cc2f2a40430caa7f08b9874213d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9219.44894443179,
        "Y": -4672.3361502288353
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "df92f71d47f644e7b48643b129ec40e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2839.2538690720257,
        "Y": -1625.0851791212235
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a277afd5888f4f38ae77c00d15958356",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7322.4558369596043,
        "Y": -5268.7860687783095
      },
      {
        "Name": "NG 부재 컬러링",
        "ShowGeometry": true,
        "Id": "70bb6280a2564e68805d95a21277d35a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9740.7061717846773,
        "Y": -4745.1713845793693
      }
    ],
    "Annotations": [
      {
        "Id": "f5eec8440e6345c1ba1754eae7207ca2",
        "Title": "HTML Export",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "50f753964398423db6a489753b327d5f",
          "964f79903b234e20b7310e1beebb01be",
          "512a05c1bd764f3daa71c3bd3789bf09",
          "a5eb0ff6135341a0b1114f3b143cd80b",
          "109be601447847c29d5896ee787c7028",
          "1b441b8fa1b046d2bf46e40f5277bb87",
          "7ee76eb91d8b46698f3daab5719e02a9",
          "e21e75097cd24652ad27db98fd19aa73",
          "29f0a1fd5815420fae3a8fd2b1c493f5",
          "1ae21a8ccba240838e5f62787415e708",
          "14eed113613e4654a80635709f99cb88",
          "3a7e5a49982d4a90a41cac98681f21fe",
          "eea3f32fa119476fac3be21a6fe2f881"
        ],
        "HasNestedGroups": false,
        "Left": -8457.3843464177335,
        "Top": -1904.560833699979,
        "Width": 1786.5792418640958,
        "Height": 1252.5751976633655,
        "FontSize": 72.0,
        "InitialTop": -1788.560833699979,
        "InitialHeight": 1148.0111494732794,
        "TextblockHeight": 106.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "2c4ccbe4fa354d25a137d1dae2f016c5",
        "Title": "Read Load Inform from Json",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ae8a0e95c44e4ac7b0f1c248fa6ffe37",
          "5fb9c95c02bf4ab593a27008cb50eca0",
          "6c38437c7af844ecb656a68486ce296c",
          "d851a9e56caf48cb9719d6b17d4d4dc6",
          "a236f78d50184453af3945a52da7cb8b",
          "df436224246845aa8bbf408723609d33",
          "f6be8f75e6e3433a84f974530b176bdf",
          "a1384d430ef44419972fd96eb39eadf9",
          "9253d39f2f364b5d9eef14a2ca0afeba"
        ],
        "HasNestedGroups": false,
        "Left": -8335.0345312301251,
        "Top": -17.698274333744678,
        "Width": 1639.0000000000009,
        "Height": 831.82749999999987,
        "FontSize": 72.0,
        "InitialTop": 98.301725666255322,
        "InitialHeight": 728.82749999999987,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4bc639f7b3a34cceb89fcfa0bc4bd6c3",
        "Title": "global area",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "fb5606478fac490b96192d6fd917d0d4",
          "a57e34cd8cc94c21b6f6b7a39a478ba1",
          "36cefb107a5c4e0ba1c71a9d2cc5b848",
          "a0a83da8bb93440f944a16d2cc53b430",
          "586fd5cad8084aed89d737f00de64cec",
          "7d7006c42cdf4bd199285b90914b0edc"
        ],
        "HasNestedGroups": false,
        "Left": -5024.36362009362,
        "Top": -3152.63040244302,
        "Width": 11055.1033675858,
        "Height": 626.15127583023013,
        "FontSize": 72.0,
        "InitialTop": -3036.63040244302,
        "InitialHeight": 523.15127583023013,
        "TextblockHeight": 106.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "fba14f3805c243bd8e4f32b7bc2d8934",
        "Title": "DL input",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b573abeeac714845bb1aa2c6615f3f34",
          "716857638daa4d178ad6bcabcd494adc",
          "6265054058124e71ac70600186923e52",
          "7193ea5fb41f4ca1abb836039f7bc736",
          "ba57bc3e18884edeb47a5d03ba356104",
          "2f669ccbadd44e239949ea8901958b83",
          "1b897a9d99b4463ebc8254c371d9fce0"
        ],
        "HasNestedGroups": false,
        "Left": -5082.0315719742466,
        "Top": 306.19126428520065,
        "Width": 4521.6162155372012,
        "Height": 544.54413140705492,
        "FontSize": 72.0,
        "InitialTop": 422.19126428520065,
        "InitialHeight": 441.54413140705492,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "53378eac889a4237b189c145a8915a59",
        "Title": "LL input",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b88b17e65e9748028ff671f38c9ca57e",
          "1de02dc5a9ab48098bb0e8c1a5c35385",
          "32458bc649bf4eac85a73ac65a40bb0a"
        ],
        "HasNestedGroups": false,
        "Left": -5076.4490926707094,
        "Top": 1197.164078852973,
        "Width": 4548.3733368277972,
        "Height": 255.85153407224175,
        "FontSize": 72.0,
        "InitialTop": 1313.164078852973,
        "InitialHeight": 152.85153407224175,
        "TextblockHeight": 106.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5e381e5b24f54bb0ae690de5b7e97453",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "bcc59f662d42417390408b1fcbe1d6f1",
          "49e8aec4318b4471ad5dc74af5fca754",
          "30ccdf1ddbc143709b7c5749c0e34dd8",
          "7c7a67ca3d8b4f9e91093a7048b12aba",
          "048580436c5d4902bd88b1cd652c6a9b",
          "05f91b0e8f8d45049ae491408971d0b6"
        ],
        "HasNestedGroups": false,
        "Left": -766.97191529415613,
        "Top": -2222.5484612950618,
        "Width": 1473.0,
        "Height": 353.0,
        "FontSize": 36.0,
        "InitialTop": -2149.5484612950618,
        "InitialHeight": 293.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "325ac334c9e34571a412df4c4d1eb5c7",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "4e3206674a054bd493a86a047713f78a",
          "ef2dd3b5e2414ad8a0036a7c058ebc04",
          "26a867b589784f87936bf616bd524613",
          "85e9c3560ba84b9f8675acf4b315050d",
          "8eae6cebb549424ba06d76dff9983fa5",
          "a691dd34b6104ab1b2df5811c312d8ae",
          "93e031a10903451da1a02754815d8de1",
          "b668ef0df73b4916835e10874a0691f4",
          "4437e757224c40d2a6081ab7014d7669",
          "22c8849972a54b359b1a98d94d66c0fa",
          "5bf036b6676a46c982bbbc4bf7a0c66d",
          "bfd1965cad5c4988b3ed716b973318f5",
          "d3cea1ffdfa740e48f3df9b235400c32",
          "ddaf55f66107407790f017113181a039",
          "0a71d2376e924881ab45824c329527b3",
          "057859739ffe4fed995a397af706e0b9"
        ],
        "HasNestedGroups": false,
        "Left": 4220.8820719169962,
        "Top": 871.132370410922,
        "Width": 2230.0,
        "Height": 1234.9999999999998,
        "FontSize": 36.0,
        "InitialTop": 944.132370410922,
        "InitialHeight": 1174.9999999999998,
        "TextblockHeight": 63.0,
        "Background": "#FF848484"
      },
      {
        "Id": "8e8d39e3d25544fbb7d9cd1dbbc76401",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "9080d86677934dd7870dc014dbb3b9a0",
          "dfe209aea9104aec9ade9eabf532b62f",
          "82c1adbaeac84ee4bbd96e2e1d30954b",
          "436ee12540ef4c4c82c2bcbbde3773c1",
          "e7567ab324b24a22a7a8fe90fd271298",
          "674059d006f24411818c06084dfc4f85",
          "0b60930c5f434bf590f23ff7e6c95d22",
          "8d9be76aac1b4175a6236438f33ad9e8",
          "8b93eb3623914589906a7f57d62cbf41",
          "2654cc78151a4a26b434070fee6c30ff"
        ],
        "HasNestedGroups": false,
        "Left": 7343.4785785620725,
        "Top": -65.853823289543641,
        "Width": 2780.8052284332671,
        "Height": 947.38515350389821,
        "FontSize": 36.0,
        "InitialTop": 7.1461767104563592,
        "InitialHeight": 887.38515350389821,
        "TextblockHeight": 63.0,
        "Background": "#FF848484"
      },
      {
        "Id": "7546f83289ef4f72a03eb921f38390ef",
        "Title": "소속 입면 정보도 딕셔너리 추가\n\n외부기둥만(판별은 기둥 로케이션 라인 전체 바운딩 박스로)\n내부기둥은 정보 없음으로\n\nNside\nEside\nSside\nWside",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": -1773.8585867161628,
        "Top": 90.04484653552629,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "d2b7a0d4dfab4628823f87ea610cef4c",
        "Title": "boundary 없는 부재는 아예 노드 속성에 boundary 키가 없도록",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": -147.62622624494031,
        "Top": 24.8972033710844,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 6303.7251739354178,
    "Y": 1026.8675442877843,
    "Zoom": 0.673594531072636
  }
}