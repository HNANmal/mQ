{
  "Uuid": "1d6d431a-e8c4-48aa-8b91-a874ff2542a8",
  "IsCustomNode": false,
  "Description": "Auto Calculating the Quantities of each Element As per the Family List",
  "Name": "[H_PAB.RT.Q2]_Revit 물량 산출_[3.1.7]_debug",
  "ElementResolver": {
    "ResolutionMap": {
      "DesignScript.Builtin.Dictionary": {
        "Key": "DesignScript.Builtin.Dictionary",
        "Value": "DesignScriptBuiltin.dll"
      }
    }
  },
  "Inputs": [
    {
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Name": "1. Family List 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "..\\..\\..\\Teams Received\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4_남양주 DH room.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    },
    {
      "Id": "aae6ee369697433d96978d6f0a38227c",
      "Name": "6. 건물명 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "Please enter Building Name before running ",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "de4566fde19f484c81cdf869933392fc",
      "Name": "2. 물량산출모드(입찰 / 실행)",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "입찰",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "6295313e8a4a48bc83e02079e2a9eb8e",
      "Name": "0. Set Port Number: 기본값-8000 (작동 오류 없다면 변경 금지)",
      "Type": "string",
      "Type2": "string",
      "Value": "8000",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "ecccb4f11a2543e29cb666423f4f697e",
      "Name": "4. Total BOQ sheet 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "..\\etc\\물량산출테스트용\\debug\\20240902_khh\\Total BOQ_blank.xlsx",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    },
    {
      "Id": "faebcd6f41f046dba22561644139d393",
      "Name": "5. Total BOQ 내 시트명 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "(AR) BOQ View (Working)",
      "Description": "Creates a string.",
      "SelectedIndex": 0
    },
    {
      "Id": "bbbc75a0c0604f1280f428ef65ce021e",
      "Name": "3. 토공산출모드(온통 / 개별)",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "산출안함",
      "Description": "A dropdown menu with customizable values.",
      "SelectedIndex": 0
    },
    {
      "Id": "8ee8758f2bef45ec8c10f0fe6fad8ad2",
      "Name": "0.1. Select GL",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "GL",
      "Description": "Select a level in the active document",
      "SelectedIndex": 3
    },
    {
      "Id": "8ab3accc47f6452a95570634f44f527d",
      "Name": "1. Family List 경로 입력",
      "Type": "string",
      "Type2": "string",
      "Value": "..\\etc\\2024_물량산출 마무리\\A.1_플랜트건축설계팀_BIM 팀 표준 Family List_Rev.6_2024.11.07_강한호_MK.xlsx.xlsm",
      "Description": "Allows you to select a file on the system to get its file path.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [
    {
      "Id": "53192363f9da457ca86140d19351bdfb",
      "Name": "Export to Total BOQ",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Runs an embedded Python script."
    },
    {
      "Id": "26bb7af517714509b46280eff1a62d2e",
      "Name": "Watch",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualize the node's output"
    },
    {
      "Id": "0da12c5111af4d42ba679f28be3cd825",
      "Name": "Watch",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualize the node's output"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "1250bd18102c4ebaac9950d60dac8849",
      "Inputs": [
        {
          "Id": "f2b7450af5914cbf8a28c2a092e6a190",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "912753a782b84f598e120e936fffbd58",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef get_all_BIC():\r\n\r\n    db = [\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Floors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Roofs,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Walls,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFoundation,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralColumns,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_StructuralFraming,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Ceilings,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Doors,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Windows,\r\n    Autodesk.Revit.DB.BuiltInCategory.OST_Stairs,\r\n    #Autodesk.Revit.DB.BuiltInCategory.OST_Railings,\r\n    ]\r\n    return db\r\n    \r\ndef get_allElems(doc):\r\n    bics = get_all_BIC()\r\n    \r\n    def getElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType().ToElements()\r\n        return res\r\n\r\n    def getRailElems(x):\r\n        collector = FilteredElementCollector(doc)\r\n        res = collector.OfCategory(x).WhereElementIsNotElementType()\r\n        return res\r\n\r\n    res = map(getElems, bics)\r\n#    res = getRailElems(Autodesk.Revit.DB.BuiltInCategory.OST_RailingSystemRail)\r\n    return res\r\n\r\n\r\nOUT = get_allElems(doc)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
      "Inputs": [
        {
          "Id": "08594b729317483fab0ab869358cdb3c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4d9d60debe6406cace5eb687f712858",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 441,
      "SelectedString": "OST_StairsRailing",
      "NodeType": "ExtensionNode",
      "Id": "d78f3dfc768541ab8490b53194e174c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdc68e6596d64c1bb2ad17af850a8a64",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
      "Inputs": [
        {
          "Id": "ae38fed72c0a434eb235268bfba22c03",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07eba95685e249a0a3188444eec253fe",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
      "Inputs": [
        {
          "Id": "efbd6851497a4681a114ca7842d95e6a",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2d45870ecc9f4742810ae2af861ad07b",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c329e42f144540938189475395a4a425",
          "Name": "list2",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9825547c3fc14efcaa6e0a83253c082d",
          "Name": "list3",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea90dca9236c4c19a28da5b5f7a76fcf",
          "Name": "list4",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fac716a5b9a34f8296c2dd982c72b3fd",
          "Name": "list5",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266640a8b58449a48603af36addb1282",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
      "Inputs": [
        {
          "Id": "c4d740fa206e4ab3b53ba148e9727e8f",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8871f8fef5b841e484fe65aa92aecb9c",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2e3869f91c64b06ab4cff0e2c816de0",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da624c3834b64df4a29198439fca082e",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16f6a93146ee4557a8eec29cac4eb344",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "caccad700bd84d8e8cb198c7fe1545aa",
      "Inputs": [
        {
          "Id": "8d8f529204cd48a5a2210b85d94be686",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb3a2510c5934129baf50771f5bb29a9",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\Teams Received\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4_남양주 DH room.xlsx",
      "InputValue": "..\\..\\..\\Teams Received\\(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4_남양주 DH room.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "51b4738620874fe885b1b5ecce1e49b7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e3d41cbea388406e9b31fca8184f2a13",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "76e75c1cd00342eeb418e14c2410b8f4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f98969ee45ea4cce8921b553ad57fbc0",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"WM-AR\"\n,\"산출기준\"\n,\"0.Room\"\n,\"1.Floors\"\n,\"2.Roofs\"\n,\"3.Walls_Ext\"\n,\"3.Walls_Int\"\n,\"4.St_Fdn\"\n,\"5.St_Col\"\n,\"6.St_Framing\"\n,\"7.Ceilings\"\n,\"8.Doors\"\n,\"9.Windows\"\n,\"10.Stairs\"\n,\"11.Railings\"\n,\"12.Generic\"\n,\"13.Manual_Input\"\n];",
      "Id": "64985def907747329221585392bfc414",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "414cd2a5762448afbc839c742fe3c056",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ExportToExcel@string,string,int,int,var[][],bool,bool",
      "Id": "3a2291d54fa74970b0cacd8a3a8a08b8",
      "Inputs": [
        {
          "Id": "c2327385dc4d4427ad017aefe187b6f3",
          "Name": "filePath",
          "Description": "File representing the Excel workbook\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f39659b145d0462482073c7655fe3582",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "99b7a172bab04fcf9e908e78fd92eaf3",
          "Name": "startRow",
          "Description": "Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "26d7414229104d838c6c46f04092e46f",
          "Name": "startColumn",
          "Description": "Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "908bb9ba4c4445618470abf4e49c4100",
          "Name": "data",
          "Description": "Data to write to the spreadsheet\n\nvar[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "bc26711cf2d84b4faf73917768d70b24",
          "Name": "overWrite",
          "Description": "Toggle to clear spreadsheet before writing\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "457260c062b340eeaab5b5dedbfbc540",
          "Name": "writeAsString",
          "Description": "Toggle to switch between writing Excel file as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1543c714eb7542f6bf73df28c1912c26",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Write data to a Microsoft Excel spreadsheet. Data is written by row with sublists to be written in successive rows. Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell A1. Null values and empty lists are written to Excel as empty cells. This node requires Microsoft Excel to be installed.\n\nData.ExportToExcel (filePath: string, sheetName: string, startRow: int, startColumn: int, data: var[][], overWrite: bool = false, writeAsString: bool = false): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "file_path;",
      "Id": "79390c9ce7774e469399c480c2fd9540",
      "Inputs": [
        {
          "Id": "9dbf8321072e4f908ecbde55c81f7322",
          "Name": "file_path",
          "Description": "file_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "503b900bdeca41cab06a5c0fc631915b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "file_path;",
      "Id": "e4bace56c16d462b8e637e17ad1a1046",
      "Inputs": [
        {
          "Id": "a7b566a5dc8f4652beec90894a8864ea",
          "Name": "file_path",
          "Description": "file_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eadab2f114774b74a1560381727f3f3b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "2524f0f864744ce88dfa2ab2d9d3e61d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7191a4fd8af14082850d9315469da15b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_groupBy_Sheet_WM;",
      "Id": "92a5d0c5dcc842d7b250f2421b0731ad",
      "Inputs": [
        {
          "Id": "c79113d8d2ea47778ae5078a46ce8c0e",
          "Name": "dict_groupBy_Sheet_WM",
          "Description": "dict_groupBy_Sheet_WM",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e530bf1d15934dbba20b223f51a76214",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport operator\r\nfrom itertools import groupby\r\nimport copy\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n# Place your code below this line\r\nspecKeys = [\r\n    \"Work Category-L1\", \"Work Category-L2\" ,\"Work Category-L3\",\r\n    \"Spec. 1- L4\" ,\"Spec. 2- L5\"\r\n    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\r\n    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\r\n    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\r\n]\r\n\r\ndef extractCalcResult(elemDicts, specKeys):\r\n    res = []\r\n    for d in elemDicts:\r\n        wms = d[\"wms\"][\"wmSpecs\"]\r\n        for wm in wms:\r\n            #keys = [\"SheetName\", \"rIDX\", \"Work Master Code\", \"Gauge Code\", \"wmSpecs\", \"Family Type Name\", \"calcResult\"]\r\n            keys = [\"rIDX\", \"Work Master Code\", \"GaugeCode\", \"Quantity\"]\r\n            vals = list(map(lambda x: wm[x],keys))\r\n            k_v = list(zip(keys, vals))\r\n            res_d = dict(k_v)\r\n            if \"Description\" in wm.Keys:\r\n                res_d[\"Description\"] = wm[\"Description\"]\r\n            else:\r\n                res_d[\"Description\"] = \"\"\r\n            res_d[\"wmcANDgauge\"] = \"\".join([wm[\"Work Master Code\"],wm[\"GaugeCode\"]])\r\n            res_d[\"UoM\"] = wm[\"Unit\"]\r\n            res_d[\"wmSpecs\"] = list(map(lambda x: wm[x], specKeys))\r\n            res.append(res_d)\r\n        \r\n    return res\r\n\r\ndef make_dict_groupBy_WM(elemDicts, specKeys):\r\n    extractedDicts = extractCalcResult(elemDicts, specKeys)\r\n    sortedDicts_WMC = sorted(extractedDicts, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    grpDicts_WMC = groupby(sortedDicts_WMC, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    \r\n    res = []\r\n    for k, g in grpDicts_WMC: \r\n        wmCode = k\r\n        gg = copy.deepcopy(list(g))\r\n        #res.append(gg)\r\n        qtts = map(lambda x: x[\"Quantity\"] if isinstance(x[\"Quantity\"],float) or isinstance(x[\"Quantity\"], int) else 0, gg)\r\n        calcSum = round(sum(qtts),3)\r\n        wmSpecs = gg[0][\"wmSpecs\"]\r\n        catStr = \"_\".join([wmSpecs[0],wmSpecs[1]])        \r\n        \r\n        specOnly = list(filter(lambda x: x!=0, wmSpecs))[3:]\r\n        addSpec = gg[0][\"Description\"]\r\n        dict_res = {\r\n            \"catStr\": catStr,\r\n            \"Work Master Code\": wmCode,\r\n            \"Gauge Code\": gg[0][\"GaugeCode\"],\r\n            \"Description\": wmSpecs[2],\r\n            \"Spec.\": \"\\n\".join(specOnly),\r\n            \"Additional Spec.\": addSpec,\r\n            \"calcVal\": calcSum,\r\n            \"UoM\": gg[0][\"UoM\"]\r\n            }\r\n        res.append(dict_res)\r\n    \r\n    \r\n    return res\r\n\r\n#extDicts = extractCalcResult(elemDicts)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = make_dict_groupBy_WM(elemDicts, specKeys)\r\n#OUT = sorted(set(map(lambda x: x[\"Work Master Code\"], extDicts)))",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f12f2f24ce254bd0baef14f26c5d20e9",
      "Inputs": [
        {
          "Id": "eb38296ae8b4424f892c47d4c8380597",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d9f7652d7dcd49818455cfcb11afd4d5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "545bdda03ce34cbf8f380aa09996affe",
      "Inputs": [
        {
          "Id": "60314121b72e4091a067f4ad720e1648",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "809aab676bdd45759176cd7fc1b7287c",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e88f8bd2a3704b26b0a47f1a4af42085",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c46c0fce7ef4f3b9d77f0c79a6d570a",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5bac32700234c6d9ed167d8d9c8f586",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(AR) BOQ\";\n\"(AR) BOQ View (Working)\";\nfalse;",
      "Id": "23c16e6f54c54461a94198d996b688b8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bec0a729815c4636a7c8dd749bfb5ffe",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f5dbe0a62bfd4b11a10665f2f4ac73e8",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3eed733cf254e9e8fc6ec552d579635",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "cb8eb6bb001d4e018998c1f81063a7b3",
      "Inputs": [
        {
          "Id": "ca3839e498cc41deb8e9225ab7ab8210",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e30bb663437641e092989a1db00f22eb",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wm_sheetDatas;",
      "Id": "14f3ccaaff4b40d6995625fe77a4fefc",
      "Inputs": [
        {
          "Id": "5a51bd26662d40dcbea5dde4d5dc927d",
          "Name": "wm_sheetDatas",
          "Description": "wm_sheetDatas",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9793226d86ad4dec83f83405e2b78590",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wm_sheetDatas;",
      "Id": "e1f7183e17d94ac6b722d8c8f5f42ae7",
      "Inputs": [
        {
          "Id": "164cc3dbe41947008d17ec3b96752e69",
          "Name": "wm_sheetDatas",
          "Description": "wm_sheetDatas",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "165f0d564f744d70a5b4740966b0fd64",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wm_sheetDatas;",
      "Id": "6689bfc92b614a86a2438579264ab559",
      "Inputs": [
        {
          "Id": "52ab3e2461644e05a68049cd998f0783",
          "Name": "wm_sheetDatas",
          "Description": "wm_sheetDatas",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "230540f2a2b143639ffacdbb9dc21cc1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "dcbac945a42f4a5c9a9db85369fb5958",
      "Inputs": [
        {
          "Id": "c9e1a9717b414fb18cba11de5a217a51",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "15939b39f28f4e619a0eb5412fcc19b8",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8bd85b9cebae40d887ecf33249bfa9ea",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "3+8;",
      "Id": "abf63584b5df484fa09c861a33e2a423",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "56887f75eaa240b19fa038a1fe3641c0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "0a5e14b22e144bed8451ebf583eb117a",
      "Inputs": [
        {
          "Id": "e5be3df534fc4ffca7597213d53ae45a",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "524b1b7f02034b7e9f83fd908cc91185",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65c451db8acc4de497ba72e61d8cd1ed",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "6;",
      "Id": "0de826304a0c4eeb88bf431965d3fbff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "25895fe974cc42bc9d72458f7dfe7d2c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "353906790eac4dbe9265acc4fd59f260",
      "Inputs": [
        {
          "Id": "a4bfa9cbcd0b41e78735db0e5ca3876c",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9e3824f6d5f54568850402f597fa43b7",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "e861b848a856496cbce58b3351868c08",
      "Inputs": [
        {
          "Id": "e4473f11a1094475b798c856c23211f3",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "200e8c0696ef4ed5a750d77b90d8adb2",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type\";\n\"Type Name\";",
      "Id": "b8bb7074d1474d5c817d440222fe7c73",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "89c4346d0ca240129b219859161d732e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "546a1d2d4b4b42559624cd48ac1ea2de",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a6525529e2854c5da74f8737df2462da",
      "Inputs": [
        {
          "Id": "02e0bb5b9d0e457ebd53e48eca839e1d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ff046ebd624422dad4be5c1cb3a9e98",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b41720919fd0439ea0dd87f71b67080e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
      "Inputs": [
        {
          "Id": "bee976de5cac45d9a7729a1dad8b487d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08cf3f9b3e5d43e48be4ee2445de11d1",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "343c269326d242598a644214bc9fd722",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Contains@var[]..[],var[]..[]",
      "Id": "ff9036ffe34e498e92682212d56492b0",
      "Inputs": [
        {
          "Id": "2e0e9ab5640c43a492b1a15323d3445b",
          "Name": "list",
          "Description": "List to search in\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b1b3d9a6071e4c09a2b8469bc8792426",
          "Name": "item",
          "Description": "Item to look for\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5dce84b2c7754a2bbef894ea1de56dd5",
          "Name": "bool",
          "Description": "True if list contains item, false if it doesn’t",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given list contains the given item. This function searches through the sublists contained in it.\n\nList.Contains (list: var[]..[], item: var[]..[]): bool"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom functools import reduce\r\nfrom functools import partial\r\nfrom string import ascii_lowercase\r\nimport itertools\r\nfrom itertools import chain\r\nimport re\r\n    \r\n#################################Module For Functional Programing#############################################\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\ndef find_IsInStr(target, str):\r\n    if target == None or str == None:\r\n        pass\r\n    else:\r\n        res = target in str\r\n        return res\r\n        \r\ndef find_IsInList(List, str):\r\n    if str == None or List == None:\r\n        pass\r\n    else:\r\n        res = str in List\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    #endidxs_tmp= list(map(lambda x: x[0],res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n    \r\ndef find_range_by_columnItem_discrim(db, col_idx, 판별항목):\r\n    tdb = list(map(lambda x: x[col_idx], db))\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    res = list(filter(lambda x: find_IsInList(판별항목, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,res))\r\n    #endidxs_tmp= list(map(lambda x: x[0],res))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb]\r\n    famTypeNames = list(map(lambda x: x[1],res))\r\n    famTypeNamesIdxs = list(map(lambda x: x[0],res))\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,res))\r\n    rangeEndIdxs = endidxs\r\n    result = dict(zip(famTypeNames, zip(famTypeNamesIdxs, zip(rangeSttIdxs,rangeEndIdxs))))\r\n    return result\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nbd_name = IN[0]\r\ndescr판별항목 = IN[1]\r\n판별항목lv1 = descr판별항목[0]\r\n판별항목lv2 = descr판별항목[1]\r\ndb = IN[2]\r\n\r\n\r\n# Place your code below this line\r\ndef Is_newSheet(Sheet):\r\n    \r\n    hdrs_withIdx = dict(list(find_headersAtSheet(Sheet).items()) + list(find_headers_Building(Sheet, bd_name).items()))\r\n    datasOnWMCodeCol = list(map(lambda x: x[hdrs_withIdx[\"Work Master Code\"]], Sheet))\r\n    \r\n    p = re.compile('\\w{8}-\\w{5}')\r\n    IsNewSheet = not(any(list(map(lambda x: p.match(str(x)), datasOnWMCodeCol))))\r\n    \r\n    \r\n    return [IsNewSheet,datasOnWMCodeCol]\r\n    \r\ndef find_headersAtSheet(Sheet):\r\n    headers_Sheet = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(Sheet[2])))\r\n    res = dict(headers_Sheet)\r\n    #del res[\"_\"]\r\n    \r\n    return res\r\n    \r\ndef find_headers_Building(Sheet, bd_name):\r\n    headers_bd = map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(Sheet[3])))\r\n    headers_targetBD = list(filter(lambda x: x[0] == bd_name, headers_bd))\r\n    res = {}\r\n    res[\"targetBD\"] = headers_targetBD[0][1]\r\n    return res\r\n\r\ndef find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목):\r\n    return find_range_by_columnItem_discrim(Sheet, hdrs_withIdx[\"Description\"], 판별항목)\r\n\r\ndef get_DataOnRangesAtSheet(Sheet):\r\n    \r\n    hdrs_withIdx = dict(list(find_headersAtSheet(Sheet).items()) + list(find_headers_Building(Sheet, bd_name).items()))\r\n    rgs_v_lv1 = list(map(lambda x: x[1], find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목lv1).values()))\r\n    rgs_v_lv2 = list(map(lambda x: x[1], find_rangesAtSheet(Sheet, hdrs_withIdx, 판별항목lv2).values()))\r\n    \r\n    idxs_v_lv1 = list(map(lambda x: range(x[0],x[1]+1), rgs_v_lv1))\r\n\r\n    datas_lv1 = []\r\n    col_datas = list(map(lambda x: x[hdrs_withIdx[\"Description\"]], Sheet))\r\n    for rg in idxs_v_lv1:\r\n        lv1_str = col_datas[rg[0]-1]\r\n        tmp = []\r\n        for i in rg:\r\n            tmp.append([i, lv1_str, col_datas[i]])\r\n        \r\n        datas_lv1.append(tmp)\r\n\r\n    datas_lv2 = []\r\n    for rg in datas_lv1:\r\n        tmp = []\r\n        for idx,v in enumerate(rg):\r\n            if v[2] == None:\r\n                tmp.append([v[0],v[1],tmp[idx-1][2]])\r\n            else:\r\n                tmp.append(v)\r\n        datas_lv2.append(tmp)\r\n\r\n    flatten_res = list(chain(*datas_lv2))\r\n    rres = itertools.groupby(flatten_res, lambda x: [x[1], x[2]])\r\n    \r\n    res = {}\r\n    for k, g in rres:\r\n        #print(list(g))\r\n        removedfirstelem_g = list(g)[1:]\r\n        res[\"_\".join(k)] = [removedfirstelem_g[0][0],removedfirstelem_g[-1][0]]\r\n        #res[\"_\".join(k)] = removedfirstelem_g\r\n    \r\n    return res\r\n\r\n\r\nhdrs_withIdx = dict(list(find_headersAtSheet(db).items()) + list(find_headers_Building(db, bd_name).items()))\r\n\r\nif Is_newSheet(db)[0]:\r\n    OUT = hdrs_withIdx, [Is_newSheet(db)[0],get_DataOnRangesAtSheet(db)]\r\nelse:\r\n    OUT = hdrs_withIdx, Is_newSheet(db)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6d3257a7ae1544ba96260a2930df41a0",
      "Inputs": [
        {
          "Id": "e40fc391bb9543069e39578990171d11",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c86c20b170cf41b2b9cfee070d24dc41",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec0e917339cb4f81875e476c63e9f5d3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a21d79dc4e546c7a5d930f015a1ccf9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "description판별항목1;",
      "Id": "1d1c6adab25c4ce38795f6d70084638b",
      "Inputs": [
        {
          "Id": "48dce4cc0b854bd69f8199d1288aeec9",
          "Name": "description판별항목1",
          "Description": "description판별항목1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "958299a111524c228236ad61aa0bf66e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "86d4c756923b4ec5a7a76f44031313e3",
      "Inputs": [
        {
          "Id": "b6b668c063784cf0ba5e742521351658",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e51c34b755b4b5daebc49a04c834a02",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be1b029e33894bd0902651bb82065169",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "6;",
      "Id": "36b72e613f054f51ab44d4a659a11baf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2a2d5ca4703c4ef890eef6aa7c03a78b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "522eba1415564c619ea3a722c3bfca63",
      "Inputs": [
        {
          "Id": "85ac0d8fca71462086880054318c5da1",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "1713810eee684d02934f951dc7ba675d",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b345d4e40bdc4e6593a996aa4cb30453",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "78f0730f98164cf88c95031451db6a2e",
      "Inputs": [
        {
          "Id": "830fdb6b17c24e5e9b88bcb80c215549",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fd49bd91c8404815a9c1a36fc411c667",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "5+8;",
      "Id": "f8862fff8dc647619582f6b8e6003793",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "729953a1355f4222b333b4899fd62973",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Please enter Building Name before running ",
      "Id": "aae6ee369697433d96978d6f0a38227c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2ecfaa19c334eddb1d809fd5b9c21b7",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "description판별항목2;",
      "Id": "6790ac16e9864c6282b9f0a28e4bac80",
      "Inputs": [
        {
          "Id": "1519fd64dcb748a8bf5caf1a1c21ec4f",
          "Name": "description판별항목2",
          "Description": "description판별항목2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "426cf7e80e224c1489ed86b4ea071aee",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "8066549a4a9b47df80e48559f550e5c6",
      "Inputs": [
        {
          "Id": "893113c989264cd19431bbb81823b560",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5241a20caa8f481a94fc7be2332e76fc",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f41c17b57dc4486791d293b996225179",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import groupby\r\nfrom itertools import chain\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\nIsNewSheet = IN[0][0]\r\ninputDatas = IN[0][1]\r\nwmsDicts = list(filter(lambda x: x[\"calcVal\"]!=\"\" ,IN[1]))\r\n# Place your code below this line\r\n\r\ndef get_wmsGrped_sorted_idxed(rangeDicts, wmsDicts):\r\n    wmsSorted = sorted(wmsDicts, key=lambda x: x[\"Work Master Code\"])\r\n    wmsGrped = groupby(wmsDicts, lambda x: x[\"catStr\"])\r\n    wmsGrped_sorted = []\r\n    \r\n    for k,v in wmsGrped:\r\n        grp_sorted = sorted(list(v), key=lambda x: x[\"Work Master Code\"])\r\n        stt_idx = rangeDicts[k][0]\r\n        length_grp = len(grp_sorted)\r\n        idxs = range(stt_idx, stt_idx+length_grp)\r\n        zip_grp_idxs = list(zip(idxs, grp_sorted))\r\n        for i in zip_grp_idxs:\r\n            d = i[1]\r\n            d[\"rIDX\"] = i[0]\r\n        \r\n        wmsGrped_sorted.append(grp_sorted)\r\n        \r\n    wmsGrped_sorted_idxed = list(chain(*wmsGrped_sorted))\r\n    return wmsGrped_sorted_idxed\r\n\r\ndef get_wmsGrped_sorted_idxed_(rangeDicts, wmsDicts):\r\n    wmsSorted = sorted(wmsDicts, key=lambda x: x[\"Work Master Code\"])\r\n    wmsGrped = groupby(wmsDicts, lambda x: x[\"catStr\"])\r\n    wmsGrped_sorted = []\r\n    \r\n    for k,v in wmsGrped:\r\n        grp_sorted = sorted(list(v), key=lambda x: x[\"Work Master Code\"])\r\n        \r\n        stt_idx = rangeDicts#[k][0]\r\n#        length_grp = len(grp_sorted)\r\n#        idxs = range(stt_idx, stt_idx+length_grp)\r\n#        zip_grp_idxs = list(zip(idxs, grp_sorted))\r\n#        for i in zip_grp_idxs:\r\n#            d = i[1]\r\n#            d[\"rIDX\"] = i[0]\r\n#        \r\n        #wmsGrped_sorted.append(grp_sorted)\r\n        wmsGrped_sorted.append(stt_idx)\r\n#        \r\n    wmsGrped_sorted_idxed = list(chain(*wmsGrped_sorted))\r\n    return wmsGrped_sorted_idxed\r\n\r\ndef match_DictWithIdx(datasOnWMCodeCol, wmsDicts):\r\n    new_wmsDicts = []\r\n    idxWithDatasOnWMCode = enumerate(datasOnWMCodeCol)\r\n    for d in wmsDicts:\r\n        if d[\"Work Master Code\"] in datasOnWMCodeCol:\r\n            d[\"rIDX\"] = datasOnWMCodeCol.index(d[\"Work Master Code\"])\r\n            new_wmsDicts.append(d)\r\n        else:\r\n            pass\r\n    #res = new_wmsDicts\r\n    return new_wmsDicts\r\n\r\n# Assign your output to the OUT variable.\r\nif IsNewSheet:\r\n    rangeDicts = inputDatas\r\n    res = get_wmsGrped_sorted_idxed(rangeDicts, wmsDicts)\r\nelse:\r\n    datasOnWMCodeCol = inputDatas\r\n    res = filter(lambda x: x[\"calcVal\"] != \"\", match_DictWithIdx(datasOnWMCodeCol, wmsDicts))\r\n\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "cf52cd359968431c954ef0c1c105f09b",
      "Inputs": [
        {
          "Id": "c65df92cac4c49448f02fb3db90aca10",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d6a579e11fc46ff81e2a20afbd033ad",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fc0b74d5401541c0bc827a65e85ad1a1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import groupby\r\n\r\nimport DSOffice\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nfilePath = IN[0]\r\nsheetName = IN[1]\r\nhdrs_withIdx = IN[2]\r\nIsNewSheet = IN[3][0]\r\ndictList = IN[4]\r\n\r\n# Place your code below this line\r\nexportToExcel = DSOffice.Data.ExportToExcel\r\n#print(hdrs_withIdx)\r\n\r\nhdrsColIdxs = [\r\n        hdrs_withIdx[\"Work Master Code\"],\r\n        hdrs_withIdx[\"Gauge Code\"],\r\n        hdrs_withIdx[\"Description\"],\r\n        hdrs_withIdx[\"Spec.\"],\r\n        hdrs_withIdx[\"Additional Spec.\"],\r\n        hdrs_withIdx[\"Reference to\"],\r\n        hdrs_withIdx[\"UoM\"],\r\n        hdrs_withIdx[\"targetBD\"],\r\n            ]\r\n\r\ndef writeToNewSheet(dictList):\r\n    dictList_grped = groupby(dictList, lambda x: x[\"catStr\"])\r\n    \r\n    dictList_grpedList = []\r\n    for k,grp in dictList_grped:\r\n        dictList_grpedList.append(list(grp))\r\n    \r\n    def writeExcel(keys, startColhdr, grpedList):\r\n        for i in dictList_grpedList:\r\n            #keys = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n            startCol = hdrs_withIdx[startColhdr]\r\n            startRow = i[0][\"rIDX\"]\r\n    \r\n            datas = list(zip(*map(lambda y: map(lambda x: x.get(y), list(i)), keys)))\r\n            #res.append(datas)\r\n            exportToExcel(filePath, sheetName, startRow, startCol, datas)\r\n    \r\n    #keys1 = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n    keys1 = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", \"Reference to\", \"UoM\"]\r\n    #keys2 = [\"UoM\"]\r\n    keys3 = [\"calcVal\"]\r\n    \r\n    writeExcel(keys1,\"Work Master Code\", dictList_grpedList)\r\n    #writeExcel(keys2,\"UoM\", dictList_grpedList)\r\n    writeExcel(keys3,\"targetBD\", dictList_grpedList)\r\n    \r\n    return dictList_grpedList\r\n    \r\ndef writeToExistSheet(dictList):\r\n    dictList_grped = groupby(dictList, lambda x: x[\"catStr\"])\r\n    \r\n    dictList_grpedList = []\r\n    for k,grp in dictList_grped:\r\n        dictList_grpedList.append(list(grp))\r\n    \r\n    def writeExcel_(keys,startColhdr, grpedList):\r\n        #res = []\r\n        for i in dictList_grpedList:\r\n            #keys = [\"Work Master Code\", \"Gauge Code\", \"Description\", \"Spec.\", \"Additional Spec.\", ]\r\n            startCol = hdrs_withIdx[startColhdr]\r\n            startRow = i[0][\"rIDX\"]\r\n    \r\n            datas = list(zip(*map(lambda y: map(lambda x: x[y], list(i)), keys)))\r\n            #res.append(datas)\r\n            exportToExcel(filePath, sheetName, startRow, startCol, datas)\r\n        #return res\r\n        \r\n    def writeExcel(key,startColhdr, dictList):\r\n        all_rIDXs = list(map(lambda x: x[\"rIDX\"], dictList))\r\n        min_rIDX = min(all_rIDXs)\r\n        max_rIDX = max(all_rIDXs)\r\n        all_ranges = range(min_rIDX, max_rIDX+1)\r\n        \r\n        startCol = hdrs_withIdx[startColhdr]\r\n        startRow = min_rIDX\r\n        datas = []\r\n        for i in all_ranges:\r\n            if i in all_rIDXs:\r\n                datas.append([dictList[all_rIDXs.index(i)][key]])\r\n            else:\r\n                datas.append([\"\"])\r\n        \r\n        exportToExcel(filePath, sheetName, startRow, startCol, datas)\r\n        \r\n        #return datas\r\n        \r\n    key = \"calcVal\"\r\n    \r\n        \r\n    writeExcel(key,\"targetBD\", dictList)\r\n    \r\n    return dictList_grpedList\r\n# Assign your output to the OUT variable.\r\n\r\nif IsNewSheet:\r\n    OUT = writeToNewSheet(dictList)\r\nelse:\r\n    OUT = writeToExistSheet(dictList)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "53192363f9da457ca86140d19351bdfb",
      "Inputs": [
        {
          "Id": "7d852923babc430fa1d5c8efa5cdde9f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a14711119634cb3be308f0f81f8e3c2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b24df086c9204ccd9af377fabb5536aa",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17c5e50fcdc64d49a30e6884d4f4a9e0",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1f9bfde3838746b5aef0d8d9f60bfcfe",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f86a6da172074bfd8722962d69214204",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "filePath;\nsheetName;",
      "Id": "29337ae8d2c94d488ebdc03de0a16ad6",
      "Inputs": [
        {
          "Id": "b3d503584349478bbf2ae823fb683bbc",
          "Name": "filePath",
          "Description": "filePath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "399e8b25f47e4897801b7e6852d96550",
          "Name": "sheetName",
          "Description": "sheetName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e01618b63ab412fb696093fc85c9255",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5fa1591c5a8147109642e4944b57fda1",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];\ni[1];\n//구간 rIdx;",
      "Id": "008b88f58bd548188e4d5668e106d9e3",
      "Inputs": [
        {
          "Id": "8b0d91f729ea4f20a3c1bf9833a4541c",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fc23a31f123c47b1adef5af41e816119",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d4b003d1c5b3428d9e1f450217d0acdd",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "754f8c62f313424485c7342eacc1cd4a",
      "Inputs": [
        {
          "Id": "60cd8c44df3e49219b09c56a53c466de",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "970a442dbaf948f7a5500cce67b1c1e9",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "file_path;",
      "Id": "7f5e0c25b593402094aa786410d940b1",
      "Inputs": [
        {
          "Id": "2b498ab79f364a9484154fdff6c711c7",
          "Name": "file_path",
          "Description": "file_path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "307fe63d49c345e5a2a5992ddedc85e2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport operator\r\nfrom itertools import groupby\r\nfrom itertools import chain\r\nimport copy\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\nfamTypeDict = IN[1]\r\nwmSpecs_headers = IN[2]\r\nwmDicts = list(famTypeDict.values())\r\n#wmDicts = list(chain(*famTypeDict.values()))\r\n# Place your code below this line\r\ndef merge_dicts(*dict_args):\r\n    \"\"\"\r\n    Given any number of dictionaries, shallow copy and merge into a new dict,\r\n    precedence goes to key-value pairs in latter dictionaries.\r\n    \"\"\"\r\n    result = {}\r\n    for dictionary in dict_args:\r\n        result.update(dictionary)\r\n    return result\r\n\r\ndef getUnique_wmDicts(wmDicts):\r\n    headers = wmDicts[0].Keys\r\n    #headers = wmDicts[0].keys()\r\n    wmspec_headers = list(filter(lambda x: \"Work C\" in x or \"Spec\" in x, headers))\r\n    noNeedKeys = [\"Family Type Name\", \"Quantity\", \"rIDX\", \"Dynamo 물량산출식\", \"SheetName\", \"Q'ty Cal Type Tag\"]\r\n    def refineDicts(dicts, noNeedKeys):\r\n        dicts_refined = []\r\n        for d in dicts:\r\n            new_d = {}\r\n            keys,vals = d.Keys,d.Values\r\n            keys_new = set(keys) - set(wmspec_headers)\r\n            items = zip(keys, vals)  \r\n            for k,v in items:\r\n                if k not in noNeedKeys+wmspec_headers:\r\n                    new_d[k] = v\r\n                    #new_d[\"wmSpecs\"] = \"\"\r\n                    new_d[\"wmSpecs\"] = list(map(lambda x: d[x], wmspec_headers))\r\n            dicts_refined.append(new_d)\r\n        return dicts_refined\r\n    #wmDicts_refined = refineDicts(wmDicts, noNeedKeys)\r\n        \r\n    #allWMcodes = list(map(lambda x: x[\"Work Master Code\"], wmDicts_refined))\r\n    allWMcodes = list(map(lambda x: map(lambda y: y[\"Work Master Code\"], x[\"wmSpecs\"]), wmDicts))\r\n    uniqueWMcodes = set(allWMcodes)\r\n    \r\n    def getUnique(dicts, tgt_key):##\r\n        res = []\r\n        tmp = []\r\n        for d in dicts:\r\n            for wm in d[\"wmSpecs\"]:\r\n                if wm[tgt_key] not in tmp:\r\n                    tmp.append(wm[tgt_key])\r\n                    res.append(wm)\r\n        return res\r\n    \r\n    unique_wmDicts = getUnique(wmDicts, \"Work Master Code\")\r\n\r\n        \r\n    return unique_wmDicts\r\n    \r\n\r\n    \r\ndef reformatDicts(wmDicts, wmSpecs_headers):\r\n    res = []\r\n    \r\n    for wm in wmDicts:\r\n        keys = [\"Work Master Code\", \"GaugeCode\"]#, \"wmSpecs\"]\r\n        vals = list(map(lambda x: wm[x],keys))\r\n        items = list(zip(keys, vals))\r\n        res_d = dict(items)\r\n        \r\n        #res_d[\"wmSpecs\"] = list(map(lambda x: wm[x], wmSpecs_headers[:-2]))\r\n        res_d[\"wmSpecs\"] = list(filter(lambda x: x!=0 or x!=\"\",map(lambda x: wm[x], wmSpecs_headers[:-2])))\r\n        \r\n        if \"Description\" in wm.Keys:\r\n            res_d[\"Description\"] = wm[\"Description\"]\r\n        else:\r\n            res_d[\"Description\"] = \"\"\r\n        res_d[\"wmcANDgauge\"] = \"\".join([str(wm[\"Work Master Code\"]),str(wm[\"GaugeCode\"])])\r\n        res_d[\"UoM\"] = wm[\"Unit\"]\r\n        res.append(res_d)\r\n        \r\n    return res\r\n\r\ndef make_dict_groupBy_WM(wmDicts, elemDicts):\r\n    unique_wmDicts = getUnique_wmDicts(wmDicts)\r\n    reformated_dicts = reformatDicts(unique_wmDicts, wmSpecs_headers)\r\n    sortedDicts_WMC = sorted(reformated_dicts, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    grpDicts_WMC = groupby(sortedDicts_WMC, key=operator.itemgetter(\"wmcANDgauge\"))\r\n    \r\n    wm_valDicts = {}\r\n    for x in elemDicts:\r\n        wm_valDicts[x[\"Work Master Code\"]] = x[\"calcVal\"]\r\n    \r\n    \r\n    res = []\r\n    for k, g in grpDicts_WMC: \r\n        wmCode = k\r\n        gg = copy.deepcopy(list(g))\r\n        wmSpecs = gg[0][\"wmSpecs\"]\r\n        catStr = \"_\".join([wmSpecs[0],wmSpecs[1]])\r\n        #catStr = gg[0][\"catStr\"]\r\n        #specOnly = list(filter(lambda x: x!=0 or x!=\"\", wmSpecs))[3:]\r\n        specOnly = list(filter(lambda x: x!=0 and x!=\"\", wmSpecs))[3:]\r\n        addSpec = gg[0][\"Description\"]\r\n        if wm_valDicts.get(k):\r\n            dict_res = {\r\n                \"catStr\": catStr,\r\n                \"Work Master Code\": wmCode,\r\n                \"Gauge Code\": gg[0][\"GaugeCode\"],\r\n                \"Description\": wmSpecs[2],\r\n                \"Spec.\": \"\\n\".join(specOnly),\r\n                \"Additional Spec.\": addSpec,\r\n                \"calcVal\": wm_valDicts[k],\r\n                \"UoM\": gg[0][\"UoM\"]\r\n                #\"wmSpecs\": wmSpecs,\r\n                }\r\n        else:\r\n            dict_res = {\r\n                \"catStr\": catStr,\r\n                \"Work Master Code\": wmCode,\r\n                \"Gauge Code\": gg[0][\"GaugeCode\"],\r\n                \"Description\": wmSpecs[2],\r\n                \"Spec.\": \"\\n\".join(specOnly),\r\n                \"Additional Spec.\": addSpec,\r\n                \"calcVal\": \"\",\r\n                \"UoM\": gg[0][\"UoM\"]\r\n                #\"wmSpecs\": wmSpecs,\r\n                }\r\n        res.append(dict_res)\r\n#        res.append(wmSpecs)\r\n    \r\n    \r\n    return res\r\n\r\n#unique_wmDicts = getUnique_wmDicts(wmDicts)\r\n#reformated_dicts = reformatDicts(unique_wmDicts)\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = make_dict_groupBy_WM(wmsList)\r\nOUT = make_dict_groupBy_WM(wmDicts, elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "756a672a7cef4e9e91d11c4c0279ab0a",
      "Inputs": [
        {
          "Id": "22a14fba8f194143a2aaef45fb512ae7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc4ee34aba664fcb8efda003708f0790",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "064b58308cd644dba7a8246aa17fe116",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ae84853d9e043699e6f4ca77f9d976d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "famTypeDic;",
      "Id": "7edcee4a274841a8a889d4611bbeb8fa",
      "Inputs": [
        {
          "Id": "ffdd5032a2794b3bae4463025d2b84f9",
          "Name": "famTypeDic",
          "Description": "famTypeDic",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34eb968354d842c4bc94b81aab940dda",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport datetime\r\nimport shutil\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\norigin_pathStr = IN[0]\r\nIsNewSheet = IN[1][0]\r\n# Place your code below this line\r\n\r\ndef copy_fromNewSheet():\r\n    now = datetime.datetime.now()\r\n    #strList = origin_pathStr.split('.')\r\n    strList = origin_pathStr.split('\\\\')\r\n    path = '\\\\'.join(strList[:-1])\r\n    fileName = strList[-1]\r\n    fileNameList = fileName.split('.')\r\n    \r\n    add_str = now.strftime(\"%m%d-%I%M%S\")\r\n    add_res = \"\".join([\"_\",add_str,\".\"])\r\n    fileNameList.insert(1, add_res)\r\n    fileName_res = \"\".join(fileNameList)\r\n    res = path + '\\\\' + fileName_res\r\n    \r\n    source = origin_pathStr\r\n    destination = res\r\n    shutil.copyfile(source, destination)\r\n    \r\n    return res\r\n\r\n# Assign your output to the OUT variable.\r\n\r\nif IsNewSheet:\r\n    OUT = copy_fromNewSheet()\r\nelse:\r\n    OUT = origin_pathStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "11184f601ab1440f92b47f1dcda08f3f",
      "Inputs": [
        {
          "Id": "3adefa72172f4d0e94c423abf3e4051d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81b00a4bed47445eb92bccff5549b468",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1afdad0b610045f49d9918563aa08dd5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Steam Turbine Building\";\n\"Gate House\";",
      "Id": "5b26f33fb50d4441b2dc495fc028521e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "871eba6d44af48eb94735a90f1d0516c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da8bedff5a7c46ada2e2a1efbfdcaecf",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n#collector1 = FilteredElementCollector(doc)\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\ncalcMode = IN[0]\r\nelemDicts = IN[1]\r\n\r\n\r\n# Place your code below this line\r\n\r\ndef calcFormula_each_WmSpecs(elemDicts, calcMode):\r\n    calc_key = \"실행_물량산출식\" if calcMode==\"실행\" else \"입찰_물량산출식\"\r\n    \r\n    def calcFormula_dict(d):\r\n        e = d[\"Elem\"]\r\n        wmSpecss = d[\"wms\"][\"wmSpecs\"]\r\n        if \"Post_Sym_Val Dict\" in d[\"wms\"].Keys:\r\n            postSymValDict = d[\"wms\"][\"Post_Sym_Val Dict\"]\r\n            Sym_Vals = list(zip(postSymValDict.Keys, list(map(str, postSymValDict.Values))))\r\n            sortedSym_Vals = sorted(Sym_Vals, key=lambda x: len(x[0]), reverse=True)\r\n            for i in wmSpecss:\r\n                applyFormula = str( i[calc_key] )\r\n                if not applyFormula.startswith('_'):\r\n                    substFormula = applyFormula\r\n                    for x in sortedSym_Vals:\r\n                        substFormula = substFormula.replace(*x)\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ substFormula\r\n                    try:\r\n                        i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n                    except:\r\n                        i[\"Quantity\"] = \"'\"+ substFormula\r\n                else:\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ applyFormula\r\n                    i[\"Quantity\"] = \"\"\r\n        else:\r\n            for i in wmSpecss:\r\n                try:\r\n                    applyFormula = str( i[calc_key] )\r\n                    substFormula = applyFormula\r\n                    i[\"applyFormula\"] = \"'\"+ applyFormula\r\n                    i[\"substFormula\"] = \"'\"+ substFormula\r\n                    i[\"Quantity\"] = round(eval(substFormula.strip('=')),3)\r\n                except:\r\n                    i[\"Quantity\"] = 0\r\n        return d\r\n    res = []\r\n    for d in elemDicts:\r\n        res.append(calcFormula_dict(d))\r\n    \r\n    return res\r\n\r\n\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = calcFormula_each_WmSpecs(elemDicts, calcMode)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0160cc09c3474815a65506ace3948e4f",
      "Inputs": [
        {
          "Id": "c8a7a0a48b804152912220118b24908f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "51dd00ffd7304563a68c380857a8ce47",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4835f9063384b88aee9393fbb8d6ba8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\n\r\ndef tmp_switchEarthworkFormula(elemDict):\r\n    \r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] in [\"=Exca\", \"=Back\", \"=Disp\"]:\r\n                i[k] = \"_tbd\"\r\n        \r\n    return elemDict\r\n\r\ndef tmp_switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(tmp_switchEarthworkFormula, elemDicts))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = tmp_switchEarthworkFormula_allDicts(elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5ba4a873bf1d434b910b34378934a374",
      "Inputs": [
        {
          "Id": "adf136f6f97a49d889443ca716141d60",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7f1ed869682c4a4594c6a1912c0d7cdc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "입찰",
          "Item": "입찰"
        },
        {
          "Name": "실행",
          "Item": "실행"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "입찰",
      "NodeType": "ExtensionNode",
      "Id": "de4566fde19f484c81cdf869933392fc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32798e643200441ba50e47158bac8958",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "04d37a7ec47d4dbf9637d86f3be06945",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "33996f8f1fcd4bf0b9b14097a32771e9",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\ni[\"wms\"][\"wmSpecs\"][a],\ni[\"wms\"][\"wmSpecs\"][b],\ni[\"wms\"][\"wmSpecs\"][\"Description\"],\ni[\"wms\"][\"wmSpecs\"][\"applyFormula\"],\ni[\"wms\"][\"wmSpecs\"][\"substFormula\"],\ni[\"wms\"][\"wmSpecs\"][\"Quantity\"],\ni[\"wms\"][\"wmSpecs\"][\"Unit\"],\ni[\"wms\"][\"wmSpecs\"][\"rIDX\"]\n];",
      "Id": "6886a36f3590498ea5f564bc7bd347fb",
      "Inputs": [
        {
          "Id": "06744272548f4cac9a2093e6966a3066",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e53ef3a666544ada6dc2402bf902af6",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "decfc7afe9874f23b6f89aa80e499fa2",
          "Name": "b",
          "Description": "b",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "51bfce6d583b44e7a71f93934380d91c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 497,
      "SelectedString": "OST_Rooms",
      "NodeType": "ExtensionNode",
      "Id": "ba41dd7b1e544c768194fe3c25e74bc2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f93893f04b6a4c9c85bde5f8bbab797f",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "4cc98c97ebcc4cf8a37a980c5f62c296",
      "Inputs": [
        {
          "Id": "716ec7c1fc7a49ff8c4026967fa61e48",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "99445748c48a43429fd93e846a0127d7",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "6ede13f036274ae697bc98035846b781",
      "Inputs": [
        {
          "Id": "23fa6cd768304e8ab0e1861056556a3a",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c53088847bd74d49bf5b15aaa5f78d10",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5f978285ed442d8ac531ad320b332b2",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f6e66d25b5e47f4b571b338a98618bf",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.Type@var",
      "Id": "6ff0495beeb2499481715807a0f60ef2",
      "Inputs": [
        {
          "Id": "4c91edd5c0f64789a8ea801df8db525a",
          "Name": "object",
          "Description": "Object to query type\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "717bd50be2954098b51282b15b78e7d9",
          "Name": "string",
          "Description": "Type of object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the type of object represented as string.\n\nObject.Type (object: var): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i==\"Revit.Elements.Room\";",
      "Id": "386656a3778543bc971c0771aa33de2d",
      "Inputs": [
        {
          "Id": "fbc42faccac141f58fa4929998b28775",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "687ed700a2884539b98f2064f8168723",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "285fa2ccb9e64d638e488b5b2f65bfa9",
      "Inputs": [
        {
          "Id": "af7ef13b3b1746059950d92eded065ea",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f8c0a5ab126467f98568c0448e3ca45",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1a6f6ac0a0a4b0b93d898295473b351",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Number\";\n\"Name\";",
      "Id": "b97ab952870844e293b85efdee212e50",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6503815f9eb44e096e0a60fc7f86322",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ebc7ca6c04b445029ff0a19d1a6f5de8",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "90f58a0b10c745428bdf593ba78e6987",
      "Inputs": [
        {
          "Id": "c00c4b8eb30046c7998cc0379f1bf9ed",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a6cc35c54154c1ba3c9dafdb84fed2e",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb2166294e344de9a7345d4510303c2f",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "ba9c278363fb4ee79339a58d3b60d083",
      "Inputs": [
        {
          "Id": "65abf31cd1b74becb8c56be5f8bafe5a",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 4,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "9efab37128144c9e8d96fbed1aee8d89",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Work Master Code\";\n\"Work Master Code /w Description\";\n\"GaugeCode\";",
      "Id": "6dc991ba25ca4140a85d4b34b7f48148",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "30c6d35d8e7e454a88913a78840431dc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa6809cbdc3441dca5772528421dd951",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03eac06c6cb44cb9b0b14bc4fe5ce454",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "2623af00f54444069be12845f80bb09f",
      "Inputs": [
        {
          "Id": "ac5633ef1bfe4f87ad6a2fa74d30ac52",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "bdd66cbf79d546deadbba5d12c8d6428",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"Family Type Name\"];",
      "Id": "5469bc54a6c14c1d88b2bb810a3b6e50",
      "Inputs": [
        {
          "Id": "1b2a7b880c0649c1b2fa6ceef37fc6e2",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d00ab312b0944f1bd862ca803fd7d29",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "804fa4d9274e4db6856405a3fd8714fb",
      "Inputs": [
        {
          "Id": "ec6eb3ccbecd49959f26304b1c4cd91b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34ff4d3277064e5d97b8645ae20526e6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "ecb21e11bd164df2b0e984b6016571eb",
      "Inputs": [
        {
          "Id": "42112093c96b4d39940613ebd22f2808",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "c1ef927fba69488eb50f85611e6a195c",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "097671495b114307ba4f8b4dd1c506c7",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\nimport asyncio\r\nimport multiprocessing\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncontents = IN[0]\r\nfolderPath = IN[1]\r\ncwd = folderPath\r\nportNo = IN[2]\r\n#bdName = IN[2]\r\n# Place your code below this line\r\n\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\ndef make_resultHTMLname(htmlStr,title,cwd):\r\n    timeStamp = time.strftime('%H_%M_%S', time.localtime(time.time()))\r\n    #folderPath = f\"{cwd}\\\\.dynLog\"\r\n    folderPath = cwd\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    fileName = f\"index.html\"\r\n    filePath = f\"{folderPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(htmlStr)\r\n    f.close()\r\n    return fileName\r\n\r\n\r\ndef execute_browser(cwd):\r\n    #cwd = find_cwd()\r\n    folderPath = cwd\r\n    os.chdir(folderPath)\r\n    #cmdStr = \"start chrome http:localhost:8000\"\r\n    cmdStr = f\"start msedge http:localhost:{portNo}\"\r\n    cmdList= cmdStr.split(' ')\r\n    #subprocess.run(args=[fileName], shell=True)\r\n    #subprocess.run(args=['start','excel',fileName], shell=True)\r\n    subprocess.run(args=cmdList, shell=True)\r\n    return cmdList\r\n\r\n\r\nfileName = make_resultHTMLname(contents,\"test\",cwd)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = execute_browser(cwd)#fileName.split('.')[0]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "2293b855337546edb1fce2a82a226d51",
      "Inputs": [
        {
          "Id": "d8e80b2eef7846ef9fc7fa123e40e3a0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "31270f6e0b034196b02ef6313ea86dfd",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a98b44c39926443ca6e4ebd278cb8dc5",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72a7b95350034400b415408f808fb2a2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\ncssPart = '''\r\n\r\n/* style.css */\r\nimg {\r\n width : 25%;\r\n height: 25%; \r\n}\r\n\r\n:root {\r\n  --text-color: #f0f4f5;\r\n  --background-color: #263343;\r\n  --accent-color: orange;\r\n  --icons-color: rgb(152, 187, 201);\r\n  --bodybackground-color: lightgray;\r\n}\r\n\r\nth {\r\n  text-align: center;\r\n  padding-left: 30px;\r\n}\r\n\r\ntd {\r\n  padding-left: 40px;\r\n  border-bottom : 1px solid gray;\r\n  border-collapse : collapse;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  background-color: var(--bodybackground-color);\r\n  font-family: 'STIX Two Math';\r\n} \r\n\r\na {\r\n  text-decoration: none;\r\n  color: var(--text-color);\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0px; /* 도달했을때 고정시킬 위치 */\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: var(--background-color);\r\n  padding: 8px 12px;\r\n  font-family: 'STIX Two Math';\r\n}\r\n\r\n.navbar__logo i {\r\n  color: var(--accent-color);\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__menu {\r\n  list-style: none;\r\n  display: flex;\r\n  margin: 0;\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__menu li {\r\n  padding: 8px 30px;\r\n  color: var(--text-color);\r\n}\r\n\r\n.navbar__menu li:hover {\r\n  background-color: var(--accent-color);\r\n  border-radius: 3px;\r\n}\r\n\r\n.navbar__icons {\r\n  list-style: none;\r\n  display: flex;\r\n  color: var(--icons-color);\r\n  margin: 0;\r\n  padding-left: 0;\r\n}\r\n\r\n.navbar__icons li {\r\n  padding: 8px 12px;\r\n  margin: 0;\r\n}\r\n\r\n#cat {\r\n  display: block;\r\n  }\r\n\r\n#home {\r\n  font-weight: bolder;\r\n  }\r\n\r\n#homePage {\r\n  display: inline;\r\n  }\r\n\r\n#infoPage {\r\n  display: None;\r\n  }\r\n\r\n#famTypePage {\r\n  display: None;\r\n  }\r\n\r\n#roomInfoPage {\r\n  display: None;\r\n  }\r\n\r\n#roomInfoPage_chk {\r\n  display: None;\r\n  }\r\n\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = cssPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "128b292038734d0497a800ffdbb36664",
      "Inputs": [
        {
          "Id": "56f7a965afaf4ab2bdddf992f8bb5c28",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb7e50c36a5c4fdc80775b1756cce91e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b9297ebeb07e4ee9bff52f44e6630224",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e0e54e3fd8ff4606ada50c31c1af17d8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\njsPart = '''\r\nfunction hideAllPages() {\r\n        document.querySelector(\"#home\").style.fontWeight = \"normal\";\r\n        document.querySelector(\"#homePage\").style.display = \"None\";\r\n        document.querySelector(\"#info\").style.fontWeight = \"normal\";\r\n        document.querySelector(\"#infoPage\").style.display = \"None\";\r\n        document.querySelector(\"#famType\").style.fontWeight = \"normal\";\r\n        document.querySelector(\"#famTypePage\").style.display = \"None\";\r\n        document.querySelector(\"#roomInfo\").style.fontWeight = \"normal\";\r\n        document.querySelector(\"#roomInfoPage\").style.display = \"None\";\r\n        document.querySelector(\"#roomInfoPage_chk\").style.display = \"None\";\r\n}\r\n\r\ndocument.querySelector(\"#cat\").onclick = function() {\r\n\t    let img = document.createElement(\"img\");\r\n\t    img.setAttribute(\"src\", \"https://t4.ftcdn.net/jpg/05/62/99/31/360_F_562993122_e7pGkeY8yMfXJcRmclsoIjtOoVDDgIlh.jpg\");\r\n\t    document.querySelector(\"#cat\").style.display = \"None\";\r\n\t    img.setAttribute(\"style\", \"width:300px;margin-top:20px;\")\r\n\t    document.body.append(img);\r\n\t};\r\ndocument.querySelector(\"#home\").onclick = function() {\r\n        hideAllPages();\r\n        document.querySelector(\"#home\").style.fontWeight = \"bolder\";\r\n        document.querySelector(\"#homePage\").style.display = \"inline\";\r\n\t};\r\ndocument.querySelector(\"#info\").onclick = function() {\r\n        hideAllPages();\r\n        document.querySelector(\"#info\").style.fontWeight = \"bolder\";\r\n        document.querySelector(\"#infoPage\").style.display = \"inline\";\r\n\t};\r\ndocument.querySelector(\"#famType\").onclick = function() {\r\n        hideAllPages();\r\n        document.querySelector(\"#famType\").style.fontWeight = \"bolder\";\r\n        document.querySelector(\"#famTypePage\").style.display = \"inline\";\r\n\t};\r\ndocument.querySelector(\"#roomInfo\").onclick = function() {\r\n        hideAllPages();\r\n        document.querySelector(\"#roomInfo\").style.fontWeight = \"bolder\";\r\n        document.querySelector(\"#roomInfoPage\").style.display = \"inline\";\r\n\t};\r\ndocument.querySelector(\"#roomInfo_chk\").onclick = function() {\r\n        hideAllPages();\r\n        document.querySelector(\"#roomInfo_chk\").style.fontWeight = \"bolder\";\r\n        document.querySelector(\"#roomInfoPage_chk\").style.display = \"inline\";\r\n\t};\r\n\t\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = jsPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ccd5e4648eca41bea187f1cd549b3006",
      "Inputs": [
        {
          "Id": "cd27a5a3250646b8af05c6827971cc02",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0c297516ac2a4a5198a8056fa13863cb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6e35893f82e049eaadf62cf0fe338233",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2715083b45ed4f58af2eaad981a33897",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport time\r\nimport subprocess\r\nimport os\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ndynTempServerPath = IN[0]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\ncwd = find_cwd()\r\n#cwd = os.getenv(\"HomePath\")\r\n\r\nfolderPath = f\"{cwd}\\\\{dynTempServerPath}\\\\tmpForBOQ\"\r\nif not os.path.exists(folderPath):\r\n    os.makedirs(folderPath)\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = \"C:\"+folderPath\r\nOUT = folderPath",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "e2e4af0fc18e4b908dcf2372c6b7c0ae",
      "Inputs": [
        {
          "Id": "a790eb19d69346e8b56360df832d0204",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "448932de8be943e9b1e309fc8e067d99",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\njsPart = IN[0]\r\ncssPart = IN[1]\r\nnavPart = IN[2]\r\n\r\npjtName = IN[3][0]\r\nbdName = IN[3][1]\r\npages = IN[4]\r\n\r\nhomePage = pages[0]\r\n\r\n\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n    <link rel=\"shortcut icon\" href=\"#\">\r\n    <meta charset=\"UTF-8\">\r\n    <title>RVT Calculation Result</title>\r\n    <style>\r\n        {cssPart}\r\n    </style>\r\n</head>\r\n\r\n<header>\r\n<h5>Revit Elements' Bill of Quantities Page</h5>\r\n<h4>{pjtName}</h4>\r\n<h4>{bdName}</h4>\r\n</header>\r\n\r\n<body>\r\n{navPart}\r\n\r\n<div id=\"homePage\">\r\n{homePage}\r\n</div>\r\n\r\n\r\n\r\n<script type =\"module\" src=\"./js/script.js\"></script>\r\n\r\n</body>\r\n\r\n</html>\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fe86d2e04e3f446eb61d604b1722d6a7",
      "Inputs": [
        {
          "Id": "09b3afab404d40b9a6458d9cdec5d090",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1186cb42b4834da892396a64d7af190a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a60e762b4a074b659e687d4d1e516da1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a35c3c9f980b43c8855d626ea95e9af6",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e6a573560f74b01a9d7793966dc63bd",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6fa566905a049a1add2c70e17432a87",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "htmlStr;",
      "Id": "e97d441e14e44edc828a96c60739260d",
      "Inputs": [
        {
          "Id": "a34e9f10b2bc481a926292d0061531de",
          "Name": "htmlStr",
          "Description": "htmlStr",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cd15b0ac83e04be7aa75031a9bf4daf1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nnavPart = f\"\"\"\r\n\r\n<nav class=\"navbar\">\r\n\r\n  <ul class=\"navbar__menu\">\r\n    <li id=\"home\">Home</li>\r\n  </ul>\r\n\r\n</nav>\r\n\r\n\"\"\"\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = navPart",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "bb79dddfc2e9457e966f337a7c97306e",
      "Inputs": [
        {
          "Id": "1f7f5995c6b74e949bf86fbcdf5a1f3e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4b8c0a5728634607a57019136c306b91",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\nimport time\r\nimport subprocess\r\n\r\n#################################Module For Functional Programing#############################################\r\nfrom functools import reduce\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\n        \r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n##############################################################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncontents = IN[0]\r\nfolderPath = IN[1]\r\n#bdName = IN[2]\r\n# Place your code below this line\r\ndef find_cwd():\r\n    doc = Revit.Application.Document.Current\r\n    filePath_string = doc.FilePath\r\n    folderPath = filePath_string.split('\\\\')\r\n    folderPath.pop(-1)\r\n    folderPath_str = '\\\\'.join(folderPath)\r\n    return folderPath_str\r\n\r\n#cwd = find_cwd()\r\ncwd = folderPath\r\n\r\ndef make_resultHTMLname(jsStr,cwd):\r\n    #timeStamp = time.strftime('%H_%M_%S', time.localtime(time.time()))\r\n    #folderPath = f\"{cwd}\\\\.dynLog\"\r\n    folderPath = cwd\r\n    jsPath = cwd + \"\\\\js\"\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    if not os.path.exists(jsPath):\r\n        os.makedirs(jsPath)\r\n    fileName = \"script.js\"\r\n    filePath = f\"{jsPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(jsStr)\r\n    f.close()\r\n    return fileName\r\n\r\ndef execute_file(fileName):\r\n    #cwd = find_cwd()\r\n    folderPath = cwd\r\n    os.chdir(folderPath)\r\n    subprocess.run(args=[fileName], shell=True)\r\n    #subprocess.run(args=['start','excel',fileName], shell=True)\r\n    \r\n\r\nfileName = make_resultHTMLname(contents,cwd)\r\n#fileName = \"Test1.html\"\r\n\r\n#execute_file(fileName)\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = fileName",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "505cea545c5a4672ba1f9dca7b06fe98",
      "Inputs": [
        {
          "Id": "44ea388a7f674212a4473bd8a2de7eb2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "385bebc0885a4263b3a761a50641f7e0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2169277f35b4728ab9a72f5d7349adb",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b32189b590be4b65b3fefc86f462746a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport os\r\nimport asyncio\r\nimport multiprocessing\r\nimport subprocess\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncwd = IN[0]\r\nportNo = IN[1]\r\n# Place your code below this line\r\nbatStr = f\"\"\"\r\n@echo on\r\npython -m http.server {portNo}\r\ncmd /k\r\n\"\"\"\r\n##cmd /k\r\ntitle = \"localWebserver\"\r\n\r\ndef make_startSever_bat(batStr,title,cwd):\r\n    folderPath = cwd\r\n    if not os.path.exists(folderPath):\r\n        os.makedirs(folderPath)\r\n    fileName = f\"{title}.bat\"\r\n    filePath = f\"{folderPath}\\\\\" + fileName\r\n    f = open(filePath, 'w', encoding='utf8')\r\n    f.write(batStr)\r\n    f.close()\r\n    return fileName\r\n\r\ndef startBat(fileName, cwd):\r\n    cmdStr = f\".\\\\{fileName}\"\r\n    cmdList= cmdStr.split(' ')\r\n    os.chdir(cwd)\r\n    \r\n    res = subprocess.Popen(args=cmdList, shell=True)\r\n    return res\r\n\r\nbatFileName = make_startSever_bat(batStr,title,cwd)\r\n#res = multiprocessing.Process(name=\"SubProcess\", target=startBat, args=(batFileName, cwd))\r\n# Assign your output to the OUT variable.\r\nOUT = startBat(batFileName, cwd)\r\n\r\n#startBat(fileName, cwd)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "7911dd5152fb4afc9942fa71eb471e18",
      "Inputs": [
        {
          "Id": "8ed9e15c86dc4c0b9073de2f41cf1065",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb8149952ae847a7bd2fc2ee01e36dea",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c29f9a23004245e5bcb9462f65c0da4a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\njsPart = IN[0]\r\ncssPart = IN[1]\r\ntablePart = IN[2]\r\n\r\n# Place your code below this line\r\n##folderPath_r = folderPath.replace('\\\\','\\\\\\\\')\r\n\r\nhtmlStr = f'''\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>my first three.js app</title>\r\n    <style>\r\n        {cssPart}\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n\r\n\r\n<div class=\"wrapper\">\r\n\r\n  <a data-fslightbox=\"gallery\" href=\"#custom-source\">\r\n    유튜브 라이트박스\r\n  </a>\r\n\r\n  <iframe id=\"custom-source\"\r\n          frameborder=\"0\"\r\n          width=\"1920px\"\r\n          height=\"1080px\"\r\n          allow=\"autoplay; fullscreen\"\r\n          src=\"https://www.youtube.com/embed/qgBSiRwsbNw?autoplay=1\">\r\n  </iframe>\r\n</div>\r\n\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fslightbox/3.3.1/index.min.js\" integrity=\"sha512-EqNNJuepkw5P9vxCml8eBk7C4Ld+4kAnvzOD/jG21rkxWPILGoQa5EvD62UieiJF0u3xoQrcVnce4i83VnYj/Q==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n\r\n</body>\r\n\r\n</html>\r\n'''\r\n# Assign your output to the OUT variable.\r\nOUT = htmlStr",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "eb3d472b821e4392b812a06bbd34d3ed",
      "Inputs": [
        {
          "Id": "2897d9110ec34e129d789c3b7475b1be",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "12db67f00e784857aded00125797de24",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f859036bc105425fb1793c912dc3f987",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3bb120d1556479087ad77aa05cdab17",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".dynTemp\";",
      "Id": "d1ff79fecf704ef6a5f9ec4bee7f2020",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f05424c070294cbca49dda114c05adb6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "8000",
      "Id": "6295313e8a4a48bc83e02079e2a9eb8e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dca90ec33fe04d76acc96c750acea32b",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fef5572a431c4fde8517afbe902a131f",
      "Inputs": [
        {
          "Id": "e040cd905de141c8a8e0ef78b5e99845",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16425a1079ef4e508777b3f362bfc45c",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 437,
      "SelectedString": "OST_ProjectInformation",
      "NodeType": "ExtensionNode",
      "Id": "a7f633b9fe0c468ca326203560dc6ce5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "47592a13db8342afa8491a4937ee48b8",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "794077763a8c4131b7f2c88f0b04aec2",
      "Inputs": [
        {
          "Id": "ac1cba27f6de4da5a344b346415b00b0",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "14fc399b175d4f9a8074e2526ae67e5c",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "107a6539a6584a9da0dc249e1b213891",
      "Inputs": [
        {
          "Id": "cf935480a39940988c7c0e48a63f2930",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8dc3f67b5024bd79787f50847ba9549",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.ParameterByName@Revit.Elements.Element,string",
      "Id": "4271cf050e214c728df8605e66bbdeaf",
      "Inputs": [
        {
          "Id": "8188f0c5864d4e1cbfacd7bc815aad3b",
          "Name": "element",
          "Description": "Element\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "04bff60d9dcd42ca8994e25a40208f6a",
          "Name": "name",
          "Description": "Parameter Name\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "164dc45190b4422cb312b13924cf62a7",
          "Name": "Parameter",
          "Description": "Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get Element's Parameter by Name\n\nParameter.ParameterByName (element: Element, name: string): Parameter"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"Project Name\",\n\"Building Name\"\n];",
      "Id": "f1d2f7d879ab41219709c9bc6e52247a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "601bd58a80f14c289cee84b8a5fde169",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.Value",
      "Id": "f49d6c859e9f4b3bbd37977e5c412f20",
      "Inputs": [
        {
          "Id": "e46e4d1adf1a4278b702eda90d5ed418",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d6c1bc648d34e578c6896e05145131b",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of the parameter\n\nParameter.Value: var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.Name",
      "Id": "e7bc936f54bd4627a832edcd57f6e4f5",
      "Inputs": [
        {
          "Id": "7496ca5742ee4563a09468a025a1a6c1",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9949d27031834ff8bfce2fcad3da7441",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The name of the parameter.\n\nParameter.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.Value",
      "Id": "587df27a51e44f11a5404cecb7b4e2df",
      "Inputs": [
        {
          "Id": "de36fe577bc64bc9bf2bbaba6e46cc49",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fbd7aaae3ae743a2825c846f522c4581",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of the parameter\n\nParameter.Value: var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.HasValue",
      "Id": "90d144c7915a4f8690916026909e39b3",
      "Inputs": [
        {
          "Id": "d74f25478f204385b6000589621aa709",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1fc83b12a6364516b17ebf52b1466018",
          "Name": "bool",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Check if the Parameter has a value\n\nParameter.HasValue: bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "300205a65fa74e8b9eccc54fd39749ff",
      "Inputs": [
        {
          "Id": "037a7f6c46a1428dbc9d6e113e151f0b",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "36604692f49c49269cee3e1ed24e52c6",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "914caf9b8d6d46e092c3df442317a02f",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb8799cc7ecb445e9949968d7fa38d0e",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i!=\"Category\";",
      "Id": "352682732e0245ac8fe422291ad2cce4",
      "Inputs": [
        {
          "Id": "369df9f8c7194e9b80a2eee9e4ac0484",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48fb95ff3caa42f59b74473e2a013a9b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "5016c090280b4aa189c6b9e838e9c76a",
      "Inputs": [
        {
          "Id": "299e61e6dc784661aafea5739a0f3c13",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "09009794f7ea428b8ec443c030f43e2a",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1be7e5e291324bf89d4ba95aff2b22ab",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b05aba19142d443e98b2b8ea9430efb0",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.Name",
      "Id": "e796a732c035421ab70df94cd2aac959",
      "Inputs": [
        {
          "Id": "6f790a22a06041449386dd2ca5e0c2b3",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f0d3a921023b4fd4aecad758711891b5",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The name of the parameter.\n\nParameter.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "2e2cd4ce73974ddcbd81499cf0cca504",
      "Inputs": [
        {
          "Id": "aaf8a0defcde477299b13c60dc128e0a",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "957ad323e7f74fc8ae63d054ab7a8ee4",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8e0bb88a00d740c5a28a9a00d64fac9a",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "68feeaf8770446a3aaba3dd9d6d80f13",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Parameter.Value",
      "Id": "887fec10d62444f28faef90bede912f8",
      "Inputs": [
        {
          "Id": "30fdd0227e864a52aa6e988eea129491",
          "Name": "parameter",
          "Description": "Revit.Elements.Parameter",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f137b4805ff4145b24122a8129759e4",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of the parameter\n\nParameter.Value: var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "dda006a7e3f146468be305a82852e7e2",
      "Inputs": [
        {
          "Id": "5cd8ad22107f4bebb6833c839a3469da",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "60f68a7ad39c44a78fb5807260b8ef82",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i!=\"\";",
      "Id": "a5e0779d9339496897a1bb1f9ad5fa5e",
      "Inputs": [
        {
          "Id": "acceed1fc21e4ce382d808335d48256d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8221bb69d71d4cd2a324ad26b87792e0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "d564cd412a274b3ebbf46674d4552c13",
      "Inputs": [
        {
          "Id": "9d74d332604445e1915d55adf3be523c",
          "Name": "keys",
          "Description": "Keys of dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e440b2b1c8f540c797ffd7a117c84371",
          "Name": "values",
          "Description": "Values of dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d19ae8b2e2e64e16b5f8a88afc36420c",
          "Name": "dictionary",
          "Description": "Dictionary from keys and values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Data.StringifyJSON@var[]..[]",
      "Id": "ce5dd69ebac44596944bdddcbbb138bb",
      "Inputs": [
        {
          "Id": "063e6170b7d8447ea275ce5adc884cd6",
          "Name": "values",
          "Description": "A List of values\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b390187341154a68be6c1f536bd63dd0",
          "Name": "json",
          "Description": "A JSON string where primitive types (e.g. double, int, boolean), Lists, and Dictionary's will be turned into the associated JSON type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Stringify converts an arbitrary value or a list of arbitrary values to JSON. Replication can be used to apply the operation over a list, producing a list of JSON strings.\n\nData.StringifyJSON (values: var[]..[]): string"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "ff8bd912f4dc4affbc16939459881ef1",
      "Inputs": [
        {
          "Id": "80b4b0dce2294409938f107110bfd56c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0f443b1479524984875d572a7b8161d5",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f9de791a84f444c094a847159270c835",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "bdName;",
      "Id": "4d510c5a94814cffa3d4ae58fe74664c",
      "Inputs": [
        {
          "Id": "3389f2f57284482e9095339b7cd6ad17",
          "Name": "bdName",
          "Description": "bdName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "742b72aa21234b019b2b5bc200b03c86",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "26bb7af517714509b46280eff1a62d2e",
      "Inputs": [
        {
          "Id": "2eca085c0d984145876567bf86dd7a1a",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9bc009258bfe4c279f2fdba39d0f8278",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "2fb4a4e82e8549f49f166798b56a76e3",
      "Inputs": [
        {
          "Id": "65387579e40c48ea995f066140591a7c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "919c2a1a395941fc8b371fcef1911806",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c54455fc6553473e9647aa720b5263e6",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5b581f5432b6436d9aca025a71f1e4bb",
      "Inputs": [
        {
          "Id": "8c051f1489514263a6774f363c24655f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ba6cfa7d18b452fa667ef6098d7307b",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf6ef4699697424eb47c86b542bed47e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "7862edc57af74bd8abec15b6d04702c5",
      "Inputs": [
        {
          "Id": "9796a4ddcf6343969756bfe504eb14bf",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "314c2fb0bcae46d3800e939a0a61ca19",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c58b0d1b47141bea5f51bd2cc0bdf08",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\" \";",
      "Id": "35d6d02792f24515ad91bc9d60b105ae",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "15b812ed6cdb4e62b9381199e26281f6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fc7dbf06233e4ce48a0c2a90e4bb3494",
      "Inputs": [
        {
          "Id": "6d691c16e28044f88ab671d1b177a7b5",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3144a79a2174bd690e5e0e2ceea0412",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f2aea9c72fae496792d64287a83c2951",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "f2fbd5908bd845fd918324ba4b97cd7e",
      "Inputs": [
        {
          "Id": "4ba52a74ab09432dbc936fb0c846d7af",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "000346f199e84c0e89036c3238bd2534",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "fa50df0655ca42419832fc4392e55b87",
      "Inputs": [
        {
          "Id": "52497a4f7e3f4e7b8fd87b74a4f02822",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0dd4e8d6e864acfaadcc4003759b07a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter,map,reduce = curry(filter),curry(map),curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n      \r\ndef grpBy(iter, key):\r\n    f,grpKeys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        grpKeys.append(key); grps.append(list(grp_data))\r\n    return grps,grpKeys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nhdrs = IN[0]\r\ngrps = IN[1]\r\n# Place your code below this line\r\ndef make_th(row):\r\n    preStr = \"<tr>\"\r\n    postStr = \"</tr>\"\r\n    rowStrs = list(map(lambda x: f\"<th>{x}</th>\", row))\r\n    res = \"\\n\".join([preStr]+rowStrs+[postStr])\r\n    return res\r\n\r\ndef make_tr(row):\r\n    preStr = \"<tr>\"\r\n    postStr = \"</tr>\"\r\n    rowStrs = list(map(lambda x: f\"<td>{x}</td>\", row))\r\n    res = \"\\n\".join([preStr]+rowStrs+[postStr])\r\n    return res\r\n\r\ndef make_trs(rows):\r\n    rowsStrs = list(map(make_tr, rows))\r\n    res = \"\\n\".join(rowsStrs)\r\n    return res\r\n\r\ndef make_trs_hd(rows):\r\n    rowsStrs = list(map(make_th, rows))\r\n    res = \"\\n\".join(rowsStrs)\r\n    return res\r\n\r\ndef make_wholeTable(rows):\r\n    preStr = \"<table>\"\r\n    postStr = \"</table>\"\r\n    trs = make_trs(rows)\r\n    res = \"\\n\".join([preStr, trs, postStr])\r\n    return res\r\n\r\ndef transTo_tableForm(grp):\r\n    chkbox_tagStr = '<input type=\"checkbox\" id=\"chkbox\" name=\"checks\">'\r\n\r\n    #title = \"<h5>\"+grp.pop(0)+\"</h5>\"\r\n    title = list(map(lambda x: \"<h5>\"+x+\"</h5>\" ,grp.pop(0)))\r\n    #res = [title]\r\n    res = title\r\n    res.append(make_trs(grp))\r\n    \r\n    return res\r\n    \r\nrows = [[make_th(hdrs)]] + list(map(transTo_tableForm, grps))\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = make_wholeTable(rows)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5cd2326afbd841d795a1f47d8f16fcf7",
      "Inputs": [
        {
          "Id": "cc052f2ee3fe4c80883164c21bca5656",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "05210467cb1f493fae110684e0b41b03",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1481de8e3bcc40b08dc6231bd2a83a07",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"Work Master Code /w Description\",\n\"IfcGUID / GaugeCode\",\n\"Description\",\n\"산출 수식\",\n\"값 대입 수식\",\n\"Quantity\",\n\"Unit\",\n\"rIDX\"\n];",
      "Id": "96ad3173ac8e41c0a8523eaa96628d2c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "08f40abf42984703b760125f8fe4b95e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a3bfc25f6e9b44cca0b0174014698814",
      "Inputs": [
        {
          "Id": "f83b0c67f2a844eb9671a652aaab5295",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edabcd49e6ea4993b172068d83bbdbee",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea99d3a9383c42fca4100fb7c05b0059",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "511c6cef074d451ca975caef002fe34b",
      "Inputs": [
        {
          "Id": "fe0317db0fe94c9ea9a7ba7a77a0c743",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cda7261c7e245cc99d696e81cd52879",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Type\";",
      "Id": "e703509cbf3842809e89d16cdb367747",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a86a3be4671e4154b36554dc2a2af2d6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "6de0db7ddae1412dbc3d7dc22894ffa6",
      "Inputs": [
        {
          "Id": "8c0d2ff7f610451e83f77f3c633c9ca4",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4d68cea4a0f543d6b613c892f8bad96e",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain value for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba7d65c9618d47db8115746ee78bec75",
          "Name": "value",
          "Description": "Value at the specified key or null if it is not set",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"GUID\";",
      "Id": "ee7635d8f63f4dfe8a70b441c3b7698b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "439070d2181d4e0a804de4fb9c51d65c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToEnd@var[]..[],var[]..[]",
      "Id": "ee1c70ea86d74b02844dd0d70432e94a",
      "Inputs": [
        {
          "Id": "5b7f8eb6ba9c4a5980d61bbe17dee52d",
          "Name": "item",
          "Description": "Item to be added.Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "3a42baf3b99b481e8f1e0f3ec8138552",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "37c052bfcd684699807542bcb5195f3b",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the end of a list.\n\nList.AddItemToEnd (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.Map, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4270863615aa4df18d0ee18d51b633c0",
      "Inputs": [
        {
          "Id": "99a22764c0f949829cb7071d690c22d0",
          "Name": "list",
          "Description": "The list to map over.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6ba01d9a13ac40ea96c87862996df84d",
          "Name": "function",
          "Description": "The procedure used to map element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f76d3a1475bd4f70ba831921402ee9dd",
          "Name": "list",
          "Description": "Mapped list of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Applies a function over all elements of a list, generating a new list from the results."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "0e624bb77f8c4a3e9c632584f8d331d7",
      "Inputs": [
        {
          "Id": "f559802bc5fd4b60a90dc07b9d6802b0",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6bfea1689a564b129aa9ff883511e7cc",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "calcMode;",
      "Id": "9a943402cecb4a248260e65c289f9e35",
      "Inputs": [
        {
          "Id": "d75d54cb665d4ddb87bbae2224048c1e",
          "Name": "calcMode",
          "Description": "calcMode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "894cdadba06b4088a9df83db70b20b9d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dictionarizedTypes;",
      "Id": "c438dfb67edb45488157194c6b394ce3",
      "Inputs": [
        {
          "Id": "7f74ea49e8194139a4c9a30fde21778f",
          "Name": "dictionarizedTypes",
          "Description": "dictionarizedTypes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7fe767aa2dde4da0a94f539212075db1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "97a2979f91fd486ca41887522d397a97",
      "Inputs": [
        {
          "Id": "1a559a0ef78248deb186ecbf9f48ad78",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91cc642301734d1fb1efcf0de961ece3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];",
      "Id": "63bd58ef9417408daec6de73f083a6cb",
      "Inputs": [
        {
          "Id": "936dcfd3645e4b1991ca7629b12e5d67",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "583b63e14057467daf79cbfbcb0ef8c9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Keys",
      "Id": "55b896a0e897444185eb1d3901c95ed7",
      "Inputs": [
        {
          "Id": "e1212af6896b46be8ebc37cbd9b954af",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f75a754f92ab4c98a0041e759744a370",
          "Name": "keys",
          "Description": "Keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the keys in a Dictionary.\n\nDictionary.Keys: string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "65f88911f47247e49ae4aa8d096d0033",
      "Inputs": [
        {
          "Id": "4ecdbf559dfb4ec6a4d15ec5a7f40f01",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b91ef0e35d2428bb56437f6ee7f8d27",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "866f3a6c2b6e403f855faacf0e0e718a",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8b925c05d11b4625ab8a9b74932fd6a1",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wmspec_headers = [\n    //\"Work Master Code\" ,\"GaugeCode\" ,\"Unit\" ,\n    \"Work Category-L1\"\n    ,\"Work Category-L2\" ,\"Work Category-L3\" ,\"Spec. 1- L4\" ,\"Spec. 2- L5\"\n    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\n    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\n    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\n    ,\"Work Master Code /w Description\", \"Description\"// ,\"입찰_물량산출식\" ,\"실행_물량산출식\" ,\"rIDX\"\n];",
      "Id": "c245e9a60f53407a94ff607f314e7789",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "372b4927a4a14e56b69bae9aaeaa062e",
          "Name": "",
          "Description": "wmspec_headers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "bc586f60c5a54d1385b3c8684078a309",
      "Inputs": [
        {
          "Id": "3eaee30238b84cd3b5e5eb10fc9d8127",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a685868f922a4388b9f0df4646804f9e",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\"\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n\r\nimport re\r\nfrom functools import partial\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\nwholeDatas = IN[1]\r\ndb = wholeDatas[1:]\r\nallCatSheetsNames = IN[2][2:]\r\nallCatSheetsNames_noRoom = allCatSheetsNames[1:]\r\n\r\ncalcStdSheet = db[0] ##산출기준 시트\r\nallCatSheets = db[1:]\r\n\r\nallElemsNames = IN[3][0]\r\nallElems = IN[3][1]\r\nallElemsSet = list(zip(allElemsNames, allElems))\r\n\r\n\r\n#wmspec_headers = [\r\n#    \"Work Master Code\" ,\"GaugeCode\" ,\"Unit\" ,\"Work Category-L1\"\r\n#    ,\"Work Category-L2\" ,\"Work Category-L3\" ,\"Spec. 1- L4\" ,\"Spec. 2- L5\"\r\n#    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\r\n#    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\r\n#    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\r\n#    ,\"Work Master Code /w Description\", \"Description\" ,\"입찰_물량산출식\" ,\"실행_물량산출식\" ,\"rIDX\"\r\n#]\r\n# Place your code below this line\r\n\r\ndef find_IsInStr(target, string):\r\n    if target == None or string == None:\r\n        pass\r\n    else:\r\n        res = str(target) in str(string)\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db)) ##targetTransposedDB (col_idx에 해당하는 데이터만 추출)\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    target_RowNumber = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,target_RowNumber))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb] ## 각 구간별 마지막 행 번호\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,target_RowNumber))\r\n    rangeEndIdxs = endidxs\r\n    result = list(zip(rangeSttIdxs, rangeEndIdxs))\r\n    return result\r\n\r\n    \r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = list(map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1]))))\r\n    \r\n    return dict(headers_sheet)\r\n    #return list(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdxDict, trgt_hdr, trgt_str):\r\n    #hdrs_withIdxDict = dict(hdrs_withIdx)\r\n    return find_range_by_columnItem(sheet, hdrs_withIdxDict[trgt_hdr], trgt_str)\r\n\r\n\r\ndef get_DataOnGrpsAtSheet(sheet:list, discrHDRStr, discrRowStr):\r\n    \"\"\"\r\n    판별기준 Header문자열(discrHDRStr)이 들어있는 열에서,\r\n    판별기준 행 문자열(discrRowStr)이 들어있는 행번호 기준으로 구역을 나누어 데이터 리스트 반환\r\n    \"\"\"\r\n    hdrs_withIdxDict = find_headersAtSheet(sheet)\r\n\r\n    # 시트별 그룹 구분 (시작 행번호, 끝 행 번호 추출)\r\n    rowAreasAtSheet = find_rangesAtSheet(sheet, hdrs_withIdxDict, discrHDRStr, discrRowStr)\r\n    \r\n    # 시트 각행에 rIDX 데이터 주입하는 구간 - (시작) >>>>>>>\r\n    ## 헤더의 칼럼 인덱스 중 가장 큰 것 추출\r\n    hdrs_maxCol_idx = max(list(hdrs_withIdxDict.values()))\r\n    ## 마지막 헤더위치보다 한칸 옆을 행인덱스번호(\"rIDX\") 정보 보관 위치로 설정\r\n    hdrs_withIdxDict[\"rIDX\"] = hdrs_maxCol_idx+1\r\n    ## 시트의 각 행을 번호와 함께 pair 형태로 추출\r\n    sheetWith_rIDX = list(enumerate(sheet))\r\n    ## rIDX 보관된 시트 데이터 저장을 위한 빈 리스트 선언\r\n    sheet_rIDX = []\r\n    ## pair 형태의 각 행에서, 마지막 헤더의 한칸 우측위치에 rIDX 데이터 주입\r\n    ## 시트의 각 행마다 x 라는 이름으로 순회하며,\r\n    for x in sheetWith_rIDX:\r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치보다 클때,\r\n        if len(x[1])-1>hdrs_maxCol_idx:\r\n        #if len(x)>hdrs_maxCol_idx:\r\n            #### 마지막 헤더의 우측 칸 위치를 rIDX 데이터로 치환\r\n            x[1][hdrs_maxCol_idx+1] = x[0]\r\n            sheet_rIDX.append(x[1])\r\n            \r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치와 같을때,\r\n        else:\r\n            #### 마지막 헤더의 우측칸이 없으므로 append로 rIDX 데이터 추가\r\n            x[1].append(x[0])\r\n            sheet_rIDX.append(x[1])\r\n    # <<<<< 시트 각행에 rIDX 데이터 주입하는 구간 - (끝)\r\n    \r\n    rowsGrps_perType_withNone = list(map(lambda x: sheet_rIDX[x[0]-1:x[1]], rowAreasAtSheet))\r\n    # None 데이터 치환 구간\r\n    rowsListGrps_perType = go(#>\r\n        rowsGrps_perType_withNone, list,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서\r\n        map(lambda rowGrp: \\\r\n        ## 한 행씩 골라서\r\n        list(map(lambda row: \\\r\n        ## 행을 구성하는 셀 값 중 None이 있으면 빈문자열로 치환\r\n        list(map(lambda cell: \"\" if cell==None else cell, row)), rowGrp)) ),\r\n        ## 맵 객체가 반환되므로 리스트 변환\r\n        list,\r\n    )#<\r\n    \r\n    return (rowsListGrps_perType, hdrs_withIdxDict)\r\n\r\ndef cvt_rowsListGrps_toDictGrps(rowsListGrps_perType, hdrs_withIdxDict, sheetName):\r\n    \"\"\"\r\n    헤더 행과 다수의 컨텐츠 행으로 이루어진 rowListGrps를,\r\n    모든 행을 헤더와 결합된 딕셔너리화 해서 rowDictGrps를 만드는 함수\r\n    \"\"\"\r\n    eff_hdrs_idx = hdrs_withIdxDict.values()\r\n    eff_hdrs_name = hdrs_withIdxDict.keys()\r\n    \r\n    rowsDictGrps_perType = go(#>\r\n        rowsListGrps_perType,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서 한 행 씩 조작하는 함수들을 구상 후\r\n        ## 맵 함수 내에서 go로 합성하여 반복시켜 사용\r\n        map(lambda rowGrp: go(#>>\r\n            ### 그룹 전체 가져와서\r\n            rowGrp,\r\n            ### 각 행을 리스트 타입으로 변환\r\n            map(list), list,\r\n            ### 헤더에 해당하는 행 값을 추출--\r\n            map(lambda row: list(map(lambda idx: row[idx], eff_hdrs_idx))), list,\r\n            ### 헤더이름과 행 내부의 값을 2개씩 짝지어 줌\r\n            map(lambda row: list(zip(eff_hdrs_name, row))), list,\r\n            ### 헤더이름 : 값의 형태로 각 행 데이터를 딕셔너리로 만듬\r\n            map(lambda x: dict(x)),\r\n            ### 딕셔너리 마다 카테고리 정보 추가\r\n            map(lambda x: dictUpdate(x,{\"Family Category\":sheetName})),\r\n            list,\r\n            )#<<\r\n        ), list,\r\n    )#<\r\n    return rowsDictGrps_perType\r\n\r\n# 행딕셔너리 별 입력한 규칙에 따라 참거짓 여부를 반환하는 함수\r\ndef findRow_AppliedType(rowDict, tgtHDRname, rule=None):\r\n    p = re.compile('[0-9]{3,5}')\r\n    target = str(rowDict[tgtHDRname])\r\n    ## 함수 호출시 구분자(rule) 없이 호출한 경우\r\n    ## -Room Category 시트 용 이며 \"Standard Type\" 항목의 값이 000형태의 숫자인지를 판별\r\n    ## -Room Category 중 \"Standard Type\" 칼럼에 룸 넘버, \"Family Type Name\" 칼럼에 룸 이름 입력하게 되어있음\r\n    if rule==None:\r\n        p = re.compile('[0-9]{3,5}')\r\n        m = p.match(target)\r\n        stdCase = target ==\"Room No\"\r\n        res = all([m or stdCase])\r\n    ## 구분자(rule)가 정규표현식 객체로 들어온 경우\r\n    elif isinstance(rule, re.Pattern):\r\n        m = p.match(target)\r\n        res = all([m])\r\n    ## 구분자(rule)가 문자열로 들어온 경우\r\n    else:\r\n        res = rule in target\r\n    return res\r\n\r\n\r\n\r\ndef form_TypeDict(rowsDictGrps,titleKeyName,sttIdx):\r\n    \"\"\"\r\n    rowsDictGrps_perType을 받아서 각 그룹의 이름을 키로 하는\r\n    새로운 중첩구조의 Dictionary를 만들어서,\r\n    바깥에서 타입이름으로 딕셔너리에 접근하면 \r\n    바로 해당 구성내용을 반환해주는 데이터 구조를 만드는 함수\r\n    \"\"\"\r\n    typeDict = go(#>\r\n        rowsDictGrps, list,\r\n        filter(lambda x: x!=[]),\r\n        map(lambda rowsDictGrp: \\\r\n            ### 그룹 전체 첫행 중 타이틀키값과 나머지 row 들 dict를 짝지어 새로운 딕셔너리로 형성\r\n            [list(rowsDictGrp)[0][titleKeyName],go(#>>\r\n                list(rowsDictGrp)[sttIdx:],\r\n                #### 모두 빈칸인 값일때 제외 필터링\r\n                filter(lambda row: any(list(map(lambda cell: cell!=\"\", list(row.values()))))),\r\n                list,\r\n            )]#<<\r\n        ),list,\r\n        dict,\r\n    )#<\r\n    \r\n    return typeDict\r\n\r\ndef updateDict_symValPair(calcTypeDict):\r\n    \"\"\"\r\n    calcTypeDict를 입력으로 받아서\r\n    필요한 \"약자-대응 항목\" 의 구조를 갖는 딕셔너리 형태로\r\n    구성된 새로운 Dictionary를 반환하는 함수\r\n    \"\"\"\r\n    # 모든 산출타입 이름 추출\r\n    allCalcTypeNames = list(calcTypeDict.keys())\r\n    # 전체 결과물 담을 빈 딕셔너리 선언\r\n    res = {}\r\n    # 산출타입태그 이름 각각에 대해,\r\n    for x in allCalcTypeNames:\r\n        ## 타입별 약자 - 산출 대상 값 을 매칭하기위한 빈 딕셔너리 선언\r\n        type = {}\r\n        ## 산출기준 시트의 각 행을 딕셔너리화 한 rD마다 값을 들여다보며\r\n        for rD in calcTypeDict[x]:\r\n            ### 행 딕셔너리의 \"수동 입력값\" 항목의 값이 유효한 값이고,\r\n            ###\"산출수식 약자\" 항목에도 유효한 값이 있다면\r\n            if rD[\"수동 입력값\"]!=\"\" and rD[\"산출수식 약자\"]!=\"\":\r\n                #### 신규 딕셔너리인 type에 키를 산축수식 약자로 하고,\r\n                #### 값을 수동입력값이나 Parameter 항목 값으로 하는 딕셔너리 형성\r\n                type[rD[\"산출수식 약자\"]] = rD[\"수동 입력값\"]\r\n            elif rD[\"Parameter\"]!=\"\" and rD[\"산출수식 약자\"]!=\"\":\r\n                type[rD[\"산출수식 약자\"]] = rD[\"Parameter\"]\r\n        ## 전체를 담을 빈딕셔너리인 res에 \r\n        ## 키를 산축수식 약자로 하고, 값을 아까 마련한 type 딕셔너리로 하는 딕셔너리로 만듬\r\n        res[x] = type\r\n    # 최종결과 반환\r\n    return res\r\n   \r\n\r\ndef find_stdWMdicts_inGrp(rowsDictGrp):\r\n    res = go(\r\n        rowsDictGrp, list,\r\n        ## 엑셀 \"물량산출식\", \"Work Master Code\" 열에 값이 없는 행 제외\r\n        filter(lambda rD: rD[\"입찰_물량산출식\"] != \"\" and rD[\"실행_물량산출식\"] != \"\"),\r\n        filter(lambda rD: rD[\"Work Master Code\"] != \"\"),\r\n        filter(lambda rD: isinstance(rD[\"Work Master Code\"], str)), ### 7/18 오류제보 반영\r\n        ## Family Type Name에 \"H_\" 문자열 포함된 경우 제외\r\n        filter(lambda rD: not findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n        ## 행 딕셔너리의 NO, Standard Type 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictGrp[0][\"NO\"], \"Standard Type\":rowsDictGrp[0][\"Standard Type\"]})),\r\n        ## Q'ty Cal Type Tag 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n        list,\r\n    )\r\n    return res\r\n\r\n\r\ndef find_stdWMdicts_forCat(rowsDictsGrps):\r\n    res = go(#>\r\n        rowsDictsGrps, list,\r\n        map(find_stdWMdicts_inGrp),\r\n        #filter(lambda x: x!=[]),\r\n        list,\r\n    )#<\r\n    return res\r\n\r\ndef find_appliedTypeDicts_forCat(rowsDictsGrps):\r\n    catName = rowsDictsGrps[0][0][\"Family Category\"]\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    #stdWMsDicts = find_stdWMdicts_forCat(rowsDictGrps)\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Family Type Name에 \"H_\" 문자열 포함된 경우만 필터링\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictsGrp[0][\"NO\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            ## 각 딕셔너리마다 카테고리 명 입력\r\n            #map(lambda rD: dictUpdate(rD, {\"Family Category\":catName})),\r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef find_appliedTypeDicts_forRoom(rowsDictsGrps):\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Standard Type 에 \"H_\" 문자열 포함된 경우만 필터링(only for room)\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Standard Type\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rD[\"Standard Type\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            \r\n            ## Room 의 경우는 \"No\"와 \"Family Type Name\"을 합쳐서 \"Family Type Name\"에 입력\r\n            map(lambda rD: dictUpdate(rD,{\"Family Type Name\":str(rD[\"NO\"]).split('.')[0]+\"_\"+rD[\"Family Type Name\"]})),\r\n            \r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef merge_sameFamType_wmSpecs(appliedTypeDicts):\r\n    def merge_inGrp(appliedTypeDicts_perGrp):\r\n        \"\"\"\r\n        엑셀 타입별 행그룹 내에서 실 적용 패일리명이 들어있는\r\n        행들만 추출하고, 그 중 이름이 같은 것들의 wm 정보는 합쳐서\r\n        하나의 이름에 하나의 딕셔너리 객체만 존재하도록 수정\r\n        \"\"\"\r\n        ## 그룹 내 실 적용 패밀리 타입 명 추출(중복 불허)\r\n        keysPerGrp = go(#>\r\n            appliedTypeDicts_perGrp,\r\n            ## 개별 행딕셔너리의 패밀리 타입 항목 값 추출\r\n            map(lambda rD: rD[\"Family Type Name\"]),\r\n            ## 문자열 내 \"H_\"가 포함되어있는 지 검사\r\n            filter(lambda x: \"H_\" in x),\r\n            ## 중복 Family Type Name 단일화\r\n            set, list,\r\n        )#<\r\n        ## 패밀리 타입 명을 k라는 변수명으로 하나씩 순회\r\n        for k in keysPerGrp:\r\n            ### k라는 패밀리 타입 명에 해당하는 딕셔너리 모두 검색\r\n            sameNameDicts = list(filter(lambda x: x[\"Family Type Name\"] == k, appliedTypeDicts_perGrp))\r\n            ### 하나의 타입명에 복수 객체인지를 검사하여\r\n            ### 2개 이상인 경우\r\n            if len(sameNameDicts)>=2:\r\n                ### 동일 이름의 딕셔너리들 중 첫번째 항목의 \"wmSpecs\"에\r\n                ### 나머지 항목의 wmSpecs 항목을 몰아준다\r\n                for i,rD in enumerate(sameNameDicts[1:]):\r\n                    if rD[\"wmSpecs\"]:\r\n                        sameNameDicts[0][\"wmSpecs\"].append(*rD[\"wmSpecs\"])\r\n                    else: pass\r\n                ### 몰아주기가 끝나면, 첫번째를 제외한 나머지 딕셔너리는\r\n                ### 불필요해지므로 삭제\r\n                appliedTypeDicts_perGrp.remove(sameNameDicts[i+1])\r\n            else:                \r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDicts_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return map(merge_inGrp, appliedTypeDicts)\r\n\r\n\r\n\r\ndef inject_stdWMtoAppliedTypeDicts(appliedTypeDicts, allCat_stdWMdicts_stdTypeName):\r\n    def inject_inGrp(appliedTypeDict_perGrp):\r\n        \"\"\"\r\n        타입 그룹 별 공통 WM 딕셔너리 항목들을\r\n        실적용패밀리 딕셔너리에 주입하는 함수\r\n        \"\"\"\r\n        ## 실적용패밀리 딕셔너리 리스트의 구성 원소 각각을\r\n        ## rD(rowDictionary) 라는 이름으로 순회\r\n        for rD in appliedTypeDict_perGrp:\r\n            ### rD의 \"Standard Type\" 항목 값이\r\n            ### 입력받은 타입별 공통 WM항목 딕셔너리의 키값중에\r\n            ### 포함되었는지 검사후 있으면,\r\n            if rD[\"Standard Type\"] in list(allCat_stdWMdicts_stdTypeName.keys()):\r\n                #### rD의 \"wmSpecs\" 항목에 공통 WM항목을 추가하여 재할당\r\n                rD[\"wmSpecs\"] = rD[\"wmSpecs\"] + allCat_stdWMdicts_stdTypeName[rD[\"Standard Type\"]]\r\n            else:\r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDict_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return list(map(inject_inGrp, appliedTypeDicts))\r\n    \r\ndef updateFamTypeDicts_symValPair(total_appliedTypeDicts, calcTypeDict_symValPair):\r\n    \"\"\"\r\n    실적용패밀리타입명 별 딕셔너리에\r\n    \"Q'ty Cal Type Tag\" 항목 값 이름과 일치하는\r\n    물량산출 매개변수 꾸러미 추가하는 함수\r\n    \"\"\"\r\n    # 전체 결과물 담을 빈 딕셔너리 선언\r\n    res = {}\r\n    # 전체 실적용 패밀리 딕셔너리들 중 구성원소 각각을 d라는 이름으로 순회\r\n    for d in total_appliedTypeDicts:\r\n        ## 딕셔너리의 \"Q'ty Cal Type Tag\"항목의 값이 빈문자열이 아니라면,\r\n        if d[\"Q'ty Cal Type Tag\"]!=\"\":\r\n            ### 딕셔너리에 \"Sym_Val Dict\"라는 키를 추가하고\r\n            ### calcTypeDict 중 일치하는 값을 골라 키의 값으로 할당\r\n            symValPair = calcTypeDict_symValPair[d[\"Q'ty Cal Type Tag\"]]\r\n            d[\"Sym_Val Dict\"] = symValPair\r\n        ## 전체용 빈 딕셔너리에 패밀리 타입명을 키로 추가하고\r\n        ## 방금 수정한 단위 딕셔너리를 키의 값으로 할당\r\n        res[d[\"Family Type Name\"]] = d    \r\n    return res\r\n    \r\ndef matchWith_Elem_Dict(famlist_dic,revitElems):\r\n    \"\"\"\r\n    레빗객체와 패밀리리스트 딕셔너리의 정보를 하나로 결합해주는 용도의 함수\r\n    패밀리리스트 데이터는 패밀리 타입명을 키값으로 하는 하나의 딕셔너리로 정리되어있어야 한다\r\n    revit객체는 패밀리리스트 상 존재하는 타입만 필터링해서 입력해야 함\r\n    \"\"\"\r\n    # 수행결과를 모을 빈 리스트 선언\r\n    res = []\r\n    # 모든 레빗 객체들을 하나씩 순회 \r\n    for i in revitElems:\r\n        ## revit 객체들과 revit 타입별 Family List 딕셔너리를 결합하기 위한 빈 딕셔너리 선언\r\n        combD = {}\r\n        ## 패밀리 타입명 추출 - Room 객체인 경우와 아닌 경우 분기\r\n        if \"Room\" in str(type(i)):\r\n            famTypeName = i.GetParameterValueByName(\"Number\") + \"_\" + i.GetParameterValueByName(\"Name\")\r\n        else:\r\n            famTypeName = i.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\")\r\n        ## 결합용 딕셔너리의 \"Elem\" 이라는 키에 순회 중인 i (revit객체)를 할당\r\n        combD[\"Elem\"] = i\r\n        combD[\"GUID\"] = i.GetParameterValueByName(\"IfcGUID\")\r\n        ## 결합용 딕셔너리의 \"wms\" 이라는 키에 \r\n        ## 순회 중인 i (revit객체) 패밀리 타입 명과 일치하는 famlist_dictionary의 값을 할당\r\n        try:\r\n            combD[\"wms\"] = deepcopy(famlist_dic[famTypeName])\r\n            ##결합된 딕셔너리를 res에 저장\r\n            res.append(combD)\r\n        except:\r\n            pass\r\n    # 전체 수행 결과 반환\r\n    return res\r\n\r\ndef update_sym_valDict(matched_elemDicts):\r\n    def update_sym_valDict_single(d):\r\n        \"\"\"\r\n        딕셔너리별로 포함된 [\"wms\"][\"Sym_Val Dict\"]항목 내에\r\n        아직 계산되지 않은 매개변수 값들을 계산하여\r\n        \"Post_Sym_Val Dict\"라는 새로운 키의 값으로 할당하는 함수\r\n        \"\"\"\r\n        e = d[\"Elem\"]\r\n        newSymValDict = {}\r\n        keys = d[\"wms\"][\"Sym_Val Dict\"].keys()\r\n        vals = d[\"wms\"][\"Sym_Val Dict\"].values()\r\n        for s,v in zip(keys, vals):\r\n            ## Vals 항목이 사용자 입력값이 아닌 revit 매개변수인 경우\r\n            if isinstance(v,str):\r\n                if v not in list(map(lambda x: x.Name, e.Parameters)):\r\n                    calc_v = e.ElementType.GetParameterValueByName(v)\r\n                else:\r\n                    calc_v = e.GetParameterValueByName(v)\r\n                calc_vv= calc_v if isinstance(calc_v, str) else round(calc_v, 3)\r\n                newSymValDict[s] = calc_vv\r\n            ## Vals 항목이 사용자 입력값인 경우는 그대로 입력된 숫자 사용\r\n            else:\r\n                newSymValDict[s] = v\r\n        d[\"wms\"][\"Post_Sym_Val Dict\"] = newSymValDict\r\n        \r\n        return d\r\n    return list(map(update_sym_valDict_single, matched_elemDicts))\r\n\r\n\r\n\r\n    \r\ncalcSheet_rowsListGrps_perType = get_DataOnGrpsAtSheet(calcStdSheet, \"구간판별\", \"#\")\r\ncalcSheet_rowsDictGrps_perType = cvt_rowsListGrps_toDictGrps(*calcSheet_rowsListGrps_perType,\"\")\r\ncalcTypeDict = form_TypeDict(calcSheet_rowsDictGrps_perType,\"Q'ty Cal Type Tag\",sttIdx=1)\r\ncalcTypeDict_symValPair = updateDict_symValPair(calcTypeDict)\r\n\r\nroomSheet_rowsListGrps_perType = get_DataOnGrpsAtSheet(allCatSheets[0], \"Standard Type\", \"H_\")\r\nroomSheet_rowsDictGrps_perType = cvt_rowsListGrps_toDictGrps(*roomSheet_rowsListGrps_perType,\"0.Room\")\r\nroom_stdWMdicts = find_stdWMdicts_forCat(deepcopy(roomSheet_rowsDictGrps_perType))\r\nroom_stdWMdicts_stdTypeName = form_TypeDict(room_stdWMdicts, \"Standard Type\",sttIdx=0)\r\n\r\nroom_appliedTypeDicts = find_appliedTypeDicts_forRoom(roomSheet_rowsDictGrps_perType)\r\nroom_appliedTypeDicts_noDupl = merge_sameFamType_wmSpecs(room_appliedTypeDicts)\r\n\r\nroom_appliedTypeDicts_withStdWm = list(chain(*inject_stdWMtoAppliedTypeDicts(room_appliedTypeDicts_noDupl, room_stdWMdicts_stdTypeName)))\r\n\r\n# 룸 제외 모든 카테고리 시트 처리\r\nallCatSheet_rowsListGrps = map( lambda x: get_DataOnGrpsAtSheet(x, \"Standard Type\", \"H_\"), allCatSheets[1:] )\r\nallCatSheet_rowsListGrps_namesPair = list(zip(allCatSheet_rowsListGrps, allCatSheetsNames_noRoom))\r\nallCatSheet_rowsDictGrps = map( lambda x: cvt_rowsListGrps_toDictGrps(*x[0],x[1]), allCatSheet_rowsListGrps_namesPair )\r\n\r\n# \"Standard Type\" 별 wm 공통항목 찾기\r\nallCat_stdWMdicts = list(map( lambda x: find_stdWMdicts_forCat(x), deepcopy(allCatSheet_rowsDictGrps) ))\r\n# \"Standard Type\" 명으로 검색할 수 있는, 전 카테고리 \"Standard Type\" 별 공통 WM항목 사전 만들기\r\nallCat_stdWMdicts_stdTypeName = dictsMerge(list(map(lambda x: form_TypeDict(x, \"Standard Type\",sttIdx=0), allCat_stdWMdicts)))\r\n\r\nallCat_appliedTypeDicts = map( lambda x: find_appliedTypeDicts_forCat(x), allCatSheet_rowsDictGrps )\r\nallCat_appliedTypeDicts_noDupl = map( lambda x: merge_sameFamType_wmSpecs(x), allCat_appliedTypeDicts )\r\n\r\nallCat_appliedTypeDicts_withStdWm = list(chain(*chain(*map( lambda x: inject_stdWMtoAppliedTypeDicts(x,allCat_stdWMdicts_stdTypeName), allCat_appliedTypeDicts_noDupl ))))\r\n\r\ntotal_appliedTypeDicts = room_appliedTypeDicts_withStdWm + allCat_appliedTypeDicts_withStdWm\r\nFamTypeDicts_symValPair = updateFamTypeDicts_symValPair(total_appliedTypeDicts,calcTypeDict_symValPair)\r\n\r\nallUsedFamTypeNames_Excel = FamTypeDicts_symValPair.keys()\r\nallElemsFiltered_byExcel = list(map(lambda y: y[1], list(filter(lambda x: x[0] in allUsedFamTypeNames_Excel , allElemsSet))))\r\n\r\nallElemsDict = update_sym_valDict(matchWith_Elem_Dict(FamTypeDicts_symValPair, allElemsFiltered_byExcel))\r\n# Assign your output to the OUT variable.\r\n\r\nOUT = allElemsDict, FamTypeDicts_symValPair, calcTypeDict_symValPair",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "58daf06df9104b8391f520ccf481f57c",
      "Inputs": [
        {
          "Id": "2888ab33721743e0ae13ac4434a4ee07",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb94bf70f0614392ae1e8118670b81ff",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "579f82985caf400d9840f56d3770c28b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6382d910bd1e4e2db78a241eabf57a5d",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "697161a7bcd34473ad070e70e6c47d79",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "09ff3023bbe14c029ffa457f54a1e8b2",
      "Inputs": [
        {
          "Id": "2a68d04b2d3f4143aee9cd81a4729012",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66dd7d6dd4ee4e8a8efcd2878561afac",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res;",
      "Id": "c2f7e321f21542a7a43c4983524e1413",
      "Inputs": [
        {
          "Id": "b76201eaf8974341ad75667be3ac8335",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63a21fcd9c474676a250567aa03af847",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Family Category\"];",
      "Id": "37bfabad5a32481ab39a5f326f0e3529",
      "Inputs": [
        {
          "Id": "4e933726c0de47da90a453c652bc0276",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0e562466963a46dfa051fa82a403ab7f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"wmSpecs\"];",
      "Id": "09697cd5daa84e8681828c063d34296c",
      "Inputs": [
        {
          "Id": "60cc092386b94d9fbc6c39c5af6e1032",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "903f83b15ffc4fdaa851417f4b280910",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "bbe482a28aae46caada9776448ca3c31",
      "Inputs": [
        {
          "Id": "55a602f0254f45269265de904997cac4",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "256d4d37297c463ab482d17e49a3bf16",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78c9ab451c664adaa2fd7d9c437923cd",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "97993dcefb3b4f3397f54b7d072c90c9",
      "Inputs": [
        {
          "Id": "2f51538db4c2452397e4ee3638a4f334",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c6185d8f9937417880d88675ff2c3f8b",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "57403439fab34b2eb6cf21f4d71e10c6",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "14a86467091f4cbfbb505e5931efa309",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GroupByKey@var[]..[],var[]..[]",
      "Id": "9ad2f810adda4fcdae069c71f07922f2",
      "Inputs": [
        {
          "Id": "3e8c94792f3a490bb67103277a40222b",
          "Name": "list",
          "Description": "List of items to group as sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "1c1d5bdb30284aa68dcd9f0a9c81aab6",
          "Name": "keys",
          "Description": "Key values, one per item in the input list, used for grouping the items\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ef50a9ac4fa4408e930254c076b96b12",
          "Name": "groups",
          "Description": "list of sublists, with items grouped by like key values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ef7ed452dbc4959958aa034e8aba3ae",
          "Name": "uniqueKeys",
          "Description": "key value corresponding to each group",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Group items into sub-lists based on their like key values\n\nList.GroupByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"rIDX\"];",
      "Id": "87e9b060026b45fd9265d86bb6dfa753",
      "Inputs": [
        {
          "Id": "8ec559fddf914a1d8ac308ccfec43736",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c579b8a527de4b86ac99fcfd4ccdf674",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Quantity\"];",
      "Id": "b92a094b915349449dee8ecf7ef063e3",
      "Inputs": [
        {
          "Id": "d9eac38470fd429ebb72001161c96a4a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d911b346006446fd99875c9722122388",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"rIDX\"];",
      "Id": "a922d6a4ef964f88908a33fc12eebd1a",
      "Inputs": [
        {
          "Id": "eeeab133d9f34ed59dc6e8512c942bb7",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1e0ad1837645471c8d88a9688dec4b12",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "3b5d67e4bb3744edb5093353ad222626",
      "Inputs": [
        {
          "Id": "12da072871284dddb90693833b8a0c4d",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "448b6aa4bdeb49b4a8ccf334468b18b2",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncat_rIDX_vals = IN[0]\r\n# Place your code below this line\r\n\r\nres = []\r\nfor catGrp in cat_rIDX_vals:\r\n    new_catGrp = []\r\n    for i in catGrp:\r\n        try:\r\n            new_catGrp.append(sum(i))\r\n        except:\r\n            new_catGrp.append(0)\r\n    res.append(new_catGrp)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "bbdaa00591684054a7be736303660d19",
      "Inputs": [
        {
          "Id": "00701d525aa046b8976fca7f79e6303f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5c51ea2a072a40f6bf9b39e134c190c0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "e3a090b9228d466ebe1b206d082ebba6",
      "Inputs": [
        {
          "Id": "b2d3e66a1e3d4c4e84842229a1af5d2a",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        },
        {
          "Id": "a2ac12cc22bc4244b7d5c85c8d1d8923",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1aa46d3dee04c62852aa62bc2bb1c99",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "e697cd02cd33480f826b88bb807a2dfc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "767bfc27e45b47deb87ef5232e25c002",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 264,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "26fa4d44e5a24cbe8ad3c672e5ee6472",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bde137e8f8ff4e4ba2046e44a5fba330",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "51ff3d4e470a415b9a466dc2ee7c3d35",
      "Inputs": [
        {
          "Id": "8728c90e6df84acfa987dfed69e494b7",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bf1b2f5c86e942c29007b1f17d37f6d8",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "dca2510d212b40df9fb10db4764ee024",
      "Inputs": [
        {
          "Id": "142180ec72904146988fd756eeb7ec7e",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30d82c366926459d88bb0a2ca137b141",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.Type@var",
      "Id": "381b6816a63c4ad9a5812d7dbfa63c6b",
      "Inputs": [
        {
          "Id": "8551cd95da79494a9e6465fb90f2305f",
          "Name": "object",
          "Description": "Object to query type\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "33ce989dd6f242329f8f1a93d078ccbd",
          "Name": "string",
          "Description": "Type of object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the type of object represented as string.\n\nObject.Type (object: var): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i!=\"Revit.Elements.DirectShape\";",
      "Id": "5276025f67d248ca845e0814b23777de",
      "Inputs": [
        {
          "Id": "7eadf25c17824811a5d53c0cced1aeed",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df152cbc55304f3b884874f607d619f4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "6bd3a0bdd7074b6fbd12d7f3473b3923",
      "Inputs": [
        {
          "Id": "b5b57ba18a744048940a75a3318edd9c",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f2f47ac2e88440fe8f83bc5b1ba6c0df",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7386be5203154c60a1e39c5fd606c32b",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "142effdde45541e293f60e34fa2d08d9",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "34304384d8ce43078bbb9bb72827b8f5",
      "Inputs": [
        {
          "Id": "a17de4c2b7d24a09b60c96be8f1f4367",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9d145eba8e4475a90b2c565372699e5",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.TakeItems@var[]..[],int",
      "Id": "3d0d1d58a3aa4fb8a8020afd566ffde4",
      "Inputs": [
        {
          "Id": "8d0328a11fd1449fab1fe9fada228e77",
          "Name": "list",
          "Description": "List to take from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a8949e5f1c614f97b480bdc60af64410",
          "Name": "amount",
          "Description": "Amount of items to take. If negative, items are taken from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a797fe6d3cc4cd58aeccb22f2360874",
          "Name": "list",
          "Description": "List of extracted items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Fetches an amount of items from the start of the list.\n\nList.TakeItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-14;",
      "Id": "802142866fa84f43aa506326e882f0a5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c10e969a237d467bbf6c0b29f7a56d0a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Range, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "76604e671a6049e6acf093fb818987bf",
      "Inputs": [
        {
          "Id": "a120ec997e1240d9b44748e5742b31a4",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b9668ea322a24115b2486a25f5414cb7",
          "Name": "end",
          "Description": "Number or letter to end the sequence at\r\nDefault value: 9",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "27eab817eee649a58ffb81098d12d80e",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9aaa90ed3ff64f1081fcaed29a0625ca",
          "Name": "list",
          "Description": "New list of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers or letters in the specified range."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "749675edd80c458ca4a22f0dbd0c4054",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1bf30d20ca7d4e57b5ae25e8b3d34d80",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "93c4572a98bc4ae8a9868f31a5b20fc2",
      "Inputs": [
        {
          "Id": "acf6e840f5ee454c8d273f42836300c3",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "77b710a75f6f40739bd3f40bec1c9e9a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "7cb8ca48bf1d461ab69e87d65aad6cd6",
      "Inputs": [
        {
          "Id": "5c91ca1f57964e408227e9f103199a25",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5dc78e0ab34c4b5f9aca1bf095245cd5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "6c5525b4ec6345bdb1355296d0fad191",
      "Inputs": [
        {
          "Id": "429b9d3f97e04ddb913ceafd74c08e96",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48cf6dd69e5745d8a4badea8f748da97",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "a59be76a81a74b4982f34676c01ae4de",
      "Inputs": [
        {
          "Id": "09767934a7bb4a168e453ce0fedf857a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88b362546e634ffa8ff163b5f2f3a1d8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\";",
      "Id": "22843b225c8f4d7ca40461f1ec36172e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1272864a8969480285351a1cf1c8c8c0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Cycle@var[]..[],int",
      "Id": "93675bdcbdb14357beb75505d00e8a7a",
      "Inputs": [
        {
          "Id": "7ded59ca8b444e78a80112d8a8a602c5",
          "Name": "list",
          "Description": "List to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "867251b1e05f4e36aa955595cf47c47a",
          "Name": "amount",
          "Description": "Number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ab6702af393c4d4e874d3c8bada02b52",
          "Name": "list",
          "Description": "List of repeated lists of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list by concatenating copies of a given list.\n\nList.Cycle (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nreplaceSheetIdx = IN[0]\r\nreplace_idxsGrps = IN[1]\r\nreplace_valsGrps = IN[2]\r\nsrc_list = IN[3]\r\n\r\n\r\n# Place your code below this line\r\ndef replace_calcForExport(replace_idxsGrps, replace_valsGrps, src_list, replaceSheetIdx):\r\n    zipped_cats = list(zip(replace_idxsGrps, replace_valsGrps))\r\n    for x in range(len(zipped_cats)):\r\n        grps_cat = zipped_cats[x]\r\n        src_cat = src_list[replaceSheetIdx[x]]\r\n        for i in range(len(grps_cat[0])):\r\n            idx = grps_cat[0][i]\r\n            print(idx)\r\n            vals = grps_cat[1][i]\r\n            src_cat[idx] = vals\r\n    return src_list\r\n        \r\nif any(replaceSheetIdx):\r\n    res = replace_calcForExport(replace_idxsGrps, replace_valsGrps, src_list, replaceSheetIdx)\r\nelse:\r\n    res = src_list\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1bef153320954bf79c41c662064fe2a3",
      "Inputs": [
        {
          "Id": "a45e2923af6743f0bac3d270a4a51bcd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "959e6e03a5b341a4a1074421a02202c6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0fda7cc0b74f432e9daf8086f120997a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "91d3622bb6ce4e05894cf6ce925384f8",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "45a50308810d48ce95dc97ee3ced4ba1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "76c0811a0cf04a3d963a6ff40e04a0cf",
      "Inputs": [
        {
          "Id": "ce231360a84d456db6082b5c5ff0d922",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "123ac996f06d450d832c6ee31d7069af",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fcbfff37d07c4ab8a1953972b3701447",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "0ffe037a0e644009adde1ff774bc8ccb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eb6b053e058b475fbc82cf1a515b3b61",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "105635819aaf47ea95f22c53f28cb9f5",
      "Inputs": [
        {
          "Id": "1d6cfa74e55f4e97bc84cd321cf66286",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "f2981ec1682245a19f39f7d5590a4e23",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "077870de2e5a4d729f16fe36a0413b60",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "fd6d46aa8b2640a58c664998dff9de9f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "af820fdbfa564f60ab29453b16390b4d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ntgtStr = IN[0]\r\nhdrs_list_sheets = IN[1]\r\n# Place your code below this line\r\n\r\ndef find_tgtColIdx(tgtStr, hdrs_list_sheets):\r\n    res = []\r\n    for hdrs_list in hdrs_list_sheets:\r\n        if hdrs_list[0]!=\"NO\":\r\n            col_idx = hdrs_list.index(tgtStr)\r\n        else:\r\n            col_idx = hdrs_list.index(tgtStr)+1\r\n        res.append(col_idx)\r\n    return res\r\n# Assign your output to the OUT variable.\r\nOUT = find_tgtColIdx(tgtStr, hdrs_list_sheets)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "53ef45e8cc6e40399b858183a5b26160",
      "Inputs": [
        {
          "Id": "61b5977ea8d7495ca9291e656b242d91",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86ff6e829c324f5ba71898eba14cd814",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e71d4402929549c6968c271766f73218",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Quantity\";",
      "Id": "e949624b70d341a7892f9abf4aff4ede",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6605df4d78434736b7b17a34a4723d60",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "162005bfdcfb4100aa4a3ad1714fe5a0",
      "Inputs": [
        {
          "Id": "e12a8c4f95104beba45f31f130837c68",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0492e26ac02347c196d2e70a2840891c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "37dd499034e249c8a77c96cb434dfa3d",
      "Inputs": [
        {
          "Id": "6f7c467f3bcd4ad4949921e026144cf6",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "813637fd9610469da1a8c4cb005a491d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "e0a730f5abbd499585d7c7d402a86a7a",
      "Inputs": [
        {
          "Id": "e30ef5e387ea43d2862ea9bdc2beb276",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d2ad357e0a6e4eaea577f67d79695299",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "c663f6bb17814f69a6fc932f40fe1109",
      "Inputs": [
        {
          "Id": "9338fed6596d4aef80b359c8f6902bec",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5432488edbc749c3a84b8e2c98478a2a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "usedSheetNames;",
      "Id": "0fc51c8b4fe6405f9452a5dda767293e",
      "Inputs": [
        {
          "Id": "7a03ef4833a54e29b2dc25b4488c3173",
          "Name": "usedSheetNames",
          "Description": "usedSheetNames",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fddefc1085d24bf486861cff44d41d06",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"0.Room\"\n,\"1.Floors\"\n,\"2.Roofs\"\n,\"3.Walls_Ext\"\n,\"3.Walls_Int\"\n,\"4.St_Fdn\"\n,\"5.St_Col\"\n,\"6.St_Framing\"\n,\"7.Ceilings\"\n,\"8.Doors\"\n,\"9.Windows\"\n,\"10.Stairs\"\n,\"11.Railings\"\n,\"12.Generic\"\n,\"13.Manual_Input\"];",
      "Id": "4bd1d89ea5cc4ddeb9c768daec1f29ec",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6866d244bf74f90993bb73027ec60d1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.IndexOf@var[]..[],var",
      "Id": "04df34ee109c4a69bf345265bc87d805",
      "Inputs": [
        {
          "Id": "2cbcc6d12cca444491f83bcdb3d5b997",
          "Name": "list",
          "Description": "The list to find the element in.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "21033e574d4c4317862532ced0ef9af6",
          "Name": "element",
          "Description": "The element whose index is to be returned.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a91f80e0d9a24f7b8b5f06487cd3e151",
          "Name": "int",
          "Description": "The index of the element in the list. Invalid index -1 will be returned if strict match not found.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the index of the element in the given list. Match between given list and target element must be a strict match (i.e. int to int, double to double, string to string, object to object etc.)\n\nList.IndexOf (list: var[]..[], element: var): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "allSheetNames;",
      "Id": "e97ea602d85543798f28934428445e91",
      "Inputs": [
        {
          "Id": "f90acec16d1148bcb0bd9cb7f82dc476",
          "Name": "allSheetNames",
          "Description": "allSheetNames",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22e6bec369514cf8b4495fb896d259e8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = 0",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "976b571f2d854987ab91696c46d06ef7",
      "Inputs": [
        {
          "Id": "b3b9ed2109734c5083495c6f6df0c9f7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8281b438f5874e4ca4446a6a85be8c25",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 246,
      "SelectedString": "OST_EdgeSlab",
      "NodeType": "ExtensionNode",
      "Id": "0c927f7650f444ecb5b45187c926735c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a9053c19ac1a48a78e73faf35a332a3c",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "8fb5ae44edc4450d8c7668ed9e1f96b1",
      "Inputs": [
        {
          "Id": "79f379b6f65e433994515fec63a7bf77",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b69d3b8373c4da8894964b999d1b252",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "19c282569a234b8a9ef8c91c03f7419c",
      "Inputs": [
        {
          "Id": "1c64374f51c741dca67094bf641d7890",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98f74cb4eb434c2db15a844929eac4ec",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "11e415810ae64cef9bf915f7f07468c8",
      "Inputs": [
        {
          "Id": "2c29681eae464a4782e43fe969ed3be3",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "166b2b154a444047b8da2cff84565f0f",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "data;",
      "Id": "58cb77ad3cbd4194b67596806c1e2457",
      "Inputs": [
        {
          "Id": "45547d3f13d4499eb8f0ed311830c5fb",
          "Name": "data",
          "Description": "data",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cc1f03d79eaa4f77a832751c2cff7a63",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dictPerElem;",
      "Id": "37579c8d8a434b2690b74c147de21029",
      "Inputs": [
        {
          "Id": "6d23d8e1f2db4bdda1b0059f66e72a46",
          "Name": "dictPerElem",
          "Description": "dictPerElem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68663aba7643409ba2fa5a8744a39699",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"wmSpecs\"];",
      "Id": "d7777a95a6944bc18cc476a8ecff3233",
      "Inputs": [
        {
          "Id": "225931c4d015451b8239a3c27f663f2f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4dffbc01c9a4ce49e9c07c2f0458ce7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Quantity\"];",
      "Id": "2d7158c9eaa948feb70fd866df5d456d",
      "Inputs": [
        {
          "Id": "1a671480e83e405bb495ed3021fc94d7",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b29732ec79444c9bbef8a919284dd0ac",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 488,
      "SelectedString": "OST_Gutter",
      "NodeType": "ExtensionNode",
      "Id": "2b5b0248077241b88de1e94704caab82",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fbfa2120023343d2a7e57ce917d47e3a",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "ef2856efd91d4cdfa5c6731fc0e3a350",
      "Inputs": [
        {
          "Id": "fc6e7c8d184949139064461a9aa8f600",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cf4d8400d7447daa992836632717df4",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "3a741e5c93af45bf8eaadb3aa04b8f49",
      "Inputs": [
        {
          "Id": "31fee54ae74f49c9a7b78648c5fe6bf9",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88fde7de93994df7910f9c8bd2389a49",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "typeDict;",
      "Id": "2136b627e293420095cef169735078f8",
      "Inputs": [
        {
          "Id": "86b89196d6d34b7f8379f9c02f491d1a",
          "Name": "typeDict",
          "Description": "typeDict",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a298e09de1954265ab7f59c4f4501956",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "typeDict;",
      "Id": "d014116b3d074abda2178f5619bf922f",
      "Inputs": [
        {
          "Id": "6ba604fd772348469d98f6f0f2c2b9ab",
          "Name": "typeDict",
          "Description": "typeDict",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cfa22a9305d34c8185e1baa6968fd67a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Values",
      "Id": "213314d4af9c422da071972f6aa5105b",
      "Inputs": [
        {
          "Id": "f5b833af9ab24a3d9fc80f80337413aa",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3bc18906369f4e08b39eb654173ec8ff",
          "Name": "values",
          "Description": "Values of the dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the values in a Dictionary.\n\nDictionary.Values: var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wmSpecs_headers;",
      "Id": "593dc104535242c4aa5570e2ffef0a39",
      "Inputs": [
        {
          "Id": "3c4f217de59d41e48886c99ec4cd876c",
          "Name": "wmSpecs_headers",
          "Description": "wmSpecs_headers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "56773a500b8647cfb79aec11fa8392cf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "wmSpecs_headers;",
      "Id": "7fb8bed9a22642ef9b4cad9333d3fe80",
      "Inputs": [
        {
          "Id": "1b9466f21e604ab9b842b6f17fcd4a7b",
          "Name": "wmSpecs_headers",
          "Description": "wmSpecs_headers",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "206f2e86e2a14220856e499f8f1935f3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"catStr\"];",
      "Id": "231e9bbad88342768df7ceb9b70a9f8d",
      "Inputs": [
        {
          "Id": "cff90adbe1594efdba9188fb0498661d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8e7374fa919d42a5a662e8bfc4a5f188",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\etc\\물량산출테스트용\\debug\\20240902_khh\\Total BOQ_blank.xlsx",
      "InputValue": "..\\etc\\물량산출테스트용\\debug\\20240902_khh\\Total BOQ_blank.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "ecccb4f11a2543e29cb666423f4f697e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a1a5abbd413448b583e57b1b82eaae39",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "(AR) BOQ View (Working)",
      "Id": "faebcd6f41f046dba22561644139d393",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0cab15bda11c45a2a6c8b6670bef1717",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "058c5ecec7114c5da3425da4080ff1b1",
      "Inputs": [
        {
          "Id": "2cda4183eda242a0b599548730912953",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07c5600b5eb845e0a394a1d6e8725b1b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "finRes;",
      "Id": "faae1f09bb244b47a3d4e09678bed5a6",
      "Inputs": [
        {
          "Id": "030ddc1025994397944e30e9aa6471a7",
          "Name": "finRes",
          "Description": "finRes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "796804d5d95a48189405d6a2be406fbe",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"Family Type Name\"];",
      "Id": "4b26771373494af2ab6596ac227b0531",
      "Inputs": [
        {
          "Id": "33c497eed8a04ad39e87b60bcdfe8a1e",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "755dc9477c95488fb15075e63cd6b6de",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.CustomSelection, CoreNodeModels",
      "SerializedItems": [
        {
          "Name": "산출안함",
          "Item": "산출안함"
        },
        {
          "Name": "온통터파기",
          "Item": "온통터파기"
        },
        {
          "Name": "개별터파기",
          "Item": "개별터파기"
        }
      ],
      "SelectedIndex": 0,
      "SelectedString": "산출안함",
      "NodeType": "ExtensionNode",
      "Id": "bbbc75a0c0604f1280f428ef65ce021e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a170399ef4c4fcabc30a2fbb1608530",
          "Name": "value",
          "Description": "Selected value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A dropdown menu with customizable values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "earthmode;",
      "Id": "02380328b0274c2f9edfe4a8c1ea15f8",
      "Inputs": [
        {
          "Id": "f8f0e458be4543f7afd8cc815ae3ed63",
          "Name": "earthmode",
          "Description": "earthmode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266f688232474bea88168f12619b67fd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "execMode;",
      "Id": "b062fa79e826460ea060fa7689bda688",
      "Inputs": [
        {
          "Id": "7d46bcb3363545d48d1602b02b61ee54",
          "Name": "execMode",
          "Description": "execMode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "deff8fc117cb4aac8dba229131a1b081",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport Revit\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncalcMode = IN[0]\r\nexcaMode = IN[1]\r\nelemDicts = IN[2]\r\nearth_CommonInfoDict = IN[3]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\nLD = earth_CommonInfoDict[\"LD\"]\r\nGL = Revit.Elements.Coordinates.BasePoint().Z - LD * 1000\r\n\r\nGWL = earth_CommonInfoDict[\"GWL\"] * 1000\r\nGWLplane = Plane.ByOriginNormal(Point.ByCoordinates(0,0,GWL), Vector.ByCoordinates(0,0,1))\r\n\r\ndef find_belowSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n\r\ndef find_belowSrf_complex(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        #map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef find_aboveSrf_simple(elem):\r\n    res = go(\r\n        elem.Geometry(),\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 1),list,\r\n    )\r\n    if res:\r\n        return res\r\n        \r\ndef add_defaultEarthInfo(elemDict, GWL, GL):\r\n    elem = elemDict[\"Elem\"]\r\n    if \"_ExcaTgt\" in elemDict[\"wms\"][\"Family Type Name\"]:\r\n        btmSrfs = find_belowSrf_complex(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    else:\r\n        btmSrfs = find_belowSrf_simple(elem)\r\n        btmSrfs = btmSrfs if btmSrfs else []\r\n    uprSrfs = find_aboveSrf_simple(elem)\r\n    uprSrfs = uprSrfs if uprSrfs else []\r\n    \r\n    btmZ = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, btmSrfs))\\\r\n                        if btmSrfs else [0] )\r\n    uprZ = max( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, uprSrfs))\\\r\n                        if uprSrfs else [0] )\r\n    \r\n    btmArea = sum(list(map(lambda x: x.Area, btmSrfs)))\r\n    elem_Volume = btmArea * abs(uprZ - btmZ)\r\n    Btm_toGWL_volume = btmArea * ( GWL - btmZ ) / 1000000000\r\n    GWL_toGL_volume = btmArea * ( GL - GWL ) / 1000000000\r\n    Btm_toGL_volume = btmArea * ( GL - btmZ ) / 1000000000\r\n    \r\n    res = {\r\n        \"isExca\": False,\r\n        \"btmSrfs\": btmSrfs,\r\n        \"uprSrfs\": uprSrfs,\r\n        \"btmArea\": btmArea,\r\n        \"btmZ\": btmZ,\r\n        \"uprZ\": uprZ,\r\n        \"elem_Volume\": elem_Volume,\r\n        \"Btm_toGWL_volume\": Btm_toGWL_volume\\\r\n                            if Btm_toGWL_volume > 0 else 0 ,\r\n        \"GWL_toGL_volume\": GWL_toGL_volume\\\r\n                            if GWL_toGL_volume > 0 else 0 ,\r\n        \"Btm_toGL_volume\": Btm_toGL_volume\\\r\n                            if Btm_toGL_volume > 0 else 0 ,\r\n    }\r\n    \r\n    \r\n    elemDict[\"earthInfo\"] = res\r\n    return elemDict\r\n\r\ndef filter_EarthworkCalcTarget(elemDicts, GWL, GL):\r\n    ruleCondition = lambda x:\\\r\n        \"H1_\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_W\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S18_Wall\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B01\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_UG RC Slab\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ext Wall_RC_UG_Pit\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S16_TG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_SOG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_EQ-Pad\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Edge\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S17_Suspend\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"S15_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Stoop\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"B08_Ramp\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n        \"_ExcaTgt\" in x[\"wms\"][\"Family Type Name\"]\r\n    res = go(\r\n        elemDicts,\r\n        filter(lambda x: ruleCondition(x)),\r\n        map( lambda x: add_defaultEarthInfo(x, GWL, GL) ),\r\n        list,\r\n    )\r\n    remain = go(\r\n        elemDicts,\r\n        filter(lambda x: not ruleCondition(x)),\r\n        list,\r\n    )\r\n    return res, remain\r\n\r\n\r\ndef filter_ExcaTarget(earthworkCalcTargets):\r\n    res = go(\r\n        earthworkCalcTargets,\r\n        filter(lambda x:\r\n            \"B08_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n            \"S15_UG\" not in x[\"wms\"][\"Family Type Name\"]\r\n        ),\r\n        list,\r\n    )\r\n    for x in res:\r\n        x[\"earthInfo\"][\"isExca\"] = True\r\n    return res\r\n\r\n\r\ndef find_eachExcaShape(elemDict, GWL, GL, LD):\r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    btm_GL_Z = elemDict[\"earthInfo\"][\"btmZ\"]\r\n    G = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"G\"]\r\n    GL_FL_gap = LD\r\n    leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    excaHeight = -btm_GL_Z + base_downHeight\r\n    leanOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"] * 1000\r\n    excaOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"] * 1000\r\n    belowOffset = leanOffset + excaOffset\r\n    upperOffset = G * excaHeight\r\n    \r\n    find_belowRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    find_upperRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -btm_GL_Z),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    belowRefs = list(map(find_belowRef, belowSrfs))\r\n    upperRefs = list(map(find_upperRef, belowSrfs))\r\n    exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n    exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n    \r\n    return exca_Shape\r\n\r\ndef find_unionExcaShape(excaTargets, GWL, GL, LD):\r\n    excaSolids = []\r\n    for elemDict in excaTargets:\r\n        try:\r\n            excaSolids.append( find_eachExcaShape(elemDict, GWL, GL, LD) )\r\n            res = Solid.ByUnion(excaSolids)\r\n        except:\r\n            res = Cuboid.ByLengths(1,1,1)\r\n    return res\r\n    \r\ndef find_unionExcaShape_whole(excaTargets, GWL, GL, LD, earth_CommonInfoDict):\r\n    #belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    #btm_GL_Z = elemDict[\"earthInfo\"][\"btmZ\"]\r\n    \r\n    allElems = list(map(lambda x: x[\"Elem\"], excaTargets))\r\n    def makeBdCube(e):\r\n        eGeo = e.Geometry()[0]\r\n        eBdBoxCube = BoundingBox.ByGeometry(eGeo).ToCuboid()\r\n        return eBdBoxCube\r\n    \r\n    def find_elemsGeo(allElems):\r\n        #flatten_Elems = list(chain(*excaTargets))\r\n        allGeo = []\r\n        for e in allElems:\r\n            try:\r\n                allGeo.append(makeBdCube(e))\r\n            except:\r\n                pass\r\n        return allGeo\r\n        \r\n    def findWholeBdBox(allElems):\r\n        allGeo = find_elemsGeo(allElems)\r\n        unionBdCube = BoundingBox.ByGeometry(allGeo).ToCuboid()\r\n        return unionBdCube\r\n    \r\n    find_belowRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    \r\n    find_upperRef = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -btm_GL_Z),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n\r\n    unionBdCube = findWholeBdBox(allElems)\r\n    belowSrfs = go(\r\n        [unionBdCube],\r\n        map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n        map(lambda x: x.Explode()),\r\n        lambda x: list(chain(*x)),\r\n        filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n    )\r\n    \r\n    btm_GL_Z = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, belowSrfs))\\\r\n                        if belowSrfs else [0] )\r\n\r\n    G = earth_CommonInfoDict[\"G\"]\r\n    GL_FL_gap = LD\r\n    leanThk = earth_CommonInfoDict[\"C1\"] * 1000\r\n    baseThk = earth_CommonInfoDict[\"C2\"] * 1000\r\n    subBaseThk = earth_CommonInfoDict[\"C3\"] * 1000\r\n    extraThk = earth_CommonInfoDict[\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    excaHeight = -btm_GL_Z + base_downHeight\r\n    leanOffset = earth_CommonInfoDict[\"D1\"] * 1000\r\n    excaOffset = earth_CommonInfoDict[\"D2\"] * 1000\r\n    belowOffset = leanOffset + excaOffset\r\n    upperOffset = G * excaHeight\r\n\r\n    belowRefs = list(map(find_belowRef, belowSrfs))\r\n    upperRefs = list(map(find_upperRef, belowSrfs))\r\n    exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n    exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n    \r\n    return exca_Shape\r\n    \r\ndef find_disposalShape(elemDict):\r\n    elemDisposal_shape = Solid.ByUnion(list(elemDict[\"Elem\"].Geometry()))\r\n    \r\n    leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n    baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n    subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n    extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n    base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n    \r\n    belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n    offset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"]*1000\\\r\n                + (elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"]/2) *1000\r\n    \r\n    find_nonElemDisposal_belowRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.Translate(0, 0, -base_downHeight),\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n    find_nonElemDisposal_upperRefs = lambda belowSrf: go(\r\n        belowSrf,\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n        lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n        lambda x: x[0],\r\n        Surface.ByPatch,\r\n        BoundingBox.ByGeometry,\r\n        lambda x: [x.MinPoint, x.MaxPoint],\r\n        lambda x: Cuboid.ByCorners(*x),\r\n        lambda x: x.Explode()[0],\r\n        lambda x: x.PerimeterCurves(),\r\n        PolyCurve.ByJoinedCurves,\r\n    )\r\n\r\n    nonElemDisposal_belowRefs = list(map(find_nonElemDisposal_belowRefs, belowSrfs))\r\n    nonElemDisposal_upperRefs = list(map(find_nonElemDisposal_upperRefs, belowSrfs))\r\n    nonElemDisposal_RefGroups = list(zip(nonElemDisposal_belowRefs,nonElemDisposal_upperRefs))\r\n    nonElemDisposal_Shape = Solid.ByUnion( map(Solid.ByLoft, nonElemDisposal_RefGroups) )\r\n    disposal_shape = Solid.ByUnion( [elemDisposal_shape, nonElemDisposal_Shape] )\r\n    \r\n    return disposal_shape\r\n\r\ndef find_unionDisposalShape(earthCalcTargets):\r\n    disposal_Solids = []\r\n    for elemDict in earthCalcTargets:\r\n        try:\r\n            disposal_Solids.append( find_disposalShape(elemDict) )\r\n        except:\r\n            pass\r\n    return Solid.ByUnion(disposal_Solids)\r\n    \r\ndef add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape):\r\n    whole_disposalShape_volume = unionDisposalShape.Volume\r\n    whole_backfillShape_volume = unionBackfillShape.Volume\r\n    target = earthCalcTargets\r\n    \r\n    total_toGLvolume = go(\r\n        target,\r\n        map(lambda x: x[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    \r\n    def find_asignedQty_elemDict(d, wholeVolume):\r\n        res = go(\r\n            d,\r\n            lambda x: (x[\"earthInfo\"][\"Btm_toGL_volume\"] / total_toGLvolume) * wholeVolume,\r\n            lambda x: x / 1000000000,\r\n        )\r\n        return res\r\n     \r\n    res = go(\r\n        target,\r\n        map( lambda x: \r\n            dict( x, **{\"earthQty\": {\r\n                                        \"disposal\": find_asignedQty_elemDict(x, whole_disposalShape_volume),\r\n                                        \"backfill\": find_asignedQty_elemDict(x, whole_backfillShape_volume),\r\n                                    }} ) \r\n        ),\r\n        list,\r\n    )\r\n    return res\r\n    \r\ndef add_above_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_inter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] < x[\"earthInfo\"][\"elem_Volume\"]\r\n    cond_above_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] == 0\r\n    cond_below_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                    x[\"earthInfo\"][\"Btm_toGWL_volume\"] >= x[\"earthInfo\"][\"elem_Volume\"]\r\n    \r\n    total_Btm_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_above_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_GWL_toGL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_inter_GWL(elemDict) or cond_below_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"GWL_toGL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGL_volume + total_GWL_toGL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_inter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"GWL_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        elif elemDict[\"earthInfo\"][\"isExca\"] and cond_above_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"Btm_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_above\"] = 0.0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\ndef add_below_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n    cond_belowOrInter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0\r\n    \r\n    total_Btm_toGWL_volume  = go(\r\n        elemDicts,\r\n        filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n        filter( lambda elemDict: cond_belowOrInter_GWL(elemDict) ),\r\n        map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"]),\r\n        sum,\r\n    )\r\n    total_ref_volume = total_Btm_toGWL_volume\r\n    exca_above_total_volume = above_GWL_excaShape.Volume\r\n    exca_below_total_volume = below_GWL_excaShape.Volume\r\n    \r\n    def find_asignedQty_elemDict(elemDict):\r\n        if elemDict[\"earthInfo\"][\"isExca\"] and cond_belowOrInter_GWL(elemDict):\r\n            elemDict[\"earthQty\"][\"exca_below\"] = exca_below_total_volume/1000000000 * (elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"] / total_ref_volume)\r\n        else:\r\n            elemDict[\"earthQty\"][\"exca_below\"] = 0.0\r\n        return elemDict\r\n    res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n    return res\r\n\r\n\r\nearthCalcTargets, remainElemDicts = filter_EarthworkCalcTarget(elemDicts, GWL, GL)\r\nexcaTargets = filter_ExcaTarget(earthCalcTargets)\r\n\r\nif excaMode == \"개별터파기\":\r\n    unionExcaShape = find_unionExcaShape(excaTargets, GWL, GL, LD)\r\n    unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n    unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n    unionBackfillShape_volume = unionBackfillShape.Volume\r\n    try:\r\n        unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n        unionDisposalShape_volume = unionDisposalShape.Volume\r\n        above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n    except:\r\n        unionDisposalShape_volume = 0\r\n        above_GWL_excaShape, below_GWL_excaShape = None,None\r\n    \r\n    earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n    \r\n    earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n    earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n    \r\n    OUT = earthCalcTargets_calcFinshed + remainElemDicts\r\n    \r\nelif excaMode == \"온통터파기\":\r\n    unionExcaShape = find_unionExcaShape_whole(excaTargets, GWL, GL, LD, earth_CommonInfoDict)\r\n    unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n    unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n    unionBackfillShape_volume = unionBackfillShape.Volume\r\n    unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n    unionDisposalShape_volume = unionDisposalShape.Volume\r\n    above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n    \r\n    earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n    \r\n    earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n    earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n    \r\n    OUT = earthCalcTargets_calcFinshed + remainElemDicts\r\n\r\n# Assign your output to the OUT variable.\r\n#OUT = earthCalcTargets\r\n#OUT = unionExcaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape.Volume/1000000000, below_GWL_excaShape.Volume/1000000000\r\n#OUT = above_GWL_excaShape, below_GWL_excaShape\r\n#OUT = unionDisposalShape_volume/1000000000, unionBackfillShape_volume/1000000000\r\n#OUT = earthCalcTargets_calcFinshed, []\r\n#OUT = earthCalcTargets_calcFinshed + remainElemDicts",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "59658e88675c417481ca86fc0e7fabfc",
      "Inputs": [
        {
          "Id": "f7a184165f9340c5969916c4879bc505",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b73bca98f6f24c9ba7c48dd87740d16f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f04b36337144216b24391799f5d9f67",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c1176d5e778470bac07b9dc985e3f13",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "41c1af775e1d4a5ca7cd4e28b001813c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2];",
      "Id": "eba507fa5e304e17a67d7d065190e864",
      "Inputs": [
        {
          "Id": "5ed01b0f3e80448f8444fc660e424e29",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "583c44c88ea84939bfab0bd18e902e9d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"SF-Q0\"];",
      "Id": "b7dee80ea3b942a79ce2fadd8e03184f",
      "Inputs": [
        {
          "Id": "6b41bab7829f4441adf223bf556f3f3a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6572932fae774d4f89125d1775179b08",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0..15];",
      "Id": "36f68bd0bd234e679de0f8de00130b10",
      "Inputs": [
        {
          "Id": "3846085d31c2464b949611be95d7026b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7f74eff3213c444c8c7809e5d204f3db",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[2..16];",
      "Id": "c03a0584b9e44b6b9ac103682ccacdb7",
      "Inputs": [
        {
          "Id": "e010345f3973402c89afdfbb3d58471d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7d25fc8a232b48bf91d08ad3e080c6c0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[16];",
      "Id": "62cb4c6f9acc4dffa6e05938fb412ba1",
      "Inputs": [
        {
          "Id": "4e3b56adf6304349b8117bf163463cf1",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "393a7123682b430cbeffc89426e3772c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\"\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n\r\nimport re\r\nfrom functools import partial\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nlang_mode = IN[0]\r\n\r\nmanualSheet = IN[1]\r\n\r\n\r\n#wmspec_headers = [\r\n#    \"Work Master Code\" ,\"GaugeCode\" ,\"Unit\" ,\"Work Category-L1\"\r\n#    ,\"Work Category-L2\" ,\"Work Category-L3\" ,\"Spec. 1- L4\" ,\"Spec. 2- L5\"\r\n#    ,\"Spec. 3- L6\" ,\"Spec. 4- L7\" ,\"Spec. 5- L8\" ,\"Spec. 6- L9\"\r\n#    ,\"Spec. 7- L10\" ,\"Spec. 8- L11\" ,\"BOQ Spec1\" ,\"BOQ Spec2\" ,\"BOQ Spec3\"\r\n#    ,\"BOQ Spec4\" ,\"BOQ Spec5\" ,\"BOQ Spec6\" ,\"BOQ Spec7\" ,\"BOQ Spec8\" ,\"BOQ Spec9\"\r\n#    ,\"Work Master Code /w Description\", \"Description\" ,\"입찰_물량산출식\" ,\"실행_물량산출식\" ,\"rIDX\"\r\n#]\r\n# Place your code below this line\r\n\r\ndef find_IsInStr(target, string):\r\n    if target == None or string == None:\r\n        pass\r\n    else:\r\n        res = str(target) in str(string)\r\n        return res\r\n\r\ndef find_range_by_columnItem(db, col_idx, sep_rule):\r\n    tdb = list(map(lambda x: x[col_idx], db)) ##targetTransposedDB (col_idx에 해당하는 데이터만 추출)\r\n    last_idx_tdb = len(tdb)-1\r\n    tdb_enum = enumerate(tdb)\r\n    target_RowNumber = list(filter(lambda x: find_IsInStr(sep_rule, x[1]), tdb_enum))\r\n    endidxs_tmp= list(map(lambda x: x[0]-1,target_RowNumber))\r\n    endidxs_tmp.pop(0)\r\n    endidxs = endidxs_tmp + [last_idx_tdb] ## 각 구간별 마지막 행 번호\r\n    rangeSttIdxs = list(map(lambda x: x[0]+1,target_RowNumber))\r\n    rangeEndIdxs = endidxs\r\n    result = list(zip(rangeSttIdxs, rangeEndIdxs))\r\n    return result\r\n\r\n    \r\ndef find_headersAtSheet(sheet):\r\n    headers_sheet = list(map(lambda x: [x[1].replace(\"\\n\",\"\"),x[0]], filter(lambda x: x[1] != None, enumerate(sheet[1]))))\r\n    \r\n    return dict(headers_sheet)\r\n    #return list(headers_sheet)\r\n\r\ndef find_rangesAtSheet(sheet, hdrs_withIdxDict, trgt_hdr, trgt_str):\r\n    #hdrs_withIdxDict = dict(hdrs_withIdx)\r\n    return find_range_by_columnItem(sheet, hdrs_withIdxDict[trgt_hdr], trgt_str)\r\n\r\n\r\ndef get_DataOnGrpsAtSheet(sheet:list, discrHDRStr, discrRowStr):\r\n    \"\"\"\r\n    판별기준 Header문자열(discrHDRStr)이 들어있는 열에서,\r\n    판별기준 행 문자열(discrRowStr)이 들어있는 행번호 기준으로 구역을 나누어 데이터 리스트 반환\r\n    \"\"\"\r\n    hdrs_withIdxDict = find_headersAtSheet(sheet)\r\n\r\n    # 시트별 그룹 구분 (시작 행번호, 끝 행 번호 추출)\r\n    rowAreasAtSheet = find_rangesAtSheet(sheet, hdrs_withIdxDict, discrHDRStr, discrRowStr)\r\n    \r\n    # 시트 각행에 rIDX 데이터 주입하는 구간 - (시작) >>>>>>>\r\n    ## 헤더의 칼럼 인덱스 중 가장 큰 것 추출\r\n    hdrs_maxCol_idx = max(list(hdrs_withIdxDict.values()))\r\n    ## 마지막 헤더위치보다 한칸 옆을 행인덱스번호(\"rIDX\") 정보 보관 위치로 설정\r\n    hdrs_withIdxDict[\"rIDX\"] = hdrs_maxCol_idx+1\r\n    ## 시트의 각 행을 번호와 함께 pair 형태로 추출\r\n    sheetWith_rIDX = list(enumerate(sheet))\r\n    ## rIDX 보관된 시트 데이터 저장을 위한 빈 리스트 선언\r\n    sheet_rIDX = []\r\n    ## pair 형태의 각 행에서, 마지막 헤더의 한칸 우측위치에 rIDX 데이터 주입\r\n    ## 시트의 각 행마다 x 라는 이름으로 순회하며,\r\n    for x in sheetWith_rIDX:\r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치보다 클때,\r\n        if len(x[1])-1>hdrs_maxCol_idx:\r\n            #### 마지막 헤더의 우측 칸 위치를 rIDX 데이터로 치환\r\n            x[1][hdrs_maxCol_idx+1] = x[0]\r\n            sheet_rIDX.append(x[1])\r\n            \r\n        ### 행의 전체 데이터 길이가 마지막 헤더 위치와 같을때,\r\n        else:\r\n            #### 마지막 헤더의 우측칸이 없으므로 append로 rIDX 데이터 추가\r\n            x[1].append(x[0])\r\n            sheet_rIDX.append(x[1])\r\n    # <<<<< 시트 각행에 rIDX 데이터 주입하는 구간 - (끝)\r\n    \r\n    rowsGrps_perType_withNone = list(map(lambda x: sheet_rIDX[x[0]-1:x[1]], rowAreasAtSheet))\r\n    # None 데이터 치환 구간\r\n    rowsListGrps_perType = go(#>\r\n        rowsGrps_perType_withNone, list,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서\r\n        map(lambda rowGrp: \\\r\n        ## 한 행씩 골라서\r\n        list(map(lambda row: \\\r\n        ## 행을 구성하는 셀 값 중 None이 있으면 빈문자열로 치환\r\n        list(map(lambda cell: \"\" if cell==None else cell, row)), rowGrp)) ),\r\n        ## 맵 객체가 반환되므로 리스트 변환\r\n        list,\r\n    )#<\r\n    \r\n    return (rowsListGrps_perType, hdrs_withIdxDict)\r\n\r\ndef cvt_rowsListGrps_toDictGrps(rowsListGrps_perType, hdrs_withIdxDict, sheetName):\r\n    \"\"\"\r\n    헤더 행과 다수의 컨텐츠 행으로 이루어진 rowListGrps를,\r\n    모든 행을 헤더와 결합된 딕셔너리화 해서 rowDictGrps를 만드는 함수\r\n    \"\"\"\r\n    eff_hdrs_idx = hdrs_withIdxDict.values()\r\n    eff_hdrs_name = hdrs_withIdxDict.keys()\r\n    \r\n    rowsDictGrps_perType = go(#>\r\n        rowsListGrps_perType,\r\n        ## 하나의 타입을 규정하는 행들의 모임에서 한 행 씩 조작하는 함수들을 구상 후\r\n        ## 맵 함수 내에서 go로 합성하여 반복시켜 사용\r\n        map(lambda rowGrp: go(#>>\r\n            ### 그룹 전체 가져와서\r\n            rowGrp,\r\n            ### 각 행을 리스트 타입으로 변환\r\n            map(list), list,\r\n            ### 헤더에 해당하는 행 값을 추출--\r\n            map(lambda row: list(map(lambda idx: row[idx], eff_hdrs_idx))), list,\r\n            ### 헤더이름과 행 내부의 값을 2개씩 짝지어 줌\r\n            map(lambda row: list(zip(eff_hdrs_name, row))), list,\r\n            ### 헤더이름 : 값의 형태로 각 행 데이터를 딕셔너리로 만듬\r\n            map(lambda x: dict(x)),\r\n            ### 딕셔너리 마다 카테고리 정보 추가\r\n            map(lambda x: dictUpdate(x,{\"Family Category\":sheetName})),\r\n            list,\r\n            )#<<\r\n        ), list,\r\n    )#<\r\n    return rowsDictGrps_perType\r\n\r\n# 행딕셔너리 별 입력한 규칙에 따라 참거짓 여부를 반환하는 함수\r\ndef findRow_AppliedType(rowDict, tgtHDRname, rule=None):\r\n    p = re.compile('[0-9]{3,5}')\r\n    target = str(rowDict[tgtHDRname])\r\n    ## 함수 호출시 구분자(rule) 없이 호출한 경우\r\n    ## -Room Category 시트 용 이며 \"Standard Type\" 항목의 값이 000형태의 숫자인지를 판별\r\n    ## -Room Category 중 \"Standard Type\" 칼럼에 룸 넘버, \"Family Type Name\" 칼럼에 룸 이름 입력하게 되어있음\r\n    if rule==None:\r\n        p = re.compile('[0-9]{3,5}')\r\n        m = p.match(target)\r\n        stdCase = target ==\"Room No\"\r\n        res = all([m or stdCase])\r\n    ## 구분자(rule)가 정규표현식 객체로 들어온 경우\r\n    elif isinstance(rule, re.Pattern):\r\n        m = p.match(target)\r\n        res = all([m])\r\n    ## 구분자(rule)가 문자열로 들어온 경우\r\n    else:\r\n        res = rule in target\r\n    return res\r\n\r\ndef find_stdWMdicts_inGrp(rowsDictGrp):\r\n    res = go(\r\n        rowsDictGrp, list,\r\n        ## 엑셀 \"물량산출식\", \"Work Master Code\" 열에 값이 없는 행 제외\r\n        filter(lambda rD: rD[\"입찰_물량산출식\"] != \"\" and rD[\"실행_물량산출식\"] != \"\"),\r\n        filter(lambda rD: rD[\"Work Master Code\"] != \"\"),\r\n        filter(lambda rD: isinstance(rD[\"Work Master Code\"], str)), ### 7/18 오류제보 반영\r\n        ## Family Type Name에 \"H_\" 문자열 포함된 경우 제외\r\n        filter(lambda rD: not findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n        ## 행 딕셔너리의 NO, Standard Type 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictGrp[0][\"NO\"], \"Standard Type\":rowsDictGrp[0][\"Standard Type\"]})),\r\n        ## Q'ty Cal Type Tag 업데이트\r\n        map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n        list,\r\n    )\r\n    return res\r\n\r\n\r\ndef find_stdWMdicts_forCat(rowsDictsGrps):\r\n    res = go(#>\r\n        rowsDictsGrps, list,\r\n        map(find_stdWMdicts_inGrp),\r\n        #filter(lambda x: x!=[]),\r\n        list,\r\n    )#<\r\n    return res\r\n\r\ndef find_appliedTypeDicts_forCat(rowsDictsGrps):\r\n    catName = rowsDictsGrps[0][0][\"Family Category\"]\r\n    eff_hdrs_name = list(rowsDictsGrps[0][0].keys())\r\n    wmspec_headers = [\"Family Category\", \"Work Master Code\", \"GaugeCode\", \"Unit\"]\\\r\n        + list(filter(lambda x: \"Work Cat\" in x or \"Spec\" in x, eff_hdrs_name))\\\r\n        + [\"Work Master Code /w Description\", \"Description\",\"입찰_물량산출식\", \"실행_물량산출식\", \"rIDX\"]\r\n    #stdWMsDicts = find_stdWMdicts_forCat(rowsDictGrps)\r\n    \r\n    appliedTypeDicts = go(#>\r\n        rowsDictsGrps,\r\n        map(lambda rowsDictsGrp: go(#>>\r\n            rowsDictsGrp, list,\r\n            ## Family Type Name에 \"H_\" 문자열 포함된 경우만 필터링\r\n            filter(lambda rD: findRow_AppliedType(rD, \"Family Type Name\", rule=\"H_\")),\r\n            ## 행 딕셔너리의 NO, Standard Type 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"NO\":rowsDictsGrp[0][\"NO\"], \"Standard Type\":rowsDictsGrp[0][\"Standard Type\"]})),\r\n            ## 그룹 첫행을 기준으로 Q'ty Cal Type Tag 업데이트 - 추후 함수 분리 염두\r\n            map(lambda rD: dictUpdate(rD,{\"Q'ty Cal Type Tag\":rowsDictsGrp[0][\"Q'ty Cal Type Tag\"]})),\r\n            \r\n            # wmSpecs 속성들을 헤더로 하는 새로운 딕셔너리 형성 및 값 추가(값은 list형태)\r\n            map(lambda rD: dictUpdate(rD, {\"wmSpecs\": go(\r\n                ### wmspec관련 항목들 값을 리스트로 모음\r\n                map(lambda x: rD[x], wmspec_headers), list,\r\n                ### 항목명과 항목값을 모아서 딕셔너리 형태로 변환\r\n                lambda x: zip(wmspec_headers,x), dict,\r\n                ### wmSpecs 항목을 리스트 구조로 수정해 두기\r\n                lambda x: [x] if x[\"Work Master Code\"]!=\"\" else [],\r\n                \r\n            )}) ),\r\n            ## 밖으로 꺼내진 WorkMaster 관련 속성 삭제\r\n            map(lambda rD: dictDeleteKeys(rD, wmspec_headers)), list,\r\n            ## 각 딕셔너리마다 카테고리 명 입력\r\n            #map(lambda rD: dictUpdate(rD, {\"Family Category\":catName})),\r\n            list,\r\n            )#<<\r\n        ),\r\n        # 실적용 패밀리타입이 없는 그룹은 제외하는 구간\r\n        filter(lambda x: list(x)!=[]),\r\n        list,\r\n    )#<\r\n    \r\n    return appliedTypeDicts\r\n\r\ndef merge_sameFamType_wmSpecs(appliedTypeDicts):\r\n    def merge_inGrp(appliedTypeDicts_perGrp):\r\n        \"\"\"\r\n        엑셀 타입별 행그룹 내에서 실 적용 패일리명이 들어있는\r\n        행들만 추출하고, 그 중 이름이 같은 것들의 wm 정보는 합쳐서\r\n        하나의 이름에 하나의 딕셔너리 객체만 존재하도록 수정\r\n        \"\"\"\r\n        ## 그룹 내 실 적용 패밀리 타입 명 추출(중복 불허)\r\n        keysPerGrp = go(#>\r\n            appliedTypeDicts_perGrp,\r\n            ## 개별 행딕셔너리의 패밀리 타입 항목 값 추출\r\n            map(lambda rD: rD[\"Family Type Name\"]),\r\n            ## 문자열 내 \"H_\"가 포함되어있는 지 검사\r\n            filter(lambda x: \"H_\" in x),\r\n            ## 중복 Family Type Name 단일화\r\n            set, list,\r\n        )#<\r\n        ## 패밀리 타입 명을 k라는 변수명으로 하나씩 순회\r\n        for k in keysPerGrp:\r\n            ### k라는 패밀리 타입 명에 해당하는 딕셔너리 모두 검색\r\n            sameNameDicts = list(filter(lambda x: x[\"Family Type Name\"] == k, appliedTypeDicts_perGrp))\r\n            ### 하나의 타입명에 복수 객체인지를 검사하여\r\n            ### 2개 이상인 경우\r\n            if len(sameNameDicts)>=2:\r\n                ### 동일 이름의 딕셔너리들 중 첫번째 항목의 \"wmSpecs\"에\r\n                ### 나머지 항목의 wmSpecs 항목을 몰아준다\r\n                for i,rD in enumerate(sameNameDicts[1:]):\r\n                    if rD[\"wmSpecs\"]:\r\n                        sameNameDicts[0][\"wmSpecs\"].append(*rD[\"wmSpecs\"])\r\n                    else: pass\r\n                ### 몰아주기가 끝나면, 첫번째를 제외한 나머지 딕셔너리는\r\n                ### 불필요해지므로 삭제\r\n                appliedTypeDicts_perGrp.remove(sameNameDicts[i+1])\r\n            else:                \r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDicts_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return map(merge_inGrp, appliedTypeDicts)\r\n\r\ndef inject_stdWMtoAppliedTypeDicts(appliedTypeDicts, allCat_stdWMdicts_stdTypeName):\r\n    def inject_inGrp(appliedTypeDict_perGrp):\r\n        \"\"\"\r\n        타입 그룹 별 공통 WM 딕셔너리 항목들을\r\n        실적용패밀리 딕셔너리에 주입하는 함수\r\n        \"\"\"\r\n        ## 실적용패밀리 딕셔너리 리스트의 구성 원소 각각을\r\n        ## rD(rowDictionary) 라는 이름으로 순회\r\n        for rD in appliedTypeDict_perGrp:\r\n            ### rD의 \"Standard Type\" 항목 값이\r\n            ### 입력받은 타입별 공통 WM항목 딕셔너리의 키값중에\r\n            ### 포함되었는지 검사후 있으면,\r\n            if rD[\"Standard Type\"] in list(allCat_stdWMdicts_stdTypeName.keys()):\r\n                #### rD의 \"wmSpecs\" 항목에 공통 WM항목을 추가하여 재할당\r\n                rD[\"wmSpecs\"] = rD[\"wmSpecs\"] + allCat_stdWMdicts_stdTypeName[rD[\"Standard Type\"]]\r\n            else:\r\n                pass\r\n        ## 수정된 딕셔너리들 리스트를 반환\r\n        return appliedTypeDict_perGrp\r\n    # 단위 그룹에 대한 함수를 복수 그룹들 전체에 시행\r\n    return list(map(inject_inGrp, appliedTypeDicts))\r\n\r\ndef matchWith_Elem_Dict(famlist_dic,revitElems):\r\n    \"\"\"\r\n    레빗객체와 패밀리리스트 딕셔너리의 정보를 하나로 결합해주는 용도의 함수\r\n    패밀리리스트 데이터는 패밀리 타입명을 키값으로 하는 하나의 딕셔너리로 정리되어있어야 한다\r\n    revit객체는 패밀리리스트 상 존재하는 타입만 필터링해서 입력해야 함\r\n    \"\"\"\r\n    # 수행결과를 모을 빈 리스트 선언\r\n    res = []\r\n    # 모든 레빗 객체들을 하나씩 순회 \r\n    for i in revitElems:\r\n        ## revit 객체들과 revit 타입별 Family List 딕셔너리를 결합하기 위한 빈 딕셔너리 선언\r\n        combD = {}\r\n        ## 패밀리 타입명 추출 - Room 객체인 경우와 아닌 경우 분기\r\n        if \"Room\" in str(type(i)):\r\n            famTypeName = i.GetParameterValueByName(\"Number\") + \"_\" + i.GetParameterValueByName(\"Name\")\r\n        else:\r\n            famTypeName = i.GetParameterValueByName(\"Type\").GetParameterValueByName(\"Type Name\")\r\n        ## 결합용 딕셔너리의 \"Elem\" 이라는 키에 순회 중인 i (revit객체)를 할당\r\n        combD[\"Elem\"] = i\r\n        combD[\"GUID\"] = i.GetParameterValueByName(\"IfcGUID\")\r\n        ## 결합용 딕셔너리의 \"wms\" 이라는 키에 \r\n        ## 순회 중인 i (revit객체) 패밀리 타입 명과 일치하는 famlist_dictionary의 값을 할당\r\n        combD[\"wms\"] = deepcopy(famlist_dic[famTypeName])\r\n        ##결합된 딕셔너리를 res에 저장\r\n        res.append(combD)\r\n    # 전체 수행 결과 반환\r\n    return res\r\n\r\ndef formToElemDictStyle(typeDictsGrps):\r\n    res = []\r\n    for typeDicts in typeDictsGrps:\r\n        tmp = go(\r\n            typeDicts,\r\n            map(lambda x: {\"wms\": x, \"Elem\":\"from_Manual_Input\", \"GUID\": \"from_Manual_Input\"}),\r\n            list,\r\n        )\r\n        res.append(tmp)\r\n    return list(chain(*res))\r\n    \r\nmanualSheet_rowsListGrps = get_DataOnGrpsAtSheet(manualSheet, \"Standard Type\", \"H_\")\r\nmanualSheet_rowsDictGrps = cvt_rowsListGrps_toDictGrps(*manualSheet_rowsListGrps, \"13.Manual_Input\")\r\nmanualSheet_appliedTypeDicts = find_appliedTypeDicts_forCat(manualSheet_rowsDictGrps)\r\nmanualSheet_appliedTypeDicts_noDupl = merge_sameFamType_wmSpecs(manualSheet_appliedTypeDicts)\r\n#appliedTypeDicts_withStdWm = inject_stdWMtoAppliedTypeDicts(manualSheet_appliedTypeDicts_noDupl, {})\r\n\r\n\r\n# Assign your output to the OUT variable.\r\n\r\nOUT = formToElemDictStyle(manualSheet_appliedTypeDicts_noDupl)#, manualSheet_appliedTypeDicts_noDupl#",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "25215db1a0754850946d5b41df97ac26",
      "Inputs": [
        {
          "Id": "2b647c9d6a6d4bb5a57ec0bf81882923",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "92982ea0cf1a46ac9757a3d3253346e8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8871d9005bba4330a3c1ea87912e8cc7",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebde98554221478cbc74de7b003446d3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "44d92a495ffe4938a8a2e0f191e2ac98",
      "Inputs": [
        {
          "Id": "270f3a72773344d0b30cd7445fd33b90",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "52873f698b7c44269a02cadb5477ed38",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0e3dcbd4e91d4c42976ee9e2d5b600ed",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nelemDicts = IN[0]\r\nexcaMode = IN[1]\r\n#test_sample = elemDicts[303]\r\n\r\n# Place your code below this line\r\n\r\ndef tmp_switchEarthworkFormula(elemDict):\r\n    \r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] in [\"=Exca\", \"=Back\", \"=Disp\"]:\r\n                i[k] = \"_tbd\"\r\n        \r\n    return elemDict\r\n\r\ndef tmp_switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(tmp_switchEarthworkFormula, elemDicts))\r\n\r\ndef switchEarthworkFormula(elemDict):\r\n    for i in elemDict[\"wms\"][\"wmSpecs\"]:\r\n        calcFormulas = filter(lambda x: \"산출식\" in x ,list(i.Keys))\r\n        for k in calcFormulas:\r\n            if i[k] == \"=Exca\" and \"Above\" in i[\"Spec. 7- L10\"]:\r\n                try:\r\n                    i[k] = f'= {elemDict[\"earthQty\"][\"exca_above\"]}'\r\n                except:\r\n                    i[k] = f'= 0'\r\n                \r\n            elif i[k] == \"=Exca\" and \"Below\" in i[\"Spec. 7- L10\"]:\r\n                try:\r\n                    i[k] = f'= {elemDict[\"earthQty\"][\"exca_below\"]}'\r\n                except:\r\n                    i[k] = f'= 0'\r\n                \r\n            elif i[k] == \"=Back\":\r\n                try:\r\n                    i[k] = f'= {elemDict[\"earthQty\"][\"backfill\"]}'\r\n                except:\r\n                    i[k] = f'= 0'\r\n                \r\n            elif i[k] == \"=Disp\":\r\n                try:\r\n                    i[k] = f'= {elemDict[\"earthQty\"][\"disposal\"]}'\r\n                except:\r\n                    i[k] = f'= 0'\r\n    \r\n    return elemDict\r\n\r\ndef switchEarthworkFormula_allDicts(elemDicts):\r\n    return list(map(switchEarthworkFormula, elemDicts))\r\n# Assign your output to the OUT variable.\r\nif excaMode == \"산출안함\":\r\n    OUT = tmp_switchEarthworkFormula_allDicts(elemDicts)\r\nelse:    \r\n    OUT = switchEarthworkFormula_allDicts(elemDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ad52ea54ebbc4ba880bd3af3ddbfe30f",
      "Inputs": [
        {
          "Id": "1ba55ffe725344f5a1ec8aad0da51772",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f884b433680c49e2a6b9aa55b6e38499",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "699ee2afe8ef4100966173c51b9dfeb9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nmanualDicts = IN[0]\r\n# Place your code below this line\r\ndef filter_noFormulaWM(manualDict):\r\n    cond = lambda x:\\\r\n            x[\"입찰_물량산출식\"].startswith(\"=\") or\\\r\n            x[\"실행_물량산출식\"].startswith(\"=\")\r\n    wms = manualDict[\"wms\"]\r\n#    for wm in wms:\r\n    wmSpecs = wms[\"wmSpecs\"]\r\n    filtered_wmSpecs = go(\r\n        wmSpecs,\r\n        filter(lambda x: cond(x) ),\r\n        list,\r\n    )\r\n    wms[\"wmSpecs\"] = filtered_wmSpecs\r\n    manualDict[\"wms\"][\"wmSpecs\"] = filtered_wmSpecs\r\n    return manualDict\r\n\r\ndef filter_noWmSpecs(manualDicts):    \r\n    res = go(\r\n        manualDicts,\r\n        filter(lambda x: len(x[\"wms\"][\"wmSpecs\"]) != 0),\r\n        list,\r\n    )\r\n\r\n    return res\r\n    \r\nfiltered_manualDicts = list(map(filter_noFormulaWM, manualDicts))\r\n# Assign your output to the OUT variable.\r\nOUT = filter_noWmSpecs(filtered_manualDicts)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "1e2f686b1ba5486bbfe48489174d2615",
      "Inputs": [
        {
          "Id": "20fdc9d6cd6348c6be8d0c98fba3aeee",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "19e0cbc7ef3f45e082555ef553e9d359",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "f4975d68f4f9463a81f2d1585897e2ee",
      "Inputs": [
        {
          "Id": "b628caffb4f747faa01878005a2625f4",
          "Name": "list0",
          "Description": "Lists to join into one.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b2bac42c0dd4bb2b06053c640b2193a",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "269dcbfbc9944c1db3d107abf604ef80",
          "Name": "list",
          "Description": "Joined list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatenates all given lists into a single list.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"온통터파기\";",
      "Id": "5c3a62b79d404c8caf053c3ec31bfbdc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e79c62e2f5e9448ca140050f98aa7cb9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Description\"];",
      "Id": "268c422bb58a4ef3b64c791668c51006",
      "Inputs": [
        {
          "Id": "7dac7ebac2f34cfdb06ee8aab4b07a41",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c30289f7d43c47778fa7eb479c9a37c5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Work Master Code\"];",
      "Id": "54b2a1e5cf6d407988d161528eb4fe20",
      "Inputs": [
        {
          "Id": "af5678dfacc448f9a98fb70a2a5b76bd",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4aede7fb44e430b80a5aa9c22b22afc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"Description\"];",
      "Id": "4b39c11e79e24a068dd54676e6198175",
      "Inputs": [
        {
          "Id": "a2615f9e4a624ffe8ba42590856d536b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "32159e4ea5e04e47a48a08da7796de9e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport Revit\r\n\r\n################Module For Functional Programing##########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\nreduce = curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    res = dic1.update(dic2)\r\n    #res = {**dic1,**dic2}\r\n    return dic1 #res\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n##########################################################################\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncalcMode = IN[0]\r\nexcaMode = IN[1]\r\nelemDicts = IN[2]\r\nearth_CommonInfoDict = IN[3]\r\nGL = IN[4]\r\n#test_sample = elemDicts[303]\r\nif excaMode==\"산출안함\":\r\n    OUT = [elemDicts,[]]\r\nelse:\r\n    # Place your code below this line\r\n    LD = earth_CommonInfoDict[\"LD\"]\r\n    SurveyPoint_Z = Revit.Elements.Coordinates.SurveyPoint().Z\r\n    BasePoint_Z = Revit.Elements.Coordinates.BasePoint().Z\r\n    \r\n    pjt_level_calibration = BasePoint_Z - SurveyPoint_Z\r\n    \r\n    #GL = Revit.Elements.Coordinates.BasePoint().Z - LD * 1000\r\n    #GL = FL_Z - pjt_level_calibration - LD * 1000\r\n    \r\n    GWL_ = earth_CommonInfoDict[\"GWL\"] * 1000\r\n    \r\n    GWL = earth_CommonInfoDict[\"GWL\"] * 1000 - pjt_level_calibration\r\n    \r\n    GWLplane = Plane.ByOriginNormal(Point.ByCoordinates(0,0,GWL_ + pjt_level_calibration), Vector.ByCoordinates(0,0,1))\r\n    \r\n    def find_belowSrf_simple(elem):\r\n        res = go(\r\n            elem.Geometry(),\r\n            map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n            map(lambda x: x.Explode()),\r\n            lambda x: list(chain(*x)),\r\n            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n        )\r\n        if res:\r\n            return res\r\n    \r\n    def find_belowSrf_complex(elem):\r\n        res = go(\r\n            elem.Geometry(),\r\n            #map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n            map(lambda x: x.Explode()),\r\n            lambda x: list(chain(*x)),\r\n            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n        )\r\n        if res:\r\n            return res\r\n            \r\n    def find_aboveSrf_simple(elem):\r\n        res = go(\r\n            elem.Geometry(),\r\n            map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n            map(lambda x: x.Explode()),\r\n            lambda x: list(chain(*x)),\r\n            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z == 1),list,\r\n        )\r\n        if res:\r\n            return res\r\n            \r\n    def add_defaultEarthInfo(elemDict, GWL, GL, BasePoint_Calibration):\r\n        elem = elemDict[\"Elem\"]\r\n        if \"_ExcaTgt\" in elemDict[\"wms\"][\"Family Type Name\"]:\r\n            btmSrfs = find_belowSrf_complex(elem)\r\n            btmSrfs = btmSrfs if btmSrfs else []\r\n        else:\r\n            btmSrfs = find_belowSrf_simple(elem)\r\n            btmSrfs = btmSrfs if btmSrfs else []\r\n        uprSrfs = find_aboveSrf_simple(elem)\r\n        uprSrfs = uprSrfs if uprSrfs else []\r\n        \r\n        try:    \r\n            if \"Lean\" not in elemDict[\"wms\"][\"Family Type Name\"]:\r\n                leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n                baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n                subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n                extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n            else:\r\n                leanThk  = 0\r\n                baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n                subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n                extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n        except:\r\n            leanThk  = 0\r\n            baseThk = 0\r\n            subBaseThk = 0\r\n            extraThk = 0\r\n            \r\n    \r\n        base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n        \r\n        btmZ = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, btmSrfs))\\\r\n                            if btmSrfs else [0] ) - BasePoint_Calibration\r\n        uprZ = max( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, uprSrfs))\\\r\n                            if uprSrfs else [0] ) - BasePoint_Calibration\r\n        \r\n        btmArea = sum(list(map(lambda x: x.Area, btmSrfs)))\r\n        elem_Volume = btmArea * abs(uprZ - btmZ) / 1000000000\r\n        Btm_toGWL_volume = btmArea * ( GWL - (btmZ - base_downHeight) ) / 1000000000\r\n        GWL_toGL_volume = btmArea * ( GL - GWL ) / 1000000000\r\n        Btm_toGL_volume = btmArea * ( GL - (btmZ - base_downHeight) ) / 1000000000\r\n        \r\n        res = {\r\n            \"isExca\": False,\r\n            \"btmSrfs\": btmSrfs,\r\n            \"uprSrfs\": uprSrfs,\r\n            \"btmArea\": btmArea,\r\n            \"btmZ\": btmZ,\r\n            \"uprZ\": uprZ,\r\n            \"elem_Volume\": elem_Volume,\r\n            \"Btm_toGWL_volume\": Btm_toGWL_volume\\\r\n                                if Btm_toGWL_volume > 0 else 0 ,\r\n            \"GWL_toGL_volume\": GWL_toGL_volume\\\r\n                                if GWL_toGL_volume > 0 else 0 ,\r\n            \"Btm_toGL_volume\": Btm_toGL_volume\\\r\n                                if Btm_toGL_volume > 0 else 0 ,\r\n        }\r\n        \r\n        \r\n        elemDict[\"earthInfo\"] = res\r\n        return elemDict\r\n    \r\n    def filter_EarthworkCalcTarget(elemDicts, GWL, GL, BasePoint_Calibration):\r\n        ruleCondition = lambda x:\\\r\n            \"H1_\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S18_Shallow\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S18_W\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S18_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B01_MAT\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S18_Wall\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B01\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B08_UG RC Slab\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B08_Ext Wall_RC_UG_Pit\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S16_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S16_TG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S17_SOG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S17_Gr\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S17_EQ-Pad\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S17_Edge\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S17_Suspend\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"S15_UG\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B08_Stoop\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"B08_Ramp\" in x[\"wms\"][\"Family Type Name\"] or\\\r\n            \"_ExcaTgt\" in x[\"wms\"][\"Family Type Name\"]\r\n        res = go(\r\n            elemDicts,\r\n            filter(lambda x: ruleCondition(x)),\r\n            map( lambda x: add_defaultEarthInfo(x, GWL, GL, BasePoint_Calibration) ),\r\n            list,\r\n        )\r\n        remain = go(\r\n            elemDicts,\r\n            filter(lambda x: not ruleCondition(x)),\r\n            list,\r\n        )\r\n        return res, remain\r\n    \r\n    \r\n    def filter_ExcaTarget(earthworkCalcTargets):\r\n        res = go(\r\n            earthworkCalcTargets,\r\n            filter(lambda x:\r\n                \"B08_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n                \"B02_Ext Wall\" not in x[\"wms\"][\"Family Type Name\"] and\r\n                \"S15_UG\" not in x[\"wms\"][\"Family Type Name\"]\r\n            ),\r\n            list,\r\n        )\r\n        for x in res:\r\n            x[\"earthInfo\"][\"isExca\"] = True\r\n        return res\r\n    \r\n    \r\n    def find_eachExcaShape(elemDict, GWL, GL, LD, BasePoint_Calibration):\r\n        belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n        btm_GL_Z = elemDict[\"earthInfo\"][\"btmZ\"]\r\n        G = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"G\"]\r\n        GL_FL_gap = LD\r\n        \r\n        if \"Lean\" not in elemDict[\"wms\"][\"Family Type Name\"]:\r\n            leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n        else:\r\n            leanThk  = 0\r\n            \r\n        baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n        subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n        extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n        base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n        \r\n        if btm_GL_Z < -0.1:\r\n            excaHeight = (-btm_GL_Z + base_downHeight)\r\n        else:\r\n            excaHeight = base_downHeight\r\n            \r\n        leanOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"] * 1000\r\n        excaOffset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"] * 1000\r\n        belowOffset = leanOffset + excaOffset\r\n        #upperOffset = G * excaHeight\r\n        upperOffset = G * excaHeight + belowOffset\r\n        \r\n        find_belowRef = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.Translate(0, 0, -base_downHeight),\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n        \r\n        find_upperRef = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.Translate(0, 0, -btm_GL_Z - LD*1000),\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n        \r\n        belowRefs = list(map(find_belowRef, belowSrfs))\r\n        upperRefs = list(map(find_upperRef, belowSrfs))\r\n        exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n        exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n        \r\n        return exca_Shape\r\n    \r\n    def find_unionExcaShape(excaTargets, GWL, GL, LD, BasePoint_Calibration):\r\n        excaSolids = []\r\n        for elemDict in excaTargets:\r\n            excaSolids.append( find_eachExcaShape(elemDict, GWL, GL, LD, BasePoint_Calibration) )\r\n            res = Solid.ByUnion(excaSolids)\r\n        return res\r\n        \r\n    def find_unionExcaShape_whole(\r\n            excaTargets, \r\n            GWL, \r\n            GL, \r\n            LD, \r\n            earth_CommonInfoDict, \r\n            pjt_level_calibration\r\n        ):\r\n        \r\n        allElems = list(map(lambda x: x[\"Elem\"], excaTargets))\r\n        def makeBdCube(e):\r\n            eGeo = e.Geometry()[0]\r\n            eBdBoxCube = BoundingBox.ByGeometry(eGeo).ToCuboid()\r\n            return eBdBoxCube\r\n        \r\n        def find_elemsGeo(allElems):\r\n            #flatten_Elems = list(chain(*excaTargets))\r\n            allGeo = []\r\n            for e in allElems:\r\n                try:\r\n                    allGeo.append(makeBdCube(e))\r\n                except:\r\n                    pass\r\n            return allGeo\r\n            \r\n        def findWholeBdBox(allElems):\r\n            allGeo = find_elemsGeo(allElems)\r\n            unionBdCube = BoundingBox.ByGeometry(allGeo).ToCuboid()\r\n            return unionBdCube\r\n        \r\n        find_belowRef = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.Translate(0, 0, -base_downHeight),\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-belowOffset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n        \r\n        find_upperRef = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.Translate(0, 0, -btm_GL_Z - LD*1000),\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-upperOffset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n    \r\n        unionBdCube = findWholeBdBox(allElems)\r\n        belowSrfs = go(\r\n            [unionBdCube],\r\n            map(BoundingBox.ByGeometry), map(BoundingBox.ToCuboid),\r\n            map(lambda x: x.Explode()),\r\n            lambda x: list(chain(*x)),\r\n            filter(lambda x: x.NormalAtParameter(0.5,0.5).Z < -0.1),list,\r\n        )\r\n        \r\n        btm_GL_Z = min( list(map(lambda x: x.PointAtParameter(0.5,0.5).Z, belowSrfs))\\\r\n                            if belowSrfs else [0] ) - pjt_level_calibration\r\n    \r\n        G = earth_CommonInfoDict[\"G\"]\r\n        GL_FL_gap = LD\r\n        leanThk = earth_CommonInfoDict[\"C1\"] * 1000\r\n        baseThk = earth_CommonInfoDict[\"C2\"] * 1000\r\n        subBaseThk = earth_CommonInfoDict[\"C3\"] * 1000\r\n        extraThk = earth_CommonInfoDict[\"C4\"] * 1000\r\n        base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n        excaHeight = -btm_GL_Z + base_downHeight\r\n        leanOffset = earth_CommonInfoDict[\"D1\"] * 1000\r\n        excaOffset = earth_CommonInfoDict[\"D2\"] * 1000\r\n        belowOffset = leanOffset + excaOffset\r\n        #upperOffset = G * excaHeight\r\n        upperOffset = G * excaHeight + belowOffset\r\n    \r\n        belowRefs = list(map(find_belowRef, belowSrfs))\r\n        upperRefs = list(map(find_upperRef, belowSrfs))\r\n        exca_RefGroups = list(zip(belowRefs,upperRefs))\r\n        exca_Shape = Solid.ByUnion( map(Solid.ByLoft, exca_RefGroups) )\r\n        \r\n        return exca_Shape\r\n        \r\n    def find_disposalShape(elemDict):\r\n    #    elemDisposal_shape = Solid.ByUnion(list(elemDict[\"Elem\"].Geometry()))\r\n        elemDisposal_shape = BoundingBox.ByMinimumVolume(\r\n            [Solid.ByUnion(list(elemDict[\"Elem\"].Geometry()))]\r\n        ).ToCuboid()\r\n        \r\n        leanThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C1\"] * 1000\r\n        baseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C2\"] * 1000\r\n        subBaseThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C3\"] * 1000\r\n        extraThk = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"C4\"] * 1000\r\n        base_downHeight = leanThk + baseThk + subBaseThk + extraThk\r\n        \r\n        belowSrfs = elemDict[\"earthInfo\"][\"btmSrfs\"]\r\n        offset = elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D1\"]*1000\\\r\n                    + (elemDict[\"wms\"][\"Post_Sym_Val Dict\"][\"D2\"]/2) *1000\r\n        \r\n        find_nonElemDisposal_belowRefs = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.Translate(0, 0, -base_downHeight),\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n        find_nonElemDisposal_upperRefs = lambda belowSrf: go(\r\n            belowSrf,\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n            lambda x: x.OffsetMany(-offset, False, Vector.ZAxis()),\r\n            lambda x: x[0],\r\n            Surface.ByPatch,\r\n            BoundingBox.ByGeometry,\r\n            lambda x: [x.MinPoint, x.MaxPoint],\r\n            lambda x: Cuboid.ByCorners(*x),\r\n            lambda x: x.Explode()[0],\r\n            lambda x: x.PerimeterCurves(),\r\n            PolyCurve.ByJoinedCurves,\r\n        )\r\n    \r\n        nonElemDisposal_belowRefs = list(map(find_nonElemDisposal_belowRefs, belowSrfs))\r\n        nonElemDisposal_upperRefs = list(map(find_nonElemDisposal_upperRefs, belowSrfs))\r\n        nonElemDisposal_RefGroups = list(zip(nonElemDisposal_belowRefs,nonElemDisposal_upperRefs))\r\n        nonElemDisposal_Shape = Solid.ByUnion( map(Solid.ByLoft, nonElemDisposal_RefGroups) )\r\n        disposal_shape = Solid.ByUnion( [elemDisposal_shape, nonElemDisposal_Shape] )\r\n        \r\n        return disposal_shape\r\n    \r\n    def find_unionDisposalShape(earthCalcTargets):\r\n        disposal_Solids = []\r\n        for elemDict in earthCalcTargets:\r\n            disposal_Solids.append( find_disposalShape(elemDict) )\r\n            try:\r\n                disposal_Solids.append( find_disposalShape(elemDict) )\r\n            except:\r\n                pass\r\n    \r\n        return Solid.ByUnion(disposal_Solids)\r\n        \r\n    def add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape):\r\n        whole_disposalShape_volume = unionDisposalShape.Volume\r\n        whole_backfillShape_volume = unionBackfillShape.Volume\r\n        target = earthCalcTargets\r\n        \r\n        total_toGLvolume = go(\r\n            target,\r\n            map(lambda x: x[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n            sum,\r\n        )\r\n        \r\n        def find_asignedQty_elemDict(d, wholeVolume):\r\n            res = go(\r\n                d,\r\n                lambda x: (x[\"earthInfo\"][\"Btm_toGL_volume\"] / total_toGLvolume) * wholeVolume,\r\n                lambda x: x / 1000000000,\r\n            )\r\n            return res\r\n         \r\n        res = go(\r\n            target,\r\n            map( lambda x: \r\n                dict( x, **{\"earthQty\": {\r\n                                            \"disposal\": find_asignedQty_elemDict(x, whole_disposalShape_volume),\r\n                                            \"backfill\": find_asignedQty_elemDict(x, whole_backfillShape_volume),\r\n                                        }} ) \r\n            ),\r\n            list,\r\n        )\r\n        return res\r\n        \r\n    def add_above_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n        cond_inter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                        x[\"earthInfo\"][\"Btm_toGWL_volume\"] < x[\"earthInfo\"][\"elem_Volume\"]\r\n        cond_above_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] == 0\r\n        cond_below_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0 and \\\r\n                        x[\"earthInfo\"][\"Btm_toGWL_volume\"] >= x[\"earthInfo\"][\"elem_Volume\"]\r\n        \r\n        total_Btm_toGL_volume  = go(\r\n            elemDicts,\r\n            filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n            filter( lambda elemDict: cond_above_GWL(elemDict) ),\r\n            map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGL_volume\"]),\r\n            sum,\r\n        )\r\n        total_GWL_toGL_volume  = go(\r\n            elemDicts,\r\n            filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n            filter( lambda elemDict: cond_inter_GWL(elemDict) or cond_below_GWL(elemDict) ),\r\n            map(lambda elemDict: elemDict[\"earthInfo\"][\"GWL_toGL_volume\"]),\r\n            sum,\r\n        )\r\n        total_ref_volume = total_Btm_toGL_volume + total_GWL_toGL_volume\r\n        exca_above_total_volume = above_GWL_excaShape.Volume\r\n        exca_below_total_volume = below_GWL_excaShape.Volume\r\n        \r\n        def find_asignedQty_elemDict(elemDict):\r\n            if elemDict[\"earthInfo\"][\"isExca\"] and cond_inter_GWL(elemDict):\r\n                elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"GWL_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n            elif elemDict[\"earthInfo\"][\"isExca\"] and cond_above_GWL(elemDict):\r\n                elemDict[\"earthQty\"][\"exca_above\"] = ( exca_above_total_volume * (elemDict[\"earthInfo\"][\"Btm_toGL_volume\"] / total_ref_volume) ) / 1000000000\r\n            else:\r\n                elemDict[\"earthQty\"][\"exca_above\"] = 0.0\r\n            return elemDict\r\n        res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n        return res\r\n    \r\n    def add_below_excavation_qty_toElemDicts(elemDicts, above_GWL_excaShape, below_GWL_excaShape):\r\n        cond_belowOrInter_GWL = lambda x: x[\"earthInfo\"][\"Btm_toGWL_volume\"] != 0\r\n        \r\n        total_Btm_toGWL_volume  = go(\r\n            elemDicts,\r\n            filter(lambda elemDict: elemDict[\"earthInfo\"][\"isExca\"]),\r\n            filter( lambda elemDict: cond_belowOrInter_GWL(elemDict) ),\r\n            map(lambda elemDict: elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"]),\r\n            sum,\r\n        )\r\n        total_ref_volume = total_Btm_toGWL_volume\r\n        exca_above_total_volume = above_GWL_excaShape.Volume\r\n        exca_below_total_volume = below_GWL_excaShape.Volume\r\n        \r\n        def find_asignedQty_elemDict(elemDict):\r\n            if elemDict[\"earthInfo\"][\"isExca\"] and cond_belowOrInter_GWL(elemDict):\r\n                elemDict[\"earthQty\"][\"exca_below\"] = exca_below_total_volume/1000000000 * (elemDict[\"earthInfo\"][\"Btm_toGWL_volume\"] / total_ref_volume)\r\n            else:\r\n                elemDict[\"earthQty\"][\"exca_below\"] = 0.0\r\n            return elemDict\r\n        res = list(map( lambda x: find_asignedQty_elemDict(x), elemDicts ))\r\n        return res\r\n    \r\n    \r\n    earthCalcTargets, remainElemDicts = filter_EarthworkCalcTarget(elemDicts, GWL, GL, pjt_level_calibration)\r\n    excaTargets = filter_ExcaTarget(earthCalcTargets)\r\n    \r\n    # Assign your output to the OUT variable.\r\n    \r\n    if excaMode == \"개별터파기\":\r\n        unionExcaShape = find_unionExcaShape(excaTargets, GWL, GL, LD, pjt_level_calibration)\r\n        unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n        unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n        unionBackfillShape_volume = unionBackfillShape.Volume\r\n        unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n        \r\n        if isinstance(unionExcaShape, list) and len(unionExcaShape) ==2:\r\n            above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n            earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n            earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n            earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n            \r\n            OUT = [earthCalcTargets_calcFinshed + remainElemDicts, unionBackfillShape]\r\n            #OUT = 0\r\n        else:\r\n            above_GWL_excaShape = unionExcaShape\r\n            earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n            earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, above_GWL_excaShape)\r\n            OUT = [earthCalcTargets_aboveExca + remainElemDicts, unionBackfillShape]\r\n            #OUT = unionPreDisposalShape\r\n    \r\n    \r\n    elif excaMode == \"온통터파기\":\r\n        unionExcaShape = find_unionExcaShape_whole(excaTargets, GWL, GL, LD, earth_CommonInfoDict, pjt_level_calibration)\r\n        unionPreDisposalShape = find_unionDisposalShape(earthCalcTargets)\r\n        unionBackfillShape = unionExcaShape.Split(unionPreDisposalShape)[0]\r\n        unionBackfillShape_volume = unionBackfillShape.Volume\r\n        unionDisposalShape = unionExcaShape.Split(unionPreDisposalShape)[1]\r\n        unionDisposalShape_volume = unionDisposalShape.Volume\r\n        \r\n        if isinstance(unionExcaShape, list) and len(unionExcaShape) ==2:\r\n            above_GWL_excaShape, below_GWL_excaShape = unionExcaShape.Split(GWLplane)\r\n            earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n            earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, below_GWL_excaShape)\r\n            earthCalcTargets_calcFinshed = add_below_excavation_qty_toElemDicts(earthCalcTargets_aboveExca, above_GWL_excaShape, below_GWL_excaShape)\r\n            \r\n            OUT = [earthCalcTargets_calcFinshed + remainElemDicts, unionBackfillShape]\r\n        else:\r\n            above_GWL_excaShape = unionExcaShape\r\n            earthCalcTargets_dispoAndbackfill = add_dispoAndbackfill_qty_toElemDicts(earthCalcTargets, unionDisposalShape, unionBackfillShape)\r\n            earthCalcTargets_aboveExca = add_above_excavation_qty_toElemDicts(earthCalcTargets_dispoAndbackfill, above_GWL_excaShape, above_GWL_excaShape)\r\n            OUT = [earthCalcTargets_aboveExca + remainElemDicts, unionBackfillShape]\r\n        \r\n\r\n    \r\n        ",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "26e6afe1b5ed40619f40b6f92cf4c912",
      "Inputs": [
        {
          "Id": "b808d8c46a35492bb9156568f66fd577",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "315c0a592bff4a0aa1482c250ed5e677",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "debd2237347c4350883cda707a7f8131",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d8bcf53145844fc7945e9742f49a43d4",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b1bb3b05fb44a2099f69ee4c311c043",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9f7d7e36828453489b4136a36d90d86",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 3,
      "SelectedString": "GL",
      "NodeType": "ExtensionNode",
      "Id": "8ee8758f2bef45ec8c10f0fe6fad8ad2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b66c36e286d841288873370ad955f044",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.Elevation",
      "Id": "355060089e50453f8afbb375d7386576",
      "Inputs": [
        {
          "Id": "032075061e674eaa89a266bc3064ff13",
          "Name": "level",
          "Description": "Revit.Elements.Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "42cd9bc49d814c03ab152ea927719cdf",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The elevation of the level above ground level\n\nLevel.Elevation: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[1];\ni[0];\ni[0][45];",
      "Id": "14029b7b01664aa5a8b0fd06a8a878ec",
      "Inputs": [
        {
          "Id": "6efdb54177324feeb0fdddbccdbc48fa",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "593560928c034b93b3373011cce9f578",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "64a3fceaf4ec445fae559ff7a5ff7a1e",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4916cc5166844149ae674ab2b9eefb02",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "totalBOQpath;",
      "Id": "e84dc62872914d218aeacd843a06c171",
      "Inputs": [
        {
          "Id": "d96e036ec8524fb7ae8a7ea348d7d6cb",
          "Name": "totalBOQpath",
          "Description": "totalBOQpath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a955adfbc9a4d32bf5b793d736ec3ac",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "totalBOQpath;",
      "Id": "5ac573ea6041465f9446a653f49c7e5a",
      "Inputs": [
        {
          "Id": "fb56ae44dda7404c8a7921b597e76405",
          "Name": "totalBOQpath",
          "Description": "totalBOQpath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf2d4ec47a1a4dc88c76004863b644a5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "totalBOQpath;",
      "Id": "a3d3a74367f049849612bb8a69914c65",
      "Inputs": [
        {
          "Id": "1d3aa16d4fa844b5a9217eae073b6239",
          "Name": "totalBOQpath",
          "Description": "totalBOQpath",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "156d3b4edd2e4009abd9082caf3d2c28",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "select_fl;",
      "Id": "8f70db874be640e0887170b29e5f3f73",
      "Inputs": [
        {
          "Id": "65e814915a4545039b0caa23c1c7f3f7",
          "Name": "select_fl",
          "Description": "select_fl",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9417dfdff6a048169ca49eed42f1d931",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "earthmode;",
      "Id": "8af073234ded4a1ebc943414a625ec63",
      "Inputs": [
        {
          "Id": "296c99d4f1a841cab54603dc28458b10",
          "Name": "earthmode",
          "Description": "earthmode",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c4dcbf04ce684be8b67a81e3fb1296aa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "f9ab0355b99247939ae33d23f1c2f9aa",
      "Inputs": [
        {
          "Id": "01fc44d64a064efeb78c52e34b86736c",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2cd0a4f6795a4b70887791d61136720d",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3ea3626bad1141cab3c69743f6de994b",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a8cbfb1186e4447b4fbfd80f6b58ec3",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba020f09b1c84c07808d2e72996a08a0",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "9866eeb0eecd4d4f92e8e88589f6068d",
      "Inputs": [
        {
          "Id": "c9cc039cb1544845b1320aceb530ec31",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b00831668ee544a8874807e900088c39",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\etc\\2024_물량산출 마무리\\A.1_플랜트건축설계팀_BIM 팀 표준 Family List_Rev.6_2024.11.07_강한호_MK.xlsx.xlsm",
      "InputValue": "..\\etc\\2024_물량산출 마무리\\A.1_플랜트건축설계팀_BIM 팀 표준 Family List_Rev.6_2024.11.07_강한호_MK.xlsx.xlsm",
      "NodeType": "ExtensionNode",
      "Id": "8ab3accc47f6452a95570634f44f527d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8756bdd46b784387a804d239ef080404",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "9ea4e5024b984094b3f099ce90fe71ac",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6a96e72cc96a4e049acf5ffb0a48db4e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"5.P Family\"\n,\"3.S Family\"\n];",
      "Id": "67ef2ab6c8e6437f9f36d5890f50ce62",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f3d7d23de1794b6eaca2492426ad69fe",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport json\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\n\r\ncurry = lambda f: lambda a, *args: (\r\n    f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a, f: f(a), args)  ## 함수도 축약 가능 ##\r\n\r\n\r\ndef dictUpdate(dic1, dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n\r\n\r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n\r\n\r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a:\r\n            yield from flat(i)\r\n    else:\r\n        yield a\r\n\r\n\r\ndef grpBy(iter, key):\r\n    f, grpKeys, grps = key, [], []\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_, key=f):\r\n        grpKeys.append(key)\r\n        grps.append(list(grp_data))\r\n    return grps, grpKeys\r\n\r\n\r\n#########################################################################\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\npjtFamily_sheet_data = IN[0][0]\r\nstdFamily_sheet_data = IN[0][1]\r\n\r\n# Place your code below this line\r\ndef find_hdr_row(sheet_data, identifier):\r\n    res = go(\r\n        sheet_data,\r\n        filter(lambda x: identifier in str(x)),\r\n        filter(lambda x: \"No\" in str(x) and \"Family Name\" in str(x)),\r\n        list,\r\n    )\r\n    \r\n    if isinstance(res, list) and len(res)>0:\r\n        return res[0]\r\n    else:\r\n        return res\r\n\r\ndef find_cat(sheet, selected_row):\r\n    pattern = r'\\b\\d+\\.[A-Za-z]'\r\n    \r\n    crnt_row = selected_row\r\n    if sheet[crnt_row][2] and re.findall(pattern, str(sheet[crnt_row][2])):\r\n        return sheet[crnt_row][2]\r\n    elif crnt_row < 0:\r\n        pass\r\n    else:\r\n        return find_cat(sheet, crnt_row - 1)\r\n        \r\ndef find_parent_type(sheet, selected_row):\r\n    pattern = r'\\b\\d+\\.\\d+'\r\n    \r\n    crnt_row = selected_row\r\n    if sheet[crnt_row][2] and re.findall(pattern, str(sheet[crnt_row][2])):\r\n        return sheet[crnt_row][3]\r\n    elif crnt_row < 0:\r\n        pass\r\n    else:\r\n        return find_parent_type(sheet, crnt_row - 1)\r\n        \r\n        \r\ndef create_typeWM_match_dict_forPjt(sheet_data, hdrs=None):\r\n    if not hdrs:\r\n        hdrs = find_hdr_row(sheet_data, \"▣\")\r\n    hdr_idx_of_FamilyName = hdrs.index(\"Family Name\")\r\n    \r\n    modi_sheet_data = []\r\n    for idx,row in enumerate(pjtFamily_sheet_data):\r\n        newRow = list(row[:])\r\n        # del newRow[2]\r\n        # newRow.insert(2, find_cat(pjtFamily_sheet_data, idx))\r\n        newRow.append(find_cat(pjtFamily_sheet_data, idx))\r\n        newRow.append(find_parent_type(pjtFamily_sheet_data, idx))\r\n        modi_sheet_data.append(newRow)\r\n    \r\n    onlyEffRows = go(\r\n        modi_sheet_data,\r\n        filter(lambda x: \"True\" in str(x)),\r\n        list,\r\n    )\r\n    \r\n    dics_keys = [\r\n        \"Item\",\r\n        \"WM No.\",\r\n        \"Work Master\",\r\n        \"Spec.\",\r\n        \"Unit\",\r\n        \"표준 산출식\",\r\n        \"변경 산출식\",\r\n    ]\r\n    \r\n    res = []\r\n    tmp = None\r\n    for row_idx, row_cells in enumerate(onlyEffRows):\r\n        cat = row_cells[-2]\r\n        parent_type = row_cells[-1]\r\n        if \"True, True\" in str(row_cells):\r\n            if tmp:\r\n                for i in tmp:\r\n                    res.append(i)\r\n            tmp = []\r\n            for famType in row_cells[hdr_idx_of_FamilyName].split(\",\"):\r\n                tmp.append(\r\n                    {\r\n                        \"type_name\": famType.strip().upper(),\r\n                        \"cat\": cat,\r\n                        \"parent_type\": parent_type,\r\n                        \"wm_list\": []\r\n                    }\r\n                )\r\n        elif \"True, True\" not in str(row_cells):\r\n            for i in tmp:\r\n                famType = i[\"type_name\"]\r\n                wmDic = {}\r\n                for x in dics_keys:\r\n                    wmDic.update({x: row_cells[hdrs.index(x)]})\r\n                i[\"wm_list\"].append(wmDic)\r\n            \r\n    #return res\r\n    \r\n    # Convert nested dictionary to JSON string before returning\r\n    return json.dumps(res, ensure_ascii=False, indent=2)\r\n    \r\ndef create_typeWM_match_dict_forStd(sheet_data, hdrs=None):\r\n    def filter_hdr_row(row, rng_idx=None):\r\n        res_ = []\r\n        for hdr_idx, hdr in enumerate(row):\r\n            # if hdr!=None and hdr!='-':\r\n            res_.append({hdr: hdr_idx})\r\n        if rng_idx:\r\n            res = res_[rng_idx[0]:rng_idx[1]+1]\r\n        else:\r\n            res = res_\r\n        filter_res = list(filter(lambda hdr: list(hdr.keys())[0]!=None and list(hdr.keys())[0]!='-', res))\r\n        return filter_res\r\n    \r\n    if not hdrs:\r\n        common_hdrs = go(\r\n            sheet_data,\r\n            lambda x: find_hdr_row(x, \"Description\"),\r\n            lambda x: filter_hdr_row(x, [0,11]),\r\n        )\r\n    # hdr_idx_of_FamilyName = common_hdrs.index(\"Family Name_Basic (변경 불가)\")\r\n    \r\n    def find_hdrs_forType(common_hdrs, row):\r\n        type_hdrs_formula = filter_hdr_row(row, rng_idx=[12,32])\r\n        type_hdrs_paramDict = filter_hdr_row(row, rng_idx=[32,100])\r\n        \r\n        return {\r\n            \"표준헤더\": common_hdrs,\r\n            \"산출식헤더\": type_hdrs_formula,\r\n            \"매개변수헤더\": type_hdrs_paramDict,\r\n        }\r\n        \r\n    header_check = []\r\n    # res = []\r\n    \r\n    res = {}\r\n    type_hdrs=None\r\n    for idx, row in enumerate(sheet_data):\r\n        if row[2]==\"#\":\r\n            cat = row[3]\r\n            type_hdrs = find_hdrs_forType(common_hdrs, row)\r\n            # header_check.append(find_hdrs_forType(common_hdrs, row))\r\n        else:\r\n            dic = {}\r\n            if type_hdrs:\r\n                for hdr_dic in type_hdrs[\"표준헤더\"]:\r\n                    dic.update(\r\n                        {\r\n                            list(hdr_dic.keys())[0]: row[ list(hdr_dic.values())[0] ],\r\n                        }\r\n                    )\r\n                form_dic = {}\r\n                for hdr_formulas in type_hdrs[\"산출식헤더\"]:\r\n                    if row[ list(hdr_formulas.values())[0] ] and row[ list(hdr_formulas.values())[0] ]!='-':\r\n                        form_dic.update(\r\n                            {\r\n                                list(hdr_formulas.keys())[0]: row[ list(hdr_formulas.values())[0] ],\r\n                            }\r\n                        )\r\n                \r\n                param_dic = {}\r\n                for hdr_params in type_hdrs[\"매개변수헤더\"]:\r\n                    if row[ list(hdr_params.values())[0] ] and row[ list(hdr_params.values())[0] ]!='-':\r\n                        param_dic.update(\r\n                            {\r\n                                list(hdr_params.keys())[0]: row[ list(hdr_params.values())[0] ],\r\n                            }\r\n                        )\r\n\r\n                dic.update(\r\n                    {\r\n                        \"formulas\": form_dic,\r\n                        \"params\": param_dic,\r\n                    }\r\n                )\r\n                famName = dic[\"Family Name_Basic (변경 불가)\"]\r\n                res.update(\r\n                    {\r\n                        famName : dic\r\n                    }\r\n                )\r\n    \r\n    #return res\r\n    \r\n    # Convert nested dictionary to JSON string before returning\r\n    return json.dumps(res, ensure_ascii=False, indent=2)\r\n    \r\ndef insert_paramDic_toPjt_typeWM_match_dicts(pjt_typeWM_match_dicts, std_typeWM_match_dicts):\r\n    for dic in pjt_typeWM_match_dicts:\r\n        type_name = dic[\"type_name\"]\r\n        parent_typeName = dic[\"parent_type\"]\r\n        paramDic = std_typeWM_match_dicts[parent_typeName][\"params\"]\r\n        dic.update(\r\n            {\r\n                \"params\": paramDic\r\n            }\r\n        )\r\n        # print(dic)\r\n    #return pjt_typeWM_match_dicts\r\n    return json.dumps(pjt_typeWM_match_dicts, ensure_ascii=False, indent=2)\r\n\r\npjt_typeWM_match_dicts = create_typeWM_match_dict_forPjt(pjtFamily_sheet_data)\r\nstd_typeWM_match_dicts = create_typeWM_match_dict_forStd(stdFamily_sheet_data)\r\n\r\nres = insert_paramDic_toPjt_typeWM_match_dicts(\r\n    json.loads(pjt_typeWM_match_dicts), json.loads(std_typeWM_match_dicts)\r\n    )\r\n# Assign your output to the OUT variable.\r\n\r\n\r\nOUT = res",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "cbea0bd9471f490eaab91c598020d50a",
      "Inputs": [
        {
          "Id": "0fabafea845542549f163f7aeaa21657",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b2b46e60ebb4a79aa36711ba992e8a7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport json\r\nimport ast\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\n\r\ncurry = lambda f: lambda a, *args: (\r\n    f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a, f: f(a), args)  ## 함수도 축약 가능 ##\r\n\r\n\r\ndef dictUpdate(dic1, dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n\r\n\r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n\r\n\r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a:\r\n            yield from flat(i)\r\n    else:\r\n        yield a\r\n\r\n\r\ndef grpBy(iter, key):\r\n    f, grpKeys, grps = key, [], []\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_, key=f):\r\n        grpKeys.append(key)\r\n        grps.append(list(grp_data))\r\n    return grps, grpKeys\r\n\r\n\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\npjt_typeWM_match_dicts_str = IN[0]\r\npjt_typeWM_match_dicts = json.loads(pjt_typeWM_match_dicts_str)\r\nallElems_name = IN[1][0]\r\nallElems = IN[1][1]\r\n\r\n# Place your code below this line\r\n\r\ndef get_param_value(elem, name):\r\n    if name not in list(map(lambda x: x.Name, elem.Parameters)):\r\n        calc_v = elem.ElementType.GetParameterValueByName(name)\r\n    elif name == \"H_Room H or CH\":\r\n        if elem.GetParameterValueByName(name)==\"\":\r\n            calc_v = elem.GetParameterValueByName(\"Unbounded Height\")\r\n        else:\r\n            calc_v = elem.GetParameterValueByName(name)\r\n    else:\r\n        calc_v = elem.GetParameterValueByName(name)\r\n    \r\n    if calc_v==\"\":\r\n        calc_v = 0\r\n    \r\n    return calc_v\r\n\r\ndef update_calcResult_typeDict(pjt_typeWM_match_dicts, allElems, allElems_name):\r\n    res = []\r\n    for idx, elem in enumerate(allElems):\r\n        elem_famType_name = allElems_name[idx].upper()\r\n        for typeDict in pjt_typeWM_match_dicts:\r\n            typeDict[\"GUID\"] = elem.GetParameterValueByName(\"ifcGUID\")\r\n            if typeDict[\"type_name\"].strip() == elem_famType_name.strip():\r\n            \r\n                param_names = sorted(typeDict[\"params\"], key=len, reverse=True)\r\n                param_values = list(map(lambda x: typeDict[\"params\"][x], param_names))\r\n                \r\n                ###### 약자 값 업데이트 구간\r\n                updated_param_values = []\r\n                for param_v in param_values:\r\n                    if not isinstance(param_v, float):\r\n                        updated_param_values.append(get_param_value(elem, param_v))\r\n                    else:\r\n                        updated_param_values.append(param_v)\r\n                typeDict[\"calc_params\"] = dict(zip(param_names,updated_param_values))\r\n                ####### 약자 값 업데이트 구간####\r\n                \r\n                for wm in typeDict[\"wm_list\"]:\r\n                    \r\n                    \r\n                    if wm[\"변경 산출식\"]:\r\n                        formula = str(wm[\"변경 산출식\"])\r\n                    else:\r\n                        formula = str(wm[\"표준 산출식\"])\r\n                    wm[\"적용 산출식\"] = formula\r\n                        \r\n                    tmp_formula = formula\r\n                    \r\n                    if tmp_formula != \"=Exca\" and tmp_formula != \"=Back\" and tmp_formula != \"=Disp\":\r\n                        for n,v in typeDict[\"calc_params\"].items():\r\n                            tmp_formula = tmp_formula.replace(n, str(v))\r\n                        \r\n                        wm[\"대입 산출식\"] = tmp_formula\r\n                        try:\r\n                            wm[\"계산 결과\"] = eval(tmp_formula.strip(\"=\"))\r\n                        except:\r\n                            wm[\"로그\"] = \"!! 오류 발생 !! 수식 약자 및 파라미터 연동 확인 필요 !!\"\r\n                            wm[\"계산 결과\"] = 0\r\n                        \r\n#                    try:\r\n#                        res.append([typeDict[\"type_name\"], wm[\"Work Master\"], wm[\"표준 산출식\"], wm[\"대입 산출식\"], wm[\"계산 결과\"]])\r\n#                    except:\r\n#                        res.append([typeDict[\"type_name\"], wm[\"Work Master\"], wm[\"표준 산출식\"], \"대입 산출식 없음\", 0])\r\n                \r\n                res.append(typeDict)\r\n                \r\n    # Convert nested dictionary to JSON string before returning\r\n    return json.dumps(res, ensure_ascii=False, indent=2)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = update_calcResult_typeDict(pjt_typeWM_match_dicts, allElems, allElems_name)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "dbdf1a3303d64aba988cc4dd6168d113",
      "Inputs": [
        {
          "Id": "eedb2375ee86494e9786afd862c9a344",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5e6fe387f73b48f9b7f20d3fcd62866b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c2c73f2aa4f4c46aca2ca125ce3bda1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport json\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\n\r\ncurry = lambda f: lambda a, *args: (\r\n    f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n)\r\n\r\nfilter, map, reduce = curry(filter), curry(map), curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a, f: f(a), args)  ## 함수도 축약 가능 ##\r\n\r\n\r\ndef dictUpdate(dic1, dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n\r\n\r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n\r\n\r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a:\r\n            yield from flat(i)\r\n    else:\r\n        yield a\r\n\r\n\r\ndef grpBy(iter, key):\r\n    f, grpKeys, grps = key, [], []\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_, key=f):\r\n        grpKeys.append(key)\r\n        grps.append(list(grp_data))\r\n    return grps, grpKeys\r\n\r\n\r\n#########################################################################\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\npjtFamily_sheet_data = IN[0][0]\r\nstdFamily_sheet_data = IN[0][1]\r\n\r\n# Place your code below this line\r\ndef find_hdr_row(sheet_data, identifier):\r\n    res = go(\r\n        sheet_data,\r\n        filter(lambda x: identifier in str(x)),\r\n        filter(lambda x: \"No\" in str(x) and \"Family Name\" in str(x)),\r\n        list,\r\n    )\r\n    \r\n    if isinstance(res, list) and len(res)>0:\r\n        return res[0]\r\n    else:\r\n        return res\r\n\r\ndef find_cat(sheet, selected_row):\r\n    pattern = r'\\b\\d+\\.[A-Za-z]'\r\n    \r\n    crnt_row = selected_row\r\n    if sheet[crnt_row][2] and re.findall(pattern, str(sheet[crnt_row][2])):\r\n        return sheet[crnt_row][2]\r\n    elif crnt_row < 0:\r\n        pass\r\n    else:\r\n        return find_cat(sheet, crnt_row - 1)\r\n        \r\ndef find_parent_type(sheet, selected_row):\r\n    pattern = r'\\b\\d+\\.\\d+'\r\n    \r\n    crnt_row = selected_row\r\n    if sheet[crnt_row][2] and re.findall(pattern, str(sheet[crnt_row][2])):\r\n        return sheet[crnt_row][3]\r\n    elif crnt_row < 0:\r\n        pass\r\n    else:\r\n        return find_parent_type(sheet, crnt_row - 1)\r\n        \r\n        \r\ndef create_typeWM_match_dict_forPjt(sheet_data, hdrs=None):\r\n    if not hdrs:\r\n        hdrs = find_hdr_row(sheet_data, \"▣\")\r\n    hdr_idx_of_FamilyName = hdrs.index(\"Family Name\")\r\n    \r\n    modi_sheet_data = []\r\n    for idx,row in enumerate(pjtFamily_sheet_data):\r\n        newRow = list(row[:])\r\n        # del newRow[2]\r\n        # newRow.insert(2, find_cat(pjtFamily_sheet_data, idx))\r\n        newRow.append(find_cat(pjtFamily_sheet_data, idx))\r\n        newRow.append(find_parent_type(pjtFamily_sheet_data, idx))\r\n        modi_sheet_data.append(newRow)\r\n    \r\n    onlyEffRows = go(\r\n        modi_sheet_data,\r\n        filter(lambda x: \"True\" in str(x)),\r\n        list,\r\n    )\r\n    \r\n    dics_keys = [\r\n        \"Item\",\r\n        \"WM No.\",\r\n        \"Work Master\",\r\n        \"Spec.\",\r\n        \"Unit\",\r\n        \"표준 산출식\",\r\n        \"변경 산출식\",\r\n    ]\r\n    \r\n    res = []\r\n    tmp = None\r\n    for row_idx, row_cells in enumerate(onlyEffRows):\r\n        cat = row_cells[-2]\r\n        parent_type = row_cells[-1]\r\n        if \"True, True\" in str(row_cells):\r\n            if tmp:\r\n                for i in tmp:\r\n                    res.append(i)\r\n            tmp = []\r\n            for famType in row_cells[hdr_idx_of_FamilyName].split(\",\"):\r\n                tmp.append(\r\n                    {\r\n                        \"type_name\": famType.strip().upper(),\r\n                        \"cat\": cat,\r\n                        \"parent_type\": parent_type,\r\n                        \"wm_list\": []\r\n                    }\r\n                )\r\n        elif \"True, True\" not in str(row_cells):\r\n            for i in tmp:\r\n                famType = i[\"type_name\"]\r\n                wmDic = {}\r\n                for x in dics_keys:\r\n                    wmDic.update({x: row_cells[hdrs.index(x)]})\r\n                i[\"wm_list\"].append(wmDic)\r\n            \r\n    #return res\r\n    \r\n    # Convert nested dictionary to JSON string before returning\r\n    return json.dumps(res, ensure_ascii=False, indent=2)\r\n    \r\ndef create_typeWM_match_dict_forStd(sheet_data, hdrs=None):\r\n    def filter_hdr_row(row, rng_idx=None):\r\n        res_ = []\r\n        for hdr_idx, hdr in enumerate(row):\r\n            # if hdr!=None and hdr!='-':\r\n            res_.append({hdr: hdr_idx})\r\n        if rng_idx:\r\n            res = res_[rng_idx[0]:rng_idx[1]+1]\r\n        else:\r\n            res = res_\r\n        filter_res = list(filter(lambda hdr: list(hdr.keys())[0]!=None and list(hdr.keys())[0]!='-', res))\r\n        return filter_res\r\n    \r\n    if not hdrs:\r\n        common_hdrs = go(\r\n            sheet_data,\r\n            lambda x: find_hdr_row(x, \"Description\"),\r\n            lambda x: filter_hdr_row(x, [0,11]),\r\n        )\r\n    # hdr_idx_of_FamilyName = common_hdrs.index(\"Family Name_Basic (변경 불가)\")\r\n    \r\n    def find_hdrs_forType(common_hdrs, row):\r\n        type_hdrs_formula = filter_hdr_row(row, rng_idx=[12,32])\r\n        type_hdrs_paramDict = filter_hdr_row(row, rng_idx=[32,100])\r\n        \r\n        return {\r\n            \"표준헤더\": common_hdrs,\r\n            \"산출식헤더\": type_hdrs_formula,\r\n            \"매개변수헤더\": type_hdrs_paramDict,\r\n        }\r\n        \r\n    header_check = []\r\n    # res = []\r\n    \r\n    res = {}\r\n    type_hdrs=None\r\n    for idx, row in enumerate(sheet_data):\r\n        if row[2]==\"#\":\r\n            cat = row[3]\r\n            type_hdrs = find_hdrs_forType(common_hdrs, row)\r\n            # header_check.append(find_hdrs_forType(common_hdrs, row))\r\n        else:\r\n            dic = {}\r\n            if type_hdrs:\r\n                for hdr_dic in type_hdrs[\"표준헤더\"]:\r\n                    dic.update(\r\n                        {\r\n                            list(hdr_dic.keys())[0]: row[ list(hdr_dic.values())[0] ],\r\n                        }\r\n                    )\r\n                form_dic = {}\r\n                for hdr_formulas in type_hdrs[\"산출식헤더\"]:\r\n                    if row[ list(hdr_formulas.values())[0] ] and row[ list(hdr_formulas.values())[0] ]!='-':\r\n                        form_dic.update(\r\n                            {\r\n                                list(hdr_formulas.keys())[0]: row[ list(hdr_formulas.values())[0] ],\r\n                            }\r\n                        )\r\n                \r\n                param_dic = {}\r\n                for hdr_params in type_hdrs[\"매개변수헤더\"]:\r\n                    if row[ list(hdr_params.values())[0] ] and row[ list(hdr_params.values())[0] ]!='-':\r\n                        param_dic.update(\r\n                            {\r\n                                list(hdr_params.keys())[0]: row[ list(hdr_params.values())[0] ],\r\n                            }\r\n                        )\r\n\r\n                dic.update(\r\n                    {\r\n                        \"formulas\": form_dic,\r\n                        \"params\": param_dic,\r\n                    }\r\n                )\r\n                famName = dic[\"Family Name_Basic (변경 불가)\"]\r\n                res.update(\r\n                    {\r\n                        famName : dic\r\n                    }\r\n                )\r\n    \r\n    #return res\r\n    \r\n    # Convert nested dictionary to JSON string before returning\r\n    return json.dumps(res, ensure_ascii=False, indent=2)\r\n    \r\ndef insert_paramDic_toPjt_typeWM_match_dicts(pjt_typeWM_match_dicts, std_typeWM_match_dicts):\r\n    for dic in pjt_typeWM_match_dicts:\r\n        type_name = dic[\"type_name\"]\r\n        parent_typeName = dic[\"parent_type\"]\r\n        paramDic = std_typeWM_match_dicts[parent_typeName][\"params\"]\r\n        dic.update(\r\n            {\r\n                \"params\": paramDic\r\n            }\r\n        )\r\n        # print(dic)\r\n    #return pjt_typeWM_match_dicts\r\n    return json.dumps(pjt_typeWM_match_dicts, ensure_ascii=False, indent=2)\r\n\r\npjt_typeWM_match_dicts = create_typeWM_match_dict_forPjt(pjtFamily_sheet_data)\r\nstd_typeWM_match_dicts = create_typeWM_match_dict_forStd(stdFamily_sheet_data)\r\n\r\nres = insert_paramDic_toPjt_typeWM_match_dicts(\r\n    json.loads(pjt_typeWM_match_dicts), json.loads(std_typeWM_match_dicts)\r\n    )\r\n# Assign your output to the OUT variable.\r\n\r\n\r\nOUT = pjt_typeWM_match_dicts",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "6f3f3f8b48d64ce4b35ca72e43ce3d4d",
      "Inputs": [
        {
          "Id": "3fe8c74bcbb247939f8e94d303c3661f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9abe7abcd42d4b63a9e0b486724e6555",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "finRes;",
      "Id": "7d2e118a3b454f599d49ab36e96abae8",
      "Inputs": [
        {
          "Id": "8d4a5b48001049b99347afd1197618b8",
          "Name": "finRes",
          "Description": "finRes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0d3d08b67a145f7995ea9aaacb1e401",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\ni[\"wm_list\"][a],\n//i[\"wm_list\"][b],\ni[\"wm_list\"][\"Spec.\"],\ni[\"wm_list\"][\"적용 산출식\"],\ni[\"wm_list\"][\"대입 산출식\"],\ni[\"wm_list\"][\"계산 결과\"],\ni[\"wm_list\"][\"Unit\"]\n//i[\"wms\"][\"wmSpecs\"][\"rIDX\"]\n];",
      "Id": "adffa41e39df4273bb610cebb5939930",
      "Inputs": [
        {
          "Id": "fdac762e7077401f94c0de160605ff26",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "775c08fc6da44acb9b3b3b432cfd9da0",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d22e26880eaf444db984e9ab94159b16",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "4c5461b9a3504146a8fd36e6f8548c47",
      "Inputs": [
        {
          "Id": "d94fdebfb3ad48ccb4f1bed91f84bf63",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 4,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "463e49aa0ccd44d2b737157424b7127e",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"WM No.\";\n\"Work Master\";\n\"GaugeCode\";",
      "Id": "8d613332852c4bf0b62889ca78df0c79",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "70617bd1bf8e4d4d856367f5d1b632a8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78ef840851754b2fad977c2f943e4cb3",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17c6b117ba5f441ca3d2b502ce4dea3d",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "cb317fa8f08d443a99d531cb3435306a",
      "Inputs": [
        {
          "Id": "034a14482be547e7a0e4d81c6c24a353",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "907dc4367ae14c7d9e329c53d4777a63",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[\"wms\"][\"Family Type Name\"];",
      "Id": "2d93bf440b3d49e4b1a3d7779e83ecdd",
      "Inputs": [
        {
          "Id": "aa2eb6d7695149759fe14002754f65fa",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bfa6937cf8434754a715361e57c85586",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "cf376cc741ae4d7f997860b5f5bb6107",
      "Inputs": [
        {
          "Id": "bdb1ed7dc2604c71949d8bd6bc37e945",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5e99db2d7a14af883eed141bb88bfbf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "c9559b63916949b8b9205639b6a3adbb",
      "Inputs": [
        {
          "Id": "220598aa14ea4f81b713d3bc2170964d",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "ef0696fba53c48cda7b327b9c2095aaa",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "c263b8e885334580b7bcedb5306a5844",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "0da12c5111af4d42ba679f28be3cd825",
      "Inputs": [
        {
          "Id": "d5e80a8d132e4fd08b900d1d6dfef92d",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c50218df6d84952bef8632b25c30f4d",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit import Elements\r\n\r\n################Module For Functional Programing#########################\r\nfrom functools import reduce\r\nfrom itertools import chain\r\nfrom itertools import groupby\r\nfrom copy import deepcopy\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nfilter,map,reduce = curry(filter),curry(map),curry(reduce)\r\n\r\ngo = lambda *args: reduce(lambda a,f: f(a), args) ## 함수도 축약 가능 ##\r\n\r\ndef dictUpdate(dic1,dic2):\r\n    dic1.update(dic2)\r\n    return dic1\r\n    \r\ndef dictsMerge(dics):\r\n    res = reduce(dictUpdate, dics)\r\n    return res\r\n    \r\ndef dictDeleteKeys(dic, keys):\r\n    for k in keys:\r\n        del dic[k]\r\n    return dic\r\n\r\ndef flat(a):\r\n    if isinstance(a, list):\r\n        for i in a: \r\n            yield from flat(i)\r\n    else: yield a\r\n      \r\ndef grpBy(iter, key):\r\n    f,grpKeys,grps = key,[],[]\r\n    sorted_ = sorted(iter, key=f)\r\n    for key, grp_data in groupby(sorted_,key=f):\r\n        grpKeys.append(key); grps.append(list(grp_data))\r\n    return grps,grpKeys\r\n#########################################################################\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nhdrs = IN[0]\r\ngrps = IN[1]\r\n# Place your code below this line\r\ndef make_th(row):\r\n    preStr = \"<tr>\"\r\n    postStr = \"</tr>\"\r\n    rowStrs = list(map(lambda x: f\"<th>{x}</th>\", row))\r\n    res = \"\\n\".join([preStr]+rowStrs+[postStr])\r\n    return res\r\n\r\ndef make_tr(row):\r\n    preStr = \"<tr>\"\r\n    postStr = \"</tr>\"\r\n    rowStrs = list(map(lambda x: f\"<td>{x}</td>\", row))\r\n    res = \"\\n\".join([preStr]+rowStrs+[postStr])\r\n    return res\r\n\r\ndef make_trs(rows):\r\n    rowsStrs = list(map(make_tr, rows))\r\n    res = \"\\n\".join(rowsStrs)\r\n    return res\r\n\r\ndef make_trs_hd(rows):\r\n    rowsStrs = list(map(make_th, rows))\r\n    res = \"\\n\".join(rowsStrs)\r\n    return res\r\n\r\ndef make_wholeTable(rows):\r\n    preStr = \"<table>\"\r\n    postStr = \"</table>\"\r\n    trs = make_trs(rows)\r\n    res = \"\\n\".join([preStr, trs, postStr])\r\n    return res\r\n\r\ndef transTo_tableForm(grp):\r\n    chkbox_tagStr = '<input type=\"checkbox\" id=\"chkbox\" name=\"checks\">'\r\n\r\n    #title = \"<h5>\"+grp.pop(0)+\"</h5>\"\r\n    title = list(map(lambda x: \"<h5>\"+x+\"</h5>\" ,grp.pop(0)))\r\n    #res = [title]\r\n    res = title\r\n    res.append(make_trs(grp))\r\n    \r\n    return res\r\n    \r\nrows = [[make_th(hdrs)]] + list(map(transTo_tableForm, grps))\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = make_wholeTable(rows)",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "88149d2520f44cc7b1155af751a65510",
      "Inputs": [
        {
          "Id": "527650ff1dfb4184979914ce29a063ce",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f8932e967b6045b9a96bb561a68de946",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "09b30e8f2380485aa351e4fb9f338acb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\n\"Work Master Code /w Description\",\n\"IfcGUID / GaugeCode\",\n\"Description\",\n\"산출 수식\",\n\"값 대입 수식\",\n\"Quantity\",\n\"Unit\"\n//\"rIDX\"\n];",
      "Id": "d410f437388b48a9b3874cf2bdfb9846",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "57f6f4f020084caca998563ab85ce587",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "f221b392835a47be9bc56510dcd1f2a2",
      "Inputs": [
        {
          "Id": "84f04837bfa948d692746688a74a94d2",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "290cdc7a1ba84777b488a69f521524f7",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain value for\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "85ef746a780e4d9ca56d52140851ac1a",
          "Name": "value",
          "Description": "Value at the specified key or null if it is not set",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"GUID\";",
      "Id": "2700da9e11a849b3af546806f689c917",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ae730ecdaacf4d748dd317ea8e755437",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToEnd@var[]..[],var[]..[]",
      "Id": "045990703014444e9fca141fbd4d1152",
      "Inputs": [
        {
          "Id": "e1aca1ebee8d4e1e8f7d225d9d4d3885",
          "Name": "item",
          "Description": "Item to be added.Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "ad75104d873c4bb78bf8a30a14faf703",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5974a12c5c864ed2b3a91064fa816431",
          "Name": "list",
          "Description": "List with added items",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the end of a list.\n\nList.AddItemToEnd (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.Map, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7fd09c194e3c4bc6a174dd03683d8de1",
      "Inputs": [
        {
          "Id": "123900a80da24393b566fe57e26eb910",
          "Name": "list",
          "Description": "The list to map over.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3e2f8934302449b8e9930386ae4dca6",
          "Name": "function",
          "Description": "The procedure used to map element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29a2befad32946cdb833208a70bd3dc3",
          "Name": "list",
          "Description": "Mapped list of type: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Applies a function over all elements of a list, generating a new list from the results."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "8f5461aa3205427bbab3717bc7e72ae0",
      "Inputs": [
        {
          "Id": "d0281d6954334161a0088ca4b5d6dacd",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d188949ca6c840cbbb2e8f404ec28ac8",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "calculatedResult;",
      "Id": "d123193f0fc74efa922b627de754e4b3",
      "Inputs": [
        {
          "Id": "b06aee2733e444e69592e53efffc5671",
          "Name": "calculatedResult",
          "Description": "calculatedResult",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fc3b69514b2843589e5f92e39e0b4d9d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "912753a782b84f598e120e936fffbd58",
      "End": "ae38fed72c0a434eb235268bfba22c03",
      "Id": "2f9fd4adb6444d8e9c24cd4a536bbbf2",
      "IsHidden": "False"
    },
    {
      "Start": "e4d9d60debe6406cace5eb687f712858",
      "End": "c329e42f144540938189475395a4a425",
      "Id": "c8428eeb2f704586bc201ae53aeab286",
      "IsHidden": "False"
    },
    {
      "Start": "bdc68e6596d64c1bb2ad17af850a8a64",
      "End": "f2b7450af5914cbf8a28c2a092e6a190",
      "Id": "e1261a8d8e0640709812536bf93bfcb4",
      "IsHidden": "False"
    },
    {
      "Start": "07eba95685e249a0a3188444eec253fe",
      "End": "ea90dca9236c4c19a28da5b5f7a76fcf",
      "Id": "2f35c67d27694bfba983f16872746283",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "e4473f11a1094475b798c856c23211f3",
      "Id": "adcf7ca898144a3b8f77115c0a663e7f",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "f83b0c67f2a844eb9671a652aaab5295",
      "Id": "c1289e4cbd494b49bfad0b1226e5752b",
      "IsHidden": "False"
    },
    {
      "Start": "266640a8b58449a48603af36addb1282",
      "End": "fe0317db0fe94c9ea9a7ba7a77a0c743",
      "Id": "e38dacbd6643403983be5ac75096ee05",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "4e3b56adf6304349b8117bf163463cf1",
      "Id": "e9b40c558dc54d5a8cd953f7cce33671",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "3846085d31c2464b949611be95d7026b",
      "Id": "2d851a9d4dfb4a9cbd4c12775716e410",
      "IsHidden": "False"
    },
    {
      "Start": "16f6a93146ee4557a8eec29cac4eb344",
      "End": "e010345f3973402c89afdfbb3d58471d",
      "Id": "56b83f454565422e935839b7adaf88e9",
      "IsHidden": "False"
    },
    {
      "Start": "eb3a2510c5934129baf50771f5bb29a9",
      "End": "c4d740fa206e4ab3b53ba148e9727e8f",
      "Id": "0708e80f5c0f475aa73809bfc8d71053",
      "IsHidden": "False"
    },
    {
      "Start": "e3d41cbea388406e9b31fca8184f2a13",
      "End": "8d8f529204cd48a5a2210b85d94be686",
      "Id": "aea2bbf0844a421eac38d674664254a7",
      "IsHidden": "False"
    },
    {
      "Start": "e3d41cbea388406e9b31fca8184f2a13",
      "End": "2b498ab79f364a9484154fdff6c711c7",
      "Id": "b28e3f7ce6784cf6bab2cc8a2931024f",
      "IsHidden": "False"
    },
    {
      "Start": "f98969ee45ea4cce8921b553ad57fbc0",
      "End": "da624c3834b64df4a29198439fca082e",
      "Id": "056e91bb2fca4d81af853578b822a2fa",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "8871f8fef5b841e484fe65aa92aecb9c",
      "Id": "fe84dfc1f847481ca88c299d22994b0d",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "579f82985caf400d9840f56d3770c28b",
      "Id": "bb5a8939c9ea462ab2ac40e78b07b605",
      "IsHidden": "False"
    },
    {
      "Start": "414cd2a5762448afbc839c742fe3c056",
      "End": "8871d9005bba4330a3c1ea87912e8cc7",
      "Id": "400f8b21b4d0464081067299ba49d28e",
      "IsHidden": "False"
    },
    {
      "Start": "503b900bdeca41cab06a5c0fc631915b",
      "End": "a7b566a5dc8f4652beec90894a8864ea",
      "Id": "5bdf069881b94f4dbc310aebe401e127",
      "IsHidden": "False"
    },
    {
      "Start": "eadab2f114774b74a1560381727f3f3b",
      "End": "c2327385dc4d4427ad017aefe187b6f3",
      "Id": "13de535de37b4fd4b9cd3f6c03cf65b2",
      "IsHidden": "False"
    },
    {
      "Start": "7191a4fd8af14082850d9315469da15b",
      "End": "99b7a172bab04fcf9e908e78fd92eaf3",
      "Id": "24deef57e37e4c2bb0f14dd5f82daf0f",
      "IsHidden": "False"
    },
    {
      "Start": "e530bf1d15934dbba20b223f51a76214",
      "End": "eb38296ae8b4424f892c47d4c8380597",
      "Id": "f4af9c3841ea48c08f2e8550c5297d8e",
      "IsHidden": "False"
    },
    {
      "Start": "e530bf1d15934dbba20b223f51a76214",
      "End": "225931c4d015451b8239a3c27f663f2f",
      "Id": "e42a6320b6534ac683c185d847e0771c",
      "IsHidden": "False"
    },
    {
      "Start": "d9f7652d7dcd49818455cfcb11afd4d5",
      "End": "22a14fba8f194143a2aaef45fb512ae7",
      "Id": "626bf182effb482b80a7dc640f56561c",
      "IsHidden": "False"
    },
    {
      "Start": "d9f7652d7dcd49818455cfcb11afd4d5",
      "End": "7dac7ebac2f34cfdb06ee8aab4b07a41",
      "Id": "f1ea45a83c49497b8ba3d1775b56175a",
      "IsHidden": "False"
    },
    {
      "Start": "d9f7652d7dcd49818455cfcb11afd4d5",
      "End": "af5678dfacc448f9a98fb70a2a5b76bd",
      "Id": "0cc4ee914e9e4b0db50d60c70ad722c6",
      "IsHidden": "False"
    },
    {
      "Start": "e5bac32700234c6d9ed167d8d9c8f586",
      "End": "ec0e917339cb4f81875e476c63e9f5d3",
      "Id": "e612ac9c5b1e4f5da9953e4e986bda04",
      "IsHidden": "False"
    },
    {
      "Start": "a3eed733cf254e9e8fc6ec552d579635",
      "End": "1c46c0fce7ef4f3b9d77f0c79a6d570a",
      "Id": "bf13dfb97f70459f92b1a50b847bc539",
      "IsHidden": "False"
    },
    {
      "Start": "e30bb663437641e092989a1db00f22eb",
      "End": "60314121b72e4091a067f4ad720e1648",
      "Id": "0483fec52e294191a9fbc53fac0015c9",
      "IsHidden": "False"
    },
    {
      "Start": "9793226d86ad4dec83f83405e2b78590",
      "End": "164cc3dbe41947008d17ec3b96752e69",
      "Id": "fcaea59360bc4fdca95ebe75830a4576",
      "IsHidden": "False"
    },
    {
      "Start": "165f0d564f744d70a5b4740966b0fd64",
      "End": "52ab3e2461644e05a68049cd998f0783",
      "Id": "2142adfdb73244b49b5f14c493d4a427",
      "IsHidden": "False"
    },
    {
      "Start": "230540f2a2b143639ffacdbb9dc21cc1",
      "End": "c9e1a9717b414fb18cba11de5a217a51",
      "Id": "2841eaf5dd4a4786a970acde91428eac",
      "IsHidden": "False"
    },
    {
      "Start": "230540f2a2b143639ffacdbb9dc21cc1",
      "End": "85ac0d8fca71462086880054318c5da1",
      "Id": "2b4898dd04724928bceda9e8c8f653cf",
      "IsHidden": "False"
    },
    {
      "Start": "8bd85b9cebae40d887ecf33249bfa9ea",
      "End": "e5be3df534fc4ffca7597213d53ae45a",
      "Id": "8c4ae19e61304e3989e225276fea049e",
      "IsHidden": "False"
    },
    {
      "Start": "56887f75eaa240b19fa038a1fe3641c0",
      "End": "15939b39f28f4e619a0eb5412fcc19b8",
      "Id": "5e4911820e2c4c7694943c646564f43c",
      "IsHidden": "False"
    },
    {
      "Start": "65c451db8acc4de497ba72e61d8cd1ed",
      "End": "a4bfa9cbcd0b41e78735db0e5ca3876c",
      "Id": "9d557bbd38024f47ba36d72731a3ebc8",
      "IsHidden": "False"
    },
    {
      "Start": "25895fe974cc42bc9d72458f7dfe7d2c",
      "End": "524b1b7f02034b7e9f83fd908cc91185",
      "Id": "a70c0bd1baa7405cb1189ae877b879ec",
      "IsHidden": "False"
    },
    {
      "Start": "9e3824f6d5f54568850402f597fa43b7",
      "End": "48dce4cc0b854bd69f8199d1288aeec9",
      "Id": "144a89029f714c0890c1d469d4130e31",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "4c91edd5c0f64789a8ea801df8db525a",
      "Id": "eaf8ac6415c149f094f163068bbbe7b5",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "23fa6cd768304e8ab0e1861056556a3a",
      "Id": "2a0ee7cd60cb4fbcaaecc3b546f0377b",
      "IsHidden": "False"
    },
    {
      "Start": "8ccaaaeb81e64cf0afd6b6f7368aeef8",
      "End": "919c2a1a395941fc8b371fcef1911806",
      "Id": "ed1ed1aae32a49ab83d75ff0f7b475c8",
      "IsHidden": "False"
    },
    {
      "Start": "89c4346d0ca240129b219859161d732e",
      "End": "0ff046ebd624422dad4be5c1cb3a9e98",
      "Id": "8136914391604a27bd6ad1296c1ed539",
      "IsHidden": "False"
    },
    {
      "Start": "546a1d2d4b4b42559624cd48ac1ea2de",
      "End": "08cf3f9b3e5d43e48be4ee2445de11d1",
      "Id": "1922f426881d4b50b3cb9513bb830c66",
      "IsHidden": "False"
    },
    {
      "Start": "b41720919fd0439ea0dd87f71b67080e",
      "End": "bee976de5cac45d9a7729a1dad8b487d",
      "Id": "4ab732f054a348248517e85be07355a5",
      "IsHidden": "False"
    },
    {
      "Start": "343c269326d242598a644214bc9fd722",
      "End": "6a6cc35c54154c1ba3c9dafdb84fed2e",
      "Id": "132ba31ff01f4917a779a2fcada982e4",
      "IsHidden": "False"
    },
    {
      "Start": "343c269326d242598a644214bc9fd722",
      "End": "b1b3d9a6071e4c09a2b8469bc8792426",
      "Id": "ad638b6c3e5640769a3a720dae3b5691",
      "IsHidden": "False"
    },
    {
      "Start": "343c269326d242598a644214bc9fd722",
      "End": "4ecdbf559dfb4ec6a4d15ec5a7f40f01",
      "Id": "19ab8127c27b49e38488b973843ae3bb",
      "IsHidden": "False"
    },
    {
      "Start": "5dce84b2c7754a2bbef894ea1de56dd5",
      "End": "4b91ef0e35d2428bb56437f6ee7f8d27",
      "Id": "d5129402e7b24434b633987af2a02444",
      "IsHidden": "False"
    },
    {
      "Start": "2a21d79dc4e546c7a5d930f015a1ccf9",
      "End": "8b0d91f729ea4f20a3c1bf9833a4541c",
      "Id": "a9bdcb89a0024e8ba280143b36aba394",
      "IsHidden": "False"
    },
    {
      "Start": "958299a111524c228236ad61aa0bf66e",
      "End": "893113c989264cd19431bbb81823b560",
      "Id": "47d094e93a994b7696d97cc32e9c5a21",
      "IsHidden": "False"
    },
    {
      "Start": "be1b029e33894bd0902651bb82065169",
      "End": "830fdb6b17c24e5e9b88bcb80c215549",
      "Id": "ac1869ea88b4484a9596e5e99fd6b4a6",
      "IsHidden": "False"
    },
    {
      "Start": "2a2d5ca4703c4ef890eef6aa7c03a78b",
      "End": "1e51c34b755b4b5daebc49a04c834a02",
      "Id": "bb9f914f2d8d4be8b6adf873f6a885f3",
      "IsHidden": "False"
    },
    {
      "Start": "b345d4e40bdc4e6593a996aa4cb30453",
      "End": "b6b668c063784cf0ba5e742521351658",
      "Id": "92c82fdcb7fb4d06884c1529dea1e794",
      "IsHidden": "False"
    },
    {
      "Start": "fd49bd91c8404815a9c1a36fc411c667",
      "End": "1519fd64dcb748a8bf5caf1a1c21ec4f",
      "Id": "2ac2633bc8ad4cb99eb6c9d0c456b5d9",
      "IsHidden": "False"
    },
    {
      "Start": "729953a1355f4222b333b4899fd62973",
      "End": "1713810eee684d02934f951dc7ba675d",
      "Id": "aa037cf312da469da0d244401fef5a0b",
      "IsHidden": "False"
    },
    {
      "Start": "a2ecfaa19c334eddb1d809fd5b9c21b7",
      "End": "e40fc391bb9543069e39578990171d11",
      "Id": "f3fd358c30fd4ee3ad117228d8381e29",
      "IsHidden": "False"
    },
    {
      "Start": "426cf7e80e224c1489ed86b4ea071aee",
      "End": "5241a20caa8f481a94fc7be2332e76fc",
      "Id": "676e106a19a8458d9c0b19a2de9fbbf2",
      "IsHidden": "False"
    },
    {
      "Start": "f41c17b57dc4486791d293b996225179",
      "End": "c86c20b170cf41b2b9cfee070d24dc41",
      "Id": "1ed0bc4a9cc74263a323881f163c065e",
      "IsHidden": "False"
    },
    {
      "Start": "fc0b74d5401541c0bc827a65e85ad1a1",
      "End": "1f9bfde3838746b5aef0d8d9f60bfcfe",
      "Id": "b8bc0ae49f734faf98daf04bb3999559",
      "IsHidden": "False"
    },
    {
      "Start": "1e01618b63ab412fb696093fc85c9255",
      "End": "3adefa72172f4d0e94c423abf3e4051d",
      "Id": "32866a54ba3e4c5298ec070b9e226d63",
      "IsHidden": "False"
    },
    {
      "Start": "1e01618b63ab412fb696093fc85c9255",
      "End": "2cda4183eda242a0b599548730912953",
      "Id": "13ed010ca7754362be5017995f79152d",
      "IsHidden": "False"
    },
    {
      "Start": "5fa1591c5a8147109642e4944b57fda1",
      "End": "2a14711119634cb3be308f0f81f8e3c2",
      "Id": "d459863f45cc46f29fb986d325612711",
      "IsHidden": "False"
    },
    {
      "Start": "fc23a31f123c47b1adef5af41e816119",
      "End": "b24df086c9204ccd9af377fabb5536aa",
      "Id": "fb977e719284480cbbae5e552c205f32",
      "IsHidden": "False"
    },
    {
      "Start": "d4b003d1c5b3428d9e1f450217d0acdd",
      "End": "c65df92cac4c49448f02fb3db90aca10",
      "Id": "90440f99732b45c0ac5dfdcd596cffbf",
      "IsHidden": "False"
    },
    {
      "Start": "d4b003d1c5b3428d9e1f450217d0acdd",
      "End": "81b00a4bed47445eb92bccff5549b468",
      "Id": "3964c033df0f41dabdf1a52c055e9ff1",
      "IsHidden": "False"
    },
    {
      "Start": "d4b003d1c5b3428d9e1f450217d0acdd",
      "End": "17c5e50fcdc64d49a30e6884d4f4a9e0",
      "Id": "42a10f4a2369486fa9a078670588ab6a",
      "IsHidden": "False"
    },
    {
      "Start": "970a442dbaf948f7a5500cce67b1c1e9",
      "End": "5a51bd26662d40dcbea5dde4d5dc927d",
      "Id": "90298140022c4cd1a997f4175926c797",
      "IsHidden": "False"
    },
    {
      "Start": "307fe63d49c345e5a2a5992ddedc85e2",
      "End": "9dbf8321072e4f908ecbde55c81f7322",
      "Id": "32875778ddfd437aabd60da6e6ad5966",
      "IsHidden": "False"
    },
    {
      "Start": "2ae84853d9e043699e6f4ca77f9d976d",
      "End": "5d6a579e11fc46ff81e2a20afbd033ad",
      "Id": "5648294224774922b634fe87d59f3a44",
      "IsHidden": "False"
    },
    {
      "Start": "2ae84853d9e043699e6f4ca77f9d976d",
      "End": "cff90adbe1594efdba9188fb0498661d",
      "Id": "48782c162ed041bbaa15f0a8a363f196",
      "IsHidden": "False"
    },
    {
      "Start": "2ae84853d9e043699e6f4ca77f9d976d",
      "End": "a2615f9e4a624ffe8ba42590856d536b",
      "Id": "efecd3adad6f4b9596f3b2ac53e1a96f",
      "IsHidden": "False"
    },
    {
      "Start": "34eb968354d842c4bc94b81aab940dda",
      "End": "cc4ee34aba664fcb8efda003708f0790",
      "Id": "9630c62a5de54ad2b01679774a0c1696",
      "IsHidden": "False"
    },
    {
      "Start": "34eb968354d842c4bc94b81aab940dda",
      "End": "f5b833af9ab24a3d9fc80f80337413aa",
      "Id": "29e264a2f62f42698a42aa7bff9ddc18",
      "IsHidden": "False"
    },
    {
      "Start": "1afdad0b610045f49d9918563aa08dd5",
      "End": "7d852923babc430fa1d5c8efa5cdde9f",
      "Id": "226d9684561f479592641fc389395bf6",
      "IsHidden": "False"
    },
    {
      "Start": "b4835f9063384b88aee9393fbb8d6ba8",
      "End": "030ddc1025994397944e30e9aa6471a7",
      "Id": "c567b346cf1a4c4a854c99a4020eaccd",
      "IsHidden": "False"
    },
    {
      "Start": "32798e643200441ba50e47158bac8958",
      "End": "7d46bcb3363545d48d1602b02b61ee54",
      "Id": "212af49fe8234e75a3247524febf0feb",
      "IsHidden": "False"
    },
    {
      "Start": "32798e643200441ba50e47158bac8958",
      "End": "d75d54cb665d4ddb87bbae2224048c1e",
      "Id": "132de1679300477db1a79f60d1db79cf",
      "IsHidden": "False"
    },
    {
      "Start": "33996f8f1fcd4bf0b9b14097a32771e9",
      "End": "2888ab33721743e0ae13ac4434a4ee07",
      "Id": "59ef7623fdbe4a18a3cf9408294d4ff9",
      "IsHidden": "False"
    },
    {
      "Start": "33996f8f1fcd4bf0b9b14097a32771e9",
      "End": "2b647c9d6a6d4bb5a57ec0bf81882923",
      "Id": "045a512370fe4f5b8d6347f2ce68488e",
      "IsHidden": "False"
    },
    {
      "Start": "51bfce6d583b44e7a71f93934380d91c",
      "End": "65abf31cd1b74becb8c56be5f8bafe5a",
      "Id": "290a58ce25c74172bb9922541e34c6a7",
      "IsHidden": "False"
    },
    {
      "Start": "f93893f04b6a4c9c85bde5f8bbab797f",
      "End": "716ec7c1fc7a49ff8c4026967fa61e48",
      "Id": "a2ce851f53e045c0b3d61540aaf5932e",
      "IsHidden": "False"
    },
    {
      "Start": "99445748c48a43429fd93e846a0127d7",
      "End": "2c29681eae464a4782e43fe969ed3be3",
      "Id": "3b8a5adf8cc743689be571466ede72e2",
      "IsHidden": "False"
    },
    {
      "Start": "e5f978285ed442d8ac531ad320b332b2",
      "End": "af7ef13b3b1746059950d92eded065ea",
      "Id": "3fc9667038d54065897c2fcae9ca7665",
      "IsHidden": "False"
    },
    {
      "Start": "e5f978285ed442d8ac531ad320b332b2",
      "End": "8c051f1489514263a6774f363c24655f",
      "Id": "06f1cb47d7f949cb9d676160ef8ae312",
      "IsHidden": "False"
    },
    {
      "Start": "9f6e66d25b5e47f4b571b338a98618bf",
      "End": "02e0bb5b9d0e457ebd53e48eca839e1d",
      "Id": "8937fe20fbf34ebabcbf516f6cf0b096",
      "IsHidden": "False"
    },
    {
      "Start": "717bd50be2954098b51282b15b78e7d9",
      "End": "fbc42faccac141f58fa4929998b28775",
      "Id": "f68d857491e0484aa06eb1b2f53a4cb9",
      "IsHidden": "False"
    },
    {
      "Start": "687ed700a2884539b98f2064f8168723",
      "End": "c53088847bd74d49bf5b15aaa5f78d10",
      "Id": "41311c7b18ad41488425a3b8f8c75b44",
      "IsHidden": "False"
    },
    {
      "Start": "e1a6f6ac0a0a4b0b93d898295473b351",
      "End": "e3144a79a2174bd690e5e0e2ceea0412",
      "Id": "e8801fb84fb141b98bf1a23d6c0fa257",
      "IsHidden": "False"
    },
    {
      "Start": "b6503815f9eb44e096e0a60fc7f86322",
      "End": "1ba6cfa7d18b452fa667ef6098d7307b",
      "Id": "961f70911673429da946f49de6924319",
      "IsHidden": "False"
    },
    {
      "Start": "ebc7ca6c04b445029ff0a19d1a6f5de8",
      "End": "9f8c0a5ab126467f98568c0448e3ca45",
      "Id": "2a53a42ace5b4a5691441c6a583d9da4",
      "IsHidden": "False"
    },
    {
      "Start": "fb2166294e344de9a7345d4510303c2f",
      "End": "65387579e40c48ea995f066140591a7c",
      "Id": "269dcce2b712454ba6208e94301b876e",
      "IsHidden": "False"
    },
    {
      "Start": "9efab37128144c9e8d96fbed1aee8d89",
      "End": "ac5633ef1bfe4f87ad6a2fa74d30ac52",
      "Id": "ea2e1d331aa34a4887adf9830f9059ac",
      "IsHidden": "False"
    },
    {
      "Start": "fa6809cbdc3441dca5772528421dd951",
      "End": "7e53ef3a666544ada6dc2402bf902af6",
      "Id": "de1733d464d24e55b437e5df69e37331",
      "IsHidden": "False"
    },
    {
      "Start": "03eac06c6cb44cb9b0b14bc4fe5ce454",
      "End": "decfc7afe9874f23b6f89aa80e499fa2",
      "Id": "c6afa80370094738990358325257dfa4",
      "IsHidden": "False"
    },
    {
      "Start": "bdd66cbf79d546deadbba5d12c8d6428",
      "End": "ec6eb3ccbecd49959f26304b1c4cd91b",
      "Id": "fa724feff06a48e5ae2e03dc127c3fdb",
      "IsHidden": "False"
    },
    {
      "Start": "4d00ab312b0944f1bd862ca803fd7d29",
      "End": "99a22764c0f949829cb7071d690c22d0",
      "Id": "fafd70b50cf349d3b47b87a4d3e1be06",
      "IsHidden": "False"
    },
    {
      "Start": "34ff4d3277064e5d97b8645ae20526e6",
      "End": "c1ef927fba69488eb50f85611e6a195c",
      "Id": "d456a969ca6844479377009fea0e54f4",
      "IsHidden": "False"
    },
    {
      "Start": "097671495b114307ba4f8b4dd1c506c7",
      "End": "2eca085c0d984145876567bf86dd7a1a",
      "Id": "a477c2c0e60f4bc280ce12637ef2be2c",
      "IsHidden": "False"
    },
    {
      "Start": "097671495b114307ba4f8b4dd1c506c7",
      "End": "05210467cb1f493fae110684e0b41b03",
      "Id": "77f5399925204eac8fbc59ae43a75609",
      "IsHidden": "False"
    },
    {
      "Start": "e0e54e3fd8ff4606ada50c31c1af17d8",
      "End": "1186cb42b4834da892396a64d7af190a",
      "Id": "40799a75b2e74a07bd95dff1c30c24e9",
      "IsHidden": "False"
    },
    {
      "Start": "e0e54e3fd8ff4606ada50c31c1af17d8",
      "End": "12db67f00e784857aded00125797de24",
      "Id": "1a916016b5f241df87cd29a1d18e135d",
      "IsHidden": "False"
    },
    {
      "Start": "2715083b45ed4f58af2eaad981a33897",
      "End": "09b3afab404d40b9a6458d9cdec5d090",
      "Id": "8747a31b487841bdabf9ad444002c7e8",
      "IsHidden": "False"
    },
    {
      "Start": "2715083b45ed4f58af2eaad981a33897",
      "End": "44ea388a7f674212a4473bd8a2de7eb2",
      "Id": "68cb7233fa6a41e69706d6fe695be331",
      "IsHidden": "False"
    },
    {
      "Start": "2715083b45ed4f58af2eaad981a33897",
      "End": "2897d9110ec34e129d789c3b7475b1be",
      "Id": "42d71f35c56a4353a9e02c5927e357aa",
      "IsHidden": "False"
    },
    {
      "Start": "448932de8be943e9b1e309fc8e067d99",
      "End": "31270f6e0b034196b02ef6313ea86dfd",
      "Id": "680d08a101d94f74b1a675474b73b3d1",
      "IsHidden": "False"
    },
    {
      "Start": "448932de8be943e9b1e309fc8e067d99",
      "End": "385bebc0885a4263b3a761a50641f7e0",
      "Id": "95c1c8830a634063a237eab9b744fd11",
      "IsHidden": "False"
    },
    {
      "Start": "448932de8be943e9b1e309fc8e067d99",
      "End": "8ed9e15c86dc4c0b9073de2f41cf1065",
      "Id": "425e4f2b2eeb47f2a5619b06d8f05495",
      "IsHidden": "False"
    },
    {
      "Start": "e6fa566905a049a1add2c70e17432a87",
      "End": "a34e9f10b2bc481a926292d0061531de",
      "Id": "e50d5b3325c343cb9f7cc8d22c5fb135",
      "IsHidden": "False"
    },
    {
      "Start": "cd15b0ac83e04be7aa75031a9bf4daf1",
      "End": "d8e80b2eef7846ef9fc7fa123e40e3a0",
      "Id": "a05f2b9adfb14c60b49ad9d8263ae078",
      "IsHidden": "False"
    },
    {
      "Start": "4b8c0a5728634607a57019136c306b91",
      "End": "a60e762b4a074b659e687d4d1e516da1",
      "Id": "aad4ae99c4bc4e5899cad5fa07d601b2",
      "IsHidden": "False"
    },
    {
      "Start": "f05424c070294cbca49dda114c05adb6",
      "End": "a790eb19d69346e8b56360df832d0204",
      "Id": "74ed5cdea0024a6886c630039ec33347",
      "IsHidden": "False"
    },
    {
      "Start": "dca90ec33fe04d76acc96c750acea32b",
      "End": "a98b44c39926443ca6e4ebd278cb8dc5",
      "Id": "5166c453ddc74f4395a27f7ae9ad3784",
      "IsHidden": "False"
    },
    {
      "Start": "dca90ec33fe04d76acc96c750acea32b",
      "End": "cb8149952ae847a7bd2fc2ee01e36dea",
      "Id": "568c6b261dfd4f9e8f07ce2ddac683ce",
      "IsHidden": "False"
    },
    {
      "Start": "16425a1079ef4e508777b3f362bfc45c",
      "End": "2e6a573560f74b01a9d7793966dc63bd",
      "Id": "9154236c627b444482fbb133ffa48ae5",
      "IsHidden": "False"
    },
    {
      "Start": "47592a13db8342afa8491a4937ee48b8",
      "End": "ac1cba27f6de4da5a344b346415b00b0",
      "Id": "17e536f6c4584b7db605d4ef31ff4ac1",
      "IsHidden": "False"
    },
    {
      "Start": "14fc399b175d4f9a8074e2526ae67e5c",
      "End": "5cd8ad22107f4bebb6833c839a3469da",
      "Id": "b4a94778c04c4cb8ad9e703a6b9279a3",
      "IsHidden": "False"
    },
    {
      "Start": "d8dc3f67b5024bd79787f50847ba9549",
      "End": "d74f25478f204385b6000589621aa709",
      "Id": "182bec8a7b3b4811a9418d6e318eede8",
      "IsHidden": "False"
    },
    {
      "Start": "d8dc3f67b5024bd79787f50847ba9549",
      "End": "037a7f6c46a1428dbc9d6e113e151f0b",
      "Id": "640cf45b1471410994230dd88a5d2f84",
      "IsHidden": "False"
    },
    {
      "Start": "164dc45190b4422cb312b13924cf62a7",
      "End": "e46e4d1adf1a4278b702eda90d5ed418",
      "Id": "afc1d9b77a2047c1ad679fc98a9f95e0",
      "IsHidden": "False"
    },
    {
      "Start": "601bd58a80f14c289cee84b8a5fde169",
      "End": "04bff60d9dcd42ca8994e25a40208f6a",
      "Id": "899ee9787c7a47a8b2d5193a332352d2",
      "IsHidden": "False"
    },
    {
      "Start": "0d6c1bc648d34e578c6896e05145131b",
      "End": "3389f2f57284482e9095339b7cd6ad17",
      "Id": "3b045f98c088490295e74f7fb89d8021",
      "IsHidden": "False"
    },
    {
      "Start": "9949d27031834ff8bfce2fcad3da7441",
      "End": "369df9f8c7194e9b80a2eee9e4ac0484",
      "Id": "6d2f527d3a3341df85104b3d654b8ae8",
      "IsHidden": "False"
    },
    {
      "Start": "fbd7aaae3ae743a2825c846f522c4581",
      "End": "acceed1fc21e4ce382d808335d48256d",
      "Id": "4c98a7c85b3a439980710a883077b44c",
      "IsHidden": "False"
    },
    {
      "Start": "1fc83b12a6364516b17ebf52b1466018",
      "End": "36604692f49c49269cee3e1ed24e52c6",
      "Id": "3361327c6533466693ccf849a381f59b",
      "IsHidden": "False"
    },
    {
      "Start": "914caf9b8d6d46e092c3df442317a02f",
      "End": "7496ca5742ee4563a09468a025a1a6c1",
      "Id": "0057acb4351c4bf7bea4a9da7eba0755",
      "IsHidden": "False"
    },
    {
      "Start": "914caf9b8d6d46e092c3df442317a02f",
      "End": "299e61e6dc784661aafea5739a0f3c13",
      "Id": "ee2bebbc391b45ce8ce528cbc16ce4d7",
      "IsHidden": "False"
    },
    {
      "Start": "48fb95ff3caa42f59b74473e2a013a9b",
      "End": "09009794f7ea428b8ec443c030f43e2a",
      "Id": "85658a2f53234426b5abe210892ba720",
      "IsHidden": "False"
    },
    {
      "Start": "1be7e5e291324bf89d4ba95aff2b22ab",
      "End": "de36fe577bc64bc9bf2bbaba6e46cc49",
      "Id": "2f6589552192454ba0418ed84f54d493",
      "IsHidden": "False"
    },
    {
      "Start": "1be7e5e291324bf89d4ba95aff2b22ab",
      "End": "aaf8a0defcde477299b13c60dc128e0a",
      "Id": "301e6d66eca649d1b6363c8f7851bb6f",
      "IsHidden": "False"
    },
    {
      "Start": "f0d3a921023b4fd4aecad758711891b5",
      "End": "9d74d332604445e1915d55adf3be523c",
      "Id": "17859c1a83a6412eb23c7a8dc0e480a5",
      "IsHidden": "False"
    },
    {
      "Start": "f0d3a921023b4fd4aecad758711891b5",
      "End": "80b4b0dce2294409938f107110bfd56c",
      "Id": "4066839b6a5a4e209badd1c6edefe06c",
      "IsHidden": "False"
    },
    {
      "Start": "8e0bb88a00d740c5a28a9a00d64fac9a",
      "End": "6f790a22a06041449386dd2ca5e0c2b3",
      "Id": "f0a1dee08444402199acec844b75f252",
      "IsHidden": "False"
    },
    {
      "Start": "8e0bb88a00d740c5a28a9a00d64fac9a",
      "End": "30fdd0227e864a52aa6e988eea129491",
      "Id": "4a339c7729e944dfbe060950234e6fd2",
      "IsHidden": "False"
    },
    {
      "Start": "8f137b4805ff4145b24122a8129759e4",
      "End": "e440b2b1c8f540c797ffd7a117c84371",
      "Id": "066737320dd940d79eac83ac9cded7e7",
      "IsHidden": "False"
    },
    {
      "Start": "8f137b4805ff4145b24122a8129759e4",
      "End": "0f443b1479524984875d572a7b8161d5",
      "Id": "b7f05aa7db2048d988ba1ba74df1841f",
      "IsHidden": "False"
    },
    {
      "Start": "60f68a7ad39c44a78fb5807260b8ef82",
      "End": "cf935480a39940988c7c0e48a63f2930",
      "Id": "a590fa0c9d1a476a967dc2721fa0bf5d",
      "IsHidden": "False"
    },
    {
      "Start": "60f68a7ad39c44a78fb5807260b8ef82",
      "End": "8188f0c5864d4e1cbfacd7bc815aad3b",
      "Id": "d1a7955415264bbfa5d3e287c6db8d32",
      "IsHidden": "False"
    },
    {
      "Start": "8221bb69d71d4cd2a324ad26b87792e0",
      "End": "957ad323e7f74fc8ae63d054ab7a8ee4",
      "Id": "8b50a3c5be594d5ba31d2e6a74e9028e",
      "IsHidden": "False"
    },
    {
      "Start": "d19ae8b2e2e64e16b5f8a88afc36420c",
      "End": "063e6170b7d8447ea275ce5adc884cd6",
      "Id": "b1dc8e17b719414994c7301ff4eb7577",
      "IsHidden": "False"
    },
    {
      "Start": "742b72aa21234b019b2b5bc200b03c86",
      "End": "a35c3c9f980b43c8855d626ea95e9af6",
      "Id": "e98613f32a5641e5a1a2f4aebba19a13",
      "IsHidden": "False"
    },
    {
      "Start": "c54455fc6553473e9647aa720b5263e6",
      "End": "6382d910bd1e4e2db78a241eabf57a5d",
      "Id": "bdc425cd18f4499c8d21aaa5f1298091",
      "IsHidden": "False"
    },
    {
      "Start": "c54455fc6553473e9647aa720b5263e6",
      "End": "5e6fe387f73b48f9b7f20d3fcd62866b",
      "Id": "f852f3a649f4482193b1c768657238cb",
      "IsHidden": "False"
    },
    {
      "Start": "cf6ef4699697424eb47c86b542bed47e",
      "End": "6d691c16e28044f88ab671d1b177a7b5",
      "Id": "263ceb1ac80a46068bbfb73b9356db34",
      "IsHidden": "False"
    },
    {
      "Start": "1c58b0d1b47141bea5f51bd2cc0bdf08",
      "End": "52497a4f7e3f4e7b8fd87b74a4f02822",
      "Id": "a858e6b8bf7a4e22b41ea2961982ed82",
      "IsHidden": "False"
    },
    {
      "Start": "15b812ed6cdb4e62b9381199e26281f6",
      "End": "9796a4ddcf6343969756bfe504eb14bf",
      "Id": "7dd039d17380403c9bbda20ad9a868fb",
      "IsHidden": "False"
    },
    {
      "Start": "f2aea9c72fae496792d64287a83c2951",
      "End": "4ba52a74ab09432dbc936fb0c846d7af",
      "Id": "0132f396adb343038aebc26b856b05a9",
      "IsHidden": "False"
    },
    {
      "Start": "000346f199e84c0e89036c3238bd2534",
      "End": "314c2fb0bcae46d3800e939a0a61ca19",
      "Id": "a545102212e54d208d2325b2387af156",
      "IsHidden": "False"
    },
    {
      "Start": "a0dd4e8d6e864acfaadcc4003759b07a",
      "End": "c00c4b8eb30046c7998cc0379f1bf9ed",
      "Id": "b1716d1835254c3db9149eab0cc93704",
      "IsHidden": "False"
    },
    {
      "Start": "1481de8e3bcc40b08dc6231bd2a83a07",
      "End": "e040cd905de141c8a8e0ef78b5e99845",
      "Id": "264703b88f70484eb0f57192bc5f95ca",
      "IsHidden": "False"
    },
    {
      "Start": "08f40abf42984703b760125f8fe4b95e",
      "End": "cc052f2ee3fe4c80883164c21bca5656",
      "Id": "7ee908f5d0d149efb3f0a439dd2ea633",
      "IsHidden": "False"
    },
    {
      "Start": "a86a3be4671e4154b36554dc2a2af2d6",
      "End": "edabcd49e6ea4993b172068d83bbdbee",
      "Id": "c9a7d87b882a4c35af5cecedfcb5eb4c",
      "IsHidden": "False"
    },
    {
      "Start": "ba7d65c9618d47db8115746ee78bec75",
      "End": "5b7f8eb6ba9c4a5980d61bbe17dee52d",
      "Id": "819e9eb51611405d8825b53d0723a52b",
      "IsHidden": "False"
    },
    {
      "Start": "439070d2181d4e0a804de4fb9c51d65c",
      "End": "4d68cea4a0f543d6b613c892f8bad96e",
      "Id": "b14e04c1611345f9acc1960bb5c65ae5",
      "IsHidden": "False"
    },
    {
      "Start": "37c052bfcd684699807542bcb5195f3b",
      "End": "42112093c96b4d39940613ebd22f2808",
      "Id": "01970a24366040668a32732737e4eb3c",
      "IsHidden": "False"
    },
    {
      "Start": "f76d3a1475bd4f70ba831921402ee9dd",
      "End": "3a42baf3b99b481e8f1e0f3ec8138552",
      "Id": "733485278d7e4c68a12536b1056bf15b",
      "IsHidden": "False"
    },
    {
      "Start": "6bfea1689a564b129aa9ff883511e7cc",
      "End": "6ba01d9a13ac40ea96c87862996df84d",
      "Id": "3e789298c41d49fb89e546e438508394",
      "IsHidden": "False"
    },
    {
      "Start": "894cdadba06b4088a9df83db70b20b9d",
      "End": "c8a7a0a48b804152912220118b24908f",
      "Id": "1a75bd4b1496446dab550f7cd5b55a87",
      "IsHidden": "False"
    },
    {
      "Start": "7fe767aa2dde4da0a94f539212075db1",
      "End": "b3b9ed2109734c5083495c6f6df0c9f7",
      "Id": "38bc2f9828a0472da62ed3ad6784bf72",
      "IsHidden": "False"
    },
    {
      "Start": "7fe767aa2dde4da0a94f539212075db1",
      "End": "33c497eed8a04ad39e87b60bcdfe8a1e",
      "Id": "06f9f0030f0e4281bbae260dd12ae15f",
      "IsHidden": "False"
    },
    {
      "Start": "91cc642301734d1fb1efcf0de961ece3",
      "End": "7f74ea49e8194139a4c9a30fde21778f",
      "Id": "b4634d54f383413282cbc4edb394eb97",
      "IsHidden": "False"
    },
    {
      "Start": "91cc642301734d1fb1efcf0de961ece3",
      "End": "2f04b36337144216b24391799f5d9f67",
      "Id": "dc4b6851c5ea4cc0856961a37f45df77",
      "IsHidden": "False"
    },
    {
      "Start": "91cc642301734d1fb1efcf0de961ece3",
      "End": "debd2237347c4350883cda707a7f8131",
      "Id": "2429c42f28974658b903e89874a88fe4",
      "IsHidden": "False"
    },
    {
      "Start": "583b63e14057467daf79cbfbcb0ef8c9",
      "End": "e1212af6896b46be8ebc37cbd9b954af",
      "Id": "445a161b38264aea9e5edd7adb05d2a0",
      "IsHidden": "False"
    },
    {
      "Start": "583b63e14057467daf79cbfbcb0ef8c9",
      "End": "86b89196d6d34b7f8379f9c02f491d1a",
      "Id": "788deae55fca4a0799d3d1d0ed807f80",
      "IsHidden": "False"
    },
    {
      "Start": "f75a754f92ab4c98a0041e759744a370",
      "End": "2e0e9ab5640c43a492b1a15323d3445b",
      "Id": "d7549145398843b09b69dbbe25c31e65",
      "IsHidden": "False"
    },
    {
      "Start": "866f3a6c2b6e403f855faacf0e0e718a",
      "End": "3eaee30238b84cd3b5e5eb10fc9d8127",
      "Id": "5b5be0d872ce4e3a87cfcfb926209a3f",
      "IsHidden": "False"
    },
    {
      "Start": "372b4927a4a14e56b69bae9aaeaa062e",
      "End": "3c4f217de59d41e48886c99ec4cd876c",
      "Id": "badfaa09606048c2984c41e691746ab2",
      "IsHidden": "False"
    },
    {
      "Start": "697161a7bcd34473ad070e70e6c47d79",
      "End": "2a68d04b2d3f4143aee9cd81a4729012",
      "Id": "2bbbcb1d6cd64dd5b9a38a454f880c60",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "936dcfd3645e4b1991ca7629b12e5d67",
      "Id": "71056b3ed818472aaa7a57c85341e46d",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "1a559a0ef78248deb186ecbf9f48ad78",
      "Id": "394a62e60abb4fcfaa56619981e27b1c",
      "IsHidden": "False"
    },
    {
      "Start": "66dd7d6dd4ee4e8a8efcd2878561afac",
      "End": "5ed01b0f3e80448f8444fc660e424e29",
      "Id": "741f18636333415091689d93d0ade392",
      "IsHidden": "False"
    },
    {
      "Start": "63a21fcd9c474676a250567aa03af847",
      "End": "60cc092386b94d9fbc6c39c5af6e1032",
      "Id": "ad42dcba625847f4a15d9756e8ee52be",
      "IsHidden": "False"
    },
    {
      "Start": "0e562466963a46dfa051fa82a403ab7f",
      "End": "c6185d8f9937417880d88675ff2c3f8b",
      "Id": "17f6b9942a0b425b85d8625e69543ce0",
      "IsHidden": "False"
    },
    {
      "Start": "903f83b15ffc4fdaa851417f4b280910",
      "End": "55a602f0254f45269265de904997cac4",
      "Id": "8b0508abb8ea416baad8e9409d78e4b6",
      "IsHidden": "False"
    },
    {
      "Start": "78c9ab451c664adaa2fd7d9c437923cd",
      "End": "2f51538db4c2452397e4ee3638a4f334",
      "Id": "390d3fbe5d7d4c6ba069322536696218",
      "IsHidden": "False"
    },
    {
      "Start": "78c9ab451c664adaa2fd7d9c437923cd",
      "End": "4e933726c0de47da90a453c652bc0276",
      "Id": "c23ff3f85a27469caedc659a1bd863ec",
      "IsHidden": "False"
    },
    {
      "Start": "57403439fab34b2eb6cf21f4d71e10c6",
      "End": "3e8c94792f3a490bb67103277a40222b",
      "Id": "a1f7c53c7fe649b98d6840adaa6514fd",
      "IsHidden": "False"
    },
    {
      "Start": "57403439fab34b2eb6cf21f4d71e10c6",
      "End": "8ec559fddf914a1d8ac308ccfec43736",
      "Id": "ef96e98731a64dbdb30a737f26a22cc4",
      "IsHidden": "False"
    },
    {
      "Start": "14a86467091f4cbfbb505e5931efa309",
      "End": "7a03ef4833a54e29b2dc25b4488c3173",
      "Id": "3453eb979aa44c09bd6f4d25e201aba8",
      "IsHidden": "False"
    },
    {
      "Start": "ef50a9ac4fa4408e930254c076b96b12",
      "End": "eeeab133d9f34ed59dc6e8512c942bb7",
      "Id": "1670afe9430e417c88f2d10dbd7e302f",
      "IsHidden": "False"
    },
    {
      "Start": "ef50a9ac4fa4408e930254c076b96b12",
      "End": "d9eac38470fd429ebb72001161c96a4a",
      "Id": "6a831f8802054150a1059d461fa2d00c",
      "IsHidden": "False"
    },
    {
      "Start": "c579b8a527de4b86ac99fcfd4ccdf674",
      "End": "1c1d5bdb30284aa68dcd9f0a9c81aab6",
      "Id": "a4444f25ce6545918b665989e4fb584a",
      "IsHidden": "False"
    },
    {
      "Start": "d911b346006446fd99875c9722122388",
      "End": "00701d525aa046b8976fca7f79e6303f",
      "Id": "dc21c046091f45ee86cf5415c06091bd",
      "IsHidden": "False"
    },
    {
      "Start": "1e0ad1837645471c8d88a9688dec4b12",
      "End": "12da072871284dddb90693833b8a0c4d",
      "Id": "ad26f5a63cb64a3f83a57c12c8e66902",
      "IsHidden": "False"
    },
    {
      "Start": "448b6aa4bdeb49b4a8ccf334468b18b2",
      "End": "b2d3e66a1e3d4c4e84842229a1af5d2a",
      "Id": "f6ec2a1de3fe46a990e5156d60d39783",
      "IsHidden": "False"
    },
    {
      "Start": "5c51ea2a072a40f6bf9b39e134c190c0",
      "End": "0fda7cc0b74f432e9daf8086f120997a",
      "Id": "2195878052b841369f6b4addec66bf84",
      "IsHidden": "False"
    },
    {
      "Start": "e1aa46d3dee04c62852aa62bc2bb1c99",
      "End": "959e6e03a5b341a4a1074421a02202c6",
      "Id": "8c1fac7ee791423586fc4daa43dc6d07",
      "IsHidden": "False"
    },
    {
      "Start": "767bfc27e45b47deb87ef5232e25c002",
      "End": "a2ac12cc22bc4244b7d5c85c8d1d8923",
      "Id": "ed5e28f82f184cc0a1018d8cf6e4783b",
      "IsHidden": "False"
    },
    {
      "Start": "bde137e8f8ff4e4ba2046e44a5fba330",
      "End": "8728c90e6df84acfa987dfed69e494b7",
      "Id": "abe9196e0fdb4b698782f144b51a60f8",
      "IsHidden": "False"
    },
    {
      "Start": "bf1b2f5c86e942c29007b1f17d37f6d8",
      "End": "b5b57ba18a744048940a75a3318edd9c",
      "Id": "ebebcdab063a4bc1a17b724fc192f9ec",
      "IsHidden": "False"
    },
    {
      "Start": "bf1b2f5c86e942c29007b1f17d37f6d8",
      "End": "8551cd95da79494a9e6465fb90f2305f",
      "Id": "024754931345457293bca2a179662991",
      "IsHidden": "False"
    },
    {
      "Start": "30d82c366926459d88bb0a2ca137b141",
      "End": "fac716a5b9a34f8296c2dd982c72b3fd",
      "Id": "fb751384165844a58fcd8e186bb2911a",
      "IsHidden": "False"
    },
    {
      "Start": "33ce989dd6f242329f8f1a93d078ccbd",
      "End": "7eadf25c17824811a5d53c0cced1aeed",
      "Id": "62d5bd6a1932420b9fa35c5aa14871f8",
      "IsHidden": "False"
    },
    {
      "Start": "df152cbc55304f3b884874f607d619f4",
      "End": "f2f47ac2e88440fe8f83bc5b1ba6c0df",
      "Id": "8f3ac319873d4c59a7270c6438641172",
      "IsHidden": "False"
    },
    {
      "Start": "7386be5203154c60a1e39c5fd606c32b",
      "End": "142180ec72904146988fd756eeb7ec7e",
      "Id": "a2eae7a04c474d4ab30b9ca5d5d26c9e",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "8d0328a11fd1449fab1fe9fada228e77",
      "Id": "abe1b0c6dea544fe854a3288b727831e",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "b9668ea322a24115b2486a25f5414cb7",
      "Id": "377d6cceccdf4674bc112cc12cf558e1",
      "IsHidden": "False"
    },
    {
      "Start": "a9d145eba8e4475a90b2c565372699e5",
      "End": "acf6e840f5ee454c8d273f42836300c3",
      "Id": "3c9e33c671c547ec9e6974df86d05f61",
      "IsHidden": "False"
    },
    {
      "Start": "c10e969a237d467bbf6c0b29f7a56d0a",
      "End": "a8949e5f1c614f97b480bdc60af64410",
      "Id": "4f1152db9ade4f38ad91e3e13ee5d694",
      "IsHidden": "False"
    },
    {
      "Start": "1bf30d20ca7d4e57b5ae25e8b3d34d80",
      "End": "a120ec997e1240d9b44748e5742b31a4",
      "Id": "8d2fb8b6e3b04b50a202bd95063b9b66",
      "IsHidden": "False"
    },
    {
      "Start": "77b710a75f6f40739bd3f40bec1c9e9a",
      "End": "5c91ca1f57964e408227e9f103199a25",
      "Id": "4179023eca274900a3767cf8966bca92",
      "IsHidden": "False"
    },
    {
      "Start": "5dc78e0ab34c4b5f9aca1bf095245cd5",
      "End": "429b9d3f97e04ddb913ceafd74c08e96",
      "Id": "fd9902405361420d9f6c314014b264b8",
      "IsHidden": "False"
    },
    {
      "Start": "48cf6dd69e5745d8a4badea8f748da97",
      "End": "09767934a7bb4a168e453ce0fedf857a",
      "Id": "0627fa5d2ed842918c3d435cf5448698",
      "IsHidden": "False"
    },
    {
      "Start": "88b362546e634ffa8ff163b5f2f3a1d8",
      "End": "867251b1e05f4e36aa955595cf47c47a",
      "Id": "1c472dcb162b4ad7848966e9afc7af4d",
      "IsHidden": "False"
    },
    {
      "Start": "1272864a8969480285351a1cf1c8c8c0",
      "End": "7ded59ca8b444e78a80112d8a8a602c5",
      "Id": "872fcd6cd29d4dd5bd24ba755d8ad40f",
      "IsHidden": "False"
    },
    {
      "Start": "ab6702af393c4d4e874d3c8bada02b52",
      "End": "270f3a72773344d0b30cd7445fd33b90",
      "Id": "1b6eee2512a9414d9ec1d2c2bb55b106",
      "IsHidden": "False"
    },
    {
      "Start": "ab6702af393c4d4e874d3c8bada02b52",
      "End": "91d3622bb6ce4e05894cf6ce925384f8",
      "Id": "e2bafcddbeb3488cbb249ae62540b43d",
      "IsHidden": "False"
    },
    {
      "Start": "45a50308810d48ce95dc97ee3ced4ba1",
      "End": "ce231360a84d456db6082b5c5ff0d922",
      "Id": "640f22b80d8c43ea8445c4f88aaad1d2",
      "IsHidden": "False"
    },
    {
      "Start": "fcbfff37d07c4ab8a1953972b3701447",
      "End": "45547d3f13d4499eb8f0ed311830c5fb",
      "Id": "32871d76c09e441b99a2669273826a55",
      "IsHidden": "False"
    },
    {
      "Start": "eb6b053e058b475fbc82cf1a515b3b61",
      "End": "123ac996f06d450d832c6ee31d7069af",
      "Id": "0dfb0841c71445da9c217c6078c33889",
      "IsHidden": "False"
    },
    {
      "Start": "077870de2e5a4d729f16fe36a0413b60",
      "End": "86ff6e829c324f5ba71898eba14cd814",
      "Id": "1cf46e5f484f4113989a62d60db2b377",
      "IsHidden": "False"
    },
    {
      "Start": "af820fdbfa564f60ab29453b16390b4d",
      "End": "f2981ec1682245a19f39f7d5590a4e23",
      "Id": "ce02535c9e9248d39b105c55a3693aaa",
      "IsHidden": "False"
    },
    {
      "Start": "e71d4402929549c6968c271766f73218",
      "End": "e12a8c4f95104beba45f31f130837c68",
      "Id": "0f8f37103d3a47d397132b9356190ca7",
      "IsHidden": "False"
    },
    {
      "Start": "6605df4d78434736b7b17a34a4723d60",
      "End": "61b5977ea8d7495ca9291e656b242d91",
      "Id": "9276804ec6324e1c9677a5f7bf5cc934",
      "IsHidden": "False"
    },
    {
      "Start": "0492e26ac02347c196d2e70a2840891c",
      "End": "6f7c467f3bcd4ad4949921e026144cf6",
      "Id": "97faf7bb9be0441181458985abe0c3a7",
      "IsHidden": "False"
    },
    {
      "Start": "813637fd9610469da1a8c4cb005a491d",
      "End": "e30ef5e387ea43d2862ea9bdc2beb276",
      "Id": "bb4d4991979d4498ad439d5efe17a2ce",
      "IsHidden": "False"
    },
    {
      "Start": "d2ad357e0a6e4eaea577f67d79695299",
      "End": "9338fed6596d4aef80b359c8f6902bec",
      "Id": "f0b1cf1eacd747d59dbe3bfd10812875",
      "IsHidden": "False"
    },
    {
      "Start": "5432488edbc749c3a84b8e2c98478a2a",
      "End": "26d7414229104d838c6c46f04092e46f",
      "Id": "b277212ebeaf425c8632f3a6455724ff",
      "IsHidden": "False"
    },
    {
      "Start": "fddefc1085d24bf486861cff44d41d06",
      "End": "21033e574d4c4317862532ced0ef9af6",
      "Id": "899687c914aa4521ad0c4d9a642ffd1b",
      "IsHidden": "False"
    },
    {
      "Start": "b6866d244bf74f90993bb73027ec60d1",
      "End": "2cbcc6d12cca444491f83bcdb3d5b997",
      "Id": "af7ea9cd964c4923bb48d1f6103926a5",
      "IsHidden": "False"
    },
    {
      "Start": "b6866d244bf74f90993bb73027ec60d1",
      "End": "f90acec16d1148bcb0bd9cb7f82dc476",
      "Id": "bafa5293d4f74bfd8c4e5bd492b891af",
      "IsHidden": "False"
    },
    {
      "Start": "a91f80e0d9a24f7b8b5f06487cd3e151",
      "End": "a45e2923af6743f0bac3d270a4a51bcd",
      "Id": "f05e45a2dbad402d9f1536587318d247",
      "IsHidden": "False"
    },
    {
      "Start": "a91f80e0d9a24f7b8b5f06487cd3e151",
      "End": "52873f698b7c44269a02cadb5477ed38",
      "Id": "8ac28b6572f9428896d165b3540f0640",
      "IsHidden": "False"
    },
    {
      "Start": "22e6bec369514cf8b4495fb896d259e8",
      "End": "f39659b145d0462482073c7655fe3582",
      "Id": "222fd060a8fe4bc8b6b5ee30772844e0",
      "IsHidden": "False"
    },
    {
      "Start": "a9053c19ac1a48a78e73faf35a332a3c",
      "End": "79f379b6f65e433994515fec63a7bf77",
      "Id": "5b2fb8ea1856496992aa553ad2661d23",
      "IsHidden": "False"
    },
    {
      "Start": "7b69d3b8373c4da8894964b999d1b252",
      "End": "1c64374f51c741dca67094bf641d7890",
      "Id": "11a2439c28cf493095c9e732cc01bf33",
      "IsHidden": "False"
    },
    {
      "Start": "98f74cb4eb434c2db15a844929eac4ec",
      "End": "9825547c3fc14efcaa6e0a83253c082d",
      "Id": "1a109cce5e5b4ae280eb36095029eed1",
      "IsHidden": "False"
    },
    {
      "Start": "166b2b154a444047b8da2cff84565f0f",
      "End": "efbd6851497a4681a114ca7842d95e6a",
      "Id": "b23ad2bd288c49e8a19e0027d26f0968",
      "IsHidden": "False"
    },
    {
      "Start": "cc1f03d79eaa4f77a832751c2cff7a63",
      "End": "908bb9ba4c4445618470abf4e49c4100",
      "Id": "55df7e0733f847c4ae466119f29d38d9",
      "IsHidden": "False"
    },
    {
      "Start": "68663aba7643409ba2fa5a8744a39699",
      "End": "c79113d8d2ea47778ae5078a46ce8c0e",
      "Id": "fabb0fceaa644f52a73a85ae72319572",
      "IsHidden": "False"
    },
    {
      "Start": "d4dffbc01c9a4ce49e9c07c2f0458ce7",
      "End": "1a671480e83e405bb495ed3021fc94d7",
      "Id": "d523915c66a642f4816fdc1ba1a54ddf",
      "IsHidden": "False"
    },
    {
      "Start": "fbfa2120023343d2a7e57ce917d47e3a",
      "End": "fc6e7c8d184949139064461a9aa8f600",
      "Id": "68183591fb2647a2abf8cf949f990b0f",
      "IsHidden": "False"
    },
    {
      "Start": "4cf4d8400d7447daa992836632717df4",
      "End": "31fee54ae74f49c9a7b78648c5fe6bf9",
      "Id": "cb9dd8f8b9124a81bb62ac881d1b9ae8",
      "IsHidden": "False"
    },
    {
      "Start": "88fde7de93994df7910f9c8bd2389a49",
      "End": "2d45870ecc9f4742810ae2af861ad07b",
      "Id": "79d941031628450d8c1abb3035d706ec",
      "IsHidden": "False"
    },
    {
      "Start": "a298e09de1954265ab7f59c4f4501956",
      "End": "6ba604fd772348469d98f6f0f2c2b9ab",
      "Id": "4936a696d67b4fcca6387a1115a6d54f",
      "IsHidden": "False"
    },
    {
      "Start": "cfa22a9305d34c8185e1baa6968fd67a",
      "End": "ffdd5032a2794b3bae4463025d2b84f9",
      "Id": "b759969cf7d141d4a3d11996c1ea7402",
      "IsHidden": "False"
    },
    {
      "Start": "56773a500b8647cfb79aec11fa8392cf",
      "End": "1b9466f21e604ab9b842b6f17fcd4a7b",
      "Id": "4edfbd69e5a1437d969cc449eb960204",
      "IsHidden": "False"
    },
    {
      "Start": "206f2e86e2a14220856e499f8f1935f3",
      "End": "064b58308cd644dba7a8246aa17fe116",
      "Id": "0151cac4e0244eb28a59b91e9276b34c",
      "IsHidden": "False"
    },
    {
      "Start": "a1a5abbd413448b583e57b1b82eaae39",
      "End": "1d3aa16d4fa844b5a9217eae073b6239",
      "Id": "984aad3868234512b63742450331cebb",
      "IsHidden": "False"
    },
    {
      "Start": "0cab15bda11c45a2a6c8b6670bef1717",
      "End": "809aab676bdd45759176cd7fc1b7287c",
      "Id": "71a27838915a45a587a8e1ba95d4fbf2",
      "IsHidden": "False"
    },
    {
      "Start": "0cab15bda11c45a2a6c8b6670bef1717",
      "End": "399e8b25f47e4897801b7e6852d96550",
      "Id": "68efb12929304a429cf02c503b331fbe",
      "IsHidden": "False"
    },
    {
      "Start": "796804d5d95a48189405d6a2be406fbe",
      "End": "06744272548f4cac9a2093e6966a3066",
      "Id": "a099b52fb2f04842987ed1a2ae34fbd3",
      "IsHidden": "False"
    },
    {
      "Start": "796804d5d95a48189405d6a2be406fbe",
      "End": "1b2a7b880c0649c1b2fa6ceef37fc6e2",
      "Id": "d4860a3412b749dc81abbbeaf8614295",
      "IsHidden": "False"
    },
    {
      "Start": "796804d5d95a48189405d6a2be406fbe",
      "End": "8c0d2ff7f610451e83f77f3c633c9ca4",
      "Id": "d5360ce77de94271a7dde50951b386b3",
      "IsHidden": "False"
    },
    {
      "Start": "796804d5d95a48189405d6a2be406fbe",
      "End": "6d23d8e1f2db4bdda1b0059f66e72a46",
      "Id": "be6eeebd416d4a3fb02322c7c029add6",
      "IsHidden": "False"
    },
    {
      "Start": "796804d5d95a48189405d6a2be406fbe",
      "End": "b76201eaf8974341ad75667be3ac8335",
      "Id": "9415add0522e4d3cbe447e7118dbef90",
      "IsHidden": "False"
    },
    {
      "Start": "3a170399ef4c4fcabc30a2fbb1608530",
      "End": "f8f0e458be4543f7afd8cc815ae3ed63",
      "Id": "b27837d9afb54c9eb0d5ba7eec9dd083",
      "IsHidden": "False"
    },
    {
      "Start": "266f688232474bea88168f12619b67fd",
      "End": "b73bca98f6f24c9ba7c48dd87740d16f",
      "Id": "932ac2d78ee34443b5a333632ee5e527",
      "IsHidden": "False"
    },
    {
      "Start": "266f688232474bea88168f12619b67fd",
      "End": "296c99d4f1a841cab54603dc28458b10",
      "Id": "d6d3916e0d4a4d00bbf6d117aedb2a9e",
      "IsHidden": "False"
    },
    {
      "Start": "deff8fc117cb4aac8dba229131a1b081",
      "End": "f7a184165f9340c5969916c4879bc505",
      "Id": "292a865c6c9d425a9f1fe56660fdae90",
      "IsHidden": "False"
    },
    {
      "Start": "deff8fc117cb4aac8dba229131a1b081",
      "End": "b808d8c46a35492bb9156568f66fd577",
      "Id": "1e58aff800e94b7cbe13c11b06ad1770",
      "IsHidden": "False"
    },
    {
      "Start": "583c44c88ea84939bfab0bd18e902e9d",
      "End": "6b41bab7829f4441adf223bf556f3f3a",
      "Id": "54231e25ec65497996f67ee829db206e",
      "IsHidden": "False"
    },
    {
      "Start": "6572932fae774d4f89125d1775179b08",
      "End": "8c1176d5e778470bac07b9dc985e3f13",
      "Id": "1eb3f2ebbdd0491aa02c54b82a7b2c29",
      "IsHidden": "False"
    },
    {
      "Start": "6572932fae774d4f89125d1775179b08",
      "End": "d8bcf53145844fc7945e9742f49a43d4",
      "Id": "74ffc6fc4964469a8dc6570657478cbd",
      "IsHidden": "False"
    },
    {
      "Start": "7f74eff3213c444c8c7809e5d204f3db",
      "End": "eb94bf70f0614392ae1e8118670b81ff",
      "Id": "7deb6e9a1dbc4a22920f809067d36d37",
      "IsHidden": "False"
    },
    {
      "Start": "7f74eff3213c444c8c7809e5d204f3db",
      "End": "60cd8c44df3e49219b09c56a53c466de",
      "Id": "ad07ad34fecf423a84876474305ffb6e",
      "IsHidden": "False"
    },
    {
      "Start": "7d25fc8a232b48bf91d08ad3e080c6c0",
      "End": "1d6cfa74e55f4e97bc84cd321cf66286",
      "Id": "55f2f0f2e36c40458140ab8d23999da3",
      "IsHidden": "False"
    },
    {
      "Start": "7d25fc8a232b48bf91d08ad3e080c6c0",
      "End": "a17de4c2b7d24a09b60c96be8f1f4367",
      "Id": "40d0bdca444c40299f9a9c6db7d093c0",
      "IsHidden": "False"
    },
    {
      "Start": "393a7123682b430cbeffc89426e3772c",
      "End": "92982ea0cf1a46ac9757a3d3253346e8",
      "Id": "a2670dae5c0e4a858663ad47aa17b6f2",
      "IsHidden": "False"
    },
    {
      "Start": "ebde98554221478cbc74de7b003446d3",
      "End": "20fdc9d6cd6348c6be8d0c98fba3aeee",
      "Id": "6fe9d384768e4730b61fb2d3f8dbb7f3",
      "IsHidden": "False"
    },
    {
      "Start": "699ee2afe8ef4100966173c51b9dfeb9",
      "End": "b628caffb4f747faa01878005a2625f4",
      "Id": "fce338fa846744e28dfa7113617bfb93",
      "IsHidden": "False"
    },
    {
      "Start": "19e0cbc7ef3f45e082555ef553e9d359",
      "End": "1b2bac42c0dd4bb2b06053c640b2193a",
      "Id": "dc3a4fc7fc72411c9ddf424700c79791",
      "IsHidden": "False"
    },
    {
      "Start": "269dcbfbc9944c1db3d107abf604ef80",
      "End": "51dd00ffd7304563a68c380857a8ce47",
      "Id": "8137fc4028f54a629cfb9dde4c20fc2c",
      "IsHidden": "False"
    },
    {
      "Start": "b9f7d7e36828453489b4136a36d90d86",
      "End": "adf136f6f97a49d889443ca716141d60",
      "Id": "5af95dbbe239404eb760c700b30dd1f4",
      "IsHidden": "False"
    },
    {
      "Start": "b9f7d7e36828453489b4136a36d90d86",
      "End": "6efdb54177324feeb0fdddbccdbc48fa",
      "Id": "090515720198444696e6a203ac6e256e",
      "IsHidden": "False"
    },
    {
      "Start": "b66c36e286d841288873370ad955f044",
      "End": "65e814915a4545039b0caa23c1c7f3f7",
      "Id": "06c66dbdae8b4cc59391e9cc66c7810c",
      "IsHidden": "False"
    },
    {
      "Start": "42cd9bc49d814c03ab152ea927719cdf",
      "End": "2b1bb3b05fb44a2099f69ee4c311c043",
      "Id": "74d52fb016a24d5e87e696746f778dd8",
      "IsHidden": "False"
    },
    {
      "Start": "64a3fceaf4ec445fae559ff7a5ff7a1e",
      "End": "1ba55ffe725344f5a1ec8aad0da51772",
      "Id": "bb099e72249a44ad8c1f109389159464",
      "IsHidden": "False"
    },
    {
      "Start": "4a955adfbc9a4d32bf5b793d736ec3ac",
      "End": "ca3839e498cc41deb8e9225ab7ab8210",
      "Id": "2527cb5daec84b4181a24221f8b5fce3",
      "IsHidden": "False"
    },
    {
      "Start": "4a955adfbc9a4d32bf5b793d736ec3ac",
      "End": "b3d503584349478bbf2ae823fb683bbc",
      "Id": "d92011f379ea484f92e5ab8ca335ebd4",
      "IsHidden": "False"
    },
    {
      "Start": "cf2d4ec47a1a4dc88c76004863b644a5",
      "End": "d96e036ec8524fb7ae8a7ea348d7d6cb",
      "Id": "614af80416644e05b82964ef7a7b8445",
      "IsHidden": "False"
    },
    {
      "Start": "156d3b4edd2e4009abd9082caf3d2c28",
      "End": "fb56ae44dda7404c8a7921b597e76405",
      "Id": "b60da04727fb4e2b993438b0adb08987",
      "IsHidden": "False"
    },
    {
      "Start": "9417dfdff6a048169ca49eed42f1d931",
      "End": "032075061e674eaa89a266bc3064ff13",
      "Id": "496003ebb0fb480d9f630579cd123c5c",
      "IsHidden": "False"
    },
    {
      "Start": "c4dcbf04ce684be8b67a81e3fb1296aa",
      "End": "315c0a592bff4a0aa1482c250ed5e677",
      "Id": "780d78f95e104c86b08902def140f89b",
      "IsHidden": "False"
    },
    {
      "Start": "c4dcbf04ce684be8b67a81e3fb1296aa",
      "End": "f884b433680c49e2a6b9aa55b6e38499",
      "Id": "490bb7d8b5fc4117af8f9ec3f37351f4",
      "IsHidden": "False"
    },
    {
      "Start": "ba020f09b1c84c07808d2e72996a08a0",
      "End": "0fabafea845542549f163f7aeaa21657",
      "Id": "67db2620763d45c1aef00bb9e7761529",
      "IsHidden": "False"
    },
    {
      "Start": "ba020f09b1c84c07808d2e72996a08a0",
      "End": "3fe8c74bcbb247939f8e94d303c3661f",
      "Id": "6c72d38e5f7b4c5b8a8fc4b7560dbbea",
      "IsHidden": "False"
    },
    {
      "Start": "b00831668ee544a8874807e900088c39",
      "End": "01fc44d64a064efeb78c52e34b86736c",
      "Id": "c9127c9228d640d6b22796bb43c7aa95",
      "IsHidden": "False"
    },
    {
      "Start": "8756bdd46b784387a804d239ef080404",
      "End": "c9cc039cb1544845b1320aceb530ec31",
      "Id": "e9732749e04f4aeba17989eca77197a2",
      "IsHidden": "False"
    },
    {
      "Start": "6a96e72cc96a4e049acf5ffb0a48db4e",
      "End": "1a8cbfb1186e4447b4fbfd80f6b58ec3",
      "Id": "f4abb53e30574202a96d8bdbaa2b052d",
      "IsHidden": "False"
    },
    {
      "Start": "f3d7d23de1794b6eaca2492426ad69fe",
      "End": "2cd0a4f6795a4b70887791d61136720d",
      "Id": "f84d49febc2b4aba9dfccd806106cc64",
      "IsHidden": "False"
    },
    {
      "Start": "5b2b46e60ebb4a79aa36711ba992e8a7",
      "End": "eedb2375ee86494e9786afd862c9a344",
      "Id": "9baa997d10af41489d286d7b1df4f8f2",
      "IsHidden": "False"
    },
    {
      "Start": "1c2c73f2aa4f4c46aca2ca125ce3bda1",
      "End": "b06aee2733e444e69592e53efffc5671",
      "Id": "c7e7798d3b0f41348d65f7fa0419325b",
      "IsHidden": "False"
    },
    {
      "Start": "a0d3d08b67a145f7995ea9aaacb1e401",
      "End": "aa2eb6d7695149759fe14002754f65fa",
      "Id": "5fad0bd8f63144dd8dbc888a47cc6317",
      "IsHidden": "False"
    },
    {
      "Start": "a0d3d08b67a145f7995ea9aaacb1e401",
      "End": "84f04837bfa948d692746688a74a94d2",
      "Id": "5295cc96077749e984c52ae3ccd3ca37",
      "IsHidden": "False"
    },
    {
      "Start": "a0d3d08b67a145f7995ea9aaacb1e401",
      "End": "fdac762e7077401f94c0de160605ff26",
      "Id": "d4a6269d12b24005af8964c84136ae1d",
      "IsHidden": "False"
    },
    {
      "Start": "d22e26880eaf444db984e9ab94159b16",
      "End": "d94fdebfb3ad48ccb4f1bed91f84bf63",
      "Id": "7dd177f28bac4880bfb1e3968df2ae60",
      "IsHidden": "False"
    },
    {
      "Start": "463e49aa0ccd44d2b737157424b7127e",
      "End": "034a14482be547e7a0e4d81c6c24a353",
      "Id": "b24ab7054eb4464a9acd41ea8320e347",
      "IsHidden": "False"
    },
    {
      "Start": "78ef840851754b2fad977c2f943e4cb3",
      "End": "775c08fc6da44acb9b3b3b432cfd9da0",
      "Id": "d5ea7fdfb4d543b8add3eb2b383a16ce",
      "IsHidden": "False"
    },
    {
      "Start": "907dc4367ae14c7d9e329c53d4777a63",
      "End": "bdb1ed7dc2604c71949d8bd6bc37e945",
      "Id": "27d250b3670243a8a0b08eb696b101da",
      "IsHidden": "False"
    },
    {
      "Start": "bfa6937cf8434754a715361e57c85586",
      "End": "123900a80da24393b566fe57e26eb910",
      "Id": "e32c9a24435d42fd9c8fe0f2381938e3",
      "IsHidden": "False"
    },
    {
      "Start": "a5e99db2d7a14af883eed141bb88bfbf",
      "End": "ef0696fba53c48cda7b327b9c2095aaa",
      "Id": "0237c9a1ca1544e19d268509f8a9b557",
      "IsHidden": "False"
    },
    {
      "Start": "c263b8e885334580b7bcedb5306a5844",
      "End": "d5e80a8d132e4fd08b900d1d6dfef92d",
      "Id": "1d28d5edd9194a608e0807b4293c7bca",
      "IsHidden": "False"
    },
    {
      "Start": "c263b8e885334580b7bcedb5306a5844",
      "End": "f8932e967b6045b9a96bb561a68de946",
      "Id": "a65b47f8d68b443a9c370e4859af1d0d",
      "IsHidden": "False"
    },
    {
      "Start": "57f6f4f020084caca998563ab85ce587",
      "End": "527650ff1dfb4184979914ce29a063ce",
      "Id": "e408a1c8c40c4f928d0c7913539b56fa",
      "IsHidden": "False"
    },
    {
      "Start": "85ef746a780e4d9ca56d52140851ac1a",
      "End": "e1aca1ebee8d4e1e8f7d225d9d4d3885",
      "Id": "6f75f4cfe1784a38899d78471ec2d909",
      "IsHidden": "False"
    },
    {
      "Start": "ae730ecdaacf4d748dd317ea8e755437",
      "End": "290cdc7a1ba84777b488a69f521524f7",
      "Id": "e29535f6eb11427d97319a0c6434c070",
      "IsHidden": "False"
    },
    {
      "Start": "5974a12c5c864ed2b3a91064fa816431",
      "End": "220598aa14ea4f81b713d3bc2170964d",
      "Id": "812244d037824cfb9a16cac409e5de31",
      "IsHidden": "False"
    },
    {
      "Start": "29a2befad32946cdb833208a70bd3dc3",
      "End": "ad75104d873c4bb78bf8a30a14faf703",
      "Id": "09e2fb1f974f4d4d8eb249493090b997",
      "IsHidden": "False"
    },
    {
      "Start": "d188949ca6c840cbbb2e8f404ec28ac8",
      "End": "e3e2f8934302449b8e9930386ae4dca6",
      "Id": "d90ef582ce4a462da58e21ed64de0967",
      "IsHidden": "False"
    },
    {
      "Start": "fc3b69514b2843589e5f92e39e0b4d9d",
      "End": "8d4a5b48001049b99347afd1197618b8",
      "Id": "6005a861b5e847f6a13ac8413f1f1709",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "(H_PAB.OD.L2)_BIM 팀 표준 패밀리 리스트_r4_남양주 DH room.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "51b4738620874fe885b1b5ecce1e49b7",
        "79390c9ce7774e469399c480c2fd9540",
        "e4bace56c16d462b8e637e17ad1a1046",
        "7f5e0c25b593402094aa786410d940b1"
      ]
    },
    {
      "Name": "Total BOQ_blank.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "29337ae8d2c94d488ebdc03de0a16ad6",
        "ecccb4f11a2543e29cb666423f4f697e",
        "058c5ecec7114c5da3425da4080ff1b1",
        "e84dc62872914d218aeacd843a06c171",
        "5ac573ea6041465f9446a653f49c7e5a",
        "a3d3a74367f049849612bb8a69914c65"
      ]
    },
    {
      "Name": "A.1_플랜트건축설계팀_BIM 팀 표준 Family List_Rev.6_2024.11.07_강한호_MK.xlsx.xlsm",
      "ReferenceType": "External",
      "Nodes": [
        "8ab3accc47f6452a95570634f44f527d"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "MK Jang",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 100.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -5365.134765625,
      "EyeY": 30418.9765625,
      "EyeZ": -32321.193359375,
      "LookX": 19911.736328125,
      "LookY": -24367.369140625,
      "LookZ": 25659.423828125,
      "UpX": 0.25423350930213928,
      "UpY": 0.90995931625366211,
      "UpZ": 0.32762691378593445
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "1250bd18102c4ebaac9950d60dac8849",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8856.5859275150251,
        "Y": 1844.982684618361
      },
      {
        "Name": "All ElementsExceptRails",
        "ShowGeometry": true,
        "Id": "c790cfc4c7d943cdb05ca3a612d673c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1549.982684618361
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "d78f3dfc768541ab8490b53194e174c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9317.5859275150251,
        "Y": 1844.982684618361
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1844.982684618361
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "bf37a72db0e847dba5e3d1c2ed14c8bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8146.5859275150251,
        "Y": 1538.982684618361
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "1eac1f1717ab40c98ea2a8a9b59421d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8727.0609254455467,
        "Y": -625.728159600543
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "caccad700bd84d8e8cb198c7fe1545aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -9021.0609254455467,
        "Y": -728.728159600543
      },
      {
        "Name": "1. Family List 경로 입력",
        "ShowGeometry": true,
        "Id": "51b4738620874fe885b1b5ecce1e49b7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9870.3225387940074,
        "Y": -889.96082918983393
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "76e75c1cd00342eeb418e14c2410b8f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9021.0609254455467,
        "Y": -432.72815960054288
      },
      {
        "Name": "Target Sheet Names",
        "ShowGeometry": true,
        "Id": "64985def907747329221585392bfc414",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9287.8396523380088,
        "Y": -556.606173301846
      },
      {
        "Name": "Data.ExportToExcel",
        "ShowGeometry": true,
        "Id": "3a2291d54fa74970b0cacd8a3a8a08b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15382.521868898028,
        "Y": -1595.9743761841171
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "79390c9ce7774e469399c480c2fd9540",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12709.538623452374,
        "Y": -388.33241520242154
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e4bace56c16d462b8e637e17ad1a1046",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14552.44874049674,
        "Y": -1755.0435765350912
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2524f0f864744ce88dfa2ab2d9d3e61d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14552.44874049674,
        "Y": -1461.0435765350912
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "92a5d0c5dcc842d7b250f2421b0731ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13119.418457194661,
        "Y": 1552.6131016276518
      },
      {
        "Name": "WM별 계산결과 및 spec 정리 from Element",
        "ShowGeometry": true,
        "Id": "f12f2f24ce254bd0baef14f26c5d20e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14423.266608735636,
        "Y": 1749.4126804445477
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "545bdda03ce34cbf8f380aa09996affe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14717.101588339407,
        "Y": 2536.337448525941
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "23c16e6f54c54461a94198d996b688b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14202.704354686386,
        "Y": 2786.6979909606957
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "cb8eb6bb001d4e018998c1f81063a7b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14437.101588339407,
        "Y": 2479.337448525941
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "14f3ccaaff4b40d6995625fe77a4fefc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -892.64367374355152,
        "Y": 832.53553210960592
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e1f7183e17d94ac6b722d8c8f5f42ae7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2907.0220567364186,
        "Y": 799.1589366976541
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6689bfc92b614a86a2438579264ab559",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8965.5465924331475,
        "Y": 2571.1516927536572
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "dcbac945a42f4a5c9a9db85369fb5958",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10085.040515616396,
        "Y": 2373.0953674521775
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "abf63584b5df484fa09c861a33e2a423",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9831.0405156163961,
        "Y": 2406.9228674521773
      },
      {
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Id": "0a5e14b22e144bed8451ebf583eb117a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10408.040515616396,
        "Y": 2445.0953674521775
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0de826304a0c4eeb88bf431965d3fbff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10085.040515616396,
        "Y": 2550.9228674521773
      },
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "353906790eac4dbe9265acc4fd59f260",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10703.040515616396,
        "Y": 2445.0953674521775
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "e861b848a856496cbce58b3351868c08",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7081.2967809391,
        "Y": 1489.97930386344
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b8bb7074d1474d5c817d440222fe7c73",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4583.35774767021,
        "Y": 1844.88353866124
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "a6525529e2854c5da74f8737df2462da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4332.77191651146,
        "Y": 1934.55079452346
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3961.69571250695,
        "Y": 1827.50908314071
      },
      {
        "Name": "List.Contains",
        "ShowGeometry": true,
        "Id": "ff9036ffe34e498e92682212d56492b0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -752.77378496225174,
        "Y": 1796.5939769301638
      },
      {
        "Name": "Total BOQ 데이터 파싱_(AR) BOQ시트",
        "ShowGeometry": true,
        "Id": "6d3257a7ae1544ba96260a2930df41a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15057.101588339407,
        "Y": 2716.337448525941
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "1d1c6adab25c4ce38795f6d70084638b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11001.656420288497,
        "Y": 2393.8838403199275
      },
      {
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Id": "86d4c756923b4ec5a7a76f44031313e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10407.540515616396,
        "Y": 2772.0953674521775
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "36b72e613f054f51ab44d4a659a11baf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10084.540515616396,
        "Y": 2877.9228674521773
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "522eba1415564c619ea3a722c3bfca63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10084.540515616396,
        "Y": 2700.0953674521775
      },
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "78f0730f98164cf88c95031451db6a2e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10702.540515616396,
        "Y": 2772.0953674521775
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f8862fff8dc647619582f6b8e6003793",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9830.5405156163961,
        "Y": 2733.9228674521773
      },
      {
        "Name": "6. 건물명 입력",
        "ShowGeometry": true,
        "Id": "aae6ee369697433d96978d6f0a38227c",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13943.246414320995,
        "Y": 2695.5057943942179
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6790ac16e9864c6282b9f0a28e4bac80",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10999.772324960597,
        "Y": 2838.5319431913176
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "8066549a4a9b47df80e48559f550e5c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14711.562036870666,
        "Y": 2925.7978970572012
      },
      {
        "Name": "Data formatting for Excel Export___________________________",
        "ShowGeometry": true,
        "Id": "cf52cd359968431c954ef0c1c105f09b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 16745.474876582877,
        "Y": 2774.5861017289708
      },
      {
        "Name": "Export to Total BOQ",
        "ShowGeometry": true,
        "Id": "53192363f9da457ca86140d19351bdfb",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 17469.64443975145,
        "Y": 2581.9952395693808
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "29337ae8d2c94d488ebdc03de0a16ad6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15592.167404282434,
        "Y": 2494.1400006968506
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "008b88f58bd548188e4d5668e106d9e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15869.874517307484,
        "Y": 2661.6300243444266
      },
      {
        "Name": "List.FirstItem",
        "ShowGeometry": true,
        "Id": "754f8c62f313424485c7342eacc1cd4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4415.3816598415369,
        "Y": 833.91248145609438
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7f5e0c25b593402094aa786410d940b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3108.2615968909972,
        "Y": -282.80070849031483
      },
      {
        "Name": "WM별 spec 정리 from Family List",
        "ShowGeometry": true,
        "Id": "756a672a7cef4e9e91d11c4c0279ab0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15173.712350089394,
        "Y": 2038.5717150239939
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7edcee4a274841a8a889d4611bbeb8fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13115.487805800884,
        "Y": 1986.4618931559185
      },
      {
        "Name": "Total BOQ복사 및 경로 반환",
        "ShowGeometry": true,
        "Id": "11184f601ab1440f92b47f1dcda08f3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 16479.706199278418,
        "Y": 2353.7647376961909
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5b26f33fb50d4441b2dc495fc028521e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13892.651222587083,
        "Y": 2878.22525955274
      },
      {
        "Name": "부재/WM 별 산식에 의한 최종 계산",
        "ShowGeometry": true,
        "Id": "0160cc09c3474815a65506ace3948e4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2316.58267753462,
        "Y": -1962.8713658846
      },
      {
        "Name": "토공관련 wm들 물량산출 수식 임시처리구간",
        "ShowGeometry": true,
        "Id": "5ba4a873bf1d434b910b34378934a374",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 1403.180152575,
        "Y": -2076.02473523682
      },
      {
        "Name": "2. 물량산출모드(입찰 / 실행)",
        "ShowGeometry": true,
        "Id": "de4566fde19f484c81cdf869933392fc",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9991.4947106523978,
        "Y": -1904.1674989553671
      },
      {
        "Name": "lang_mode(영/한) select",
        "ShowGeometry": true,
        "Id": "04d37a7ec47d4dbf9637d86f3be06945",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3704.431275328855,
        "Y": -97.319885673487192
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6886a36f3590498ea5f564bc7bd347fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4818.5565089440988,
        "Y": -3283.2915781155971
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "ba41dd7b1e544c768194fe3c25e74bc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9317.5859275150251,
        "Y": 1255.982684618361
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "4cc98c97ebcc4cf8a37a980c5f62c296",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8856.5859275150251,
        "Y": 1255.982684618361
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "6ede13f036274ae697bc98035846b781",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5810.24569588883,
        "Y": 1908.60165710588
      },
      {
        "Name": "Object.Type",
        "ShowGeometry": true,
        "Id": "6ff0495beeb2499481715807a0f60ef2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6518.24569588883,
        "Y": 1942.42915710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "386656a3778543bc971c0771aa33de2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6216.24569588883,
        "Y": 1942.42915710588
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "285fa2ccb9e64d638e488b5b2f65bfa9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5475.24569588883,
        "Y": 1861.60165710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b97ab952870844e293b85efdee212e50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5810.24569588883,
        "Y": 1751.25665710588
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "90f58a0b10c745428bdf593ba78e6987",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3507.06998550822,
        "Y": 1659.04326477827
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "ba9c278363fb4ee79339a58d3b60d083",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5280.0492575886537,
        "Y": -3281.7791917327791
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6dc991ba25ca4140a85d4b34b7f48148",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4258.0158528790907,
        "Y": -3361.6798325797508
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "2623af00f54444069be12845f80bb09f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5530.2282019462928,
        "Y": -3283.2468610490814
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5469bc54a6c14c1d88b2bb810a3b6e50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4853.2158915857226,
        "Y": -2908.9504175546072
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "804fa4d9274e4db6856405a3fd8714fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5861.5605693430625,
        "Y": -3277.5343219822234
      },
      {
        "Name": "List.AddItemToFront",
        "ShowGeometry": true,
        "Id": "ecb21e11bd164df2b0e984b6016571eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6744.2109386935463,
        "Y": -2805.2653012554847
      },
      {
        "Name": "Create HTML file and Open",
        "ShowGeometry": true,
        "Id": "2293b855337546edb1fce2a82a226d51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10811.936801638718,
        "Y": -3471.917093446621
      },
      {
        "Name": "cssPart",
        "ShowGeometry": true,
        "Id": "128b292038734d0497a800ffdbb36664",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9560.5738640844265,
        "Y": -4029.4692847763863
      },
      {
        "Name": "javascriptPart",
        "ShowGeometry": true,
        "Id": "ccd5e4648eca41bea187f1cd549b3006",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9560.5738640844265,
        "Y": -3816.883034776386
      },
      {
        "Name": "htmlPath",
        "ShowGeometry": true,
        "Id": "e2e4af0fc18e4b908dcf2372c6b7c0ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10200.936801638718,
        "Y": -3407.917093446621
      },
      {
        "Name": "make_htmlStr__",
        "ShowGeometry": true,
        "Id": "fe86d2e04e3f446eb61d604b1722d6a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9882.936801638718,
        "Y": -3622.1385504950849
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e97d441e14e44edc828a96c60739260d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10200.936801638718,
        "Y": -3556.0895934466216
      },
      {
        "Name": "navHTML_Part",
        "ShowGeometry": true,
        "Id": "bb79dddfc2e9457e966f337a7c97306e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9560.5738640844265,
        "Y": -3604.0555347763866
      },
      {
        "Name": "Create JS file",
        "ShowGeometry": true,
        "Id": "505cea545c5a4672ba1f9dca7b06fe98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10811.936801638718,
        "Y": -3683.917093446621
      },
      {
        "Name": "start Webserver",
        "ShowGeometry": true,
        "Id": "7911dd5152fb4afc9942fa71eb471e18",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10811.936801638718,
        "Y": -3259.917093446621
      },
      {
        "Name": "make_htmlStr",
        "ShowGeometry": true,
        "Id": "eb3d472b821e4392b812a06bbd34d3ed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10811.936801638718,
        "Y": -3895.917093446621
      },
      {
        "Name": "serverFilePath",
        "ShowGeometry": true,
        "Id": "d1ff79fecf704ef6a5f9ec4bee7f2020",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9882.936801638718,
        "Y": -3341.0895934466216
      },
      {
        "Name": "0. Set Port Number: 기본값-8000 (작동 오류 없다면 변경 금지)",
        "ShowGeometry": true,
        "Id": "6295313e8a4a48bc83e02079e2a9eb8e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10113.226551715143,
        "Y": -3193.4476704284871
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "fef5572a431c4fde8517afbe902a131f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9600.936801638718,
        "Y": -3343.0895934466216
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "a7f633b9fe0c468ca326203560dc6ce5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2757.3394068304615,
        "Y": -4269.6491600583422
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "794077763a8c4131b7f2c88f0b04aec2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3121.3394068304615,
        "Y": -4269.6491600583422
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "107a6539a6584a9da0dc249e1b213891",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3754.3394068304615,
        "Y": -4136.9854100583416
      },
      {
        "Name": "Parameter.ParameterByName",
        "ShowGeometry": true,
        "Id": "4271cf050e214c728df8605e66bbdeaf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7001.3394068304615,
        "Y": -4402.3129100583419
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f1d2f7d879ab41219709c9bc6e52247a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6650.0005452942214,
        "Y": -4499.0695279955607
      },
      {
        "Name": "Parameter.Value",
        "ShowGeometry": true,
        "Id": "f49d6c859e9f4b3bbd37977e5c412f20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7395.3394068304615,
        "Y": -4387.3129100583419
      },
      {
        "Name": "Parameter.Name",
        "ShowGeometry": true,
        "Id": "e7bc936f54bd4627a832edcd57f6e4f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4760.3394068304606,
        "Y": -4137.071660058341
      },
      {
        "Name": "Parameter.Value",
        "ShowGeometry": true,
        "Id": "587df27a51e44f11a5404cecb7b4e2df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5740.3394068304606,
        "Y": -4153.9854100583407
      },
      {
        "Name": "Parameter.HasValue",
        "ShowGeometry": true,
        "Id": "90d144c7915a4f8690916026909e39b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4101.33940683046,
        "Y": -4119.9854100583416
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "300205a65fa74e8b9eccc54fd39749ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4425.33940683046,
        "Y": -4153.9854100583407
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "352682732e0245ac8fe422291ad2cce4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5085.3394068304606,
        "Y": -4137.071660058341
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "5016c090280b4aa189c6b9e838e9c76a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5405.3394068304606,
        "Y": -4170.8991600583422
      },
      {
        "Name": "Parameter.Name",
        "ShowGeometry": true,
        "Id": "e796a732c035421ab70df94cd2aac959",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6667.3394068304615,
        "Y": -4262.3129100583419
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "2e2cd4ce73974ddcbd81499cf0cca504",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6332.3394068304615,
        "Y": -4187.8129100583419
      },
      {
        "Name": "Parameter.Value",
        "ShowGeometry": true,
        "Id": "887fec10d62444f28faef90bede912f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6667.3394068304615,
        "Y": -4113.3129100583419
      },
      {
        "Name": "List.FirstItem",
        "ShowGeometry": true,
        "Id": "dda006a7e3f146468be305a82852e7e2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3478.3394068304615,
        "Y": -4269.6491600583422
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a5e0779d9339496897a1bb1f9ad5fa5e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6074.3394068304615,
        "Y": -4153.9854100583407
      },
      {
        "Name": "Dictionary.ByKeysValues",
        "ShowGeometry": true,
        "Id": "d564cd412a274b3ebbf46674d4552c13",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7001.3394068304615,
        "Y": -4225.3129100583419
      },
      {
        "Name": "Data.StringifyJSON",
        "ShowGeometry": true,
        "Id": "ce5dd69ebac44596944bdddcbbb138bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7395.3394068304615,
        "Y": -4240.3129100583419
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "ff8bd912f4dc4affbc16939459881ef1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7430.4710763464209,
        "Y": -4079.619927537372
      },
      {
        "Name": "Building Name",
        "ShowGeometry": true,
        "Id": "4d510c5a94814cffa3d4ae58fe74664c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9001.2876765988949,
        "Y": -3512.7278724272451
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "26bb7af517714509b46280eff1a62d2e",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 7164.9319014203493,
        "Y": -2588.190460440163
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "2fb4a4e82e8549f49f166798b56a76e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3237.83385912968,
        "Y": 1442.63876933357
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "5b581f5432b6436d9aca025a71f1e4bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5475.24569588883,
        "Y": 1683.60165710588
      },
      {
        "Name": "String.Join",
        "ShowGeometry": true,
        "Id": "7862edc57af74bd8abec15b6d04702c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4488.24569588883,
        "Y": 1659.04326477827
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "35d6d02792f24515ad91bc9d60b105ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4769.24569588883,
        "Y": 1607.42915710588
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "fc7dbf06233e4ce48a0c2a90e4bb3494",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5029.24569588883,
        "Y": 1755.60165710588
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "f2fbd5908bd845fd918324ba4b97cd7e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4769.24569588883,
        "Y": 1755.60165710588
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fa50df0655ca42419832fc4392e55b87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3940.99563292914,
        "Y": 1659.04326477827
      },
      {
        "Name": "BOQbyElement_HTML_part",
        "ShowGeometry": true,
        "Id": "5cd2326afbd841d795a1f47d8f16fcf7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7333.92722792722,
        "Y": -3060.9488928211622
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "96ad3173ac8e41c0a8523eaa96628d2c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6709.1397150444936,
        "Y": -3185.416730859235
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "a3bfc25f6e9b44cca0b0174014698814",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7648.6750094260842,
        "Y": 971.74118810941559
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "511c6cef074d451ca975caef002fe34b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7731.6174678534589,
        "Y": 1228.4680964508518
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e703509cbf3842809e89d16cdb367747",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7953.369103806257,
        "Y": 843.78992219677434
      },
      {
        "Name": "Dictionary.ValueAtKey",
        "ShowGeometry": true,
        "Id": "6de0db7ddae1412dbc3d7dc22894ffa6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5316.7630201401334,
        "Y": -2623.7004728496127
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "ee7635d8f63f4dfe8a70b441c3b7698b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5053.291137312398,
        "Y": -2511.9584862588686
      },
      {
        "Name": "List.AddItemToEnd",
        "ShowGeometry": true,
        "Id": "ee1c70ea86d74b02844dd0d70432e94a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5838.4302468183032,
        "Y": -2794.6329464162022
      },
      {
        "Name": "List.Map",
        "ShowGeometry": true,
        "Id": "4270863615aa4df18d0ee18d51b633c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5519.9218797869826,
        "Y": -2905.9171541732971
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "0e624bb77f8c4a3e9c632584f8d331d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5306.2148237833062,
        "Y": -2808.354224037827
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9a943402cecb4a248260e65c289f9e35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1320.16179988713,
        "Y": -2210.86948923354
      },
      {
        "Name": "allElemsDict",
        "ShowGeometry": true,
        "Id": "c438dfb67edb45488157194c6b394ce3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1111.5613189007411,
        "Y": 36.687506257388122
      },
      {
        "Name": "allElemsDict",
        "ShowGeometry": true,
        "Id": "97a2979f91fd486ca41887522d397a97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1503.4738555673412,
        "Y": 37.186116656269121
      },
      {
        "Name": "allTypes",
        "ShowGeometry": true,
        "Id": "63bd58ef9417408daec6de73f083a6cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1482.1994387831112,
        "Y": 220.34434358782511
      },
      {
        "Name": "Dictionary.Keys",
        "ShowGeometry": true,
        "Id": "55b896a0e897444185eb1d3901c95ed7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1127.7896148088766,
        "Y": 1471.4354554870638
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "65f88911f47247e49ae4aa8d096d0033",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -230.68705290854814,
        "Y": 1978.1472172118013
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "c245e9a60f53407a94ff607f314e7789",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11094.522068593009,
        "Y": 3505.8145191757108
      },
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "bc586f60c5a54d1385b3c8684078a309",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 506.50956332731528,
        "Y": 1983.14802874593
      },
      {
        "Name": "Excel data dictionarization_3.0.2_new",
        "ShowGeometry": true,
        "Id": "58daf06df9104b8391f520ccf481f57c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2248.0806666215713,
        "Y": -14.25029517066389
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "09ff3023bbe14c029ffa457f54a1e8b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1816.6744698166312,
        "Y": 130.80417872616812
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "c2f7e321f21542a7a43c4983524e1413",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8383.63296872409,
        "Y": -1381.17964962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "37bfabad5a32481ab39a5f326f0e3529",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9298.61646987231,
        "Y": -1283.260945554
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "09697cd5daa84e8681828c063d34296c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8638.63296872409,
        "Y": -1381.00714962528
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "bbe482a28aae46caada9776448ca3c31",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9005.63296872409,
        "Y": -1380.83464962528
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "97993dcefb3b4f3397f54b7d072c90c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9675.63296872409,
        "Y": -1397.74839962528
      },
      {
        "Name": "List.GroupByKey",
        "ShowGeometry": true,
        "Id": "9ad2f810adda4fcdae069c71f07922f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10288.6329687241,
        "Y": -1397.74839962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "87e9b060026b45fd9265d86bb6dfa753",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9999.63296872409,
        "Y": -1363.92089962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b92a094b915349449dee8ecf7ef063e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -1249.74839962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a922d6a4ef964f88908a33fc12eebd1a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10612.6329687241,
        "Y": -1545.74839962528
      },
      {
        "Name": "List.UniqueItems",
        "ShowGeometry": true,
        "Id": "3b5d67e4bb3744edb5093353ad222626",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -1545.57589962528
      },
      {
        "Name": "Sum without err",
        "ShowGeometry": true,
        "Id": "bbdaa00591684054a7be736303660d19",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11324.6329687241,
        "Y": -1386.57589962528
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "e3a090b9228d466ebe1b206d082ebba6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11324.6329687241,
        "Y": -1563.57589962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e697cd02cd33480f826b88bb807a2dfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -1397.74839962528
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "26fa4d44e5a24cbe8ad3c672e5ee6472",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -10312.585927515025,
        "Y": 2008.8964346183611
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "51ff3d4e470a415b9a466dc2ee7c3d35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9976.5859275150251,
        "Y": 2008.8964346183611
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "dca2510d212b40df9fb10db4764ee024",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1991.982684618361
      },
      {
        "Name": "Object.Type",
        "ShowGeometry": true,
        "Id": "381b6816a63c4ad9a5812d7dbfa63c6b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9619.5859275150251,
        "Y": 2025.8101846183613
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5276025f67d248ca845e0814b23777de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9317.5859275150251,
        "Y": 2025.8101846183613
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "6bd3a0bdd7074b6fbd12d7f3473b3923",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8856.5859275150251,
        "Y": 1991.982684618361
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "34304384d8ce43078bbb9bb72827b8f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4001.5815147721823,
        "Y": -1146.078447913417
      },
      {
        "Name": "List.TakeItems",
        "ShowGeometry": true,
        "Id": "3d0d1d58a3aa4fb8a8020afd566ffde4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3593.5027730682768,
        "Y": -1143.9692959501197
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "802142866fa84f43aa506326e882f0a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3792.592888982389,
        "Y": -1036.0306464715516
      },
      {
        "Name": "Range",
        "ShowGeometry": true,
        "Id": "76604e671a6049e6acf093fb818987bf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3047.8335699454628,
        "Y": -1178.5702134386129
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "749675edd80c458ca4a22f0dbd0c4054",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3548.4711685702669,
        "Y": -1371.7159127129639
      },
      {
        "Name": "sheet_rowRange",
        "ShowGeometry": true,
        "Id": "93c4572a98bc4ae8a9868f31a5b20fc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2161.0901565233066,
        "Y": -974.27255974008312
      },
      {
        "Name": "sheet_rowRange",
        "ShowGeometry": true,
        "Id": "7cb8ca48bf1d461ab69e87d65aad6cd6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1713.9544351518066,
        "Y": -111.07885892743343
      },
      {
        "Name": "sheet_rowRange",
        "ShowGeometry": true,
        "Id": "6c5525b4ec6345bdb1355296d0fad191",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9922.1037219284754,
        "Y": -111.07885892743343
      },
      {
        "Name": "sheet_rowRange",
        "ShowGeometry": true,
        "Id": "a59be76a81a74b4982f34676c01ae4de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -955.748399625278
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "22843b225c8f4d7ca40461f1ec36172e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -1102.74839962528
      },
      {
        "Name": "List.Cycle",
        "ShowGeometry": true,
        "Id": "93675bdcbdb14357beb75505d00e8a7a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11324.6329687241,
        "Y": -1239.57589962528
      },
      {
        "Name": "replace_forCalcultionExport",
        "ShowGeometry": true,
        "Id": "1bef153320954bf79c41c662064fe2a3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11927.71683305,
        "Y": -1531.40629494693
      },
      {
        "Name": "List.DropItems",
        "ShowGeometry": true,
        "Id": "76c0811a0cf04a3d963a6ff40e04a0cf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12310.71683305,
        "Y": -1424.40629494693
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0ffe037a0e644009adde1ff774bc8ccb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11940.1320364615,
        "Y": -1213.22597561513
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "105635819aaf47ea95f22c53f28cb9f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3887.402858952411,
        "Y": -404.78131171284417
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "fd6d46aa8b2640a58c664998dff9de9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4082.2992238009724,
        "Y": -313.51036421923368
      },
      {
        "Name": "find_tgtColIDX",
        "ShowGeometry": true,
        "Id": "53ef45e8cc6e40399b858183a5b26160",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3496.2472961845447,
        "Y": -438.36270630939316
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e949624b70d341a7892f9abf4aff4ede",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3814.7248531785867,
        "Y": -536.27010404532871
      },
      {
        "Name": "시트별 Quantity 열 인덱스",
        "ShowGeometry": true,
        "Id": "162005bfdcfb4100aa4a3ad1714fe5a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2185.17161480613,
        "Y": -645.89130501002546
      },
      {
        "Name": "시트별 Quantity 열 인덱스",
        "ShowGeometry": true,
        "Id": "37dd499034e249c8a77c96cb434dfa3d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1686.2416750668631,
        "Y": 174.87236751099567
      },
      {
        "Name": "시트별 Quantity 열 인덱스",
        "ShowGeometry": true,
        "Id": "e0a730f5abbd499585d7c7d402a86a7a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9898.619680514721,
        "Y": 316.35955570695552
      },
      {
        "Name": "시트별 Quantity 열 인덱스",
        "ShowGeometry": true,
        "Id": "c663f6bb17814f69a6fc932f40fe1109",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14508.243103100618,
        "Y": -864.17306109281139
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "0fc51c8b4fe6405f9452a5dda767293e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -2085.74839962528
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4bd1d89ea5cc4ddeb9c768daec1f29ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10901.6329687241,
        "Y": -1938.30821630818
      },
      {
        "Name": "List.IndexOf",
        "ShowGeometry": true,
        "Id": "04df34ee109c4a69bf345265bc87d805",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11324.6329687241,
        "Y": -1740.57589962528
      },
      {
        "Name": "allSheetNames",
        "ShowGeometry": true,
        "Id": "e97ea602d85543798f28934428445e91",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14552.44874049674,
        "Y": -1608.0435765350912
      },
      {
        "Name": "WarningForNoTypeNames",
        "ShowGeometry": true,
        "Id": "976b571f2d854987ab91696c46d06ef7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -240.44933383555485,
        "Y": 608.2989399176704
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "0c927f7650f444ecb5b45187c926735c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9317.5859275150251,
        "Y": 1697.982684618361
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "8fb5ae44edc4450d8c7668ed9e1f96b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8856.5859275150251,
        "Y": 1697.982684618361
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "19c282569a234b8a9ef8c91c03f7419c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1697.982684618361
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "11e415810ae64cef9bf915f7f07468c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1255.982684618361
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "58cb77ad3cbd4194b67596806c1e2457",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14552.44874049674,
        "Y": -1314.0435765350912
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "37579c8d8a434b2690b74c147de21029",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9975.5053835039525,
        "Y": 1451.341607943644
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d7777a95a6944bc18cc476a8ecff3233",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13544.697483551023,
        "Y": 644.61048882314913
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2d7158c9eaa948feb70fd866df5d456d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13958.752634666667,
        "Y": 593.06961503998889
      },
      {
        "Name": "Categories",
        "ShowGeometry": true,
        "Id": "2b5b0248077241b88de1e94704caab82",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9317.5859275150251,
        "Y": 1402.982684618361
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": true,
        "Id": "ef2856efd91d4cdfa5c6731fc0e3a350",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8856.5859275150251,
        "Y": 1402.982684618361
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "3a741e5c93af45bf8eaadb3aa04b8f49",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8499.5859275150251,
        "Y": 1402.982684618361
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2136b627e293420095cef169735078f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2951.6405830941731,
        "Y": 529.80519517545235
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d014116b3d074abda2178f5619bf922f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10028.671196709536,
        "Y": 1854.6603032763728
      },
      {
        "Name": "Dictionary.Values",
        "ShowGeometry": true,
        "Id": "213314d4af9c422da071972f6aa5105b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14204.776473947402,
        "Y": 985.46576082519334
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "593dc104535242c4aa5570e2ffef0a39",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12087.802858076497,
        "Y": 3233.7920227599366
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7fb8bed9a22642ef9b4cad9333d3fe80",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12669.920451688638,
        "Y": 2069.1156343632811
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "231e9bbad88342768df7ceb9b70a9f8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15754.968794965806,
        "Y": 1003.7269874004021
      },
      {
        "Name": "4. Total BOQ sheet 경로 입력",
        "ShowGeometry": true,
        "Id": "ecccb4f11a2543e29cb666423f4f697e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -10850.452967768764,
        "Y": 583.54483626032993
      },
      {
        "Name": "5. Total BOQ 내 시트명 입력",
        "ShowGeometry": true,
        "Id": "faebcd6f41f046dba22561644139d393",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13945.552544804688,
        "Y": 2548.1063829367249
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "058c5ecec7114c5da3425da4080ff1b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 16066.103603513799,
        "Y": 2079.8394761778682
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "faae1f09bb244b47a3d4e09678bed5a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3704.3372118001271,
        "Y": -2200.2722137664805
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4b26771373494af2ab6596ac227b0531",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 53.824953830452614,
        "Y": -55.638739488335204
      },
      {
        "Name": "3. 토공산출모드(온통 / 개별)",
        "ShowGeometry": true,
        "Id": "bbbc75a0c0604f1280f428ef65ce021e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9983.5364668666589,
        "Y": -1609.4726015392896
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "02380328b0274c2f9edfe4a8c1ea15f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -979.20628066258371,
        "Y": -1612.3141447238156
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b062fa79e826460ea060fa7689bda688",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -847.55443738937515,
        "Y": -2021.7342242157542
      },
      {
        "Name": "토공 계산_1.1.1",
        "ShowGeometry": true,
        "Id": "59658e88675c417481ca86fc0e7fabfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 780.165494477125,
        "Y": -1401.05989734647
      },
      {
        "Name": "calcTypeDict_symValPair",
        "ShowGeometry": true,
        "Id": "eba507fa5e304e17a67d7d065190e864",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 159.515418422699,
        "Y": -1523.55682312451
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "b7dee80ea3b942a79ce2fadd8e03184f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 481.315440517332,
        "Y": -1620.30835108551
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "36f68bd0bd234e679de0f8de00130b10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7230.5363266728345,
        "Y": -70.035598923643761
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "c03a0584b9e44b6b9ac103682ccacdb7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5010.0435983478419,
        "Y": -800.45133264723927
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "62cb4c6f9acc4dffa6e05938fb412ba1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4842.6099924403243,
        "Y": 205.71230053705904
      },
      {
        "Name": "Excel data dictionarization_ManualSheet",
        "ShowGeometry": true,
        "Id": "25215db1a0754850946d5b41df97ac26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1518.13634227383,
        "Y": 482.73919558461307
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "44d92a495ffe4938a8a2e0f191e2ac98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11622.494045475974,
        "Y": -1326.7434621391646
      },
      {
        "Name": "토공관련 wm들 물량산출 수식 처리구간",
        "ShowGeometry": true,
        "Id": "ad52ea54ebbc4ba880bd3af3ddbfe30f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1432.8726948548558,
        "Y": -1934.9659796174342
      },
      {
        "Name": "매뉴얼 시트_물량산출 수식 처리구간",
        "ShowGeometry": true,
        "Id": "1e2f686b1ba5486bbfe48489174d2615",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 1257.68465405545,
        "Y": -1273.49400818784
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "f4975d68f4f9463a81f2d1585897e2ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1942.32508211819,
        "Y": -1656.12432265785
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5c3a62b79d404c8caf053c3ec31bfbdc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -840.0001320803359,
        "Y": -1780.9523810868668
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "268c422bb58a4ef3b64c791668c51006",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15060.271942688121,
        "Y": 1278.2889566833294
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "54b2a1e5cf6d407988d161528eb4fe20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14969.322132560368,
        "Y": 1094.03351165336
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "4b39c11e79e24a068dd54676e6198175",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 16226.095461609031,
        "Y": 1026.7123940627641
      },
      {
        "Name": "토공 계산_1.1.3",
        "ShowGeometry": true,
        "Id": "26e6afe1b5ed40619f40b6f92cf4c912",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 779.210315775372,
        "Y": -1927.638414464152
      },
      {
        "Name": "0.1. Select GL",
        "ShowGeometry": true,
        "Id": "8ee8758f2bef45ec8c10f0fe6fad8ad2",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9931.7359876528244,
        "Y": -2490.728365602642
      },
      {
        "Name": "Level.Elevation",
        "ShowGeometry": true,
        "Id": "355060089e50453f8afbb375d7386576",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 295.33331711346193,
        "Y": -2552.7739414960929
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "14029b7b01664aa5a8b0fd06a8a878ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1076.4892791711438,
        "Y": -1781.47699136598
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e84dc62872914d218aeacd843a06c171",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13507.426886657846,
        "Y": 2349.1526887829996
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "5ac573ea6041465f9446a653f49c7e5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10085.298532753906,
        "Y": 2025.6829963016539
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a3d3a74367f049849612bb8a69914c65",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3192.3564481450485,
        "Y": 1019.5750076328943
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8f70db874be640e0887170b29e5f3f73",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -525.0,
        "Y": -2562.0
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8af073234ded4a1ebc943414a625ec63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 356.262077914452,
        "Y": -2105.69660389546
      },
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "f9ab0355b99247939ae33d23f1c2f9aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8764.9201831191949,
        "Y": 353.85500079560632
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "9866eeb0eecd4d4f92e8e88589f6068d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9058.9201831191949,
        "Y": 250.85500079560632
      },
      {
        "Name": "1. Family List 경로 입력",
        "ShowGeometry": true,
        "Id": "8ab3accc47f6452a95570634f44f527d",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9908.1817964676538,
        "Y": 89.622331206315266
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "9ea4e5024b984094b3f099ce90fe71ac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9058.9201831191949,
        "Y": 546.85500079560632
      },
      {
        "Name": "Target Sheet Names",
        "ShowGeometry": true,
        "Id": "67ef2ab6c8e6437f9f36d5890f50ce62",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9325.6989100116552,
        "Y": 422.97698709430335
      },
      {
        "Name": "FamilyList Data Dictionarize",
        "ShowGeometry": true,
        "Id": "cbea0bd9471f490eaab91c598020d50a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3328.087497997014,
        "Y": 487.6856294119064
      },
      {
        "Name": "update_calcResult_typeDict___________________________________",
        "ShowGeometry": true,
        "Id": "dbdf1a3303d64aba988cc4dd6168d113",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2628.3229152262838,
        "Y": 624.97080159249469
      },
      {
        "Name": "FamilyList Data Dictionarize_debug",
        "ShowGeometry": true,
        "Id": "6f3f3f8b48d64ce4b35ca72e43ce3d4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3345.0348955890122,
        "Y": 54.531365069822144
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "7d2e118a3b454f599d49ab36e96abae8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4433.8897816778926,
        "Y": -6360.769510306035
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "adffa41e39df4273bb610cebb5939930",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5235.089305099561,
        "Y": -6673.3773287359681
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "4c5461b9a3504146a8fd36e6f8548c47",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5696.5820537441114,
        "Y": -6671.8649423531479
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "8d613332852c4bf0b62889ca78df0c79",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4674.5486490345511,
        "Y": -6751.7655832001183
      },
      {
        "Name": "List.Transpose",
        "ShowGeometry": true,
        "Id": "cb317fa8f08d443a99d531cb3435306a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5946.7609981017513,
        "Y": -6673.3326116694479
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2d93bf440b3d49e4b1a3d7779e83ecdd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5269.7486877411811,
        "Y": -6299.0361681749782
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "cf376cc741ae4d7f997860b5f5bb6107",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6278.0933654985211,
        "Y": -6667.6200726025882
      },
      {
        "Name": "List.AddItemToFront",
        "ShowGeometry": true,
        "Id": "c9559b63916949b8b9205639b6a3adbb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7160.7437348490112,
        "Y": -6195.3510518758485
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "0da12c5111af4d42ba679f28be3cd825",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 7581.4646975758114,
        "Y": -5978.276211060529
      },
      {
        "Name": "BOQbyElement_HTML_part",
        "ShowGeometry": true,
        "Id": "88149d2520f44cc7b1155af751a65510",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7750.46002408268,
        "Y": -6451.0346434415278
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "d410f437388b48a9b3874cf2bdfb9846",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7125.6725111999513,
        "Y": -6575.5024814796088
      },
      {
        "Name": "Dictionary.ValueAtKey",
        "ShowGeometry": true,
        "Id": "f221b392835a47be9bc56510dcd1f2a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5733.2958162955911,
        "Y": -6013.7862234699787
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2700da9e11a849b3af546806f689c917",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5469.823933467861,
        "Y": -5902.0442368792383
      },
      {
        "Name": "List.AddItemToEnd",
        "ShowGeometry": true,
        "Id": "045990703014444e9fca141fbd4d1152",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6254.9630429737608,
        "Y": -6184.7186970365683
      },
      {
        "Name": "List.Map",
        "ShowGeometry": true,
        "Id": "7fd09c194e3c4bc6a174dd03683d8de1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5936.4546759424411,
        "Y": -6296.0029047936678
      },
      {
        "Name": "List Create",
        "ShowGeometry": true,
        "Id": "8f5461aa3205427bbab3717bc7e72ae0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5722.7476199387711,
        "Y": -6198.4399746581985
      },
      {
        "Name": "calculatedResult",
        "ShowGeometry": true,
        "Id": "d123193f0fc74efa922b627de754e4b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4006.7599456078233,
        "Y": -6517.9175996255208
      }
    ],
    "Annotations": [
      {
        "Id": "f70bf264fa0749c79027f550865f41ad",
        "Title": "All Elements in Revit",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1250bd18102c4ebaac9950d60dac8849",
          "c790cfc4c7d943cdb05ca3a612d673c4",
          "d78f3dfc768541ab8490b53194e174c5",
          "94dc2b3bd4e14a9fa5352e8ad0cbe58b",
          "bf37a72db0e847dba5e3d1c2ed14c8bd",
          "ba41dd7b1e544c768194fe3c25e74bc2",
          "4cc98c97ebcc4cf8a37a980c5f62c296",
          "26fa4d44e5a24cbe8ad3c672e5ee6472",
          "51ff3d4e470a415b9a466dc2ee7c3d35",
          "381b6816a63c4ad9a5812d7dbfa63c6b",
          "5276025f67d248ca845e0814b23777de",
          "6bd3a0bdd7074b6fbd12d7f3473b3923",
          "dca2510d212b40df9fb10db4764ee024",
          "0c927f7650f444ecb5b45187c926735c",
          "8fb5ae44edc4450d8c7668ed9e1f96b1",
          "19c282569a234b8a9ef8c91c03f7419c",
          "11e415810ae64cef9bf915f7f07468c8",
          "2b5b0248077241b88de1e94704caab82",
          "ef2856efd91d4cdfa5c6731fc0e3a350",
          "3a741e5c93af45bf8eaadb3aa04b8f49"
        ],
        "HasNestedGroups": false,
        "Left": -10322.585927515025,
        "Top": 1110.982684618361,
        "Width": 2338.0,
        "Height": 1048.0,
        "FontSize": 96.0,
        "InitialTop": 1255.982684618361,
        "InitialHeight": 914.82750000000033,
        "TextblockHeight": 135.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "845648042f7a44b3b450cfa23ec8d632",
        "Title": "All Data In Excel",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "1eac1f1717ab40c98ea2a8a9b59421d3",
          "caccad700bd84d8e8cb198c7fe1545aa",
          "51b4738620874fe885b1b5ecce1e49b7",
          "76e75c1cd00342eeb418e14c2410b8f4",
          "64985def907747329221585392bfc414"
        ],
        "HasNestedGroups": false,
        "Left": -9880.3225387940074,
        "Top": -1034.9608291898339,
        "Width": 1401.2616133484607,
        "Height": 897.354655887988,
        "FontSize": 96.0,
        "InitialTop": -889.96082918983393,
        "InitialHeight": 602.232669589291,
        "TextblockHeight": 135.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "bc0cee792c2f42f5b7feff7ccbb98290",
        "Title": "Family List 타입별 물량 기입 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "3a2291d54fa74970b0cacd8a3a8a08b8",
          "e4bace56c16d462b8e637e17ad1a1046",
          "2524f0f864744ce88dfa2ab2d9d3e61d",
          "e97ea602d85543798f28934428445e91",
          "58cb77ad3cbd4194b67596806c1e2457"
        ],
        "HasNestedGroups": false,
        "Left": 14542.44874049674,
        "Top": -2015.0435765350912,
        "Width": 1085.0731284012872,
        "Height": 833.0,
        "FontSize": 96.0,
        "InitialTop": -1755.0435765350912,
        "InitialHeight": 586.0,
        "TextblockHeight": 250.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "e4fb627520384af3b1eabd7a2ac5343b",
        "Title": "모델링된 모든 객체의 패밀리 타입 명 추출 구간\r\n(Room 객체의 경우 Number 속성값을 합쳐서 이름 추출)",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e861b848a856496cbce58b3351868c08",
          "b8bb7074d1474d5c817d440222fe7c73",
          "a6525529e2854c5da74f8737df2462da",
          "b0d49f5a08ca4d7aa0ec4d85b3c4eb68",
          "6ff0495beeb2499481715807a0f60ef2",
          "386656a3778543bc971c0771aa33de2d",
          "6ede13f036274ae697bc98035846b781",
          "285fa2ccb9e64d638e488b5b2f65bfa9",
          "b97ab952870844e293b85efdee212e50",
          "90f58a0b10c745428bdf593ba78e6987",
          "5b581f5432b6436d9aca025a71f1e4bb",
          "7862edc57af74bd8abec15b6d04702c5",
          "fc7dbf06233e4ce48a0c2a90e4bb3494",
          "f2fbd5908bd845fd918324ba4b97cd7e",
          "35d6d02792f24515ad91bc9d60b105ae",
          "fa50df0655ca42419832fc4392e55b87",
          "2fb4a4e82e8549f49f166798b56a76e3"
        ],
        "HasNestedGroups": false,
        "Left": -7091.2967809391,
        "Top": 1182.63876933357,
        "Width": 4023.46292180942,
        "Height": 913.91202518988985,
        "FontSize": 96.0,
        "InitialTop": 1442.63876933357,
        "InitialHeight": 644.79038777230994,
        "TextblockHeight": 250.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "687f7420ca1d42b789e3f2697ffb8cfe",
        "Title": "[WM-AR] 시트 데이터 정리",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "6689bfc92b614a86a2438579264ab559",
          "dcbac945a42f4a5c9a9db85369fb5958",
          "abf63584b5df484fa09c861a33e2a423",
          "0a5e14b22e144bed8451ebf583eb117a",
          "0de826304a0c4eeb88bf431965d3fbff",
          "353906790eac4dbe9265acc4fd59f260",
          "1d1c6adab25c4ce38795f6d70084638b",
          "86d4c756923b4ec5a7a76f44031313e3",
          "36b72e613f054f51ab44d4a659a11baf",
          "522eba1415564c619ea3a722c3bfca63",
          "78f0730f98164cf88c95031451db6a2e",
          "f8862fff8dc647619582f6b8e6003793",
          "6790ac16e9864c6282b9f0a28e4bac80"
        ],
        "HasNestedGroups": false,
        "Left": 8955.5465924331475,
        "Top": 2228.0953674521775,
        "Width": 2433.1098278553491,
        "Height": 781.82749999999987,
        "FontSize": 96.0,
        "InitialTop": 2373.0953674521775,
        "InitialHeight": 649.82749999999987,
        "TextblockHeight": 135.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "75a4f3a4d6094b6bbe1e9826bd99fb2d",
        "Title": "Total BOQ 엑셀파일 물량 기입 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "92a5d0c5dcc842d7b250f2421b0731ad",
          "f12f2f24ce254bd0baef14f26c5d20e9",
          "545bdda03ce34cbf8f380aa09996affe",
          "23c16e6f54c54461a94198d996b688b8",
          "cb8eb6bb001d4e018998c1f81063a7b3",
          "6d3257a7ae1544ba96260a2930df41a0",
          "aae6ee369697433d96978d6f0a38227c",
          "8066549a4a9b47df80e48559f550e5c6",
          "cf52cd359968431c954ef0c1c105f09b",
          "53192363f9da457ca86140d19351bdfb",
          "29337ae8d2c94d488ebdc03de0a16ad6",
          "008b88f58bd548188e4d5668e106d9e3",
          "756a672a7cef4e9e91d11c4c0279ab0a",
          "5b26f33fb50d4441b2dc495fc028521e",
          "11184f601ab1440f92b47f1dcda08f3f",
          "7edcee4a274841a8a889d4611bbeb8fa",
          "faebcd6f41f046dba22561644139d393",
          "058c5ecec7114c5da3425da4080ff1b1",
          "e84dc62872914d218aeacd843a06c171",
          "63669713819d404bae525815fc170901"
        ],
        "HasNestedGroups": false,
        "Left": 13105.487805800884,
        "Top": 1407.6131016276518,
        "Width": 4594.1566339505662,
        "Height": 1680.1847954295495,
        "FontSize": 96.0,
        "InitialTop": 1552.6131016276518,
        "InitialHeight": 1518.1847954295495,
        "TextblockHeight": 135.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "eac8167caa2e4e0ebb602f9199d377b8",
        "Title": "HTML 부재별 물량 기입 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "2293b855337546edb1fce2a82a226d51",
          "128b292038734d0497a800ffdbb36664",
          "e2e4af0fc18e4b908dcf2372c6b7c0ae",
          "ccd5e4648eca41bea187f1cd549b3006",
          "505cea545c5a4672ba1f9dca7b06fe98",
          "eb3d472b821e4392b812a06bbd34d3ed",
          "fe86d2e04e3f446eb61d604b1722d6a7",
          "7911dd5152fb4afc9942fa71eb471e18",
          "e97d441e14e44edc828a96c60739260d",
          "bb79dddfc2e9457e966f337a7c97306e",
          "fef5572a431c4fde8517afbe902a131f",
          "d1ff79fecf704ef6a5f9ec4bee7f2020",
          "6295313e8a4a48bc83e02079e2a9eb8e"
        ],
        "HasNestedGroups": false,
        "Left": 9550.5738640844265,
        "Top": -4174.4692847763863,
        "Width": 1542.3629375542914,
        "Height": 1113.0216143478992,
        "FontSize": 96.0,
        "InitialTop": -4029.4692847763863,
        "InitialHeight": 981.02161434789923,
        "TextblockHeight": 135.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "c9f200f75dd74faba9629ed6f3180633",
        "Title": "Pjt Information Extract",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "a7f633b9fe0c468ca326203560dc6ce5",
          "794077763a8c4131b7f2c88f0b04aec2",
          "107a6539a6584a9da0dc249e1b213891",
          "4271cf050e214c728df8605e66bbdeaf",
          "f1d2f7d879ab41219709c9bc6e52247a",
          "f49d6c859e9f4b3bbd37977e5c412f20",
          "e7bc936f54bd4627a832edcd57f6e4f5",
          "587df27a51e44f11a5404cecb7b4e2df",
          "90d144c7915a4f8690916026909e39b3",
          "300205a65fa74e8b9eccc54fd39749ff",
          "352682732e0245ac8fe422291ad2cce4",
          "5016c090280b4aa189c6b9e838e9c76a",
          "e796a732c035421ab70df94cd2aac959",
          "a5e0779d9339496897a1bb1f9ad5fa5e",
          "2e2cd4ce73974ddcbd81499cf0cca504",
          "887fec10d62444f28faef90bede912f8",
          "d564cd412a274b3ebbf46674d4552c13",
          "dda006a7e3f146468be305a82852e7e2",
          "ce5dd69ebac44596944bdddcbbb138bb",
          "ff8bd912f4dc4affbc16939459881ef1"
        ],
        "HasNestedGroups": false,
        "Left": 2747.3394068304615,
        "Top": -4615.0695279955607,
        "Width": 4892.0,
        "Height": 697.4496004581888,
        "FontSize": 72.0,
        "InitialTop": -4499.0695279955607,
        "InitialHeight": 564.4496004581888,
        "TextblockHeight": 106.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "ff2e288062b0459d84507532a4a02ab3",
        "Title": "Excel Dictionarize & 레빗 객체와 결합 딕셔너리 형성 및 심볼 / 값 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "c438dfb67edb45488157194c6b394ce3",
          "97a2979f91fd486ca41887522d397a97",
          "63bd58ef9417408daec6de73f083a6cb",
          "09ff3023bbe14c029ffa457f54a1e8b2",
          "58daf06df9104b8391f520ccf481f57c"
        ],
        "HasNestedGroups": false,
        "Left": -2258.0806666215713,
        "Top": -217.25029517066389,
        "Width": 1517.5193477208302,
        "Height": 569.594638758489,
        "FontSize": 72.0,
        "InitialTop": -14.25029517066389,
        "InitialHeight": 379.594638758489,
        "TextblockHeight": 193.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "0376b0f088d949b99415cbca23865c2c",
        "Title": "Final Calculation",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "0160cc09c3474815a65506ace3948e4f",
          "5ba4a873bf1d434b910b34378934a374",
          "9a943402cecb4a248260e65c289f9e35",
          "ad52ea54ebbc4ba880bd3af3ddbfe30f",
          "b7dee80ea3b942a79ce2fadd8e03184f",
          "59658e88675c417481ca86fc0e7fabfc",
          "eba507fa5e304e17a67d7d065190e864",
          "1e2f686b1ba5486bbfe48489174d2615",
          "f4975d68f4f9463a81f2d1585897e2ee",
          "26e6afe1b5ed40619f40b6f92cf4c912",
          "14029b7b01664aa5a8b0fd06a8a878ec",
          "8af073234ded4a1ebc943414a625ec63"
        ],
        "HasNestedGroups": false,
        "Left": 149.515418422699,
        "Top": -2326.86948923354,
        "Width": 2497.067259111921,
        "Height": 1185.3754810457,
        "FontSize": 72.0,
        "InitialTop": -2210.86948923354,
        "InitialHeight": 1082.3754810457,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "fa255a5ece2346b38f948380ce22e686",
        "Title": "시트별 시작:끝행 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "34304384d8ce43078bbb9bb72827b8f5",
          "3d0d1d58a3aa4fb8a8020afd566ffde4",
          "802142866fa84f43aa506326e882f0a5",
          "76604e671a6049e6acf093fb818987bf",
          "749675edd80c458ca4a22f0dbd0c4054"
        ],
        "HasNestedGroups": false,
        "Left": -4011.5815147721823,
        "Top": -1487.7159127129639,
        "Width": 1151.7479448267195,
        "Height": 583.68526624141236,
        "FontSize": 72.0,
        "InitialTop": -1371.7159127129639,
        "InitialHeight": 480.68526624141236,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "7f76803990c54be9a7e19d32c4544213",
        "Title": "시트별 Quantity 열 인덱스 추출",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "105635819aaf47ea95f22c53f28cb9f5",
          "fd6d46aa8b2640a58c664998dff9de9f",
          "53ef45e8cc6e40399b858183a5b26160",
          "e949624b70d341a7892f9abf4aff4ede"
        ],
        "HasNestedGroups": false,
        "Left": -4092.2992238009724,
        "Top": -739.27010404532871,
        "Width": 788.05192761642775,
        "Height": 557.759739826095,
        "FontSize": 72.0,
        "InitialTop": -536.27010404532871,
        "InitialHeight": 367.75973982609503,
        "TextblockHeight": 193.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "42282c96371d4eda8bb07ee992d4bf20",
        "Title": "Family List 타입별 물량 기입을 위한 데이터 포맷팅 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "c2f7e321f21542a7a43c4983524e1413",
          "37bfabad5a32481ab39a5f326f0e3529",
          "09697cd5daa84e8681828c063d34296c",
          "bbe482a28aae46caada9776448ca3c31",
          "97993dcefb3b4f3397f54b7d072c90c9",
          "9ad2f810adda4fcdae069c71f07922f2",
          "87e9b060026b45fd9265d86bb6dfa753",
          "b92a094b915349449dee8ecf7ef063e3",
          "a922d6a4ef964f88908a33fc12eebd1a",
          "3b5d67e4bb3744edb5093353ad222626",
          "bbdaa00591684054a7be736303660d19",
          "e3a090b9228d466ebe1b206d082ebba6",
          "e697cd02cd33480f826b88bb807a2dfc",
          "a59be76a81a74b4982f34676c01ae4de",
          "22843b225c8f4d7ca40461f1ec36172e",
          "93675bdcbdb14357beb75505d00e8a7a",
          "1bef153320954bf79c41c662064fe2a3",
          "76c0811a0cf04a3d963a6ff40e04a0cf",
          "0ffe037a0e644009adde1ff774bc8ccb",
          "0fc51c8b4fe6405f9452a5dda767293e",
          "04df34ee109c4a69bf345265bc87d805",
          "4bd1d89ea5cc4ddeb9c768daec1f29ec",
          "44d92a495ffe4938a8a2e0f191e2ac98",
          "a3ef24fc3a664e4da7b6e1582abc023a"
        ],
        "HasNestedGroups": false,
        "Left": 8373.63296872409,
        "Top": -2201.74839962528,
        "Width": 4142.08386432591,
        "Height": 1378.0000000000018,
        "FontSize": 72.0,
        "InitialTop": -2085.74839962528,
        "InitialHeight": 1275.0000000000018,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "09d6cd55720a41a5ad41e170edf334d2",
        "Title": "HTML 부재별 물량 기입을 위한 데이터 포맷팅 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "6886a36f3590498ea5f564bc7bd347fb",
          "ba9c278363fb4ee79339a58d3b60d083",
          "6dc991ba25ca4140a85d4b34b7f48148",
          "2623af00f54444069be12845f80bb09f",
          "5469bc54a6c14c1d88b2bb810a3b6e50",
          "804fa4d9274e4db6856405a3fd8714fb",
          "ecb21e11bd164df2b0e984b6016571eb",
          "26bb7af517714509b46280eff1a62d2e",
          "5cd2326afbd841d795a1f47d8f16fcf7",
          "96ad3173ac8e41c0a8523eaa96628d2c",
          "6de0db7ddae1412dbc3d7dc22894ffa6",
          "ee7635d8f63f4dfe8a70b441c3b7698b",
          "ee1c70ea86d74b02844dd0d70432e94a",
          "4270863615aa4df18d0ee18d51b633c0",
          "0e624bb77f8c4a3e9c632584f8d331d7"
        ],
        "HasNestedGroups": false,
        "Left": 4248.0158528790907,
        "Top": -3477.6798325797508,
        "Width": 3373.9113750481292,
        "Height": 1097.7213463208823,
        "FontSize": 72.0,
        "InitialTop": -3361.6798325797508,
        "InitialHeight": 994.72134632088228,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "8c76e8b756db447f9838c8079565b37d",
        "Title": "<Double click here to edit group title>",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "de4566fde19f484c81cdf869933392fc"
        ],
        "HasNestedGroups": false,
        "Left": -10001.494710652398,
        "Top": -2020.1674989553671,
        "Width": 342.0,
        "Height": 248.0,
        "FontSize": 36.0,
        "InitialTop": -1904.1674989553671,
        "InitialHeight": 145.0,
        "TextblockHeight": 106.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "edb613f776f04c749de06553a2e4821e",
        "Title": "필터링 구간 (패밀리 리스트에 없는 이름 제외)",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ff9036ffe34e498e92682212d56492b0",
          "55b896a0e897444185eb1d3901c95ed7",
          "65f88911f47247e49ae4aa8d096d0033"
        ],
        "HasNestedGroups": false,
        "Left": -1137.7896148088766,
        "Top": 1268.4354554870638,
        "Width": 1152.1025619003285,
        "Height": 876.71176172473724,
        "FontSize": 72.0,
        "InitialTop": 1471.4354554870638,
        "InitialHeight": 651.71176172473724,
        "TextblockHeight": 193.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "3cab94d8193943aa87a09c087d13bdf7",
        "Title": "All Data In Excel-TEST",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "f9ab0355b99247939ae33d23f1c2f9aa",
          "9866eeb0eecd4d4f92e8e88589f6068d",
          "8ab3accc47f6452a95570634f44f527d",
          "9ea4e5024b984094b3f099ce90fe71ac",
          "67ef2ab6c8e6437f9f36d5890f50ce62"
        ],
        "HasNestedGroups": false,
        "Left": -9918.1817964676538,
        "Top": -55.377668793684734,
        "Width": 1401.2616133484589,
        "Height": 734.232669589291,
        "FontSize": 96.0,
        "InitialTop": 89.622331206315266,
        "InitialHeight": 602.232669589291,
        "TextblockHeight": 135.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "98701657df9f4db4b22f3286c48fe5f8",
        "Title": "HTML 부재별 물량 기입을 위한 데이터 포맷팅 구간",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "adffa41e39df4273bb610cebb5939930",
          "4c5461b9a3504146a8fd36e6f8548c47",
          "8d613332852c4bf0b62889ca78df0c79",
          "cb317fa8f08d443a99d531cb3435306a",
          "2d93bf440b3d49e4b1a3d7779e83ecdd",
          "cf376cc741ae4d7f997860b5f5bb6107",
          "c9559b63916949b8b9205639b6a3adbb",
          "0da12c5111af4d42ba679f28be3cd825",
          "88149d2520f44cc7b1155af751a65510",
          "d410f437388b48a9b3874cf2bdfb9846",
          "f221b392835a47be9bc56510dcd1f2a2",
          "2700da9e11a849b3af546806f689c917",
          "045990703014444e9fca141fbd4d1152",
          "7fd09c194e3c4bc6a174dd03683d8de1",
          "8f5461aa3205427bbab3717bc7e72ae0"
        ],
        "HasNestedGroups": false,
        "Left": 4664.5486490345511,
        "Top": -6867.7655832001183,
        "Width": 3373.9113750481292,
        "Height": 1187.4893721395892,
        "FontSize": 72.0,
        "InitialTop": -6751.7655832001183,
        "InitialHeight": 994.72134632088,
        "TextblockHeight": 106.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "63669713819d404bae525815fc170901",
        "Title": "Work Master Code\r\nGauge Code\r\nDescription : (L03)\r\nSpec. : (L04~L11)\r\nAdditional Spec : (Description 항목 값)",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 14856.247048448025,
        "Top": 2286.1149312821467,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a3ef24fc3a664e4da7b6e1582abc023a",
        "Title": "WM 별로 합산 구간 추가 필요",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": 10904.9800757358,
        "Top": -1577.93126740502,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -4379.8252214585482,
    "Y": 7384.3201126466274,
    "Zoom": 1.1212147629224325
  }
}