{
  "Uuid": "a87230f8-724f-4c69-ba2c-d543ede5d0be",
  "IsCustomNode": false,
  "Description": "",
  "Name": "strategy_modify_fn",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Python 표준 및 DesignScript 라이브러리 로드\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# 이 노드에 대한 입력값은 IN 변수에 리스트로 저장됩니다.\r\ndataEnteringNode = IN\r\n\r\n# 코드를 이 선 아래에 배치\r\n\r\nimport string\r\nimport random\r\nfrom typing import List, Callable\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass SupportTicket:\r\n    def __init__(self, customer, issue):\r\n        self.id = generate_id()\r\n        self.customer = customer\r\n        self.issue = issue\r\n\r\ndef generate_id(length=8):\r\n    # helper function for generating an id\r\n    return ''.join(random.choices(string.ascii_uppercase, k=length))\r\n\r\n\r\ndef fifo_ordering(list: List[SupportTicket]) -> List[SupportTicket]:\r\n    return list.copy()\r\n\r\ndef filo_ordering(list: List[SupportTicket]) -> List[SupportTicket]:\r\n    list_copy = list.copy()\r\n    list_copy.reverse()\r\n    return list_copy\r\n\r\ndef random_ordering(list: List[SupportTicket]) -> List[SupportTicket]:\r\n    list_copy = list.copy()\r\n    random.shuffle(list_copy)\r\n    return list_copy\r\n\r\ndef black_hole_ordering(list: List[SupportTicket]) -> List[SupportTicket]:\r\n    return []\r\n\r\n\r\nclass CustomerSupport:\r\n\r\n    def __init__(self):\r\n        self.tickets = []\r\n        \r\n\r\n    def create_ticket(self, customer, issue):\r\n        self.tickets.append(SupportTicket(customer, issue))\r\n\r\n    def process_tickets(self, processing_strategy_fn: Callable[[List[SupportTicket]], List[SupportTicket]]):\r\n        # create the ordered list\r\n        ticket_list = processing_strategy_fn(self.tickets)\r\n        result = []\r\n        # if it's empty, don't do anything\r\n        if len(ticket_list) == 0:\r\n            print(\"There are no tickets to process. Well done!\")\r\n            return\r\n        \r\n\r\n        for ticket in ticket_list:\r\n            result.append(self.process_ticket(ticket))\r\n        \r\n        return result\r\n\r\n\r\n    def process_ticket(self, ticket: SupportTicket):\r\n        result = []\r\n        \r\n        result.append(f\"Processing ticket id: {ticket.id}\")\r\n        result.append(f\"Customer: {ticket.customer}\")\r\n        result.append(f\"Issue: {ticket.issue}\")\r\n        \r\n        return result\r\n\r\n\r\n# create the application\r\napp = CustomerSupport()\r\n\r\n# register a few tickets\r\napp.create_ticket(\"John Smith\", \"My computer makes strange sounds!\")\r\napp.create_ticket(\"Linus Sebastian\", \"I can't upload any videos, please help.\")\r\napp.create_ticket(\"Arjan Egges\", \"VSCode doesn't automatically solve my bugs.\")\r\n\r\n\r\n# 출력을 OUT 변수에 지정합니다.\r\nOUT = app.process_tickets(random_ordering)",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "85a1136fe8f244deb9fc75e7b2eec257",
      "Inputs": [
        {
          "Id": "bbc792acf5af4cf6a81861423d89c528",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "859aa351bd4042f5a6caf7da71480129",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "없음",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "배경 미리보기",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "85a1136fe8f244deb9fc75e7b2eec257",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 296.0,
        "Y": 348.0
      }
    ],
    "Annotations": [],
    "X": -123.66106669571684,
    "Y": -387.59703910683561,
    "Zoom": 1.6276637566670584
  }
}