{
  "Uuid": "f178ddc8-2572-4e27-ab77-2c7aa313123f",
  "IsCustomNode": false,
  "Description": "",
  "Name": "importExcel",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport os\r\npython_rootpath = os.getenv('LOCALAPPDATA')+'\\Programs\\Python'\r\nfile_list = os.listdir(python_rootpath)\r\npython_version = file_list[-1]\r\nimport sys\r\nsys.path.append(os.getenv('LOCALAPPDATA').replace('\\\\','\\\\\\\\') + f'\\Programs\\Python\\{python_version}\\Lib\\site-packages')\r\nimport clr\r\n\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport random\r\n\r\nfrom collections import Iterable\r\nimport datetime\r\nimport openpyxl\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\n\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nadd = curry(lambda a,b: a + b)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\ngo = lambda *args: reduce(lambda a,f: f(a), args)\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ninputFilePath = IN[0]\r\ninputSheetName = IN[1]\r\n\r\ndef importExcel(path, SheetNameIn):\r\n    wb_obj = openpyxl.load_workbook(str(path), data_only=True)\r\n    sheet_obj = wb_obj.get_sheet_by_name(str(SheetNameIn))\r\n\r\n    m_row = sheet_obj.max_row\r\n    m_col = sheet_obj.max_column\r\n\r\n    listOut = []\r\n\r\n    for i in range(1, m_row +1):\r\n        listTemp = []\r\n        for j in range(1, m_col + 1):\r\n            cell_obj = sheet_obj.cell(row=i, column=j)\r\n            listTemp.append(cell_obj.value)\r\n            if len(listTemp) == m_col:\r\n                listOut.append(listTemp)\r\n    return listOut\r\n\r\ndef checkAllElement(list, target):\r\n    tmp=[]\r\n    for i in list:\r\n        if i == target:\r\n            tmp.append(True)\r\n        else:\r\n            tmp.append(False)\r\n    return all(tmp)\r\n\r\n# Place your code below this line\r\nrm_Null = lambda list: go(list,\r\n    filter(lambda a: not checkAllElement(a, None)),\r\n    )\r\n    \r\ns1 = importExcel(inputFilePath, inputSheetName)\r\n\r\ns2 = rm_Null(s1)  ## null만 있는 Excel Row 제거\r\n\r\ns2_tr = list(zip(*s2))\r\n\r\ns3 = rm_Null(s2_tr) ## null만 있는 Excel Column 제거\r\n\r\nresult = list(zip(*s3))\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = result\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "0761a53f8d9c4e71b2e657663e424bcd",
      "Inputs": [
        {
          "Id": "4fe9b9d6b0d043f4b7d9eaba6cfcc350",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d8560dacc71c44098e123f0368855615",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91aa2f04d91e46ff92a05aba8e6335f1",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\pjmk0\\Downloads\\MK\\mQ\\Laboratory\\20220224_importExcel\\02_팀 표준 Family List_Rev.0_2022_0215.xlsx",
      "InputValue": ".\\02_팀 표준 Family List_Rev.0_2022_0215.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "5532f28551a34cb2a6f9056f1f9c8145",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "43c2f4f6bb884d89af858968aea7ee67",
          "Name": "",
          "Description": "파일 경로",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "시스템에서 파일을 선택하여 파일 경로를 가져올 수 있습니다."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"1.Floor\";\n\"2.Roof\";\n\"3.Wall\";",
      "Id": "2ce22d37c8024f40a3e37c34a5612d48",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca0436686b114318a9356935258c16c8",
          "Name": "",
          "Description": "선 1의 표현식 값",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "703439bbdf4d4cb08d3ded63e42155d1",
          "Name": "",
          "Description": "선 2의 표현식 값",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2fb18653c344c829f1fe343597d3b64",
          "Name": "",
          "Description": "선 3의 표현식 값",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "DesignScript 코드를 직접 작성할 수 있습니다"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "9515e48e448b4504b08208843e2c5cf6",
      "Inputs": [
        {
          "Id": "b47e5caa1e6a437ebe1c17e3b1c23d00",
          "Name": "",
          "Description": "출력을 표시할 노드",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f451255a42a94547ab274c776834a5d2",
          "Name": "",
          "Description": "노드 출력",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "노드의 출력 시각화"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Python 표준 및 DesignScript 라이브러리 로드\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\n\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nadd = curry(lambda a,b: a + b)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\ngo = lambda *args: reduce(lambda a,f: f(a), args)\r\n# 이 노드에 대한 입력값은 IN 변수에 리스트로 저장됩니다.\r\ndataEnteringNode = IN\r\n\r\ndatas = IN[0]\r\n\r\n# 코드를 이 선 아래에 배치\r\ndef chck_heads(row):\r\n    def chck(a):\r\n        try: \r\n            if \"NO\" in a: return True\r\n            else: return False\r\n        except: return False\r\n\r\n    blns = lambda list: go(list,\r\n        map(lambda a: chck(a)))\r\n    return any(blns(row))\r\n    \r\n\r\nhead = lambda list: go(list,\r\n    filter(lambda a: chck_heads(a)),\r\n    )\r\n    \r\nres = list(head(datas))[0]\r\n# 출력을 OUT 변수에 지정합니다.\r\nOUT = res",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4d17e2b57573481fa1ccd7fffd17a143",
      "Inputs": [
        {
          "Id": "22d417344e114f43a5c4b3e663c10498",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1d8be6120b142f0ab7f6216943997e1",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Out Cutting\n\n//데이터 시작점 파악\n\n//불필요 칼럼 제외\n\n//[Family List] 식별",
      "Id": "37d5e76487154c5f8d69693c101d7b76",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "DesignScript 코드를 직접 작성할 수 있습니다"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Python 표준 및 DesignScript 라이브러리 로드\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\n\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nadd = curry(lambda a,b: a + b)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\ngo = lambda *args: reduce(lambda a,f: f(a), args)\r\n# 이 노드에 대한 입력값은 IN 변수에 리스트로 저장됩니다.\r\ndataEnteringNode = IN\r\n\r\ndatas = IN[0]\r\n\r\n# 코드를 이 선 아래에 배치\r\ndef vld(a):\r\n    try: return a\r\n    except: return \"\"\r\n        \r\ndef findstartpt(datas):\r\n    res = []    \r\n    for i in enumerate(datas):\r\n        for j in enumerate(i[1]):\r\n            cell = vld(j[1])\r\n            try:\r\n                if \"[\" in cell or \"]\" in cell: ### 동작하려면 엑셀의 시트 제목이 []를 포함해야함\r\n                    res.append((i[0],j[0]))\r\n            except: pass\r\n\r\n    return res[0]\r\n\r\nstartpt = findstartpt(datas)\r\n\r\ndef outcut(datas):\r\n    s1 = datas[startpt[0]+1:]\r\n    s2 = list(map(lambda a: a[startpt[1]:], s1))\r\n    \r\n    return s2\r\n\r\n#head = lambda list: go(list,\r\n#    filter(lambda a: chck_heads(a)),\r\n#    )\r\n    \r\nresult = outcut(datas)\r\n# 출력을 OUT 변수에 지정합니다.\r\nOUT = result",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "9d81680500f648b7a9f35c1d33df19ca",
      "Inputs": [
        {
          "Id": "da7672991fc54c90bad69274bf098534",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1a89754a48fd41a5a54b810ae92d0b4d",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//전체가 Null 인것 제외",
      "Id": "32e387cad2c741e3b75264cb197690a4",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "DesignScript 코드를 직접 작성할 수 있습니다"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Python 표준 및 DesignScript 라이브러리 로드\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\nimport re\r\n\r\n\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nadd = curry(lambda a,b: a + b)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\ngo = lambda *args: reduce(lambda a,f: f(a), args)\r\n\r\n# 이 노드에 대한 입력값은 IN 변수에 리스트로 저장됩니다.\r\ndataEnteringNode = IN\r\n\r\ndatas = IN[0]\r\nheaders = datas[0]\r\n# 코드를 이 선 아래에 배치\r\ndef vld(a):\r\n    try: return a\r\n    except: return \"\"\r\n\r\ndef findlv(regex, a):\r\n    p = re.match(regex, str(a))\r\n    return p\r\n        \r\ndef idxByTitle(headers, title):\r\n    chk = lambda list: go(list,\r\n        filter(lambda a: title in a),\r\n        map(lambda a: list.index(a)),\r\n        )\r\n    colidx = list(chk(headers))[0]\r\n    \r\n    return colidx\r\n\r\nchk_regex = lambda regex: lambda a: re.match(regex, str(a))\r\n\r\ndef inslice(datas, n, lv):\r\n    std = {\r\n        \"lv1\": \"\\d{0,5}$\",\r\n        \"lv2\": \"\\d{0,5}[.]\\d$\",\r\n        \"lv3\": \"\\d{0,5}[.]\\d[.]\\d$\",\r\n        \"lv4\": \"\\d{0,5}[.]\\d[.]\\d[.]\\d$\",\r\n        \"Ftype\": \"^\\w{2,3}\\d\\d[^0]\"\r\n    }\r\n    \r\n    idx = idxByTitle(datas, \"NO\")\r\n    df = datas[1:]\r\n    df_0 = list(map(lambda a: a[0], df))\r\n    df_1 = list(map(lambda a: a[1], df))\r\n    df_n = list(map(lambda a: a[n], df))\r\n    df_n_1 = list(map(lambda a: a[n+1], df))\r\n    \r\n    #chk = lambda regex: lambda a: re.match(regex, str(a))\r\n    \r\n    def sliceRowByLevel(df, n, lv):\r\n        df_n = list(map(lambda a: a[n], df))\r\n        df_n_1 = list(map(lambda a: a[n+1], df))\r\n        RowIdx = []\r\n        res = []\r\n        for a in enumerate(df_n):\r\n            if chk_regex(std[lv])(a[1]):\r\n                RowIdx.append(a[0])\r\n        if len(RowIdx) > 1:\r\n            for i,v in enumerate(RowIdx):\r\n                if i < len(RowIdx)-1:\r\n                    res.append((v, RowIdx[i+1]-1))\r\n                elif i == len(RowIdx)-1:\r\n                    res.append((RowIdx[i], len(df_n)))\r\n        elif len(RowIdx) == 1:\r\n            res.append((RowIdx[0],len(df_n)))\r\n        return res\r\n    slcIdx = sliceRowByLevel(df, n, lv)\r\n    \r\n    result = {}\r\n    \r\n    for a in slcIdx:\r\n        lv_Name = str(df_n[a[0]])\r\n        if a[0] != a[1]:\r\n            result[lv_Name] = df[a[0]:a[1]+1]\r\n        else:\r\n            result[lv_Name] = df[a[0]:a[1]+1]\r\n    \r\n    return result\r\n    \r\nbyLv1 = inslice(datas, 0, \"lv1\")\r\n_byFamilyType = inslice(datas, 2, \"Ftype\")\r\n\r\nbyFamilyType = {}\r\nfor a in _byFamilyType:\r\n    if len(_byFamilyType[a]) > 1:\r\n        tmp = [_byFamilyType[a][0]]\r\n        for b in range(1, len(_byFamilyType[a])):\r\n            if _byFamilyType[a][b][3] != None:\r\n                tmp.append(_byFamilyType[a][b])\r\n    else: tmp = [_byFamilyType[a][0]]\r\n    \r\n    byFamilyType[a] = tmp\r\n\r\nwmidx = idxByTitle(datas, \"Work Master Code\")\r\n\r\n\r\n\r\n#head = lambda list: go(list,\r\n#    filter(lambda a: chck_heads(a)),\r\n#    )\r\n\r\n\r\nresult = byFamilyType\r\n# 출력을 OUT 변수에 지정합니다.\r\nOUT = (headers,result)",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "8ee51e39d45144008b06b59dbb63ac42",
      "Inputs": [
        {
          "Id": "b82ba71ea0574eb79c54beec697f9816",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83478863ef2e452985183e64667027f3",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Python 표준 및 DesignScript 라이브러리 로드\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom itertools import chain\r\nfrom functools import reduce\r\nimport re\r\n\r\n\r\ncurry = lambda f: lambda a,*args: f(a, *args) if (len(args)) else lambda *args: f(a, *args)\r\n\r\nadd = curry(lambda a,b: a + b)\r\n\r\nfilter = curry(filter)\r\nmap = curry(map)\r\n\r\ndef _take(length, iter):\r\n    res = []\r\n    for a in iter:\r\n        res.append(a)\r\n        if len(res) == length:\r\n            return res\r\ntake = curry(_take)\r\nreduce = curry(reduce)\r\ngo = lambda *args: reduce(lambda a,f: f(a), args)\r\n\r\n# 이 노드에 대한 입력값은 IN 변수에 리스트로 저장됩니다.\r\ndataEnteringNode = IN\r\n\r\ndicts = IN[0][1]\r\nheaders = IN[0][0]\r\n# 코드를 이 선 아래에 배치\r\ndef vld(a):\r\n    try: return a\r\n    except: return \"\"\r\n\r\ndef findlv(regex, a):\r\n    p = re.match(regex, str(a))\r\n    return p\r\n        \r\ndef idxByTitle(headers, title):\r\n    chk = lambda list: go(list,\r\n        filter(lambda a: title in a),\r\n        map(lambda a: list.index(a)),\r\n        )\r\n    colidx = list(chk(headers))[0]\r\n    \r\n    return colidx\r\n\r\nchk_regex = lambda regex: lambda a: re.match(regex, str(a))\r\n\r\n\r\n## 패밀리 타입 하나당 종속된 워크마스터 짝짓는 코드\r\ndef findWM(nlist, headers):\r\n    wmidx = idxByTitle(headers, \"Work Master Code\")\r\n    L1idx = idxByTitle(headers, \"Work Category-L1\")\r\n    Spec9idx = idxByTitle(headers, \"BOQ Spec9\")\r\n    \r\n    res =[]\r\n    for a in nlist:\r\n        if chk_regex(\"^\\w\\d{2}\")(a[wmidx]):\r\n            wmCode = a[wmidx]\r\n            _wmDesc = list(filter(lambda y: y != '0', map(lambda x: str(x), a[L1idx:Spec9idx])))\r\n            wmDesc = '(' +a[wmidx+1]+ ')_' + \" \".join(_wmDesc)\r\n            wm = wmCode +\": \"+ wmDesc\r\n            res.append(wm)\r\n    return res\r\n\r\ndef mkDict(dicts):\r\n    res = {}\r\n    for k,v in dicts.items():\r\n        wms = findWM(v, headers)\r\n        res[k] = wms\r\n    return res\r\n\r\n#head = lambda list: go(list,\r\n#    filter(lambda a: chck_heads(a)),\r\n#    )\r\n\r\n\r\nresult = mkDict(dicts)\r\n# 출력을 OUT 변수에 지정합니다.\r\nOUT = result",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "fab6daf482b6413790e54502d60bdc69",
      "Inputs": [
        {
          "Id": "24375432d35b489a888296ac4de51b50",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e0ab57cfa0b24c93aa5129fb0e14bd76",
          "Name": "OUT",
          "Description": "Python 스크립트의 결과",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "포함된 Python 스크립트를 실행합니다."
    }
  ],
  "Connectors": [
    {
      "Start": "91aa2f04d91e46ff92a05aba8e6335f1",
      "End": "22d417344e114f43a5c4b3e663c10498",
      "Id": "e8055abff3d241b4a7d6466660977119"
    },
    {
      "Start": "91aa2f04d91e46ff92a05aba8e6335f1",
      "End": "da7672991fc54c90bad69274bf098534",
      "Id": "6eb199baf898475ebed2859e009fdf9a"
    },
    {
      "Start": "43c2f4f6bb884d89af858968aea7ee67",
      "End": "4fe9b9d6b0d043f4b7d9eaba6cfcc350",
      "Id": "4aef28313d2a4bd9ac8c91e3f19f554d"
    },
    {
      "Start": "d2fb18653c344c829f1fe343597d3b64",
      "End": "d8560dacc71c44098e123f0368855615",
      "Id": "e7166be6eac64f22afbfa60d26c594b5"
    },
    {
      "Start": "1a89754a48fd41a5a54b810ae92d0b4d",
      "End": "b82ba71ea0574eb79c54beec697f9816",
      "Id": "e797222224a5431ca45ea44ce83c1335"
    },
    {
      "Start": "83478863ef2e452985183e64667027f3",
      "End": "24375432d35b489a888296ac4de51b50",
      "Id": "b8aa9e8384204480a43c57148a980fc3"
    },
    {
      "Start": "e0ab57cfa0b24c93aa5129fb0e14bd76",
      "End": "b47e5caa1e6a437ebe1c17e3b1c23d00",
      "Id": "8bc39bfe34c94f7eb9e5b1d852f90771"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "없음",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "배경 미리보기",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "full data",
        "Id": "0761a53f8d9c4e71b2e657663e424bcd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 665.13667446873023,
        "Y": 212.7266510625393
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "5532f28551a34cb2a6f9056f1f9c8145",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 170.5,
        "Y": 222.0
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2ce22d37c8024f40a3e37c34a5612d48",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 241.0,
        "Y": 335.0
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "9515e48e448b4504b08208843e2c5cf6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2028.8642746566825,
        "Y": 8.63191047250558
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "4d17e2b57573481fa1ccd7fffd17a143",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 175.38430539848673,
        "Y": -157.78660510612684
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "37d5e76487154c5f8d69693c101d7b76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 741.41057392278719,
        "Y": -54.875621811833625
      },
      {
        "ShowGeometry": true,
        "Name": "Outside Cuttng",
        "Id": "9d81680500f648b7a9f35c1d33df19ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 909.45494820845806,
        "Y": 212.6912314614288
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "32e387cad2c741e3b75264cb197690a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 941.02145124377557,
        "Y": -151.78030676394053
      },
      {
        "ShowGeometry": true,
        "Name": "Inside Slicing",
        "Id": "8ee51e39d45144008b06b59dbb63ac42",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1260.0591112257703,
        "Y": 217.39686670385476
      },
      {
        "ShowGeometry": true,
        "Name": "dict forming",
        "Id": "fab6daf482b6413790e54502d60bdc69",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1563.7066990786518,
        "Y": 217.21016606291
      }
    ],
    "Annotations": [],
    "X": -43.514704312694676,
    "Y": 126.88845577129052,
    "Zoom": 0.79771476255864171
  }
}