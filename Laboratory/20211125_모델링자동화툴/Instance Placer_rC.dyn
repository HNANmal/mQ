{
  "Uuid": "a79fa74f-e34d-4d89-a973-37aaa8faa714",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Instance Placer_rC",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "673601ec76ac433b9e3e5f6b7b27eded",
      "Inputs": [
        {
          "Id": "13b3ae40a6214a639d2cdfa90a802a56",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c03ac992ca69455ebe0d3a07f85afacd",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 269,
      "SelectedString": "OST_Grids",
      "NodeType": "ExtensionNode",
      "Id": "d7d6cb718066400ba73a43b5668e6735",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cac402ac4e2c40158ff6d8270e539f9f",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Grid.Curve",
      "Id": "e492bafe5cc248d9be03d03418fb8ce1",
      "Inputs": [
        {
          "Id": "5d931021ec8d4c33acab8dd53e06b24c",
          "Name": "grid",
          "Description": "Revit.Elements.Grid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65a5833faab54433afc370590a890ee3",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the underlying Curve geometry from this Element\n\nGrid.Curve: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "bfc0009de53b4fce9a9ab3923bfc2448",
      "Inputs": [
        {
          "Id": "67e014de8b58419888cc4ceb28e70693",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c41880cb129c4cae970de0e9a231a811",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "163d61c48427483388dc57e20fc7253c",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "311a09137bd543318b5a68466af0eca4",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.Direction",
      "Id": "1a61e344483142889dafd2583283306b",
      "Inputs": [
        {
          "Id": "03f675bfd3c74e4abadd2c5f3d921b14",
          "Name": "line",
          "Description": "Autodesk.DesignScript.Geometry.Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91135e76047348d49398aaf74cc1a60e",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The direction of the Curve\n\nLine.Direction: Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.Normalized",
      "Id": "6692de8becbd440481d8d76e4a11c2a0",
      "Inputs": [
        {
          "Id": "782ce959eda54605a01043ee35d91019",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "46086bdd8dee45f4a094a4e542978562",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the normalized version of a vector\n\nVector.Normalized ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "98ad29c45a984e549d4e6f329ebbfc00",
      "Inputs": [
        {
          "Id": "bb5055d689ab460b90722a638f96825e",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "157742122db6467f95dec110edc8e43b",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "ad87295e3a61449a989f3c511cf36dbb",
      "Inputs": [
        {
          "Id": "5a2d2145b43148f4b11f95c175d70ca5",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "491522235fee4361af0efb60b3a9c538",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.IsParallel@Autodesk.DesignScript.Geometry.Vector",
      "Id": "28e60b1f6a334379a719c2ee5b64435e",
      "Inputs": [
        {
          "Id": "13c791bea71c4a1da3d6b2387e2ebed0",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a91e014f4164b63af06077640699f1c",
          "Name": "other",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ec32ee209035436d926898b8cc5cd0e3",
          "Name": "bool",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determine whether two vectors are parallel or not\n\nVector.IsParallel (other: Vector): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Grid.Curve",
      "Id": "03c98f6fed514959bfcfe547336a47fb",
      "Inputs": [
        {
          "Id": "363cfc29325843dbb761336bf7b016c3",
          "Name": "grid",
          "Description": "Revit.Elements.Grid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16e7e441c1b142768fcbe66d1062a5cc",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the underlying Curve geometry from this Element\n\nGrid.Curve: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Grid.Curve",
      "Id": "49fc3d58d1d34567879e56462d51ca9c",
      "Inputs": [
        {
          "Id": "642224bd7f6544b2ac4a6117b02b61d9",
          "Name": "grid",
          "Description": "Revit.Elements.Grid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4afce524582f403ebec00db24dd76ae2",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the underlying Curve geometry from this Element\n\nGrid.Curve: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "7e5b5da9e2904adebe2f7931b5f0a7c2",
      "Inputs": [
        {
          "Id": "0fa74d37180047adbd3cb9156bf48318",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "236c9686becd46b092b6bd919ea654d3",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0e3da1073e3643bd801861a65f8ffcc6",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "d2336d8e2937409aae87c6faa44d860e",
      "Inputs": [
        {
          "Id": "706bb27cea844449a29cac7c96d29d66",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a85c34a19ae540cbab34da9793bd83f1",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f7269f361774b35a907c650cc8b915b",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Name\";",
      "Id": "d6d8e77a5d1e4c4fbe87c2019aa941d0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "23ba75efe3784f8cb67357f1d615fa51",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "e1efa331633a45dea076bc1e0d577892",
      "Inputs": [
        {
          "Id": "aca7a54546194483a19d655040337e7d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b5ee7ff825f345e485ca45d4dc79ebfd",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c116599620545d1a1c012fbee9643ad",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "d5fbec9dbbca43718c0b766184b7fb72",
      "Inputs": [
        {
          "Id": "4ea8c0de33b34fa492a3c480fcf3c3f2",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03bbc71b44b94ae8b184bf06842f281c",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "19f87c61d08b4e269df91db6e2652bca",
          "Name": "string1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2d6967b00cc6424d9511cc94518da09e",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "8e4294b9ab334318b0399a1fa6afba1c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8f559ee10c824a2e9326e2d22b8b9686",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.CartesianProduct, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "eb655823b0bb4195bef7cca1b34c8dc0",
      "Inputs": [
        {
          "Id": "7db12855a8f548f29209f50a94d58e36",
          "Name": "combineFunction",
          "Description": "Function to use as combinator",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "01bd83be75ae4519b9199be5e9dca81a",
          "Name": "list0",
          "Description": "List #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e67baddc8e9247eca3038f731e057f25",
          "Name": "list1",
          "Description": "List #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "edfd28411db54d01a50b6c81941485b2",
          "Name": "list",
          "Description": "Combined lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Applies a combinator to each pair in the cartesian product of two sequences"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.CartesianProduct, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "318ca9920c264e61a7c9ff823b800bcc",
      "Inputs": [
        {
          "Id": "db2b0350f6294ad68403147184e033d0",
          "Name": "combineFunction",
          "Description": "Function to use as combinator",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c5c203024b84db3b934d2bf8a8b2342",
          "Name": "list0",
          "Description": "List #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea86f89db0e9474d90f7ebf3b1cfeb8b",
          "Name": "list1",
          "Description": "List #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "37b783fda7ed440b8a6690fe8ea20a3c",
          "Name": "list",
          "Description": "Combined lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Applies a combinator to each pair in the cartesian product of two sequences"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "37fd6b873b06451788f97c10d4debedf",
      "Inputs": [
        {
          "Id": "a743d04741774d1cb1a7b1006c84b458",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "6a45f1c0b82c4fd0b275879540d5d56c",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f44d8baa30ed418f8cd5cb50307a2341",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "f351bfaeb18a464e8a4a8ee7e7dde710",
      "Inputs": [
        {
          "Id": "3a1e583bfb0f41f88826ef03da01ee02",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "978aaeced3154e16b456ac85e1860e23",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d60a22ad01cd4169bd3d1299d4291b4e",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "a05c1abefe144426ab235ef0b482e1ee",
      "Inputs": [
        {
          "Id": "4b05725add8a4d548eb7686829cf9ca7",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6f8a78b4d8404f51a085abef1aa2b8e1",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8bb59d574d54c78ad11806f37fe1a40",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "75c6fd418fe3455fbadff5ed2389297f",
      "Inputs": [
        {
          "Id": "2c24e3aa72dc4db38f0a7ba4543e70a9",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ec9abcfb5b84eceb258ba679fb0c0b2",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e2f90c67799b4863879d3ef980c19fcb",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "278ca1d2d6fe4789b4bc2e937d2e5855",
      "Inputs": [
        {
          "Id": "8cbbda627f5b43fd9fd4542a2d16e2f2",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7d84a1436981480f8ecab427baa3ee35",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\mk\\mQ\\Laboratory\\20211125_모델링자동화툴\\3_Structural Member Auto Creation_Sample_revised.xlsx",
      "InputValue": ".\\3_Structural Member Auto Creation_Sample_revised.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "c5923389b68044618b879d6823c0b6f0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1459ebc03e184763a685fb3e8a3ab158",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "8611bb7a0ca24adca00c24ac3195ca2d",
      "Inputs": [
        {
          "Id": "e596a2cd99aa494db99c8350e4194b23",
          "Name": "file",
          "Description": "File representing the Microsoft Excel spreadsheet.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b72dfd8877dd49709d933cf5fc42305a",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing the data.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "458b45b8411249dc829a4da8269eed50",
          "Name": "readAsStrings",
          "Description": "Toggle to switch between reading Excel file as strings.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "320d20be8dea440ea9e17647f2889d27",
          "Name": "showExcel",
          "Description": "Toggle to switch between showing and hiding the main Excel window.\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "177897720c924e6a85dbf941af15a5a0",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Str Foundations\";",
      "Id": "fe39a321f01f4323a00f1cf7fa13ed8f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5029b8a8bcdd49ed94be24b3937388d5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "58f9590b14804cf2a2a3937cbd972df1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32686ce6cc564d9198b483485e4391a6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "b5155a0f2ef4467e96db680d1561607f",
      "Inputs": [
        {
          "Id": "417f5ea608714970b1f8cc6f553595ef",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "e6b57d0e21884b56aa471e184ae84e64",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "42f28986eef246df85e84d9f9965a457",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "6dfe31ccd7ed4d409a901ec932871289",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c5fb535bc5214b61b99fb489c6ba87d0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "086684ebea154a92b26318417f7076d3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3557dc54bade4f7c809b94070de3c825",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "cf4cc24ba02f419bb7230ef0163370cd",
      "Inputs": [
        {
          "Id": "df394db04e1c4d31a71fdb7ba8bca276",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24117669455b4a3c84d14635a8490bad",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b2999bd7d6d94bb39dd0ac9b15405fd6",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "338e7ab5651042f898556a328dc2498b",
      "Inputs": [
        {
          "Id": "45bfede442534f1aa1d0b4b8be980cf9",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "deb620b162954f39ba26a11fc525dc90",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4946e39c132241b58d773caffcc16ccf",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "29f4cb5c0a6d4beb98a4ae923f5ef1f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6a83b17c368d414383892accf82194b9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "72b396a81da142c98cbbf530143b8092",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0d2d6d7db3794587a22cc9ef6e4ca68d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "ed466c7c77514ae8851c7161a949a808",
      "Inputs": [
        {
          "Id": "675620bde03a4e739ac3ad6604986b7f",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "8320599927654feb8b65a503d1dbd568",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ab27a6c039ec4cd4b2aa8a660debd932",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllIndicesOf@var[]..[],var",
      "Id": "bc3994b6e7d34f43804756ebd3510dd9",
      "Inputs": [
        {
          "Id": "716196452d3e4cc9ae9b5bdf30889eb3",
          "Name": "list",
          "Description": "List to search in. If this argument is null, an empty list is returned.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "ce921a01bb404dbc89ddffc7b9f6fc05",
          "Name": "item",
          "Description": "Item to look for.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2791aeb470ad46928dff5eae93f71847",
          "Name": "var[]..[]",
          "Description": "A list of zero-based indices of all occurrences of the item if found, or an empty list if the item does not exist in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned.\n\nList.AllIndicesOf (list: var[]..[], item: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.IsNull@var",
      "Id": "5d5cc409823b457b9d63cf52f9dc5db2",
      "Inputs": [
        {
          "Id": "1c49e860dbe34294b9dc1d83d577ee4a",
          "Name": "object",
          "Description": "Object to test.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "182ae3ef82b14da68007233d697792e5",
          "Name": "bool",
          "Description": "Whether object is null.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given object is null.\n\nObject.IsNull (object: var): bool"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "25af2bf415f6407699cc0a26ae9cf6cb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8d1203dcc0e74c9990e6093ce62b7d62",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "771300a8f3a5435eb60d3feea498815d",
      "Inputs": [
        {
          "Id": "480392e7eb014058872853f0cef78239",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b34729ff1c194ba68c15df3911672605",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "e88fcd2868784fb9a05785bc7ed30faf",
      "Inputs": [
        {
          "Id": "5886f7eee1b94889b16f8ae6435b4164",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b6345abdcc5471b8cf8b9b91df509bd",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2cb08c5dd34949d4a73f2a0a5a04cd94",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "c66361feb2654ae1af3e5b3d16f225bd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ccbb1ae042434474a06a6745f7b8632d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "789089c152134a9fbcd08e993cc8fca4",
      "Inputs": [
        {
          "Id": "7b854f377ee5471498a8825bf4e49b52",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5356efbeba5e470596910dbf03eab416",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "e20eeaad2632476592189ff1712b21c2",
      "Inputs": [
        {
          "Id": "670eaa6234f6444f90aade8f545f214d",
          "Name": "item",
          "Description": "The item to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7255141d3e314a2494c00f4649a2888e",
          "Name": "amount",
          "Description": "The number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3bc858fef3714d318b0da78588ee3195",
          "Name": "list",
          "Description": "List of repeated items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Creates a list containing the given item the given number of times.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "3622b430d2f1439d88a3872de2564769",
      "Inputs": [
        {
          "Id": "3376ea60ff754676b530db240caf71e4",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5d5b6b490d6e4aceac9eb59d2850eb66",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "e860efc5b6274749ba12e715c0d991f7",
      "Inputs": [
        {
          "Id": "cf405e2bbcfb4442afef45e55be82c0a",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55aa77e483c240fe94b38613303981b4",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22f38b51debb4d63b71c8c4cd70a6a70",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "968ac618108c4c3c9a72002d50b77da3",
      "Inputs": [
        {
          "Id": "beee62a197674b34add82feff5e2c237",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "3deb33cbab044f4298b8ec8b98cee133",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5d56ba139a349b9bde498c63539bf4a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "42fb371573f143699cf492dadac8997a",
      "Inputs": [
        {
          "Id": "f4816d877e294058995fde22872beef7",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5bbcbab187ea4946b0ef524634754ccf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "86fcf2b613094bac963d0c476314ff37",
      "Inputs": [
        {
          "Id": "b4c4f3d9fc3d436782cede95c6e6c7b3",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "c98cb6190fc94aae9c9bcad0253a1316",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a534e0d7131749d388162f2eab11aa75",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "ed1dd2daee03434a9b8a74698fc98d9f",
      "Inputs": [
        {
          "Id": "6b5f8a6c1cf947f6b0e4843c4f3b988f",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74cd5030f3144e629e7d337e9e4d4dca",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f8068cd3230425e8f4b160e92c1285c",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "1227d5c26b754ac7ab2520d8f9b074ac",
      "Inputs": [
        {
          "Id": "07cf198976d2422bb5e0fe68f2d777a6",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5e6e5f0469dd44f181a1bb943772e332",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63154505dd3946e692a7d01ab49b0d76",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "6789a03e2dbb4b51b89e2235e0233fda",
      "Inputs": [
        {
          "Id": "ad674cafc27b44989836f15b34c40f13",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3dcba73da7b34be08f0780f82868776d",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dcb06dc378de4f26a98b57f02737e437",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "028e47e931894f288ffcff0ea7c0f285",
      "Inputs": [
        {
          "Id": "5cc1aff11f904da48d24c999dfda4163",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1955d0eb6d7404589540976235e3f6e",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5611db3cf4d41c1905bd3927a429e80",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "89511309785d40ec9971431296a6208b",
      "Inputs": [
        {
          "Id": "4ac1ad3fc8b8474094896870941147db",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16feab802678459fad99d24ec4ab512f",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "77cf8b5519bb45d281bd653a52bec6c3",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds x to y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "486d451ddb024b738b86a0ed3ab3eeb0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "590bae21b06e4e6a95aad58bd7501b3c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPointAndLevel@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Level",
      "Id": "678f81fb21d1412baadaa61347b0addd",
      "Inputs": [
        {
          "Id": "1fe49d56104c470189d04f223fcb9dc5",
          "Name": "familyType",
          "Description": "Family Type. Also called Family Symbol.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b35eca1b428419ea4c8ecb2fb4871e3",
          "Name": "point",
          "Description": "Point in meters.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a900055bab74e5fa62b3812c32cb910",
          "Name": "level",
          "Description": "Level to host Family Instance.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "303071f4441e427fbc21251f0633e9bc",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API), it's coordinates in world space, and the Level\n\nFamilyInstance.ByPointAndLevel (familyType: FamilyType, point: Point, level: Level): FamilyInstance"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 2,
      "SelectedString": "Level 3",
      "NodeType": "ExtensionNode",
      "Id": "3e774b7803914d5695c35b64b90c499c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8101a922156c48e6abfb2fb6af1037aa",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "23df07ab070f49a2ad543ffb14c5d455",
      "Inputs": [
        {
          "Id": "3bb18f32c78a458d99ea8d9161925f49",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59559eb2379441c7aed2203e4c63b280",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d58419e33647481eb385ebaec51f091c",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "d3e2bfceb5bd4f58a34c541a60e05f5f",
      "Inputs": [
        {
          "Id": "c46f5a3ec9914696b430254401ad1d58",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b955b02180694896b041c5eeb1f5c1a7",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_byGridName;",
      "Id": "bce5f605b8c04590838965d18c31b642",
      "Inputs": [
        {
          "Id": "e2149291bf654790b9d9631f9a2904e3",
          "Name": "dict_byGridName",
          "Description": "dict_byGridName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34b0579e31f54ce794863127dc8151b0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1071bc156c7446c09d265b5e910c0c78",
      "Inputs": [
        {
          "Id": "4fc95b8d4ad6419d997416dbdb6422dc",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0eaf5e3e7ad740059cc193ca95097a3e",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "5822113072a949df95b2c4159245a7f3",
      "Inputs": [
        {
          "Id": "2b288fa1b703468598f9da0ea7463620",
          "Name": "file",
          "Description": "File representing the Microsoft Excel spreadsheet.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f51a72dcfd6490bb85f06fe4db996d2",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing the data.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9062cc49aa4b45b5bd3fe16f77edd92a",
          "Name": "readAsStrings",
          "Description": "Toggle to switch between reading Excel file as strings.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ce883030b16f4f0aa51dfed988d4427e",
          "Name": "showExcel",
          "Description": "Toggle to switch between showing and hiding the main Excel window.\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3e53bdf1bf4c445b9f17ba6060689ad7",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Str Pedestal\";",
      "Id": "d3677c80f763415ab9c8e44b5697e60d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5251f328c2ed438c84be3e930618e52e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "ade99939808d49c195717913e428f2d4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5dd347ddfed74734be9787bf87290dcc",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "87ca74d879eb469b95a2121f2fac8964",
      "Inputs": [
        {
          "Id": "bef19915cdfc40d9bc4cd10719bcf3d0",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "3656232e3d8848c0890d384b266dc76c",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "80d0eadca0b5454ca8737a466518c091",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "1a1a0e07997e48e3a37d0b91c3d15a32",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "56f8307ebc634273a8da36b649bd7a0a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "6d9ec546d5134350a79d68a312151930",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "743804deff6a4d188e750bcb2c605b32",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "f26e7bdb97c5437e9c489ad2438cebf3",
      "Inputs": [
        {
          "Id": "728bddf163be4ae8bf67e3a5154e59eb",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d0a675f9100e4b10ad008e34723670bf",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1a4f3d7abf6f4149b6abd88936293257",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "19ef3fd0dfad4a449786400d026d9bca",
      "Inputs": [
        {
          "Id": "1538a713695549c29e514481885c2d65",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "1a569aaf3a5543a0a7a9cc6ac40ba755",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bc53fcc6dec24805ad1c616a2ee4c7f0",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "8506cc01f3804fb58157f89446c21cd9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a1efb28963b34746992cca1d6d2692a5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "e398e48a451d49aeada6ba9a05306df3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c79892fc80f145e1ac571157afc092b4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "3bc7af86db7a4bbab4b020b8587c90c2",
      "Inputs": [
        {
          "Id": "5b9ba65f8a4243449877e4d01993ddfd",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "790831dfb5824db592f9276dfd166169",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7974b0e062e2415eb8e4814ac865f74d",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllIndicesOf@var[]..[],var",
      "Id": "56a9f84604f74967b20f7b84ca79274c",
      "Inputs": [
        {
          "Id": "e472bbd78b9d45b1b6f6dcb1d7117be2",
          "Name": "list",
          "Description": "List to search in. If this argument is null, an empty list is returned.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "23b35835094047938011769d61ef6b38",
          "Name": "item",
          "Description": "Item to look for.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df3ffc9e2bc54f26bd69ca16ef3f2455",
          "Name": "var[]..[]",
          "Description": "A list of zero-based indices of all occurrences of the item if found, or an empty list if the item does not exist in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned.\n\nList.AllIndicesOf (list: var[]..[], item: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.IsNull@var",
      "Id": "1cd2bfbb43414ca3ac35136c235dd38a",
      "Inputs": [
        {
          "Id": "030930443f574bd38b6378f2a6212649",
          "Name": "object",
          "Description": "Object to test.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7ea173514ecc4b40b8ac2875228b452c",
          "Name": "bool",
          "Description": "Whether object is null.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given object is null.\n\nObject.IsNull (object: var): bool"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "8fe3d43c185b47ba82f59857c51bc7d3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bf0b21977d39454c85894a4e1cf458cd",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e3c249cfaa8442e6badfe2109cdc2d17",
      "Inputs": [
        {
          "Id": "49c6bd1ab48a47e7a4a0cd10d6c9ee9c",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a21a5c8f20543eba489334ce0f58bf9",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "510a37a387e442fc9beca4e8124d0f0c",
      "Inputs": [
        {
          "Id": "b3e2a28627b946589cbb346cfe5ba505",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78d80c15d1a54005a0b38b3872712122",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ced3e5cbb704e5bb3a5f2aa98fd385d",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "bbb480d69c4245f588ec4d40b26cf6c2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3375cd9e46e74a9ea685ddbb66ded5b6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "99833781fc6444c5a0b07fe9247dae43",
      "Inputs": [
        {
          "Id": "306a5070a7614b1fafb8aab7420719f6",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c953052d25b64a08a6cbf19b22724884",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "d8cd22ec5f2a4b128ad213a633ff084d",
      "Inputs": [
        {
          "Id": "d5adb864306f481abbabd7b5ed42e402",
          "Name": "item",
          "Description": "The item to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "28d33424dfc64f80ab65737341f4a21b",
          "Name": "amount",
          "Description": "The number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "efee628e745d48e0a23d7ba8b480103f",
          "Name": "list",
          "Description": "List of repeated items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Creates a list containing the given item the given number of times.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "b2b17061d6c14c42a56fd92ad2ec70de",
      "Inputs": [
        {
          "Id": "9e6215c070ee4689bc8bc32dad1bdeec",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b742616457d7446d9c5792dfc4e17543",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "4ac0408cdd864470af33d84ef857f8ae",
      "Inputs": [
        {
          "Id": "f67115e72e1f4492831001282671489c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "790ea8d22cbc4ea0835f331199542f77",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ff65f62d2804fe4890c1696682a25a3",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "49e342a8eb4a43a4b44692c580d0be53",
      "Inputs": [
        {
          "Id": "5d21a6b5e6b6475286fdcd9104fd79ce",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "ebac4a58c8fc44c79986d6dbb222adeb",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a683ad365ff5452caace4b81864e9a22",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "7a4c2b6b4f1a4c119de399aa511dfbc2",
      "Inputs": [
        {
          "Id": "05337569b1454444a766e4671994f88f",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb9f87ebae2f4045812c8311e62aff6a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "8811ac063e9f44c0a8ab812085e91d8e",
      "Inputs": [
        {
          "Id": "8a7a48210b4e415abb47412908ca9190",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "6397bef8befc45cc813f49f0597d6f6f",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dcd3b3bb004e4e859da07ab6f10c58c0",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "ff79032e3c8e46c3a0bc0fcc77adb5cb",
      "Inputs": [
        {
          "Id": "a97188a67ac24b2aa4c30d2cb20862b5",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "421bdf3c2caa45ec9f0ebec9a5f63ed7",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d0eee9bb23514bb98fd5efb3e24670d0",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "491ea189a2c644bf9c9ebc91443a5013",
      "Inputs": [
        {
          "Id": "d34e6a3e97d540d7b0d191ff95ed0f5e",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af973826e4554608a35b5439fd39a799",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d20a8a435c864a6296b4ac13b385efee",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "ca93d2ad90b84d45a2755c67aeee268f",
      "Inputs": [
        {
          "Id": "afd195ed50f24a39a0a0e12fade0f37e",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2163a110138b43be8016a4079213f94d",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d44072b520a24c59b2ab275998fa5ef6",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_byGridName;",
      "Id": "a1a0b6f675b244bb97c3497919016784",
      "Inputs": [
        {
          "Id": "5501709bc9d144ad8daa44084abbcb82",
          "Name": "dict_byGridName",
          "Description": "dict_byGridName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bcde8d6cfe884966924c35b144f1e089",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "262f4479c17d464d87e4b3cf3a03a053",
      "Inputs": [
        {
          "Id": "20c21707e5d644229c7a8a277d0c4451",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "116cb4050b444a739876936ae5d0ea7c",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7a6ca2a876964da2b9fed20ee1f3d7e2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds x to y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "ac45ad2016724b259da8fae19f516829",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bc4274805a144e3ba2c0ec20a32ca406",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "45a710f9570b41deb75d5f9977aa660a",
      "Inputs": [
        {
          "Id": "ea1a94a585834f3888bb7feafbf1d672",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "096248e3a98744e6bb1bc72f6377a5a4",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2756475507514c1a95ee363dbd1da695",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPointAndLevel@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Level",
      "Id": "3b60735a1dd845ce829e4edbaf6d5bef",
      "Inputs": [
        {
          "Id": "c5bff29ac5ab453ba907a569a7025b7e",
          "Name": "familyType",
          "Description": "Family Type. Also called Family Symbol.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6ca612bd0ab14e8ea3ed0021d1017a56",
          "Name": "point",
          "Description": "Point in meters.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f59ee0164b9f49149b0fa39bc8205fae",
          "Name": "level",
          "Description": "Level to host Family Instance.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "13c24d057ec04d8080b523bc2542a43c",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API), it's coordinates in world space, and the Level\n\nFamilyInstance.ByPointAndLevel (familyType: FamilyType, point: Point, level: Level): FamilyInstance"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 2,
      "SelectedString": "Level 3",
      "NodeType": "ExtensionNode",
      "Id": "3709f44a92e2435f9c6f741dd77e31bd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "63d14091c4bf4b6f87119d890e2c5a27",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "adaa84e3b93c43398236dd5cab788d95",
      "Inputs": [
        {
          "Id": "df61081a66b44f9faadc76700c5d4d8b",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e0fded7021914f23825c5d2d35aa393b",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c605580941804fc8973b35504679961d",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "73c945a9fa524d359acdeba94580cf8e",
      "Inputs": [
        {
          "Id": "763abc8a21cb4a2db3158f06a70f04f2",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7c67f50df1ab45e9822776155d721966",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "8cbbc359ccb64f7a9b507b742cdbfbdd",
      "Inputs": [
        {
          "Id": "5442a672047e49c583786cc674d148a4",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "455aec9e76444f27add5209bbf8901d8",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "41d6b7b32f284f21b80b41763ea3c465",
      "Inputs": [
        {
          "Id": "9b725af24dc94d719bc60c10b6e54473",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb8d16b1515f4b5d8aa86d4b3aef4e24",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "7019ab3007d44318b739805072303664",
      "Inputs": [
        {
          "Id": "6694e2b048fa418e9b0936a5dc8b1495",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6058f718153146d99199e270e2aa5620",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "31c112a258314049a8939fdf67e7b817",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Foundation Thickness\";",
      "Id": "16510e2de69f47a49ba43042e654baae",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b3cde674ac2c4f6f972a0aec27a649e2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "465e61dc17dd47d595410d1f651691a9",
      "Inputs": [
        {
          "Id": "ef2c43a5350c47d6965ca64bfe023e2f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e86d5886b97f4eb9b3d1d8e05d249b62",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60a7846d9ee44cf8917f36921c730624",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4233827b5e94ed58b6999eae10e94c3",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Base Offset\";",
      "Id": "748652dc1ba1436dab2b11a782f17567",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d5ea08d0a4c34c3f9abd9eb77aaba11c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "94b2cdf89da84a17a17762bbc938bf0d",
      "Inputs": [
        {
          "Id": "27358bd244124ff38c5547fc533310cf",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f28ec8577f84a24a07d0e3667f28a67",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "d814e6ebeb004f148c2e63ac7de91c14",
      "Inputs": [
        {
          "Id": "be6c32018ef1453298b2b7bfe4ce0b26",
          "Name": "file",
          "Description": "File representing the Microsoft Excel spreadsheet.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5c8f4b270c234afb8d2336c67bd29e34",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing the data.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d636bc2b9c14027921a4d564954b1f5",
          "Name": "readAsStrings",
          "Description": "Toggle to switch between reading Excel file as strings.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "901fbcaa790b46b19124a15ac7c7ef79",
          "Name": "showExcel",
          "Description": "Toggle to switch between showing and hiding the main Excel window.\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5d8d468b859f43a2a864ff9d7ad9d247",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Str Framing\";",
      "Id": "a1d9888d9aff4a3f97a3e3f2b30237d9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "28d83160acdd4198ad88fb74d0120ccd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "ef2d57ea61844b6597e88afaca885378",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "30fb2817d5654c3c95bba4d77cc48467",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "f07240d1878e43179ec70987777c65cb",
      "Inputs": [
        {
          "Id": "12e375d593ca40ab94c1d42e9f004d8a",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3a16df74cf4d47c6a33a19c5df222cf8",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i[0];",
      "Id": "9502f7d48b0c40ce9a44f9ad636982ad",
      "Inputs": [
        {
          "Id": "e11d85c323aa41788ea9f65e01560c47",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f1166bc96f2149519c08d67fd26404b9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RestOfItems@var[]..[]",
      "Id": "9756d83a96f24b618b938fae6ca285cd",
      "Inputs": [
        {
          "Id": "6c4e99021f9a4300bf554be570a7e133",
          "Name": "list",
          "Description": "List to get the rest of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "723df7ef19a0435999345b7516347b5d",
          "Name": "rest",
          "Description": "Rest of the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes the first item from the given list.\n\nList.RestOfItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "3a64a31dae714e4d9479a1ae94e14840",
      "Inputs": [
        {
          "Id": "df1fd211eeef4644a9c7e77dce8cc3d9",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c478625ee31141fab868cc36600b8bfe",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "20dfb49d8e8a42ffaa5a986d73f4fb56",
      "Inputs": [
        {
          "Id": "9485d64bcdc1405ba2108b2332dcd9cb",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e82da9b669504fd4ab66354012239752",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f45930c723d4dfb8f0597574c21fac6",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".\";",
      "Id": "c11aec17d7814c579439c2fa3ea5810b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ed33673358ef481485d3093e5b91cd02",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "7485029b2a9d41eb864ef27ca763d239",
      "Inputs": [
        {
          "Id": "8824703960db46819174c588ab82c336",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9a15946093ea4683a053fc6b7340b808",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "94ae163ad6404a9d86842a37a09d9ecc",
      "Inputs": [
        {
          "Id": "814d684adb3845688b6a80b80335a2d5",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "28bc329d12344c4da276cd91316462ec",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c905567250d743a486311ae765dbe803",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "c6ceb57fccdb4103ac1d2255047262c7",
      "Inputs": [
        {
          "Id": "0b9dbda5b16042528293a96a5f50f6ee",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d41a7f29750f49f2b91352cc21fe31e2",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RestOfItems@var[]..[]",
      "Id": "2b6adf1bd3e24587b7db05d7d9ffc614",
      "Inputs": [
        {
          "Id": "fd5d073649ba41009d4d37b4845fc7d1",
          "Name": "list",
          "Description": "List to get the rest of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08d123ff7bf44226842750e06781a37c",
          "Name": "rest",
          "Description": "Rest of the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes the first item from the given list.\n\nList.RestOfItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RestOfItems@var[]..[]",
      "Id": "694d5991420f46b09ead6e1d7eaae9ca",
      "Inputs": [
        {
          "Id": "50913e27ab6f4d36995588ac6789dd8d",
          "Name": "list",
          "Description": "List to get the rest of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be5f2195d1bc4c97a4fc4efc83b289b7",
          "Name": "rest",
          "Description": "Rest of the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes the first item from the given list.\n\nList.RestOfItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "dd965f4d137b407a872af5aaae948e2a",
      "Inputs": [
        {
          "Id": "85d9a08daa7c4d03bdceccee15bb7185",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ddc8ba38f84744cf8a3b9147578b3af7",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4a752c071eb48228c9e1e0a1442aa2f",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "2c56a8a7137d430f8899ba16b7013d00",
      "Inputs": [
        {
          "Id": "a0c4a7f3c37e4af99f520f472d18038a",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c848e04644404d00bf467ac33800c67c",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "32d69a982959405f80537eb7e00529a4",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllIndicesOf@var[]..[],var",
      "Id": "436f8ddeb9494ae49be731d93dc8e90c",
      "Inputs": [
        {
          "Id": "9b82e41100a748f8b0b6003d343d4dee",
          "Name": "list",
          "Description": "List to search in. If this argument is null, an empty list is returned.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "36fcd85678654d478c9d1647eec9207a",
          "Name": "item",
          "Description": "Item to look for.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4b170870a004c949be4de2373e869ca",
          "Name": "var[]..[]",
          "Description": "A list of zero-based indices of all occurrences of the item if found, or an empty list if the item does not exist in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned.\n\nList.AllIndicesOf (list: var[]..[], item: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "true;",
      "Id": "449932a843ce492da2f550938dfed2a8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8b5d86520d9c40bb86d503851067ad09",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.IsNull@var",
      "Id": "29f43c5ef7d74b1ab44050c12d93de93",
      "Inputs": [
        {
          "Id": "1efafe3420ca408eae103f19c26c10f8",
          "Name": "object",
          "Description": "Object to test.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d9195e9121d946d7863bb2d8dbdf5213",
          "Name": "bool",
          "Description": "Whether object is null.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given object is null.\n\nObject.IsNull (object: var): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "02496919c7be45e6aff2ac66f8fff96b",
      "Inputs": [
        {
          "Id": "af2a7fae141841a592d09efcf8c8dfa8",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "3e9924cf061d4d52a4ec46e87ce097d5",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6459a96b0684e4ab56bb91678a596f3",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.RemoveKeys@string[]",
      "Id": "bac1bd7089ad466dbb9985ab2428764e",
      "Inputs": [
        {
          "Id": "199e6341a48545b197660e64bef273b9",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fbe477997c7e445ea4ac577c7fb0afbc",
          "Name": "keys",
          "Description": "The key in the Dictionary to remove\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08dbdc1bf3924db5a106512c0417b7c4",
          "Name": "dictionary",
          "Description": "A new Dictionary with the key removed",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Produce a new Dictionary with the given keys removed.\n\nDictionary.RemoveKeys (keys: string[]): Dictionary"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4aed288d5dea46e7b47b3db5692212f9",
      "Inputs": [
        {
          "Id": "d581637cb1764bf19dd067cd494f3799",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c9c2800101284bc688f783e89d9f6db7",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllIndicesOf@var[]..[],var",
      "Id": "cb72d56e17554705b807f01c8c0ce0e9",
      "Inputs": [
        {
          "Id": "c3d47e7730c1451b9ffe784c141da3e2",
          "Name": "list",
          "Description": "List to search in. If this argument is null, an empty list is returned.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a0853681e884f8b944d704db67d52a0",
          "Name": "item",
          "Description": "Item to look for.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f08f257b5a9640d3a074e302779c49cd",
          "Name": "var[]..[]",
          "Description": "A list of zero-based indices of all occurrences of the item if found, or an empty list if the item does not exist in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned.\n\nList.AllIndicesOf (list: var[]..[], item: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"{}\";",
      "Id": "0f389faae4024b108f7e1f2a72830442",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cb4e94fc4d6a4c0ab92a928dc7e87b95",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RemoveItemAtIndex@var[]..[],int[]",
      "Id": "ae3d8c73306c4403978460429b501a2c",
      "Inputs": [
        {
          "Id": "4d27844f45ed4c70934d561e28248ddc",
          "Name": "list",
          "Description": "List to remove an item or items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bebcb0d3419343358d990479127e5c66",
          "Name": "indices",
          "Description": "Index or indices of the item(s) to be removed.\n\nint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3833cd523b1c4a8680f778652f95787a",
          "Name": "list",
          "Description": "List with items removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an item from the given list at the specified index.\n\nList.RemoveItemAtIndex (list: var[]..[], indices: int[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "36c98d1e318142b9ab77c7229584313d",
      "Inputs": [
        {
          "Id": "87e194dd5380490db5c1bf94b662469e",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5296061a1d8741dda4f4f9af6e9cec74",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d3067ae502c4a7dba939abbe5430c20",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Sort@var[]",
      "Id": "1484bf79953f4ffeb6f50d0e86072d9f",
      "Inputs": [
        {
          "Id": "c81909c379ec45fd84b0f30f14913c8d",
          "Name": "list",
          "Description": "The list of items to be sorted.\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fd33849f5d04a049a57d3456c865494",
          "Name": "newList",
          "Description": "The indices of the items in the sorted list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Sorts a list by the items and return their indices.\n\nList.Sort (list: var[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "9122013fe57441e5939932c67943f979",
      "Inputs": [
        {
          "Id": "a14b78f3325a4742a44516400e7424df",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e78531b347c404387e171777b1d0da9",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cdb3c0f6bcf04cd9b67831653f73e164",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a34725f464184f179aca32d246fd8ad5",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "36af5b3c3f614abfaec368feae2d207d",
      "Inputs": [
        {
          "Id": "76dcd1c071914368bc427973ebc2e8f7",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f4fddd3f421a4aafab6d36de8cf105ef",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3c00515f38a341918b7100d26fb89010",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Keys",
      "Id": "287e9e4bb5114bd3aa0eb7a47fb381c3",
      "Inputs": [
        {
          "Id": "4aa28afb3252467d945fcec13ee3c20a",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91bd03648ab544eba0bfc3d1ce61d5cc",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the keys in a Dictionary.\n\nDictionary.Keys: string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Contains@string,string,bool",
      "Id": "073d48c9a5ac447285c1189f6cab9534",
      "Inputs": [
        {
          "Id": "6edb076b331c4f38955a89b6d33e113c",
          "Name": "str",
          "Description": "String to search in.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c986897911ee499096338d6e1e83d59b",
          "Name": "searchFor",
          "Description": "Substring to search for.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ac3523e27334a5381db64611f1d8d22",
          "Name": "ignoreCase",
          "Description": "Whether or not comparison takes case into account.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da5d335513ab4bce9904bea133e437e5",
          "Name": "bool",
          "Description": "Whether the string contains the substring.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given string contains the given substring.\n\nString.Contains (str: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"~\";",
      "Id": "0b71b6be803c4e3bba11f39aa2dd8f0b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3740d19f33be4ae0b17d876c5a2c2cb5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "8b6e8ea85e374168a8f2313cfe360770",
      "Inputs": [
        {
          "Id": "9b2cea4a9c3540a3bb6cb24a93ccfc6d",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c32bcda4984447229762abda421a9259",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f3ac603c54eb4798b8919bd4ac93627e",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "896400266f3f48339a437effc7268ce7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdba91f8f9e64bc7b366df6959c0cb49",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "a7ba68d1093443fe98ec5bfde7f294b2",
      "Inputs": [
        {
          "Id": "1556067b32da4f71a7544d0dcf3b4567",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd2d7f5ce6ec4d0aaf7465b63c42f1fb",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1beca4d2320a410280a14f8c9bdadad3",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"~\";",
      "Id": "3f333b66fc5f4e50a8c2f102cb6f7ae4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fb964c9f31cb485d93460170a5e375d9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "056f066642c54bdea3c7421d9adcff40",
      "Inputs": [
        {
          "Id": "d5c37296426d49df9d2bb619a971ae45",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8dc43b692ee4b2e92f826fecbe72c81",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "d829064239df4922ad4c51b8e1024121",
      "Inputs": [
        {
          "Id": "ae1373e5f1bd412cbbf5b00b704927b1",
          "Name": "list",
          "Description": "List to get the last item of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "526a9978e05944fb82dedb334c51f1a7",
          "Name": "last",
          "Description": "Last item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the last item in a list.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "fa19c25853ae4887b66c9fdb7e863cfc",
      "Inputs": [
        {
          "Id": "cd634c5a0be447a4b7beea20f402a87b",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2beeff9181d3495e89af3a9c4d061a56",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "aaa071c53bb44f82abaefc7e7a1cb68f",
      "Inputs": [
        {
          "Id": "33a6140b61e34584982aaf720728183c",
          "Name": "item",
          "Description": "The item to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "fd331fa028e04e8b90322c884f78d2db",
          "Name": "amount",
          "Description": "The number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "efa4edec53034a6485fab126acf5ac23",
          "Name": "list",
          "Description": "List of repeated items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a list containing the given item the given number of times.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "0650b9e6bc0b45b2a2724e55b62c6d42",
      "Inputs": [
        {
          "Id": "6f8503f933a6440ab98c59239a1f0b03",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d9b34167b3224fbeba0a3b8c2f4a9409",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c4dd29a5b44c47f18dc67566485866a8",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "d1d5e1ee1c844dfca3c0f7951ec0baf0",
      "Inputs": [
        {
          "Id": "891e6344ee42483c90aad358bc2b1ffa",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5eb5fbf8da5540c38897ee248ab2f7e4",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "ecd48b382628464688b6d2ed7c77f199",
      "Inputs": [
        {
          "Id": "e8d574003e55432482acbb91a001cdee",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "73d8597ddad94a58ae06c85bca4cd006",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Keys",
      "Id": "a4589a4c79df435c82296232c60047a9",
      "Inputs": [
        {
          "Id": "d6c1c006d2084ce6b663c5235a622dc2",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1497533080043e78a2bb17c20aa5a03",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the keys in a Dictionary.\n\nDictionary.Keys: string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "9f2b6e7f32c34781b0605963f54c9dbc",
      "Inputs": [
        {
          "Id": "85c9488f5b734d1b8b0cc7c3cecc09a5",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e4fb7895ae3040c0a5a0d7277d6e90d5",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35ea5d8bc3d44408bae5cc1c5d4dd55d",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "566959261ad24ef890f146098d1f13d1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e7c042752a6b4da5b4ce91ec1899a87c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "ca31dd1db2b048fe8ba2f3629bd51ff6",
      "Inputs": [
        {
          "Id": "53e2f0e458cf4870a24a573fefa4a3b6",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "49826b8612fd4e7ab01412de20f89947",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "ff56bb10e8354f08a5e652db78a4f274",
      "Inputs": [
        {
          "Id": "016819886c9649aaa61e275e31101fb9",
          "Name": "item",
          "Description": "The item to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "aa3e96c449dc407fa61876bbbabc499a",
          "Name": "amount",
          "Description": "The number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b972dd419d24d55815925a9cf431763",
          "Name": "list",
          "Description": "List of repeated items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a list containing the given item the given number of times.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "58ee5ac75c624ed9a1c983c04b526034",
      "Inputs": [
        {
          "Id": "1b4fb19013e547f399a49854fc0e4a0d",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e0c88393a3b44c2b4782fb012d579da",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c018ef15c894c1d922b93f85cfe1f3c",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "2382302a738144d98c7d20f85b9aaba6",
      "Inputs": [
        {
          "Id": "b68d4242668c4852a0fd9d7a58c76143",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8417f08c95bd4675b0a1e5114f065685",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "f8aceda9bf894b149133621afeb7593c",
      "Inputs": [
        {
          "Id": "b6fded98280441debfa54b9cc4590a36",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88bfa92604954d1091564c80df4aacd0",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_byGridName;",
      "Id": "e69b777b048149559a52027611e35357",
      "Inputs": [
        {
          "Id": "50800cd4db5e41b4bd68045e5611e2e4",
          "Name": "dict_byGridName",
          "Description": "dict_byGridName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f1344348da74285a88b6277f2db37d7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "92049fda6ebc47a2b82e239bfabdf96a",
      "Inputs": [
        {
          "Id": "f0c44ab373c44f0b9c3fbe27c8e0209a",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f339f981dcf4107aaadc5399a8f4a67",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2f51d44911524bb7be4570ef9937ac4b",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "0c0073f590ff4938802c54895abae2c7",
      "Inputs": [
        {
          "Id": "2924dd6c3d8540bfb1688b559775f3ad",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a852d0a3d7564f5dae3082499c37fccb",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "331dc7e8c7114eea8ba161db75fc5bc9",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "94ecee0408db4f338d729df2a934a053",
      "Inputs": [
        {
          "Id": "35cbf047d0d548d7954a8a3888817d66",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6e9f6a0ec32e4c4aba67c6f0cd982837",
          "Name": "endPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f1ec275ed18d49cb8552b84833d5a2ad",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "b53739499f9e4309b1bd0f88d89a26fd",
      "Inputs": [
        {
          "Id": "09a22b9d9c47483383869402e2fa1253",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2c9a813139834e1ea4ae03cf5785a381",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7bd4c030fce0434f9e2dd9221be2b625",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RemoveItemAtIndex@var[]..[],int[]",
      "Id": "a0c702d75bdd47129772afaec9825b94",
      "Inputs": [
        {
          "Id": "49ec350b28a849ae822ddd354278b6ef",
          "Name": "list",
          "Description": "List to remove an item or items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "432112a4a69c4381ab0a393d9b247762",
          "Name": "indices",
          "Description": "Index or indices of the item(s) to be removed.\n\nint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8020989b20f7479ebdbab70aa0b98364",
          "Name": "list",
          "Description": "List with items removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an item from the given list at the specified index.\n\nList.RemoveItemAtIndex (list: var[]..[], indices: int[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "04760e0f2df54afcb0933ce3bcfc6a9c",
      "Inputs": [
        {
          "Id": "3e87d42174b84e8faec6b8e59a37bdfc",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e8ead90ad2d4e3888f098f380ff193a",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "53cca12bc71943e0b931bdea93afccbc",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"~\";",
      "Id": "39c6832c1bd54641a7621fa4a8393bf5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "952715b5546e499f928f08c732b0b9c5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Keys",
      "Id": "b680bc7e08924687b5f2f8fdeb764f3f",
      "Inputs": [
        {
          "Id": "a1a2b1e76dad481fa05b8a56f0aec96c",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "960df475b29a4ebdb98f65d8151b7af3",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the keys in a Dictionary.\n\nDictionary.Keys: string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "ce4f034051cd421d8476eb74da393753",
      "Inputs": [
        {
          "Id": "6a4e1fd6d9d44f009a4976b1fe324c63",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "5d291a48df84423c8db6b57087cf965c",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "24f7d10883244119b63775f16146c852",
      "Inputs": [
        {
          "Id": "a2fef6d8b48b4371a2c652b03a4a0141",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "52d0743d4513430faf16386d8d5a0f87",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i +\",\"+ j;",
      "Id": "a323d5dcfb1443bb82e1925bf978ab37",
      "Inputs": [
        {
          "Id": "232d931631ae4c69b503c4ab6c7c7bae",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74d620339e5c49f9a890972fe07f2b3f",
          "Name": "j",
          "Description": "j",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2615914b0b854c96bf219564d4c57375",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "fd5a8d9e2af0472aafa474ee87d16d52",
      "Inputs": [
        {
          "Id": "f3c571befd7542e1a58947acf748470b",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "92549b47d70e4fc8889baa2301ba5a8a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i +\",\"+ j;",
      "Id": "87577d701c3a49c396e66b3ae494d451",
      "Inputs": [
        {
          "Id": "93263404d06c43aba5437e8a305b778d",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "511ef8915143432494d2803e50f6ffef",
          "Name": "j",
          "Description": "j",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a8eaec0862d41a8b5568af81652eea7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "5ac67a17167d4686b9462a48164bdfde",
      "Inputs": [
        {
          "Id": "16ddd721bb7c4ac099a60785df11208f",
          "Name": "list",
          "Description": "List to get the last item of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "0fa914d7c20c44d9bd49b4441c940643",
          "Name": "last",
          "Description": "Last item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the last item in a list.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "ac8e2bdabdd946abad7a7647e6b7c666",
      "Inputs": [
        {
          "Id": "fc521d55a4914c018c4801dd1ffbc066",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e00b47ccc5c4df8b58ab39a9b67d3f2",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e044d3bfac74176a8a255c7de51bb0e",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0b0331ff405c4d72979cc6039228de4e",
      "Inputs": [
        {
          "Id": "ef20729d5bb54fe6ba700dedaa394894",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e24ccfcb06614c2c944b74274fd9d629",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "938a85eba19a4a18a97936b49ad3dec8",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "301925774d1542b1923020975ecfd0f3",
      "Inputs": [
        {
          "Id": "ca879994295647ad92924f5bf672a100",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40701dc397324acf8351e6ee10f29230",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.BeamByCurve@Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType",
      "Id": "b7b975747cab4f3cb93c6da66768129f",
      "Inputs": [
        {
          "Id": "118b9e6e0b844c3f8eda5c3b132998c2",
          "Name": "curve",
          "Description": "The curve which defines the center line of the beam.\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55bd31c48f13419d82689c94a0279b65",
          "Name": "level",
          "Description": "The level with which you'd like the beam to be associated.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4d7e7b45cc8c4f9e96e53b46b728829a",
          "Name": "structuralFramingType",
          "Description": "The structural framing type representing the beam.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "053911f3b7d0493fa8394d436977249b",
          "Name": "StructuralFraming",
          "Description": "StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a beam.\n\nStructuralFraming.BeamByCurve (curve: Curve, level: Level, structuralFramingType: FamilyType): StructuralFraming"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "Level 1",
      "NodeType": "ExtensionNode",
      "Id": "42c3de1eb88b40b9b59c11eb0d71db4b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4fe4943772bf46beaebc2039fdfb83fc",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "31cebb0784254d57808f132a496b85a6",
      "Inputs": [
        {
          "Id": "568ae147cbc446d09e96896b102c7513",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "77dee75dcf6f40e4a83cc85ba332081d",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e0692bab7644ba9ab7f11a986b52d33",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "156951c2a5c444a38d90e78ca542deb7",
      "Inputs": [
        {
          "Id": "7a9178d929d44b09aeb6774d3992f10d",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f9d7ee5892414076a0f99c64d6c8c5d9",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "25abe92f584c4dd9b33ec25bdaf011a1",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "cc6a10f3ea604760b325d08c643c12bf",
      "Inputs": [
        {
          "Id": "352963e8a6c743678724038f115a2f72",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d393be4dea3a433c894b40974b7bc333",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce9c7605629e4d12ad372869728e1644",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Values",
      "Id": "5c2b9fd34a6e40ff9a65f7c78e4bfc89",
      "Inputs": [
        {
          "Id": "7e202ec33a8643b9b56bbbaca427e97f",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3f81ee0c37204066ad2ccde0feb8a3c2",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the values in a Dictionary.\n\nDictionary.Values: var[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_byGridName;",
      "Id": "2bc6bd4b43a1454493d6f2dcf50496d4",
      "Inputs": [
        {
          "Id": "92c074e7889347ea9d7fe6460019d39b",
          "Name": "dict_byGridName",
          "Description": "dict_byGridName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29835503e3eb4f7aaa66a3400aa0bb7d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "c01c30eb41a94fdea6f81991171812bb",
      "Inputs": [
        {
          "Id": "1f52353015f540b9bd02c3eb28739504",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e026df7f8b16461685141da481a140e4",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12ff34b59acc43b8911e4d27c5dced8e",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "c6b23dcc29604b53ac8f1261f3edf179",
      "Inputs": [
        {
          "Id": "0b890ba6b3c845f1abcbf5cf2a4c7f60",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b1be5d37781469496daaf78cff831a6",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1ba26fcf720c4ba2b45653402155e5f3",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "3b4bc38b23494f98a52c29b26eed2237",
      "Inputs": [
        {
          "Id": "49164e1c987240d6ad97a80be69a50d1",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "39669951fb6448659b124f738ed85c79",
          "Name": "endPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "365ac1552ae84d82b2e3060385cb32a5",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.BeamByCurve@Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType",
      "Id": "eda808237eff460ea8e8f16abbbef02b",
      "Inputs": [
        {
          "Id": "2624df2706354246b00f6f0e7a48af04",
          "Name": "curve",
          "Description": "The curve which defines the center line of the beam.\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b25c26c5eff49e88a618ea5b2b17670",
          "Name": "level",
          "Description": "The level with which you'd like the beam to be associated.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a0a481862f1c4f3e88534e9e8c17391f",
          "Name": "structuralFramingType",
          "Description": "The structural framing type representing the beam.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1eba010bafa344129b8613a164257569",
          "Name": "StructuralFraming",
          "Description": "StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a beam.\n\nStructuralFraming.BeamByCurve (curve: Curve, level: Level, structuralFramingType: FamilyType): StructuralFraming"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "143e8dbdb02045339443efb4a440f6a2",
      "Inputs": [
        {
          "Id": "b5be33357d5e4e82a7549ebfedaa1c9c",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d779931f58c24040a6afb5d53e7ff5a6",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "Level 1",
      "NodeType": "ExtensionNode",
      "Id": "38322b9eedf9459385c40537dc4f0297",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9a59592bf1564fc684cee02d3d65f607",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "3ccfd979f93f4f9fa0ec155f24454f28",
      "Inputs": [
        {
          "Id": "0acc08c70cde40ceae601e013c00538d",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea8bccffcf534a30844cc724297c9d83",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78eb128e7ed84a2a956cea3ec26dcf5c",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "d4bac440625041a29e2ca208d0aa2c55",
      "Inputs": [
        {
          "Id": "74efd0943bb64341bd29ae11b94f4060",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bfa4b0044c6c435892d4f218e3b02eee",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "ec83ee3844ac48018a10900f1d62d8e5",
      "Inputs": [
        {
          "Id": "d096f9b84e8a48828d9ba1fa6bc0b6db",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a914bc05368416a8ea8d16144d0b5d2",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "192bfe8470a2424684fadb2c34b69514",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.UniqueItems@var[]..[]",
      "Id": "e349a3d1bc594f0f8ad03c0dbda05250",
      "Inputs": [
        {
          "Id": "56bea303c25545a48cf95d6aa83b3ed3",
          "Name": "list",
          "Description": "List to filter duplicates out of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "de2080ae22bf4a89beb6a1d2c7910a5e",
          "Name": "list",
          "Description": "Filtered list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing all unique items in the given list.\n\nList.UniqueItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Join@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "7564bb75178547869e910182a4ab0949",
      "Inputs": [
        {
          "Id": "68266f5b3b4046c9b601b2039ed05839",
          "Name": "separator",
          "Description": "String to be inserted between joined strings.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5ee520b42e52481da04ec4ceb8adaf97",
          "Name": "string0",
          "Description": "Strings to be joined into a single string.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ebe063760cf472794c6e84636bd5e8b",
          "Name": "string",
          "Description": "A string made from the list of strings including the separator character.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Concatenates multiple strings into a single string, inserting the given separator between each joined string.\n\nString.Join (separator: string, strings: string[]): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\",\";",
      "Id": "279731fcdc074b2aa2c9531a74d36bc4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a910b2a1337643a086a6696ea8500911",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "94e8da616ac44becacebe3d43e5c33af",
      "Inputs": [
        {
          "Id": "87f47cf58506482ea5f16b7c4b15b31d",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "d139801315ca473a9f0162810a2db147",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8a76acb4410456aae67d2f73278eb86",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0df43584ae5743829980ccaa7bfafaa8",
      "Inputs": [
        {
          "Id": "636d34cf08364043be859fc6b8a55c91",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aa38c32e072b4967950e644a74bc7c91",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c09d38e217349a593f2067cff60e354",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "2cee4fe7ed3a4799a0b7f1c5d14e7479",
      "Inputs": [
        {
          "Id": "f0311a86ebbe4839af6436b6d0b62584",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b059621be1a94451ad57b5b09c6d9e77",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5dcef4e0f63d49fd873d7040b6c61569",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPointAndLevel@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Level",
      "Id": "39cd037a20bb4288ba6bb833d9261b32",
      "Inputs": [
        {
          "Id": "109607e9c6824f079ab4827b21d73c25",
          "Name": "familyType",
          "Description": "Family Type. Also called Family Symbol.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec0a0c3cec574c65b0a95dee01ff0610",
          "Name": "point",
          "Description": "Point in meters.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2da2de75ba79479c9d9d275e1cd18fc0",
          "Name": "level",
          "Description": "Level to host Family Instance.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29c5a8e46d5849c79ec5b52b4aec7e75",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API), it's coordinates in world space, and the Level\n\nFamilyInstance.ByPointAndLevel (familyType: FamilyType, point: Point, level: Level): FamilyInstance"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "Level 1",
      "NodeType": "ExtensionNode",
      "Id": "b117653f433a4edd993b10341a069134",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "608ca108429b46ec88bb50b1b1b11766",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "1af9893e3a534985924385ce2a4c6852",
      "Inputs": [
        {
          "Id": "77f8ace0810d48c9bbcb2fb3194e593f",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4ecbe1d6c5214678b04a76f71b284919",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0a8d41c4ba24bab86dce6d87a1c1a62",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "6d427be34fc44d18a7c73b50cc5a1839",
      "Inputs": [
        {
          "Id": "b63d3c2325fa464d94858bf16c7bcd77",
          "Name": "name",
          "Description": "The name of the FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5362617d4caa438589a286b0ccddd456",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a FamilyType given it's name. This method will return the first FamilyType it finds if there are two or more FamilyTypes with the same name.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "7607b7205fe34a348092cd0707cfe856",
      "Inputs": [
        {
          "Id": "78cfa811a9814040b597f2a4465f4aa6",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "fa2370b67e8a4122b01c80eb5f8ec22e",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "13d8eb623fd64df1bcafe1bb2b67f5ea",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "7e65e418a7e74c37b751d01597c1a55c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ebb8f845380d42aaa6d90ec555d37e91",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "5637a3259569401da164d3afc3407aea",
      "Inputs": [
        {
          "Id": "362214ecee044b6c9b6f78b2f3bce9f2",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a0bcd9c1e96e46a5838d4c74b6d4356d",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a18e41eab7f14111be797fb748fc0db2",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "eee6e54586984c48b3148b1238123960",
      "Inputs": [
        {
          "Id": "7f96caa12af64f4eac3663a0199b6a34",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "c6ebdf4495664419bbc2fc6128967fcf",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "39aca522b7b74a3bb3fc8bd1e6070d7d",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "5b0b2fd41cf64169b5fe6c174e0e5042",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "59678d9975ba438f914930d4fb35777f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "9a13617f47284e00b963b48cc8478f8b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cb26a646b19947d18e01378d5ce475ec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "3ed69d38643f449ea2327f9b7fe4337d",
      "Inputs": [
        {
          "Id": "1c8d1531144347d3988def7399436d21",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "d2b8e972c7694a798cc3af8dfd8c17de",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bf7ec7559e8b4a3fb5758e1c44e271a9",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllIndicesOf@var[]..[],var",
      "Id": "4744622aa2264b0db3fc950c239573df",
      "Inputs": [
        {
          "Id": "35295e7f4d984d51af30b1b595168690",
          "Name": "list",
          "Description": "List to search in. If this argument is null, an empty list is returned.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "2d930309c3de43e79b8bae550bad23ea",
          "Name": "item",
          "Description": "Item to look for.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8dc66aac700d4f5386114ce20802ed3e",
          "Name": "var[]..[]",
          "Description": "A list of zero-based indices of all occurrences of the item if found, or an empty list if the item does not exist in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned.\n\nList.AllIndicesOf (list: var[]..[], item: var): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Object.IsNull@var",
      "Id": "3bca664e305a4c5b96496dcee704f522",
      "Inputs": [
        {
          "Id": "5a0dc78d1e614a64a5b0fbf917cec958",
          "Name": "object",
          "Description": "Object to test.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68082bcc31f249e2a9e3c81b27f496aa",
          "Name": "bool",
          "Description": "Whether object is null.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given object is null.\n\nObject.IsNull (object: var): bool"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "36ebb68d73cb4f84a3c1e04a443c9cc0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "afe2addeb9dc4b469527a324ff445351",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b8a5d9a97e58401fa0adf52ff9a5b4c8",
      "Inputs": [
        {
          "Id": "331f390e18a14812aa59f00f12fffbd2",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9fa1f29ab2a3495c9c4dee28f1c014ae",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "6a4761cb56794133b7ed19059b9b64b2",
      "Inputs": [
        {
          "Id": "5ab5c0cb89d74620a12405792ccc5689",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "756d2fcba7bb44718d4942799ea7136c",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "9a296e3c196147858d1dc203d2b42ba4",
      "Inputs": [
        {
          "Id": "380105f37ed84ce6a047bda945e97f7e",
          "Name": "item",
          "Description": "The item to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df8a19ed50164c19a18d4b08ed0a75e2",
          "Name": "amount",
          "Description": "The number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4146b2a02bbe4cd5aef250d8e5f1e7dc",
          "Name": "list",
          "Description": "List of repeated items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Shortest",
      "Description": "Creates a list containing the given item the given number of times.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "d4f99920acb74f4f942d20df8e31b87a",
      "Inputs": [
        {
          "Id": "5111cef8feaf4e2594e629ede9dd38bb",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "138c12a074884b30b080304fdc568754",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fbf169f8d23f45369a698194657798f7",
      "Inputs": [
        {
          "Id": "7751fdf0f1e24904be020953680d0c7c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed314603e067433bba28b58abe65e9a5",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30f3afa2f3194ee799bf6f9d65321d4f",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "01ff51b661214395b3f8c15a8fc521c3",
      "Inputs": [
        {
          "Id": "e540b11b785c4ea1844e98d0c6ede092",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "0792c4c58323430297a6f553f4e5e37e",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a12f5c54cd64cae93c696851724b279",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "i;",
      "Id": "73aa8072ce8544efbaa64ba4b616c11d",
      "Inputs": [
        {
          "Id": "5e3b531eb1314d33be6a4cfb5ca7a956",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3499806c46d54c3a9dc096dc1123bbfd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "28b1da4b28bb42ff896a69481ab8ee71",
      "Inputs": [
        {
          "Id": "9eb40d8cd89d43e1a6323a9e8491db6f",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f72b64bfd1014a19ad299d7c38836104",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e9946f52bb234b1b89a0d369fae9348b",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds x to y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "fe00cee549cb414b85332d93a793f605",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4607a0456d634ca1a0d71ebbb3bebfb5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "88e3a316f6474804ad7e583a7a6f3405",
      "Inputs": [
        {
          "Id": "715e15774c264021b354fe585420a83e",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "407697bc3c6843b8ad7409621b37e914",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "380992c6682f4aef9ebd636d89a23e24",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "ce5ce443cbd14570bbff77ddd994d0de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fa613fcc101c4155b257862c50b25b91",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "dict_byGridName;",
      "Id": "e1f3873b48ed4a7793680d9734c4bb0a",
      "Inputs": [
        {
          "Id": "58ac3519d4be43ee995639e0d4505267",
          "Name": "dict_byGridName",
          "Description": "dict_byGridName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1af762ba8af04b44a59eb8bfa966df61",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "1a8083fbf0df492485e905b51e9ec693",
      "Inputs": [
        {
          "Id": "aa030e9ee56e49e2acfea0c27fec320d",
          "Name": "file",
          "Description": "File representing the Microsoft Excel spreadsheet.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7ad407398c94469f99f99e5e505d0f48",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing the data.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "de36e7179ed6441bbbd6be3520bfa248",
          "Name": "readAsStrings",
          "Description": "Toggle to switch between reading Excel file as strings.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7f460c562214bc787eb186c9aa2ad16",
          "Name": "showExcel",
          "Description": "Toggle to switch between showing and hiding the main Excel window.\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9ce46f36bd7c48c88fb44f586f256993",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1834a85ca23640a5ba710d4ed9df0e50",
      "Inputs": [
        {
          "Id": "928c1080bf624daa81131c68a0a18212",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12c02c8d4d4340d481b86536dcc4305b",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Str Columns\";",
      "Id": "a1c0fa1ed80f462f8e76424ab71fd245",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e468538ca6da45149122468e87870473",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "de7906458d1a4ea093c1096012671df0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "87259eeb0c8942748eae24565b0884ee",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ByKeysValues@string[],var[]..[]",
      "Id": "f723d73854034aa1abb21219798611e1",
      "Inputs": [
        {
          "Id": "b4a09c14b87640a58ac43bc9cfdc5378",
          "Name": "keys",
          "Description": "The string keys of the Dictionary\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "880f1fd8302146d1aad910b4040f702a",
          "Name": "values",
          "Description": "The values of the Dictionary\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c255759da650496e8fdac9d47b92e966",
          "Name": "dictionary",
          "Description": "The result Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a Dictionary with the supplied keys and values. The number of entries is the shorter of keys or values.\n\nDictionary.ByKeysValues (keys: string[], values: var[]..[]): Dictionary"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.ValueAtKey@string",
      "Id": "e6ddc3f7f2674a6c9b376fbe8d5780e2",
      "Inputs": [
        {
          "Id": "76f707482816441793fccf8a6e13a44f",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ac227aceaa39440cb26b211c47075464",
          "Name": "key",
          "Description": "The key in the Dictionary to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30bc4c9e75ff4935a8118e3475ad9685",
          "Name": "value",
          "Description": "The value at the specified key or null if it is not set.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the value at a specified key\n\nDictionary.ValueAtKey (key: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DesignScript.Builtin.Dictionary.Components",
      "Id": "67f65959baaf48ab8796fd5ce2d4e54c",
      "Inputs": [
        {
          "Id": "828d68549ce7494685f14fb9ec607cef",
          "Name": "dictionary",
          "Description": "DesignScript.Builtin.Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c52b5ba6a034a1aa968f7516095e304",
          "Name": "keys",
          "Description": "The keys of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed746aef5f664c8982edf8b9cb7fe724",
          "Name": "values",
          "Description": "The values of the Dictionary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces the components of a Dictionary. The reverse of Dictionary.ByKeysValues.\n\nDictionary.Components ( ): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "c03ac992ca69455ebe0d3a07f85afacd",
      "End": "5d931021ec8d4c33acab8dd53e06b24c",
      "Id": "8bfad4a3e41941eaa80f6c69b87176bc"
    },
    {
      "Start": "c03ac992ca69455ebe0d3a07f85afacd",
      "End": "67e014de8b58419888cc4ceb28e70693",
      "Id": "6039d9466ef649fe998ab6bf043be38d"
    },
    {
      "Start": "cac402ac4e2c40158ff6d8270e539f9f",
      "End": "13b3ae40a6214a639d2cdfa90a802a56",
      "Id": "ab204d22304d4d04a5949a76de72f08d"
    },
    {
      "Start": "65a5833faab54433afc370590a890ee3",
      "End": "03f675bfd3c74e4abadd2c5f3d921b14",
      "Id": "e65822e5eec144ee883eed73ca756256"
    },
    {
      "Start": "163d61c48427483388dc57e20fc7253c",
      "End": "363cfc29325843dbb761336bf7b016c3",
      "Id": "dd49a94d085346a5999bbd4dee796a68"
    },
    {
      "Start": "163d61c48427483388dc57e20fc7253c",
      "End": "706bb27cea844449a29cac7c96d29d66",
      "Id": "0bc073f931e54eaa9285214075e2b094"
    },
    {
      "Start": "311a09137bd543318b5a68466af0eca4",
      "End": "642224bd7f6544b2ac4a6117b02b61d9",
      "Id": "f33fb43085504b72b7e1661ca74e52db"
    },
    {
      "Start": "311a09137bd543318b5a68466af0eca4",
      "End": "aca7a54546194483a19d655040337e7d",
      "Id": "78e98a20ea594eae863cbed2138eab2b"
    },
    {
      "Start": "91135e76047348d49398aaf74cc1a60e",
      "End": "782ce959eda54605a01043ee35d91019",
      "Id": "0ac8d2a0d23f4a1990f70f02cc36ad6e"
    },
    {
      "Start": "46086bdd8dee45f4a094a4e542978562",
      "End": "bb5055d689ab460b90722a638f96825e",
      "Id": "1bbb1a335a624a5c9207e9ecc0e9c493"
    },
    {
      "Start": "46086bdd8dee45f4a094a4e542978562",
      "End": "2a91e014f4164b63af06077640699f1c",
      "Id": "86aaea5657144c689185c396e817359f"
    },
    {
      "Start": "157742122db6467f95dec110edc8e43b",
      "End": "5a2d2145b43148f4b11f95c175d70ca5",
      "Id": "6ebc860fce1347d893143c1b6a550f6b"
    },
    {
      "Start": "491522235fee4361af0efb60b3a9c538",
      "End": "13c791bea71c4a1da3d6b2387e2ebed0",
      "Id": "bfe7cbd788b84a2f8d986ad47946ee13"
    },
    {
      "Start": "ec32ee209035436d926898b8cc5cd0e3",
      "End": "c41880cb129c4cae970de0e9a231a811",
      "Id": "76d886fe08284af696be9c842fa655a5"
    },
    {
      "Start": "16e7e441c1b142768fcbe66d1062a5cc",
      "End": "9c5c203024b84db3b934d2bf8a8b2342",
      "Id": "3476c4c5f9724e3f9f49377bfb1db1c4"
    },
    {
      "Start": "4afce524582f403ebec00db24dd76ae2",
      "End": "ea86f89db0e9474d90f7ebf3b1cfeb8b",
      "Id": "69b2c3f13a3c489c85aef74b132018fc"
    },
    {
      "Start": "0e3da1073e3643bd801861a65f8ffcc6",
      "End": "db2b0350f6294ad68403147184e033d0",
      "Id": "d0332cf2332a4a6986f55bcbfd6f6531"
    },
    {
      "Start": "8f7269f361774b35a907c650cc8b915b",
      "End": "01bd83be75ae4519b9199be5e9dca81a",
      "Id": "7bbb46da0869453597aa632dd441a536"
    },
    {
      "Start": "23ba75efe3784f8cb67357f1d615fa51",
      "End": "a85c34a19ae540cbab34da9793bd83f1",
      "Id": "3f644b32bff847da9e2d21e26f111df2"
    },
    {
      "Start": "23ba75efe3784f8cb67357f1d615fa51",
      "End": "b5ee7ff825f345e485ca45d4dc79ebfd",
      "Id": "469783fcca7c4f23a818517e073477e3"
    },
    {
      "Start": "1c116599620545d1a1c012fbee9643ad",
      "End": "e67baddc8e9247eca3038f731e057f25",
      "Id": "d0269300641d443a8a7ac466b8b3f545"
    },
    {
      "Start": "2d6967b00cc6424d9511cc94518da09e",
      "End": "7db12855a8f548f29209f50a94d58e36",
      "Id": "274f1a05acbf4e2ebea71e5d007d23d7"
    },
    {
      "Start": "8f559ee10c824a2e9326e2d22b8b9686",
      "End": "4ea8c0de33b34fa492a3c480fcf3c3f2",
      "Id": "3daa4d387b034c5c8e13cd14b6c61fed"
    },
    {
      "Start": "edfd28411db54d01a50b6c81941485b2",
      "End": "4b05725add8a4d548eb7686829cf9ca7",
      "Id": "bac041e2f0ca4f3dab40a12f56d5b708"
    },
    {
      "Start": "37b783fda7ed440b8a6690fe8ea20a3c",
      "End": "a743d04741774d1cb1a7b1006c84b458",
      "Id": "b298df447cef4bddb04b7c89749c7729"
    },
    {
      "Start": "f44d8baa30ed418f8cd5cb50307a2341",
      "End": "2c24e3aa72dc4db38f0a7ba4543e70a9",
      "Id": "66b2d8fc18b845e484411115302b21de"
    },
    {
      "Start": "d60a22ad01cd4169bd3d1299d4291b4e",
      "End": "e2149291bf654790b9d9631f9a2904e3",
      "Id": "c41c32b11ab845c091696ad81efcfa47"
    },
    {
      "Start": "d60a22ad01cd4169bd3d1299d4291b4e",
      "End": "5501709bc9d144ad8daa44084abbcb82",
      "Id": "d456897a5f6144c9b9170dbab03d594d"
    },
    {
      "Start": "d60a22ad01cd4169bd3d1299d4291b4e",
      "End": "50800cd4db5e41b4bd68045e5611e2e4",
      "Id": "7d82c4ed76d5433cb2177d669c37c602"
    },
    {
      "Start": "d60a22ad01cd4169bd3d1299d4291b4e",
      "End": "92c074e7889347ea9d7fe6460019d39b",
      "Id": "035aa9ba4d14492fba326fe9512926c4"
    },
    {
      "Start": "d60a22ad01cd4169bd3d1299d4291b4e",
      "End": "58ac3519d4be43ee995639e0d4505267",
      "Id": "dff18783acb34026bffa6220fa83d9c5"
    },
    {
      "Start": "e8bb59d574d54c78ad11806f37fe1a40",
      "End": "3a1e583bfb0f41f88826ef03da01ee02",
      "Id": "e684093cf99644b3899d3eac369e644d"
    },
    {
      "Start": "e2f90c67799b4863879d3ef980c19fcb",
      "End": "978aaeced3154e16b456ac85e1860e23",
      "Id": "0f86825f234542ffbc8079c1f2672d81"
    },
    {
      "Start": "7d84a1436981480f8ecab427baa3ee35",
      "End": "e596a2cd99aa494db99c8350e4194b23",
      "Id": "3732ddc8e00646849bd35aa2ff6ce5b9"
    },
    {
      "Start": "1459ebc03e184763a685fb3e8a3ab158",
      "End": "8cbbda627f5b43fd9fd4542a2d16e2f2",
      "Id": "63ec08e6b5ef472c94c85db295139fd3"
    },
    {
      "Start": "1459ebc03e184763a685fb3e8a3ab158",
      "End": "4fc95b8d4ad6419d997416dbdb6422dc",
      "Id": "51bffbcf99a041d1a7f1475389c39cf3"
    },
    {
      "Start": "1459ebc03e184763a685fb3e8a3ab158",
      "End": "27358bd244124ff38c5547fc533310cf",
      "Id": "bd6274b254e84e52b35839277bcc3dee"
    },
    {
      "Start": "1459ebc03e184763a685fb3e8a3ab158",
      "End": "928c1080bf624daa81131c68a0a18212",
      "Id": "4c8d9ff510b94df7a71533609bcbceb6"
    },
    {
      "Start": "177897720c924e6a85dbf941af15a5a0",
      "End": "417f5ea608714970b1f8cc6f553595ef",
      "Id": "8170ae24e6214a25bd2487ebbfd667bd"
    },
    {
      "Start": "5029b8a8bcdd49ed94be24b3937388d5",
      "End": "b72dfd8877dd49709d933cf5fc42305a",
      "Id": "e5d4b2b183e1488088b5ffe67c59ec1a"
    },
    {
      "Start": "32686ce6cc564d9198b483485e4391a6",
      "End": "320d20be8dea440ea9e17647f2889d27",
      "Id": "705ab7141c414e8388cd76c28ed2c0e7"
    },
    {
      "Start": "42f28986eef246df85e84d9f9965a457",
      "End": "df394db04e1c4d31a71fdb7ba8bca276",
      "Id": "a09463b7de044a13ad874cb1bc82559f"
    },
    {
      "Start": "c5fb535bc5214b61b99fb489c6ba87d0",
      "End": "e6b57d0e21884b56aa471e184ae84e64",
      "Id": "37a8381e81754953af8584b5411689ba"
    },
    {
      "Start": "3557dc54bade4f7c809b94070de3c825",
      "End": "24117669455b4a3c84d14635a8490bad",
      "Id": "479c70697967402ca34ee5e53a6418a3"
    },
    {
      "Start": "b2999bd7d6d94bb39dd0ac9b15405fd6",
      "End": "45bfede442534f1aa1d0b4b8be980cf9",
      "Id": "66cf368fb81f461baf7be6a50082df54"
    },
    {
      "Start": "b2999bd7d6d94bb39dd0ac9b15405fd6",
      "End": "675620bde03a4e739ac3ad6604986b7f",
      "Id": "0e7c7c0c9e924882bdd271f99decaf38"
    },
    {
      "Start": "4946e39c132241b58d773caffcc16ccf",
      "End": "670eaa6234f6444f90aade8f545f214d",
      "Id": "92a96153ff2f47d6a7d9a69237f8e3e4"
    },
    {
      "Start": "6a83b17c368d414383892accf82194b9",
      "End": "deb620b162954f39ba26a11fc525dc90",
      "Id": "4810a8ca9f6a435db26827e7d13f0e22"
    },
    {
      "Start": "0d2d6d7db3794587a22cc9ef6e4ca68d",
      "End": "8320599927654feb8b65a503d1dbd568",
      "Id": "5fd017e79ab8405499ef9a632199c027"
    },
    {
      "Start": "ab27a6c039ec4cd4b2aa8a660debd932",
      "End": "1c49e860dbe34294b9dc1d83d577ee4a",
      "Id": "411f343892c44b7f94ff1de5e1aa8a61"
    },
    {
      "Start": "ab27a6c039ec4cd4b2aa8a660debd932",
      "End": "f4816d877e294058995fde22872beef7",
      "Id": "77b6d0147feb45409181a754ab170cef"
    },
    {
      "Start": "2791aeb470ad46928dff5eae93f71847",
      "End": "7b854f377ee5471498a8825bf4e49b52",
      "Id": "f8e6fb21877249089e7cc67773841152"
    },
    {
      "Start": "2791aeb470ad46928dff5eae93f71847",
      "End": "c98cb6190fc94aae9c9bcad0253a1316",
      "Id": "2f1d8b0df48b42bea481de5565b8c262"
    },
    {
      "Start": "2791aeb470ad46928dff5eae93f71847",
      "End": "4ac1ad3fc8b8474094896870941147db",
      "Id": "6f5b2ca082cf4064aac5d255b52d5614"
    },
    {
      "Start": "182ae3ef82b14da68007233d697792e5",
      "End": "716196452d3e4cc9ae9b5bdf30889eb3",
      "Id": "2d49848d803445b2b39d28e59466820e"
    },
    {
      "Start": "8d1203dcc0e74c9990e6093ce62b7d62",
      "End": "ce921a01bb404dbc89ddffc7b9f6fc05",
      "Id": "a7e6347907e84c70bb3ed5f361782500"
    },
    {
      "Start": "b34729ff1c194ba68c15df3911672605",
      "End": "55aa77e483c240fe94b38613303981b4",
      "Id": "69894501584e4d3f8184fff4653964de"
    },
    {
      "Start": "2cb08c5dd34949d4a73f2a0a5a04cd94",
      "End": "ad674cafc27b44989836f15b34c40f13",
      "Id": "a9e4e387b1e54c3cae1615614592e908"
    },
    {
      "Start": "ccbb1ae042434474a06a6745f7b8632d",
      "End": "5886f7eee1b94889b16f8ae6435b4164",
      "Id": "0e76d39b76c94fa1aa9bc77b6452c4de"
    },
    {
      "Start": "5356efbeba5e470596910dbf03eab416",
      "End": "7255141d3e314a2494c00f4649a2888e",
      "Id": "4ec204848cca4d63a5299fcd00f47717"
    },
    {
      "Start": "3bc858fef3714d318b0da78588ee3195",
      "End": "cf405e2bbcfb4442afef45e55be82c0a",
      "Id": "2da8d73c9d1a4881887414a8f900c3be"
    },
    {
      "Start": "5d5b6b490d6e4aceac9eb59d2850eb66",
      "End": "4b6345abdcc5471b8cf8b9b91df509bd",
      "Id": "784e5ca24be440ebba31f74936cdbaee"
    },
    {
      "Start": "22f38b51debb4d63b71c8c4cd70a6a70",
      "End": "beee62a197674b34add82feff5e2c237",
      "Id": "acb191f30fed40a3b85caab8e6347532"
    },
    {
      "Start": "e5d56ba139a349b9bde498c63539bf4a",
      "End": "3376ea60ff754676b530db240caf71e4",
      "Id": "05d17bdbe353447fa2845cbf44f4029e"
    },
    {
      "Start": "5bbcbab187ea4946b0ef524634754ccf",
      "End": "b4c4f3d9fc3d436782cede95c6e6c7b3",
      "Id": "2648f16f9ee64a2e824eb12cc31e495f"
    },
    {
      "Start": "a534e0d7131749d388162f2eab11aa75",
      "End": "07cf198976d2422bb5e0fe68f2d777a6",
      "Id": "5ecd2fe42282497a8747bdb330769379"
    },
    {
      "Start": "8f8068cd3230425e8f4b160e92c1285c",
      "End": "3bb18f32c78a458d99ea8d9161925f49",
      "Id": "4c2184c02e1a466b922658f1f962aa9c"
    },
    {
      "Start": "8f8068cd3230425e8f4b160e92c1285c",
      "End": "828d68549ce7494685f14fb9ec607cef",
      "Id": "ca67ede92c404bf1bc09511deec878c1"
    },
    {
      "Start": "63154505dd3946e692a7d01ab49b0d76",
      "End": "74cd5030f3144e629e7d337e9e4d4dca",
      "Id": "97fc69b8914d4babbac96119ccbc41b6"
    },
    {
      "Start": "dcb06dc378de4f26a98b57f02737e437",
      "End": "6b5f8a6c1cf947f6b0e4843c4f3b988f",
      "Id": "fc658679a3fd40c1bf1dfc3fd8e09036"
    },
    {
      "Start": "e5611db3cf4d41c1905bd3927a429e80",
      "End": "2b35eca1b428419ea4c8ecb2fb4871e3",
      "Id": "47b87486f1134d7db9501a75e71fbd45"
    },
    {
      "Start": "77cf8b5519bb45d281bd653a52bec6c3",
      "End": "480392e7eb014058872853f0cef78239",
      "Id": "43bbffa93b6a4e60a95d0c016cadc1bb"
    },
    {
      "Start": "590bae21b06e4e6a95aad58bd7501b3c",
      "End": "16feab802678459fad99d24ec4ab512f",
      "Id": "4ceb863fcdcd4c639064fdfdfdc85268"
    },
    {
      "Start": "8101a922156c48e6abfb2fb6af1037aa",
      "End": "1a900055bab74e5fa62b3812c32cb910",
      "Id": "6e808a808788494db3889df5e0abbcfe"
    },
    {
      "Start": "59559eb2379441c7aed2203e4c63b280",
      "End": "a1955d0eb6d7404589540976235e3f6e",
      "Id": "19371d7e8a714d93bd0f5fb9742863bc"
    },
    {
      "Start": "d58419e33647481eb385ebaec51f091c",
      "End": "c46f5a3ec9914696b430254401ad1d58",
      "Id": "86d70b3b6d27428f828159f59c8b1f37"
    },
    {
      "Start": "d58419e33647481eb385ebaec51f091c",
      "End": "5442a672047e49c583786cc674d148a4",
      "Id": "4718ff9ec973484eb75e7cf1edc4873b"
    },
    {
      "Start": "b955b02180694896b041c5eeb1f5c1a7",
      "End": "1fe49d56104c470189d04f223fcb9dc5",
      "Id": "5f4085616ce8435892df18836a4cd045"
    },
    {
      "Start": "34b0579e31f54ce794863127dc8151b0",
      "End": "5cc1aff11f904da48d24c999dfda4163",
      "Id": "7eba2cda037c44f5b6368185f3412fc6"
    },
    {
      "Start": "0eaf5e3e7ad740059cc193ca95097a3e",
      "End": "2b288fa1b703468598f9da0ea7463620",
      "Id": "78d3ba0652c9441b84b1a109e5c47138"
    },
    {
      "Start": "3e53bdf1bf4c445b9f17ba6060689ad7",
      "End": "bef19915cdfc40d9bc4cd10719bcf3d0",
      "Id": "8886353fe5774921955140e5c66ddc7a"
    },
    {
      "Start": "5251f328c2ed438c84be3e930618e52e",
      "End": "9f51a72dcfd6490bb85f06fe4db996d2",
      "Id": "fa800f90e77b4a0580e0bd28a60f6ae6"
    },
    {
      "Start": "5dd347ddfed74734be9787bf87290dcc",
      "End": "ce883030b16f4f0aa51dfed988d4427e",
      "Id": "d902c7212d874240bfcb700364af205d"
    },
    {
      "Start": "80d0eadca0b5454ca8737a466518c091",
      "End": "728bddf163be4ae8bf67e3a5154e59eb",
      "Id": "c883b6b301dd426aae52b5c3f3e9168d"
    },
    {
      "Start": "56f8307ebc634273a8da36b649bd7a0a",
      "End": "3656232e3d8848c0890d384b266dc76c",
      "Id": "ed4932b72658474db0173caafff5b1fe"
    },
    {
      "Start": "743804deff6a4d188e750bcb2c605b32",
      "End": "d0a675f9100e4b10ad008e34723670bf",
      "Id": "580c74673d3743afbce507157bc36dd5"
    },
    {
      "Start": "1a4f3d7abf6f4149b6abd88936293257",
      "End": "1538a713695549c29e514481885c2d65",
      "Id": "efec713c727e44b289afc5ee198819ad"
    },
    {
      "Start": "1a4f3d7abf6f4149b6abd88936293257",
      "End": "5b9ba65f8a4243449877e4d01993ddfd",
      "Id": "3cf29b9b6675465d909711e286d1566c"
    },
    {
      "Start": "bc53fcc6dec24805ad1c616a2ee4c7f0",
      "End": "d5adb864306f481abbabd7b5ed42e402",
      "Id": "02abe23d619d4a438a5c9351f70ab5c6"
    },
    {
      "Start": "a1efb28963b34746992cca1d6d2692a5",
      "End": "1a569aaf3a5543a0a7a9cc6ac40ba755",
      "Id": "4bcdec9eb8a141dcb639cf4c29073d7d"
    },
    {
      "Start": "c79892fc80f145e1ac571157afc092b4",
      "End": "790831dfb5824db592f9276dfd166169",
      "Id": "d818558c1f474cae9e00320a8b5280e6"
    },
    {
      "Start": "7974b0e062e2415eb8e4814ac865f74d",
      "End": "030930443f574bd38b6378f2a6212649",
      "Id": "e19230990d974220bae255452561f9f0"
    },
    {
      "Start": "7974b0e062e2415eb8e4814ac865f74d",
      "End": "05337569b1454444a766e4671994f88f",
      "Id": "49c0a0434b1a46d4bc9cd075dac346e1"
    },
    {
      "Start": "df3ffc9e2bc54f26bd69ca16ef3f2455",
      "End": "306a5070a7614b1fafb8aab7420719f6",
      "Id": "2d5b726ffc204d509ddc7fc1787b44e1"
    },
    {
      "Start": "df3ffc9e2bc54f26bd69ca16ef3f2455",
      "End": "6397bef8befc45cc813f49f0597d6f6f",
      "Id": "18529e2f12ef4fc6ab3c3c79d4a9e13f"
    },
    {
      "Start": "df3ffc9e2bc54f26bd69ca16ef3f2455",
      "End": "20c21707e5d644229c7a8a277d0c4451",
      "Id": "f06920e7c61f4c76b855604101e72e2a"
    },
    {
      "Start": "7ea173514ecc4b40b8ac2875228b452c",
      "End": "e472bbd78b9d45b1b6f6dcb1d7117be2",
      "Id": "42ae1e604a444205b67c8e1588f32789"
    },
    {
      "Start": "bf0b21977d39454c85894a4e1cf458cd",
      "End": "23b35835094047938011769d61ef6b38",
      "Id": "f81f371aa1c64dcd9dd1a9094e1db30d"
    },
    {
      "Start": "2a21a5c8f20543eba489334ce0f58bf9",
      "End": "790ea8d22cbc4ea0835f331199542f77",
      "Id": "9e832fafe4de40a1af6e3f3abcda29c0"
    },
    {
      "Start": "6ced3e5cbb704e5bb3a5f2aa98fd385d",
      "End": "afd195ed50f24a39a0a0e12fade0f37e",
      "Id": "5d1079b3e43e4fe090c0827bbbe047ec"
    },
    {
      "Start": "3375cd9e46e74a9ea685ddbb66ded5b6",
      "End": "b3e2a28627b946589cbb346cfe5ba505",
      "Id": "579cf4f65bb74703b0947c52a22b3ce4"
    },
    {
      "Start": "c953052d25b64a08a6cbf19b22724884",
      "End": "28d33424dfc64f80ab65737341f4a21b",
      "Id": "25a80b3ad78b47fc82188f54d0ecfe9e"
    },
    {
      "Start": "efee628e745d48e0a23d7ba8b480103f",
      "End": "f67115e72e1f4492831001282671489c",
      "Id": "78a3515625a049fd933a309822190bc8"
    },
    {
      "Start": "b742616457d7446d9c5792dfc4e17543",
      "End": "78d80c15d1a54005a0b38b3872712122",
      "Id": "516a04f4b95c4cee9a41b91661489fb3"
    },
    {
      "Start": "2ff65f62d2804fe4890c1696682a25a3",
      "End": "5d21a6b5e6b6475286fdcd9104fd79ce",
      "Id": "dfd99bf0d13e42469425accc5946c9c0"
    },
    {
      "Start": "a683ad365ff5452caace4b81864e9a22",
      "End": "9e6215c070ee4689bc8bc32dad1bdeec",
      "Id": "5dc5ed8ebf264e909be0c0a94912835a"
    },
    {
      "Start": "bb9f87ebae2f4045812c8311e62aff6a",
      "End": "8a7a48210b4e415abb47412908ca9190",
      "Id": "a1f556d141de40358d3d2e093358d347"
    },
    {
      "Start": "dcd3b3bb004e4e859da07ab6f10c58c0",
      "End": "d34e6a3e97d540d7b0d191ff95ed0f5e",
      "Id": "06e7fe4ef56642608711c9e34c58f2db"
    },
    {
      "Start": "d0eee9bb23514bb98fd5efb3e24670d0",
      "End": "df61081a66b44f9faadc76700c5d4d8b",
      "Id": "b207d204435c4ca0bba8e2d7c6f80718"
    },
    {
      "Start": "d20a8a435c864a6296b4ac13b385efee",
      "End": "421bdf3c2caa45ec9f0ebec9a5f63ed7",
      "Id": "55b1977419c442e3ae205cd99478b34f"
    },
    {
      "Start": "d44072b520a24c59b2ab275998fa5ef6",
      "End": "a97188a67ac24b2aa4c30d2cb20862b5",
      "Id": "2ad7b33e23fc44a4b6a534a41a0976a0"
    },
    {
      "Start": "bcde8d6cfe884966924c35b144f1e089",
      "End": "ea1a94a585834f3888bb7feafbf1d672",
      "Id": "17898f5e1d8d4731bad198408aa6ad5a"
    },
    {
      "Start": "7a6ca2a876964da2b9fed20ee1f3d7e2",
      "End": "49c6bd1ab48a47e7a4a0cd10d6c9ee9c",
      "Id": "550947d13ab740249a11c56e8ab1953a"
    },
    {
      "Start": "bc4274805a144e3ba2c0ec20a32ca406",
      "End": "116cb4050b444a739876936ae5d0ea7c",
      "Id": "0fc0514567754d1d922528bdb8de3c58"
    },
    {
      "Start": "2756475507514c1a95ee363dbd1da695",
      "End": "6ca612bd0ab14e8ea3ed0021d1017a56",
      "Id": "d092673e245d46698eab72f6a7aed211"
    },
    {
      "Start": "13c24d057ec04d8080b523bc2542a43c",
      "End": "880f1fd8302146d1aad910b4040f702a",
      "Id": "2430ef8e661c4df0811e7c104d0f7243"
    },
    {
      "Start": "63d14091c4bf4b6f87119d890e2c5a27",
      "End": "f59ee0164b9f49149b0fa39bc8205fae",
      "Id": "47ef82159b9c4d87ac4f9230b7599487"
    },
    {
      "Start": "e0fded7021914f23825c5d2d35aa393b",
      "End": "096248e3a98744e6bb1bc72f6377a5a4",
      "Id": "a92d4e47d6714e51b677caaa860945f5"
    },
    {
      "Start": "e0fded7021914f23825c5d2d35aa393b",
      "End": "b4a09c14b87640a58ac43bc9cfdc5378",
      "Id": "9cfc6713b7af4beb965da4fad934aecd"
    },
    {
      "Start": "c605580941804fc8973b35504679961d",
      "End": "763abc8a21cb4a2db3158f06a70f04f2",
      "Id": "3b621796568840a18825799719abbe9e"
    },
    {
      "Start": "7c67f50df1ab45e9822776155d721966",
      "End": "c5bff29ac5ab453ba907a569a7025b7e",
      "Id": "d2f66aca7c144e068945c21d50414bc9"
    },
    {
      "Start": "455aec9e76444f27add5209bbf8901d8",
      "End": "9b725af24dc94d719bc60c10b6e54473",
      "Id": "b8b12ca725264430986464f01582237c"
    },
    {
      "Start": "455aec9e76444f27add5209bbf8901d8",
      "End": "6694e2b048fa418e9b0936a5dc8b1495",
      "Id": "e46912f660654700b6a01811b9d0b3c9"
    },
    {
      "Start": "31c112a258314049a8939fdf67e7b817",
      "End": "60a7846d9ee44cf8917f36921c730624",
      "Id": "9f48a88f2b994a5f9d6aac0a00996911"
    },
    {
      "Start": "b3cde674ac2c4f6f972a0aec27a649e2",
      "End": "6058f718153146d99199e270e2aa5620",
      "Id": "b5f6908ce90d476a92f1ecaee2eb804d"
    },
    {
      "Start": "d5ea08d0a4c34c3f9abd9eb77aaba11c",
      "End": "e86d5886b97f4eb9b3d1d8e05d249b62",
      "Id": "df55efae04534cc1b444d980dd0032a6"
    },
    {
      "Start": "5f28ec8577f84a24a07d0e3667f28a67",
      "End": "be6c32018ef1453298b2b7bfe4ce0b26",
      "Id": "4759cf9abcee4ea3af0568eb88c639e4"
    },
    {
      "Start": "5d8d468b859f43a2a864ff9d7ad9d247",
      "End": "12e375d593ca40ab94c1d42e9f004d8a",
      "Id": "cdfa252004674c439d46357e3ac4ff71"
    },
    {
      "Start": "5d8d468b859f43a2a864ff9d7ad9d247",
      "End": "e11d85c323aa41788ea9f65e01560c47",
      "Id": "6a02ccf01772409ba237f5ca59bd9d04"
    },
    {
      "Start": "5d8d468b859f43a2a864ff9d7ad9d247",
      "End": "6c4e99021f9a4300bf554be570a7e133",
      "Id": "3b9bac01989e4d52b9e0eeeb42e5ceef"
    },
    {
      "Start": "28d83160acdd4198ad88fb74d0120ccd",
      "End": "5c8f4b270c234afb8d2336c67bd29e34",
      "Id": "8f531d4597a54b74af4d2538cf4b2fc6"
    },
    {
      "Start": "30fb2817d5654c3c95bba4d77cc48467",
      "End": "901fbcaa790b46b19124a15ac7c7ef79",
      "Id": "65267dcf3ba54d09bda328580bb030f3"
    },
    {
      "Start": "f1166bc96f2149519c08d67fd26404b9",
      "End": "df1fd211eeef4644a9c7e77dce8cc3d9",
      "Id": "d60b9bdf2ff542a6a78f318dc0539b16"
    },
    {
      "Start": "723df7ef19a0435999345b7516347b5d",
      "End": "0b9dbda5b16042528293a96a5f50f6ee",
      "Id": "8e2698095d3f49a98c3c42ce5b90af25"
    },
    {
      "Start": "723df7ef19a0435999345b7516347b5d",
      "End": "50913e27ab6f4d36995588ac6789dd8d",
      "Id": "ff79cee6dbb14e52a592c1601e54e5f2"
    },
    {
      "Start": "c478625ee31141fab868cc36600b8bfe",
      "End": "9485d64bcdc1405ba2108b2332dcd9cb",
      "Id": "75a7f449e88841778c4683ac21f50102"
    },
    {
      "Start": "8f45930c723d4dfb8f0597574c21fac6",
      "End": "8824703960db46819174c588ab82c336",
      "Id": "85eac04d0ae840458332a63bfbc4ada2"
    },
    {
      "Start": "ed33673358ef481485d3093e5b91cd02",
      "End": "e82da9b669504fd4ab66354012239752",
      "Id": "3a0d5751f07a46d69677dd29e5844204"
    },
    {
      "Start": "9a15946093ea4683a053fc6b7340b808",
      "End": "fd5d073649ba41009d4d37b4845fc7d1",
      "Id": "4b34bfc38afc401faca2a444fa6940bc"
    },
    {
      "Start": "c905567250d743a486311ae765dbe803",
      "End": "87e194dd5380490db5c1bf94b662469e",
      "Id": "bcdbe830db784608a80dbe5e4d9adcc1"
    },
    {
      "Start": "c905567250d743a486311ae765dbe803",
      "End": "76dcd1c071914368bc427973ebc2e8f7",
      "Id": "465064db93d94184a52ed71b224b0105"
    },
    {
      "Start": "c905567250d743a486311ae765dbe803",
      "End": "09a22b9d9c47483383869402e2fa1253",
      "Id": "6789c27713b049249b1a8e983050c963"
    },
    {
      "Start": "c905567250d743a486311ae765dbe803",
      "End": "fc521d55a4914c018c4801dd1ffbc066",
      "Id": "e99cd90ad72441cfb6e141f3e5dd4a10"
    },
    {
      "Start": "d41a7f29750f49f2b91352cc21fe31e2",
      "End": "49ec350b28a849ae822ddd354278b6ef",
      "Id": "a220cf48177a4e5e97c80cf1d8cc0c1a"
    },
    {
      "Start": "08d123ff7bf44226842750e06781a37c",
      "End": "85d9a08daa7c4d03bdceccee15bb7185",
      "Id": "5069a70b96bb47e0b6c922df8b3cc822"
    },
    {
      "Start": "be5f2195d1bc4c97a4fc4efc83b289b7",
      "End": "ddc8ba38f84744cf8a3b9147578b3af7",
      "Id": "c356f0acd9d8478b8dd213c76e3c6667"
    },
    {
      "Start": "d4a752c071eb48228c9e1e0a1442aa2f",
      "End": "a0c4a7f3c37e4af99f520f472d18038a",
      "Id": "f09ec7eaecf343cd9f1aeb2d31c1102c"
    },
    {
      "Start": "d4a752c071eb48228c9e1e0a1442aa2f",
      "End": "199e6341a48545b197660e64bef273b9",
      "Id": "5ed4385cec8f4e97bae7302b0f83c8fb"
    },
    {
      "Start": "c848e04644404d00bf467ac33800c67c",
      "End": "af2a7fae141841a592d09efcf8c8dfa8",
      "Id": "4129bfcedb1047568764919b5f0b3aa7"
    },
    {
      "Start": "32d69a982959405f80537eb7e00529a4",
      "End": "1efafe3420ca408eae103f19c26c10f8",
      "Id": "1a182083d27d4199b29b428d0ab93f4c"
    },
    {
      "Start": "d4b170870a004c949be4de2373e869ca",
      "End": "3e9924cf061d4d52a4ec46e87ce097d5",
      "Id": "aa8137c103324f21ab0a3b72dff02220"
    },
    {
      "Start": "8b5d86520d9c40bb86d503851067ad09",
      "End": "36fcd85678654d478c9d1647eec9207a",
      "Id": "8f5b4a58b8144a5da90ab540e0b42a9a"
    },
    {
      "Start": "d9195e9121d946d7863bb2d8dbdf5213",
      "End": "9b82e41100a748f8b0b6003d343d4dee",
      "Id": "669f9b7bc2c24887924140b74744733d"
    },
    {
      "Start": "d6459a96b0684e4ab56bb91678a596f3",
      "End": "fbe477997c7e445ea4ac577c7fb0afbc",
      "Id": "02daf4ea08314ac7a0144fb90a65efbb"
    },
    {
      "Start": "08dbdc1bf3924db5a106512c0417b7c4",
      "End": "d581637cb1764bf19dd067cd494f3799",
      "Id": "4504cafddf2d4eb08df1f3abf723f792"
    },
    {
      "Start": "08dbdc1bf3924db5a106512c0417b7c4",
      "End": "4d27844f45ed4c70934d561e28248ddc",
      "Id": "671968742a6948268b3bb630f05fac49"
    },
    {
      "Start": "c9c2800101284bc688f783e89d9f6db7",
      "End": "c3d47e7730c1451b9ffe784c141da3e2",
      "Id": "ff451f1bcbaf4fbcbddbb2196610209e"
    },
    {
      "Start": "f08f257b5a9640d3a074e302779c49cd",
      "End": "bebcb0d3419343358d990479127e5c66",
      "Id": "c6ee4f4a76ed4199bd46c5ee50c4f486"
    },
    {
      "Start": "f08f257b5a9640d3a074e302779c49cd",
      "End": "432112a4a69c4381ab0a393d9b247762",
      "Id": "3fa43d2ae9914c8cb75faa57879002da"
    },
    {
      "Start": "cb4e94fc4d6a4c0ab92a928dc7e87b95",
      "End": "8a0853681e884f8b944d704db67d52a0",
      "Id": "891dc2687db74764bac45d9dbb665ad3"
    },
    {
      "Start": "3833cd523b1c4a8680f778652f95787a",
      "End": "28bc329d12344c4da276cd91316462ec",
      "Id": "9750f22bb90c4607b224497686c473e3"
    },
    {
      "Start": "5296061a1d8741dda4f4f9af6e9cec74",
      "End": "c81909c379ec45fd84b0f30f14913c8d",
      "Id": "1fdc8767029243beb4125c3f06fd4b9c"
    },
    {
      "Start": "2fd33849f5d04a049a57d3456c865494",
      "End": "a14b78f3325a4742a44516400e7424df",
      "Id": "a86bfdd5c0f34f45b033ae72af455646"
    },
    {
      "Start": "2fd33849f5d04a049a57d3456c865494",
      "End": "6edb076b331c4f38955a89b6d33e113c",
      "Id": "048fa0e25c754daf9cdca55c2f00c1eb"
    },
    {
      "Start": "cdb3c0f6bcf04cd9b67831653f73e164",
      "End": "f4fddd3f421a4aafab6d36de8cf105ef",
      "Id": "1ef6cb99996b446392fec0bd2aff6d27"
    },
    {
      "Start": "cdb3c0f6bcf04cd9b67831653f73e164",
      "End": "1556067b32da4f71a7544d0dcf3b4567",
      "Id": "ed2198ea5b184ff0b66a9d64d37327c4"
    },
    {
      "Start": "cdb3c0f6bcf04cd9b67831653f73e164",
      "End": "9e00b47ccc5c4df8b58ab39a9b67d3f2",
      "Id": "3705dadd7b0849d5ab1198237bb5bcec"
    },
    {
      "Start": "a34725f464184f179aca32d246fd8ad5",
      "End": "2c9a813139834e1ea4ae03cf5785a381",
      "Id": "50f199771a554867957bcb0389a9d621"
    },
    {
      "Start": "a34725f464184f179aca32d246fd8ad5",
      "End": "a2fef6d8b48b4371a2c652b03a4a0141",
      "Id": "9688c740b09447738f3758755fe3918d"
    },
    {
      "Start": "a34725f464184f179aca32d246fd8ad5",
      "End": "f3c571befd7542e1a58947acf748470b",
      "Id": "e32361abcacb4630b87bc0ca5027d30b"
    },
    {
      "Start": "3c00515f38a341918b7100d26fb89010",
      "End": "4aa28afb3252467d945fcec13ee3c20a",
      "Id": "5c86c29016ea4ea983624249f900bd07"
    },
    {
      "Start": "3c00515f38a341918b7100d26fb89010",
      "End": "d6c1c006d2084ce6b663c5235a622dc2",
      "Id": "565e37e29d2b4cb69d17fe73cd71d750"
    },
    {
      "Start": "91bd03648ab544eba0bfc3d1ce61d5cc",
      "End": "cd634c5a0be447a4b7beea20f402a87b",
      "Id": "18bbdb531b9944ed832e6e39e5404f68"
    },
    {
      "Start": "91bd03648ab544eba0bfc3d1ce61d5cc",
      "End": "d9b34167b3224fbeba0a3b8c2f4a9409",
      "Id": "e805721d89224e06a6fe68df2492be4b"
    },
    {
      "Start": "da5d335513ab4bce9904bea133e437e5",
      "End": "2e78531b347c404387e171777b1d0da9",
      "Id": "857a965bdbe84e9f9d09345f5b55fbed"
    },
    {
      "Start": "3740d19f33be4ae0b17d876c5a2c2cb5",
      "End": "c986897911ee499096338d6e1e83d59b",
      "Id": "429edad0a8ee44dc9b1dded630829354"
    },
    {
      "Start": "f3ac603c54eb4798b8919bd4ac93627e",
      "End": "4f339f981dcf4107aaadc5399a8f4a67",
      "Id": "7b6a780620604b879ecf6521884b6bb4"
    },
    {
      "Start": "bdba91f8f9e64bc7b366df6959c0cb49",
      "End": "9b2cea4a9c3540a3bb6cb24a93ccfc6d",
      "Id": "c44c8c2744274866ad65451da4f77311"
    },
    {
      "Start": "1beca4d2320a410280a14f8c9bdadad3",
      "End": "d5c37296426d49df9d2bb619a971ae45",
      "Id": "0a142999f4e54a2fbdbff6f89e0b9739"
    },
    {
      "Start": "1beca4d2320a410280a14f8c9bdadad3",
      "End": "ae1373e5f1bd412cbbf5b00b704927b1",
      "Id": "f7cd8cd41af5484680eccc87367aeaf4"
    },
    {
      "Start": "fb964c9f31cb485d93460170a5e375d9",
      "End": "cd2d7f5ce6ec4d0aaf7465b63c42f1fb",
      "Id": "a5fc4c46b1ac497ca476de4ee7f108d0"
    },
    {
      "Start": "b8dc43b692ee4b2e92f826fecbe72c81",
      "End": "33a6140b61e34584982aaf720728183c",
      "Id": "2b9970b4def04a63be107a8b2c93805f"
    },
    {
      "Start": "526a9978e05944fb82dedb334c51f1a7",
      "End": "016819886c9649aaa61e275e31101fb9",
      "Id": "8a051816251d440e85c0bc30fe9d2bb6"
    },
    {
      "Start": "2beeff9181d3495e89af3a9c4d061a56",
      "End": "fd331fa028e04e8b90322c884f78d2db",
      "Id": "5c094584a6e843a592b7f076a1972621"
    },
    {
      "Start": "efa4edec53034a6485fab126acf5ac23",
      "End": "6f8503f933a6440ab98c59239a1f0b03",
      "Id": "447750acb40c40418f8e3799977317fe"
    },
    {
      "Start": "c4dd29a5b44c47f18dc67566485866a8",
      "End": "891e6344ee42483c90aad358bc2b1ffa",
      "Id": "7fd350fbd18e470fa3dd67a9fdbe5da7"
    },
    {
      "Start": "5eb5fbf8da5540c38897ee248ab2f7e4",
      "End": "e8d574003e55432482acbb91a001cdee",
      "Id": "5febb9a5a2944d5da1ef32df41bf8507"
    },
    {
      "Start": "73d8597ddad94a58ae06c85bca4cd006",
      "End": "c32bcda4984447229762abda421a9259",
      "Id": "a49bd3305cd141eb9b395c34bce08316"
    },
    {
      "Start": "a1497533080043e78a2bb17c20aa5a03",
      "End": "53e2f0e458cf4870a24a573fefa4a3b6",
      "Id": "1f7250181ec1458fafcc0fe6bbb415a3"
    },
    {
      "Start": "a1497533080043e78a2bb17c20aa5a03",
      "End": "9e0c88393a3b44c2b4782fb012d579da",
      "Id": "5c9ef0e706e24a5abe23e2b95ad35db0"
    },
    {
      "Start": "35ea5d8bc3d44408bae5cc1c5d4dd55d",
      "End": "a852d0a3d7564f5dae3082499c37fccb",
      "Id": "f47e9ea1e79642a9995d29c0fdcd77de"
    },
    {
      "Start": "e7c042752a6b4da5b4ce91ec1899a87c",
      "End": "85c9488f5b734d1b8b0cc7c3cecc09a5",
      "Id": "6e373944f0784e17a7991b6d7b334f84"
    },
    {
      "Start": "49826b8612fd4e7ab01412de20f89947",
      "End": "aa3e96c449dc407fa61876bbbabc499a",
      "Id": "93d4c02a68194b30a52af0bbc1861e0b"
    },
    {
      "Start": "3b972dd419d24d55815925a9cf431763",
      "End": "1b4fb19013e547f399a49854fc0e4a0d",
      "Id": "5fa2fa1c1a34486ea26d9852ef022bad"
    },
    {
      "Start": "2c018ef15c894c1d922b93f85cfe1f3c",
      "End": "b68d4242668c4852a0fd9d7a58c76143",
      "Id": "a7202b760d0d4192a8a14ca69130efab"
    },
    {
      "Start": "8417f08c95bd4675b0a1e5114f065685",
      "End": "b6fded98280441debfa54b9cc4590a36",
      "Id": "7950c847cf98443382294cbe7fb110e6"
    },
    {
      "Start": "88bfa92604954d1091564c80df4aacd0",
      "End": "e4fb7895ae3040c0a5a0d7277d6e90d5",
      "Id": "dd35a4f7ec5643d6937125ecba6e5716"
    },
    {
      "Start": "9f1344348da74285a88b6277f2db37d7",
      "End": "f0c44ab373c44f0b9c3fbe27c8e0209a",
      "Id": "a3e3b22a40fe49bb84c9cb66eb96d62b"
    },
    {
      "Start": "9f1344348da74285a88b6277f2db37d7",
      "End": "2924dd6c3d8540bfb1688b559775f3ad",
      "Id": "46b5aa3e51624506b86b61d816701adc"
    },
    {
      "Start": "2f51d44911524bb7be4570ef9937ac4b",
      "End": "35cbf047d0d548d7954a8a3888817d66",
      "Id": "b32c1b4985af428698aea59e7b65f9b6"
    },
    {
      "Start": "331dc7e8c7114eea8ba161db75fc5bc9",
      "End": "6e9f6a0ec32e4c4aba67c6f0cd982837",
      "Id": "3822c4baeed945678cff856f8104f7d7"
    },
    {
      "Start": "f1ec275ed18d49cb8552b84833d5a2ad",
      "End": "118b9e6e0b844c3f8eda5c3b132998c2",
      "Id": "80ff78dcbcc54021932550ba183e7a8a"
    },
    {
      "Start": "7bd4c030fce0434f9e2dd9221be2b625",
      "End": "a1a2b1e76dad481fa05b8a56f0aec96c",
      "Id": "2ab4ad92827e4e49933a2b4874a0f3bf"
    },
    {
      "Start": "7bd4c030fce0434f9e2dd9221be2b625",
      "End": "7e202ec33a8643b9b56bbbaca427e97f",
      "Id": "44c018e080d841168a7c7e1fed0c62cd"
    },
    {
      "Start": "8020989b20f7479ebdbab70aa0b98364",
      "End": "814d684adb3845688b6a80b80335a2d5",
      "Id": "fbc70b962ad64181bc280eabf22aab1a"
    },
    {
      "Start": "53cca12bc71943e0b931bdea93afccbc",
      "End": "6a4e1fd6d9d44f009a4976b1fe324c63",
      "Id": "32e58c09813c4845b9f56607e7c9d63e"
    },
    {
      "Start": "53cca12bc71943e0b931bdea93afccbc",
      "End": "16ddd721bb7c4ac099a60785df11208f",
      "Id": "9a7625c7709d429ba4c37c8bb3bbc15e"
    },
    {
      "Start": "952715b5546e499f928f08c732b0b9c5",
      "End": "9e8ead90ad2d4e3888f098f380ff193a",
      "Id": "e72e99725608410491b6c28fd687ee24"
    },
    {
      "Start": "960df475b29a4ebdb98f65d8151b7af3",
      "End": "3e87d42174b84e8faec6b8e59a37bdfc",
      "Id": "869f803d945148049978b1d715b06cc6"
    },
    {
      "Start": "5d291a48df84423c8db6b57087cf965c",
      "End": "74d620339e5c49f9a890972fe07f2b3f",
      "Id": "06f007fc4edf4bf49b2c3712dad4d7a7"
    },
    {
      "Start": "52d0743d4513430faf16386d8d5a0f87",
      "End": "232d931631ae4c69b503c4ab6c7c7bae",
      "Id": "a529224cd0404c61a2b2fdf137dbfc55"
    },
    {
      "Start": "2615914b0b854c96bf219564d4c57375",
      "End": "7a9178d929d44b09aeb6774d3992f10d",
      "Id": "2a693104e3be4272b5b6b2a5488bc064"
    },
    {
      "Start": "92549b47d70e4fc8889baa2301ba5a8a",
      "End": "93263404d06c43aba5437e8a305b778d",
      "Id": "d847534d95ed4671ac0ca5624bc82c74"
    },
    {
      "Start": "5a8eaec0862d41a8b5568af81652eea7",
      "End": "352963e8a6c743678724038f115a2f72",
      "Id": "e9a5e1872dae4114b54eb95cec41d9bc"
    },
    {
      "Start": "0fa914d7c20c44d9bd49b4441c940643",
      "End": "511ef8915143432494d2803e50f6ffef",
      "Id": "9e8faf7717d94f4189b40a51f3efce97"
    },
    {
      "Start": "2e044d3bfac74176a8a255c7de51bb0e",
      "End": "568ae147cbc446d09e96896b102c7513",
      "Id": "5c19e087dfee48bc90cefa2e63b465fc"
    },
    {
      "Start": "938a85eba19a4a18a97936b49ad3dec8",
      "End": "ca879994295647ad92924f5bf672a100",
      "Id": "82308d6dc36f459283598502cbae51a3"
    },
    {
      "Start": "40701dc397324acf8351e6ee10f29230",
      "End": "4d7e7b45cc8c4f9e96e53b46b728829a",
      "Id": "12000bc5a3594334aaeea7358c606cf5"
    },
    {
      "Start": "4fe4943772bf46beaebc2039fdfb83fc",
      "End": "55bd31c48f13419d82689c94a0279b65",
      "Id": "ed60440f3ad1432e9cd642a514686828"
    },
    {
      "Start": "9e0692bab7644ba9ab7f11a986b52d33",
      "End": "ef20729d5bb54fe6ba700dedaa394894",
      "Id": "41b23f96463241ac82c38b6e5c65ebd5"
    },
    {
      "Start": "25abe92f584c4dd9b33ec25bdaf011a1",
      "End": "e026df7f8b16461685141da481a140e4",
      "Id": "2eaa1a0e14384e268ab6014d435ad82a"
    },
    {
      "Start": "ce9c7605629e4d12ad372869728e1644",
      "End": "2b1be5d37781469496daaf78cff831a6",
      "Id": "a7c470f8a1dc4c6992fe029b76eb1c73"
    },
    {
      "Start": "3f81ee0c37204066ad2ccde0feb8a3c2",
      "End": "0acc08c70cde40ceae601e013c00538d",
      "Id": "76e03dbd24914ed7b9882d5114a2ceff"
    },
    {
      "Start": "29835503e3eb4f7aaa66a3400aa0bb7d",
      "End": "1f52353015f540b9bd02c3eb28739504",
      "Id": "41c23d3177c84021a8a85e312bf6d09f"
    },
    {
      "Start": "29835503e3eb4f7aaa66a3400aa0bb7d",
      "End": "0b890ba6b3c845f1abcbf5cf2a4c7f60",
      "Id": "a436d9d7c1f54f4c94f86138e6113a34"
    },
    {
      "Start": "12ff34b59acc43b8911e4d27c5dced8e",
      "End": "49164e1c987240d6ad97a80be69a50d1",
      "Id": "5be60d0bde914706a576bbdbbd066b53"
    },
    {
      "Start": "1ba26fcf720c4ba2b45653402155e5f3",
      "End": "39669951fb6448659b124f738ed85c79",
      "Id": "a808a6227a1448f5b3c94fc1d454c7ed"
    },
    {
      "Start": "365ac1552ae84d82b2e3060385cb32a5",
      "End": "2624df2706354246b00f6f0e7a48af04",
      "Id": "e361996903c244708255e9ac47c26ed5"
    },
    {
      "Start": "d779931f58c24040a6afb5d53e7ff5a6",
      "End": "a0a481862f1c4f3e88534e9e8c17391f",
      "Id": "db25d8956f02498ea1b25fe429084b70"
    },
    {
      "Start": "9a59592bf1564fc684cee02d3d65f607",
      "End": "7b25c26c5eff49e88a618ea5b2b17670",
      "Id": "4d46bfa702244a70828c8d84e2098e93"
    },
    {
      "Start": "78eb128e7ed84a2a956cea3ec26dcf5c",
      "End": "b5be33357d5e4e82a7549ebfedaa1c9c",
      "Id": "a5f74f95c0c34669ae2b0b518dd970ec"
    },
    {
      "Start": "bfa4b0044c6c435892d4f218e3b02eee",
      "End": "56bea303c25545a48cf95d6aa83b3ed3",
      "Id": "be82be5513154905a7310046850ced8d"
    },
    {
      "Start": "192bfe8470a2424684fadb2c34b69514",
      "End": "77f8ace0810d48c9bbcb2fb3194e593f",
      "Id": "1156c9bf56c943cc83e19ad89f5288b9"
    },
    {
      "Start": "0ebe063760cf472794c6e84636bd5e8b",
      "End": "f0311a86ebbe4839af6436b6d0b62584",
      "Id": "cd646a7274d1483daccef3e30f3ef87f"
    },
    {
      "Start": "a910b2a1337643a086a6696ea8500911",
      "End": "68266f5b3b4046c9b601b2039ed05839",
      "Id": "5fd40211fda342f0adb9a155a604cbfb"
    },
    {
      "Start": "e8a76acb4410456aae67d2f73278eb86",
      "End": "636d34cf08364043be859fc6b8a55c91",
      "Id": "9aac93065dc44591bf302b6308b08af2"
    },
    {
      "Start": "1c09d38e217349a593f2067cff60e354",
      "End": "8a914bc05368416a8ea8d16144d0b5d2",
      "Id": "aad70079e4f0490eb2b74c8b80a3be7d"
    },
    {
      "Start": "5dcef4e0f63d49fd873d7040b6c61569",
      "End": "d096f9b84e8a48828d9ba1fa6bc0b6db",
      "Id": "339f707b2d2f4221b793526ffaf850a2"
    },
    {
      "Start": "608ca108429b46ec88bb50b1b1b11766",
      "End": "2da2de75ba79479c9d9d275e1cd18fc0",
      "Id": "e66acd9cf4394bb99ab56711c92704c8"
    },
    {
      "Start": "4ecbe1d6c5214678b04a76f71b284919",
      "End": "407697bc3c6843b8ad7409621b37e914",
      "Id": "e0964c331c884c7385a12de2818ce493"
    },
    {
      "Start": "e0a8d41c4ba24bab86dce6d87a1c1a62",
      "End": "74efd0943bb64341bd29ae11b94f4060",
      "Id": "06755a61671f42e4b5fe52b7bedcf765"
    },
    {
      "Start": "e0a8d41c4ba24bab86dce6d87a1c1a62",
      "End": "b63d3c2325fa464d94858bf16c7bcd77",
      "Id": "9bfae0496d674a70b88f5fb9ab9bf9f2"
    },
    {
      "Start": "5362617d4caa438589a286b0ccddd456",
      "End": "109607e9c6824f079ab4827b21d73c25",
      "Id": "9b466af1b1a54b749a2813292978ef99"
    },
    {
      "Start": "13d8eb623fd64df1bcafe1bb2b67f5ea",
      "End": "362214ecee044b6c9b6f78b2f3bce9f2",
      "Id": "598295ba714f48448346293eeabaae2e"
    },
    {
      "Start": "ebb8f845380d42aaa6d90ec555d37e91",
      "End": "a0bcd9c1e96e46a5838d4c74b6d4356d",
      "Id": "28df9a8c3c0f4c119da468b2a8c08404"
    },
    {
      "Start": "a18e41eab7f14111be797fb748fc0db2",
      "End": "7f96caa12af64f4eac3663a0199b6a34",
      "Id": "46d4a90822284a0c99aebadfb009f0d1"
    },
    {
      "Start": "a18e41eab7f14111be797fb748fc0db2",
      "End": "1c8d1531144347d3988def7399436d21",
      "Id": "be6ba64f473c4369b7c3347fa0e0e031"
    },
    {
      "Start": "39aca522b7b74a3bb3fc8bd1e6070d7d",
      "End": "380105f37ed84ce6a047bda945e97f7e",
      "Id": "1b6832c734f1408fabe200f9cf9dc32c"
    },
    {
      "Start": "59678d9975ba438f914930d4fb35777f",
      "End": "c6ebdf4495664419bbc2fc6128967fcf",
      "Id": "f7fcac761f4840b69a8729863cb037f7"
    },
    {
      "Start": "cb26a646b19947d18e01378d5ce475ec",
      "End": "d2b8e972c7694a798cc3af8dfd8c17de",
      "Id": "7d6e45197339442e8fb024d3c0be0538"
    },
    {
      "Start": "bf7ec7559e8b4a3fb5758e1c44e271a9",
      "End": "5a0dc78d1e614a64a5b0fbf917cec958",
      "Id": "95958804d0c54c78a61deadb41de13f2"
    },
    {
      "Start": "bf7ec7559e8b4a3fb5758e1c44e271a9",
      "End": "5e3b531eb1314d33be6a4cfb5ca7a956",
      "Id": "a36046f9f7044108b7d29061e3718ba5"
    },
    {
      "Start": "8dc66aac700d4f5386114ce20802ed3e",
      "End": "d139801315ca473a9f0162810a2db147",
      "Id": "69178993913c414d929a6f80583cbb76"
    },
    {
      "Start": "8dc66aac700d4f5386114ce20802ed3e",
      "End": "5ab5c0cb89d74620a12405792ccc5689",
      "Id": "2642d016c88f41b181f8bc7dee7543e5"
    },
    {
      "Start": "8dc66aac700d4f5386114ce20802ed3e",
      "End": "9eb40d8cd89d43e1a6323a9e8491db6f",
      "Id": "be9c458a16a34b789e2664a4aa3016c9"
    },
    {
      "Start": "68082bcc31f249e2a9e3c81b27f496aa",
      "End": "35295e7f4d984d51af30b1b595168690",
      "Id": "689db09730714a2ab4a15c531faf04e6"
    },
    {
      "Start": "afe2addeb9dc4b469527a324ff445351",
      "End": "2d930309c3de43e79b8bae550bad23ea",
      "Id": "a76a3f6e3caa4979bb3ac398c66572ce"
    },
    {
      "Start": "9fa1f29ab2a3495c9c4dee28f1c014ae",
      "End": "ed314603e067433bba28b58abe65e9a5",
      "Id": "c59504fd8c654ee1b2cd4acf2c36aa8d"
    },
    {
      "Start": "756d2fcba7bb44718d4942799ea7136c",
      "End": "df8a19ed50164c19a18d4b08ed0a75e2",
      "Id": "1115b31bd84c40f593ce18e08a66ddbd"
    },
    {
      "Start": "4146b2a02bbe4cd5aef250d8e5f1e7dc",
      "End": "7751fdf0f1e24904be020953680d0c7c",
      "Id": "f9541a39690c46a592b9c2c31fb6e8c0"
    },
    {
      "Start": "138c12a074884b30b080304fdc568754",
      "End": "5ee520b42e52481da04ec4ceb8adaf97",
      "Id": "609d6f726e25417a9f187334ecb85b20"
    },
    {
      "Start": "30f3afa2f3194ee799bf6f9d65321d4f",
      "End": "e540b11b785c4ea1844e98d0c6ede092",
      "Id": "dc08157c1ef14bc887d11fdfdbe21314"
    },
    {
      "Start": "4a12f5c54cd64cae93c696851724b279",
      "End": "5111cef8feaf4e2594e629ede9dd38bb",
      "Id": "fdbe9f37cbe340aa8065751ecc9de45c"
    },
    {
      "Start": "3499806c46d54c3a9dc096dc1123bbfd",
      "End": "87f47cf58506482ea5f16b7c4b15b31d",
      "Id": "40e4fcee94fd49be94634c2aae583162"
    },
    {
      "Start": "e9946f52bb234b1b89a0d369fae9348b",
      "End": "331f390e18a14812aa59f00f12fffbd2",
      "Id": "5dbd106388bb4ca0a71b1b44a99f9f8b"
    },
    {
      "Start": "4607a0456d634ca1a0d71ebbb3bebfb5",
      "End": "f72b64bfd1014a19ad299d7c38836104",
      "Id": "ee71121cc51d4e5485b58a473a091bbe"
    },
    {
      "Start": "380992c6682f4aef9ebd636d89a23e24",
      "End": "ec0a0c3cec574c65b0a95dee01ff0610",
      "Id": "35563da4253e4ba0b04f732580a70e95"
    },
    {
      "Start": "fa613fcc101c4155b257862c50b25b91",
      "End": "fa2370b67e8a4122b01c80eb5f8ec22e",
      "Id": "8eb5a467c5f54223a6646bd3e484a60e"
    },
    {
      "Start": "1af762ba8af04b44a59eb8bfa966df61",
      "End": "715e15774c264021b354fe585420a83e",
      "Id": "d2da6199482e40ba9118ad012560fcc7"
    },
    {
      "Start": "9ce46f36bd7c48c88fb44f586f256993",
      "End": "78cfa811a9814040b597f2a4465f4aa6",
      "Id": "7bf1327932744fa3b3a2a6a04fa1230d"
    },
    {
      "Start": "12c02c8d4d4340d481b86536dcc4305b",
      "End": "aa030e9ee56e49e2acfea0c27fec320d",
      "Id": "ab0d48e9192241459bc5fae5b4fbca57"
    },
    {
      "Start": "e468538ca6da45149122468e87870473",
      "End": "7ad407398c94469f99f99e5e505d0f48",
      "Id": "475976d036e7414dac23dc2dfde809be"
    },
    {
      "Start": "87259eeb0c8942748eae24565b0884ee",
      "End": "f7f460c562214bc787eb186c9aa2ad16",
      "Id": "bce2ac4506c940fb8bff2014d3f2942f"
    },
    {
      "Start": "c255759da650496e8fdac9d47b92e966",
      "End": "76f707482816441793fccf8a6e13a44f",
      "Id": "300028870f034163a0afd378882e02c1"
    },
    {
      "Start": "30bc4c9e75ff4935a8118e3475ad9685",
      "End": "ef2c43a5350c47d6965ca64bfe023e2f",
      "Id": "8fc6f009af6e453e91ed797a636664a4"
    },
    {
      "Start": "2c52b5ba6a034a1aa968f7516095e304",
      "End": "ac227aceaa39440cb26b211c47075464",
      "Id": "2eb661f35c1744e5b49cd6fd8db31d74"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [
    {
      "NodeId": "678f81fb-21d1-412b-aada-a61347b0addd",
      "Binding": {
        "ByPointAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_678f81fb-21d1-412b-aada-a61347b0addd": ""
      }
    },
    {
      "NodeId": "3b60735a-1dd8-45ce-829e-4edbaf6d5bef",
      "Binding": {
        "ByPointAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_3b60735a-1dd8-45ce-829e-4edbaf6d5bef": ""
      }
    },
    {
      "NodeId": "b7b97574-7cab-4f3c-b93c-6da66768129f",
      "Binding": {
        "BeamByCurve_InClassDecl-1_InFunctionScope-1_Instance0_b7b97574-7cab-4f3c-b93c-6da66768129f": ""
      }
    },
    {
      "NodeId": "eda80823-7eff-460e-a8e8-f16abbbef02b",
      "Binding": {
        "BeamByCurve_InClassDecl-1_InFunctionScope-1_Instance0_eda80823-7eff-460e-a8e8-f16abbbef02b": ""
      }
    },
    {
      "NodeId": "39cd037a-20bb-4288-ba6b-b833d9261b32",
      "Binding": {
        "ByPointAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_39cd037a-20bb-4288-ba6b-b833d9261b32": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -45641.9140625,
      "EyeY": 128140.5390625,
      "EyeZ": 184538.1875,
      "LookX": -16066.85546875,
      "LookY": -192229.078125,
      "LookZ": -103657.9375,
      "UpX": -0.11559825390577316,
      "UpY": 0.65605884790420532,
      "UpZ": -0.74580419063568115
    },
    "NodeViews": [
      {
        "ShowGeometry": false,
        "Name": "All Elements of Category",
        "Id": "673601ec76ac433b9e3e5f6b7b27eded",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5920.7646958803789,
        "Y": 3463.7049398722024
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "d7d6cb718066400ba73a43b5668e6735",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6188.94583609408,
        "Y": 3463.00041136686
      },
      {
        "ShowGeometry": false,
        "Name": "Grid.Curve",
        "Id": "e492bafe5cc248d9be03d03418fb8ce1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5602.213029270607,
        "Y": 3615.3662246726226
      },
      {
        "ShowGeometry": false,
        "Name": "List.FilterByBoolMask",
        "Id": "bfc0009de53b4fce9a9ab3923bfc2448",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4038.4735783686674,
        "Y": 3463.7528019872916
      },
      {
        "ShowGeometry": false,
        "Name": "Line.Direction",
        "Id": "1a61e344483142889dafd2583283306b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5332.3281484032987,
        "Y": 3677.614374719732
      },
      {
        "ShowGeometry": false,
        "Name": "Vector.Normalized",
        "Id": "6692de8becbd440481d8d76e4a11c2a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5038.4003654255766,
        "Y": 3693.2812250752786
      },
      {
        "ShowGeometry": false,
        "Name": "List.UniqueItems",
        "Id": "98ad29c45a984e549d4e6f329ebbfc00",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4759.369174805779,
        "Y": 3792.110247241495
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "ad87295e3a61449a989f3c511cf36dbb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4562.9679397249674,
        "Y": 3793.5772395838248
      },
      {
        "ShowGeometry": false,
        "Name": "Vector.IsParallel",
        "Id": "28e60b1f6a334379a719c2ee5b64435e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4369.692133232219,
        "Y": 3667.2115280388789
      },
      {
        "ShowGeometry": true,
        "Name": "Grid.Curve",
        "Id": "03c98f6fed514959bfcfe547336a47fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3506.237096361514,
        "Y": 3794.4477753240371
      },
      {
        "ShowGeometry": true,
        "Name": "Grid.Curve",
        "Id": "49fc3d58d1d34567879e56462d51ca9c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3505.796187320544,
        "Y": 3951.8201069105367
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.Intersect",
        "Id": "7e5b5da9e2904adebe2f7931b5f0a7c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3233.6804133117148,
        "Y": 3824.684994664749
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "d2336d8e2937409aae87c6faa44d860e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3538.612145266382,
        "Y": 3251.226836267364
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d6d8e77a5d1e4c4fbe87c2019aa941d0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3693.76517549474,
        "Y": 3342.1594887568549
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "e1efa331633a45dea076bc1e0d577892",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3537.0306128209118,
        "Y": 3391.625704170594
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "d5fbec9dbbca43718c0b766184b7fb72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3078.9528323191107,
        "Y": 3230.4264850875848
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8e4294b9ab334318b0399a1fa6afba1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3190.5263131843008,
        "Y": 3227.7586999255477
      },
      {
        "ShowGeometry": true,
        "Name": "List.CartesianProduct",
        "Id": "eb655823b0bb4195bef7cca1b34c8dc0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2676.1006739911336,
        "Y": 3348.7262603781355
      },
      {
        "ShowGeometry": true,
        "Name": "List.CartesianProduct",
        "Id": "318ca9920c264e61a7c9ff823b800bcc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2945.2760090122956,
        "Y": 3899.4486180227082
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "37fd6b873b06451788f97c10d4debedf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2680.8495309393238,
        "Y": 3910.2001000325595
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "f351bfaeb18a464e8a4a8ee7e7dde710",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2084.4282122121349,
        "Y": 3567.2319441595823
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "a05c1abefe144426ab235ef0b482e1ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2345.0620731642152,
        "Y": 3441.7358075130414
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "75c6fd418fe3455fbadff5ed2389297f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2354.2096694549014,
        "Y": 3712.4508940215323
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "278ca1d2d6fe4789b4bc2e937d2e5855",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 209.20629855498555,
        "Y": 83.3044659603504
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "c5923389b68044618b879d6823c0b6f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2368.2443881353925,
        "Y": 2183.6139453555779
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "8611bb7a0ca24adca00c24ac3195ca2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 578.84405123810757,
        "Y": 79.773612203576249
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "fe39a321f01f4323a00f1cf7fa13ed8f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 154.449895331476,
        "Y": 170.92318334239712
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "58f9590b14804cf2a2a3937cbd972df1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 193.69728307307651,
        "Y": 283.57622712066427
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "b5155a0f2ef4467e96db680d1561607f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 974.22762729744682,
        "Y": -140.74930509204751
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6dfe31ccd7ed4d409a901ec932871289",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 845.4177707820013,
        "Y": -36.74483275085413
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "086684ebea154a92b26318417f7076d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1236.4631582957145,
        "Y": -42.5137046632567
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "cf4cc24ba02f419bb7230ef0163370cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1365.2730148111646,
        "Y": -146.5181770044469
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "338e7ab5651042f898556a328dc2498b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1722.6894080344446,
        "Y": -361.3688291534736
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "29f4cb5c0a6d4beb98a4ae923f5ef1f6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1559.9219885826224,
        "Y": -328.65999855740665
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "72b396a81da142c98cbbf530143b8092",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1614.5629117783478,
        "Y": 91.739013695183075
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "ed466c7c77514ae8851c7161a949a808",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1747.7295100871138,
        "Y": 42.352362160977918
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllIndicesOf",
        "Id": "bc3994b6e7d34f43804756ebd3510dd9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2366.4118004927609,
        "Y": 60.320542317121181
      },
      {
        "ShowGeometry": true,
        "Name": "Object.IsNull",
        "Id": "5d5cc409823b457b9d63cf52f9dc5db2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2013.1019588858362,
        "Y": 60.429718082596537
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "25af2bf415f6407699cc0a26ae9cf6cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2209.197314066485,
        "Y": 122.47591062402898
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "771300a8f3a5435eb60d3feea498815d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3051.7748032055624,
        "Y": -85.887155573125256
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "e88fcd2868784fb9a05785bc7ed30faf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4010.6623608307154,
        "Y": -195.53823087297542
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c66361feb2654ae1af3e5b3d16f225bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3840.3752016578355,
        "Y": -245.59212116924823
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "789089c152134a9fbcd08e993cc8fca4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2634.1283678950344,
        "Y": -160.70435761274803
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "e20eeaad2632476592189ff1712b21c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2917.1535157133708,
        "Y": -359.34139371337415
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "3622b430d2f1439d88a3872de2564769",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3696.4213775816565,
        "Y": -133.13240320439081
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "e860efc5b6274749ba12e715c0d991f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3282.4068509141339,
        "Y": -150.46703952460757
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "968ac618108c4c3c9a72002d50b77da3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3458.187071273037,
        "Y": -137.367082663764
      },
      {
        "ShowGeometry": true,
        "Name": "패밀리코드_전체",
        "Id": "42fb371573f143699cf492dadac8997a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2496.27691584597,
        "Y": 257.17435456598764
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "86fcf2b613094bac963d0c476314ff37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4026.4012911920863,
        "Y": 251.67470377916425
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "ed1dd2daee03434a9b8a74698fc98d9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4740.485436351325,
        "Y": 20.980460673161815
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "1227d5c26b754ac7ab2520d8f9b074ac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4247.27427246812,
        "Y": 251.14082505765373
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "6789a03e2dbb4b51b89e2235e0233fda",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4262.4004194104555,
        "Y": -191.40861561510724
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "028e47e931894f288ffcff0ea7c0f285",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5426.4119205246971,
        "Y": -712.24191193624426
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "89511309785d40ec9971431296a6208b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2908.0403605014085,
        "Y": 6.4462605249807439
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "486d451ddb024b738b86a0ed3ab3eeb0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2798.1219386824459,
        "Y": 76.718704686729552
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.ByPointAndLevel",
        "Id": "678f81fb21d1412baadaa61347b0addd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5955.6295412614891,
        "Y": -445.87805707328221
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "3e774b7803914d5695c35b64b90c499c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5633.6295412614891,
        "Y": -293.87805707328221
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "23df07ab070f49a2ad543ffb14c5d455",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5094.6806324035861,
        "Y": -504.0991387150018
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "d3e2bfceb5bd4f58a34c541a60e05f5f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5473.847279488542,
        "Y": -483.20120350893262
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bce5f605b8c04590838965d18c31b642",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 849.66135176743273,
        "Y": -699.27107800473118
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "1071bc156c7446c09d265b5e910c0c78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 230.81228101003217,
        "Y": 2201.7572740198657
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "5822113072a949df95b2c4159245a7f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 600.45003369315418,
        "Y": 2198.2264202630918
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d3677c80f763415ab9c8e44b5697e60d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 176.05587778652171,
        "Y": 2289.3759914019124
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "ade99939808d49c195717913e428f2d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 215.30326552812312,
        "Y": 2402.0290351801796
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "87ca74d879eb469b95a2121f2fac8964",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 990.325884603918,
        "Y": 2015.0446944746411
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "1a1a0e07997e48e3a37d0b91c3d15a32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 861.51602808847292,
        "Y": 2119.0491668158347
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6d9ec546d5134350a79d68a312151930",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1252.5614156021811,
        "Y": 2113.2802949034322
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "f26e7bdb97c5437e9c489ad2438cebf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1381.3712721176316,
        "Y": 2009.275822562242
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "19ef3fd0dfad4a449786400d026d9bca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1738.7876653409121,
        "Y": 1794.425170413215
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8506cc01f3804fb58157f89446c21cd9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1576.0202458890917,
        "Y": 1827.1340010092822
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e398e48a451d49aeada6ba9a05306df3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1630.6611690848213,
        "Y": 2247.5330132618719
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "3bc7af86db7a4bbab4b020b8587c90c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1763.8277673935818,
        "Y": 2198.1463617276668
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllIndicesOf",
        "Id": "56a9f84604f74967b20f7b84ca79274c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2382.5100577992316,
        "Y": 2216.1145418838105
      },
      {
        "ShowGeometry": true,
        "Name": "Object.IsNull",
        "Id": "1cd2bfbb43414ca3ac35136c235dd38a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2029.2002161923115,
        "Y": 2216.2237176492854
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "8fe3d43c185b47ba82f59857c51bc7d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2225.2955713729516,
        "Y": 2278.2699101907183
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "e3c249cfaa8442e6badfe2109cdc2d17",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3067.8730605120318,
        "Y": 2069.9068439935636
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "510a37a387e442fc9beca4e8124d0f0c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4026.7606181371912,
        "Y": 1960.2557686937141
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bbb480d69c4245f588ec4d40b26cf6c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3856.4734589643112,
        "Y": 1910.2018783974411
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "99833781fc6444c5a0b07fe9247dae43",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2650.2266252015015,
        "Y": 1995.0896419539411
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "d8cd22ec5f2a4b128ad213a633ff084d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2933.2517730198415,
        "Y": 1796.4526058533152
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "b2b17061d6c14c42a56fd92ad2ec70de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3712.5196348881318,
        "Y": 2022.661596362298
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "4ac0408cdd864470af33d84ef857f8ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3298.5051082206014,
        "Y": 2005.3269600420811
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "49e342a8eb4a43a4b44692c580d0be53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3474.2853285795118,
        "Y": 2018.4269169029251
      },
      {
        "ShowGeometry": true,
        "Name": "패밀리코드_전체",
        "Id": "7a4c2b6b4f1a4c119de399aa511dfbc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2512.3751731524417,
        "Y": 2412.9683541326772
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "8811ac063e9f44c0a8ab812085e91d8e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4042.4995484985611,
        "Y": 2407.4687033458531
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "ff79032e3c8e46c3a0bc0fcc77adb5cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4756.5836936578007,
        "Y": 2180.9454032433041
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "491ea189a2c644bf9c9ebc91443a5013",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4263.3725297745914,
        "Y": 2406.934824624343
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "ca93d2ad90b84d45a2755c67aeee268f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4278.4986767169312,
        "Y": 1964.3853839515821
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a1a0b6f675b244bb97c3497919016784",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 865.75960907390436,
        "Y": 1460.693864565412
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "262f4479c17d464d87e4b3cf3a03a053",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2924.1386178078815,
        "Y": 2162.24026009167
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ac45ad2016724b259da8fae19f516829",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2814.2201959889217,
        "Y": 2232.5127042534186
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "45a710f9570b41deb75d5f9977aa660a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5470.5855913269143,
        "Y": 1471.2236127833785
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.ByPointAndLevel",
        "Id": "3b60735a1dd845ce829e4edbaf6d5bef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5999.8032120637044,
        "Y": 1741.1400674836711
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "3709f44a92e2435f9c6f741dd77e31bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5677.8032120637044,
        "Y": 1889.5874676463407
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "adaa84e3b93c43398236dd5cab788d95",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5138.8543032058042,
        "Y": 1679.3663860046206
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "73c945a9fa524d359acdeba94580cf8e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5518.0209502907546,
        "Y": 1700.2643212106896
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "8cbbc359ccb64f7a9b507b742cdbfbdd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5429.53220184367,
        "Y": -78.534438719743
      },
      {
        "ShowGeometry": true,
        "Name": "List.UniqueItems",
        "Id": "41d6b7b32f284f21b80b41763ea3c465",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5807.4077374905446,
        "Y": -200.18069196512607
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "7019ab3007d44318b739805072303664",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5951.0802703766758,
        "Y": 671.60915882898416
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "16510e2de69f47a49ba43042e654baae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5676.2848533197248,
        "Y": 745.45191754011682
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "465e61dc17dd47d595410d1f651691a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7296.0688301198152,
        "Y": 1508.4108579547594
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "748652dc1ba1436dab2b11a782f17567",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7061.7401336835019,
        "Y": 1630.3216004917053
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "94b2cdf89da84a17a17762bbc938bf0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 249.21624052929428,
        "Y": 4409.1242269488448
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "d814e6ebeb004f148c2e63ac7de91c14",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 618.85399321241584,
        "Y": 4405.593373192065
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a1d9888d9aff4a3f97a3e3f2b30237d9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 194.45983730578428,
        "Y": 4496.7429443308847
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "ef2d57ea61844b6597e88afaca885378",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 233.70722504738524,
        "Y": 4609.3959881091541
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "f07240d1878e43179ec70987777c65cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1027.9133814568204,
        "Y": 4572.0249192754845
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9502f7d48b0c40ce9a44f9ad636982ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1943.5706119863489,
        "Y": 4975.9412419297714
      },
      {
        "ShowGeometry": true,
        "Name": "List.RestOfItems",
        "Id": "9756d83a96f24b618b938fae6ca285cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2724.6912614598723,
        "Y": 4893.5443317614126
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "3a64a31dae714e4d9479a1ae94e14840",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2154.5706119863489,
        "Y": 4971.7279085964383
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "20dfb49d8e8a42ffaa5a986d73f4fb56",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2389.5706119863489,
        "Y": 5010.7279085964383
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c11aec17d7814c579439c2fa3ea5810b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2154.5706119863489,
        "Y": 5079.9412419297714
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "7485029b2a9d41eb864ef27ca763d239",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2719.5706119863489,
        "Y": 5010.7279085964383
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "94ae163ad6404a9d86842a37a09d9ecc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5869.5706119863489,
        "Y": 5030.9779085964383
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "c6ceb57fccdb4103ac1d2255047262c7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5218.2473979701517,
        "Y": 4866.7580887820677
      },
      {
        "ShowGeometry": true,
        "Name": "List.RestOfItems",
        "Id": "2b6adf1bd3e24587b7db05d7d9ffc614",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2982.5706119863489,
        "Y": 5053.7279085964383
      },
      {
        "ShowGeometry": true,
        "Name": "List.RestOfItems",
        "Id": "694d5991420f46b09ead6e1d7eaae9ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2987.6912614598723,
        "Y": 4936.4193317614126
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "dd965f4d137b407a872af5aaae948e2a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3263.2150002556814,
        "Y": 4984.1010352198482
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "2c56a8a7137d430f8899ba16b7013d00",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3554.7607479264975,
        "Y": 5166.5184714493253
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllIndicesOf",
        "Id": "436f8ddeb9494ae49be731d93dc8e90c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4138.9262237170169,
        "Y": 5233.6628597186582
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "449932a843ce492da2f550938dfed2a8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3877.5706119863489,
        "Y": 5212.6912419297714
      },
      {
        "ShowGeometry": true,
        "Name": "Object.IsNull",
        "Id": "29f43c5ef7d74b1ab44050c12d93de93",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3866.7484178516825,
        "Y": 5311.302063170062
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "02496919c7be45e6aff2ac66f8fff96b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4441.1533498816079,
        "Y": 5165.576549194956
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.RemoveKeys",
        "Id": "bac1bd7089ad466dbb9985ab2428764e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4726.1656799564234,
        "Y": 4965.2189770253308
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "4aed288d5dea46e7b47b3db5692212f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5067.5706119863489,
        "Y": 5084.9779085964383
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllIndicesOf",
        "Id": "cb72d56e17554705b807f01c8c0ce0e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5302.5706119863489,
        "Y": 5123.9779085964383
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0f389faae4024b108f7e1f2a72830442",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5067.5706119863489,
        "Y": 5193.1912419297714
      },
      {
        "ShowGeometry": true,
        "Name": "List.RemoveItemAtIndex",
        "Id": "ae3d8c73306c4403978460429b501a2c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5591.5706119863489,
        "Y": 5097.9779085964383
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "36c98d1e318142b9ab77c7229584313d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6238.0102526621749,
        "Y": 5220.2655270686009
      },
      {
        "ShowGeometry": true,
        "Name": "List.Sort",
        "Id": "1484bf79953f4ffeb6f50d0e86072d9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6556.0102526621749,
        "Y": 5220.2655270686009
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "9122013fe57441e5939932c67943f979",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7147.0102526621749,
        "Y": 5240.2655270686009
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "36af5b3c3f614abfaec368feae2d207d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7628.2917515791723,
        "Y": 4261.3317283431552
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Keys",
        "Id": "287e9e4bb5114bd3aa0eb7a47fb381c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8435.157714566647,
        "Y": 4075.6647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "String.Contains",
        "Id": "073d48c9a5ac447285c1189f6cab9534",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6838.0102526621749,
        "Y": 5266.2655270686009
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0b71b6be803c4e3bba11f39aa2dd8f0b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6556.0102526621749,
        "Y": 5329.4788604019341
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "8b6e8ea85e374168a8f2313cfe360770",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10050.157714566647,
        "Y": 3959.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "896400266f3f48339a437effc7268ce7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9783.157714566647,
        "Y": 3919.3780633447896
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "a7ba68d1093443fe98ec5bfde7f294b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8147.6275962181762,
        "Y": 4295.5501798810674
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3f333b66fc5f4e50a8c2f102cb6f7ae4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7961.404589958629,
        "Y": 4360.4038084032309
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "056f066642c54bdea3c7421d9adcff40",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8741.157714566647,
        "Y": 3988.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "List.LastItem",
        "Id": "d829064239df4922ad4c51b8e1024121",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8753.1414700999485,
        "Y": 4672.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "fa19c25853ae4887b66c9fdb7e863cfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8741.157714566647,
        "Y": 4096.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "aaa071c53bb44f82abaefc7e7a1cb68f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9012.157714566647,
        "Y": 4029.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "0650b9e6bc0b45b2a2724e55b62c6d42",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9296.157714566647,
        "Y": 4029.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "d1d5e1ee1c844dfca3c0f7951ec0baf0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9516.157714566647,
        "Y": 4029.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "ecd48b382628464688b6d2ed7c77f199",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9783.157714566647,
        "Y": 4029.1647300114564
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Keys",
        "Id": "a4589a4c79df435c82296232c60047a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8447.1414700999485,
        "Y": 4759.982955192424
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "9f2b6e7f32c34781b0605963f54c9dbc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10062.141470099948,
        "Y": 4643.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "566959261ad24ef890f146098d1f13d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9795.1414700999485,
        "Y": 4603.6962885257572
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "ca31dd1db2b048fe8ba2f3629bd51ff6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8753.1414700999485,
        "Y": 4780.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "ff56bb10e8354f08a5e652db78a4f274",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9024.1414700999485,
        "Y": 4713.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "58ee5ac75c624ed9a1c983c04b526034",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9308.1414700999485,
        "Y": 4713.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "2382302a738144d98c7d20f85b9aaba6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9528.1414700999485,
        "Y": 4713.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "f8aceda9bf894b149133621afeb7593c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9795.1414700999485,
        "Y": 4713.482955192424
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e69b777b048149559a52027611e35357",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9967.589071594708,
        "Y": 3672.0578047498484
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "92049fda6ebc47a2b82e239bfabdf96a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10441.557232304169,
        "Y": 3829.86573221635
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "0c0073f590ff4938802c54895abae2c7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10449.028908799697,
        "Y": 4477.8428814475837
      },
      {
        "ShowGeometry": true,
        "Name": "Line.ByStartPointEndPoint",
        "Id": "94ecee0408db4f338d729df2a934a053",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10961.472353687002,
        "Y": 4132.73140515679
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "b53739499f9e4309b1bd0f88d89a26fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7473.7089281176795,
        "Y": 5690.5980382340895
      },
      {
        "ShowGeometry": true,
        "Name": "List.RemoveItemAtIndex",
        "Id": "a0c702d75bdd47129772afaec9825b94",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5572.2110292503367,
        "Y": 4862.1752571509414
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "04760e0f2df54afcb0933ce3bcfc6a9c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8216.8047883666331,
        "Y": 5709.4331203949805
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "39c6832c1bd54641a7621fa4a8393bf5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8036.6089781801647,
        "Y": 5641.6884353095784
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Keys",
        "Id": "b680bc7e08924687b5f2f8fdeb764f3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7792.2194056978224,
        "Y": 5754.6572262582959
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "ce4f034051cd421d8476eb74da393753",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9969.401623708236,
        "Y": 5260.392267461385
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "24f7d10883244119b63775f16146c852",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9969.401623708236,
        "Y": 5151.0322674613844
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a323d5dcfb1443bb82e1925bf978ab37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10232.401623708236,
        "Y": 5199.0322674613844
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "fd5a8d9e2af0472aafa474ee87d16d52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9972.96209520728,
        "Y": 5696.8465002508483
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "87577d701c3a49c396e66b3ae494d451",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10229.96209520728,
        "Y": 5744.8465002508483
      },
      {
        "ShowGeometry": true,
        "Name": "List.LastItem",
        "Id": "5ac67a17167d4686b9462a48164bdfde",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9972.96209520728,
        "Y": 5806.2065002508489
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "ac8e2bdabdd946abad7a7647e6b7c666",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10731.751560086866,
        "Y": 4661.8920922459383
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "0b0331ff405c4d72979cc6039228de4e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11253.008787482666,
        "Y": 4675.1557775395768
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "301925774d1542b1923020975ecfd0f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11488.350147760893,
        "Y": 4515.8368200531031
      },
      {
        "ShowGeometry": true,
        "Name": "StructuralFraming.BeamByCurve",
        "Id": "b7b975747cab4f3cb93c6da66768129f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11780.173282670914,
        "Y": 4366.6574208374068
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "42c3de1eb88b40b9b59c11eb0d71db4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11542.659413558875,
        "Y": 4287.1197414639564
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "31cebb0784254d57808f132a496b85a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10987.987369522585,
        "Y": 4673.4389127188088
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "156951c2a5c444a38d90e78ca542deb7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10631.613995103486,
        "Y": 5365.2681342475653
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "cc6a10f3ea604760b325d08c643c12bf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10632.560717841119,
        "Y": 5566.4465481430816
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Values",
        "Id": "5c2b9fd34a6e40ff9a65f7c78e4bfc89",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10871.039546264807,
        "Y": 5798.6928111534307
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2bc6bd4b43a1454493d6f2dcf50496d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10505.446181857351,
        "Y": 5030.811696584301
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "c01c30eb41a94fdea6f81991171812bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11038.597511311857,
        "Y": 5060.0443244576809
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "c6b23dcc29604b53ac8f1261f3edf179",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11033.306729950606,
        "Y": 5531.4536640292845
      },
      {
        "ShowGeometry": true,
        "Name": "Line.ByStartPointEndPoint",
        "Id": "3b4bc38b23494f98a52c29b26eed2237",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11487.871962459367,
        "Y": 5357.5194121215127
      },
      {
        "ShowGeometry": true,
        "Name": "StructuralFraming.BeamByCurve",
        "Id": "eda808237eff460ea8e8f16abbbef02b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11879.807727532771,
        "Y": 5577.8992956633147
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "143e8dbdb02045339443efb4a440f6a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11549.984711739027,
        "Y": 5818.2784090000168
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "38322b9eedf9459385c40537dc4f0297",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11642.293858420782,
        "Y": 5498.3616162898661
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "3ccfd979f93f4f9fa0ec155f24454f28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11241.285417919516,
        "Y": 5846.0192052763168
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "d4bac440625041a29e2ca208d0aa2c55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5991.5627697659465,
        "Y": 8561.9932824395837
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "ec83ee3844ac48018a10900f1d62d8e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5259.40403093579,
        "Y": 8776.0444692075835
      },
      {
        "ShowGeometry": true,
        "Name": "List.UniqueItems",
        "Id": "e349a3d1bc594f0f8ad03c0dbda05250",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6326.326332075,
        "Y": 8554.8833165692959
      },
      {
        "ShowGeometry": true,
        "Name": "String.Join",
        "Id": "7564bb75178547869e910182a4ab0949",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4529.58095541518,
        "Y": 8559.5257776614453
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "279731fcdc074b2aa2c9531a74d36bc4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4359.2937962423,
        "Y": 8509.4718873651727
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "94e8da616ac44becacebe3d43e5c33af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4545.31988577655,
        "Y": 9006.738712313585
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "0df43584ae5743829980ccaa7bfafaa8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4766.19286705258,
        "Y": 9006.2048335920736
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "2cee4fe7ed3a4799a0b7f1c5d14e7479",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4781.31901399492,
        "Y": 8563.6553929193142
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.ByPointAndLevel",
        "Id": "39cd037a20bb4288ba6bb833d9261b32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6474.54813584595,
        "Y": 8309.1859514611388
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "b117653f433a4edd993b10341a069134",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6152.54813584595,
        "Y": 8461.1859514611388
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "1af9893e3a534985924385ce2a4c6852",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5613.59922698805,
        "Y": 8250.9648698194178
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "6d427be34fc44d18a7c73b50cc5a1839",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5992.765874073,
        "Y": 8271.8628050254883
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "7607b7205fe34a348092cd0707cfe856",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1493.1462218819072,
        "Y": 8614.3147034423746
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "7e65e418a7e74c37b751d01597c1a55c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1755.38175288017,
        "Y": 8712.5503038711649
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "5637a3259569401da164d3afc3407aea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1884.1916093956202,
        "Y": 8608.5458315299729
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "eee6e54586984c48b3148b1238123960",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2241.6080026189,
        "Y": 8393.6951793809458
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5b0b2fd41cf64169b5fe6c174e0e5042",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2078.8405831670802,
        "Y": 8426.4040099770136
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9a13617f47284e00b963b48cc8478f8b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2133.4815063628103,
        "Y": 8846.8030222296038
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "3ed69d38643f449ea2327f9b7fe4337d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2266.64810467157,
        "Y": 8797.4163706953987
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllIndicesOf",
        "Id": "4744622aa2264b0db3fc950c239573df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2885.33039507722,
        "Y": 8815.3845508515442
      },
      {
        "ShowGeometry": true,
        "Name": "Object.IsNull",
        "Id": "3bca664e305a4c5b96496dcee704f522",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2532.0205534703,
        "Y": 8815.4937266170164
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "36ebb68d73cb4f84a3c1e04a443c9cc0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2728.11590865094,
        "Y": 8877.5399191584511
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "b8a5d9a97e58401fa0adf52ff9a5b4c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3570.6933977900203,
        "Y": 8669.1768529612964
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "6a4761cb56794133b7ed19059b9b64b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3153.04696247949,
        "Y": 8594.3596509216732
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "9a296e3c196147858d1dc203d2b42ba4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3436.07211029783,
        "Y": 8395.7226148210466
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "d4f99920acb74f4f942d20df8e31b87a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4215.3399721661208,
        "Y": 8621.9316053300317
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "fbf169f8d23f45369a698194657798f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3801.32544549859,
        "Y": 8604.5969690098136
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "01ff51b661214395b3f8c15a8fc521c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3977.1056658575003,
        "Y": 8617.6969258706558
      },
      {
        "ShowGeometry": true,
        "Name": "패밀리코드_전체",
        "Id": "73aa8072ce8544efbaa64ba4b616c11d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3015.19551043043,
        "Y": 9012.2383631004086
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "28b1da4b28bb42ff896a69481ab8ee71",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3426.95895508587,
        "Y": 8761.5102690594031
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "fe00cee549cb414b85332d93a793f605",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3317.04053326691,
        "Y": 8831.78271322115
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "88e3a316f6474804ad7e583a7a6f3405",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5945.33051510916,
        "Y": 8042.8220965981773
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ce5ce443cbd14570bbff77ddd994d0de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1364.336365366461,
        "Y": 8718.3191757835666
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e1f3873b48ed4a7793680d9734c4bb0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1368.5799463518931,
        "Y": 8055.79293052969
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "1a8083fbf0df492485e905b51e9ec693",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1097.7626458225682,
        "Y": 8834.8376207379988
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "1834a85ca23640a5ba710d4ed9df0e50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 728.12489313944616,
        "Y": 8838.3684744947714
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a1c0fa1ed80f462f8e76424ab71fd245",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 673.36848991593615,
        "Y": 8925.9871918768185
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "de7906458d1a4ea093c1096012671df0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 712.61587765753711,
        "Y": 9038.6402356550861
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ByKeysValues",
        "Id": "f723d73854034aa1abb21219798611e1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6410.8228162803753,
        "Y": 1172.3553745866864
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.ValueAtKey",
        "Id": "e6ddc3f7f2674a6c9b376fbe8d5780e2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6947.5856183660835,
        "Y": 1139.8703498233067
      },
      {
        "ShowGeometry": true,
        "Name": "Dictionary.Components",
        "Id": "67f65959baaf48ab8796fd5ce2d4e54c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6384.8332291661254,
        "Y": 599.37498971519631
      }
    ],
    "Annotations": [
      {
        "Id": "b82d09061f7a4b3aa9cf011667863723",
        "Title": "교차점들 그리드 이름으로 DICTIONARY화",
        "Nodes": [
          "03c98f6fed514959bfcfe547336a47fb",
          "49fc3d58d1d34567879e56462d51ca9c",
          "7e5b5da9e2904adebe2f7931b5f0a7c2",
          "d2336d8e2937409aae87c6faa44d860e",
          "d6d8e77a5d1e4c4fbe87c2019aa941d0",
          "e1efa331633a45dea076bc1e0d577892",
          "d5fbec9dbbca43718c0b766184b7fb72",
          "8e4294b9ab334318b0399a1fa6afba1c",
          "eb655823b0bb4195bef7cca1b34c8dc0",
          "318ca9920c264e61a7c9ff823b800bcc",
          "37fd6b873b06451788f97c10d4debedf",
          "f351bfaeb18a464e8a4a8ee7e7dde710",
          "a05c1abefe144426ab235ef0b482e1ee",
          "75c6fd418fe3455fbadff5ed2389297f"
        ],
        "Left": -3703.76517549474,
        "Top": 3102.7586999255477,
        "Width": 1847.3369632826052,
        "Height": 942.06140698498893,
        "FontSize": 96.0,
        "InitialTop": 3227.7586999255477,
        "InitialHeight": 869.06140698498893,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "eb5f5e76410e4a8ca8366527edfc6d22",
        "Title": "GRID 소환 및 X,Y 축 분류",
        "Nodes": [
          "673601ec76ac433b9e3e5f6b7b27eded",
          "d7d6cb718066400ba73a43b5668e6735",
          "e492bafe5cc248d9be03d03418fb8ce1",
          "bfc0009de53b4fce9a9ab3923bfc2448",
          "1a61e344483142889dafd2583283306b",
          "6692de8becbd440481d8d76e4a11c2a0",
          "98ad29c45a984e549d4e6f329ebbfc00",
          "ad87295e3a61449a989f3c511cf36dbb",
          "28e60b1f6a334379a719c2ee5b64435e"
        ],
        "Left": -6198.94583609408,
        "Top": 3338.00041136686,
        "Width": 2341.4722577254124,
        "Height": 548.57682821696471,
        "FontSize": 96.0,
        "InitialTop": 3463.00041136686,
        "InitialHeight": 475.57682821696471,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "08590d6a8d1c43c7893b34166b9ef2b2",
        "Title": "EXCEL IMPORT",
        "Nodes": [
          "278ca1d2d6fe4789b4bc2e937d2e5855",
          "8611bb7a0ca24adca00c24ac3195ca2d",
          "fe39a321f01f4323a00f1cf7fa13ed8f",
          "58f9590b14804cf2a2a3937cbd972df1"
        ],
        "Left": 144.449895331476,
        "Top": -45.226387796423751,
        "Width": 668.39415590663157,
        "Height": 396.802614917088,
        "FontSize": 96.0,
        "InitialTop": 79.773612203576249,
        "InitialHeight": 348.802614917088,
        "TextblockHeight": 115.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "2c3df6237c1c476bbcf4090df8067f96",
        "Title": "그리드 좌표별 패밀리 타입 DICTIONARY화-for FDN",
        "Nodes": [
          "b5155a0f2ef4467e96db680d1561607f",
          "6dfe31ccd7ed4d409a901ec932871289",
          "086684ebea154a92b26318417f7076d3",
          "cf4cc24ba02f419bb7230ef0163370cd",
          "338e7ab5651042f898556a328dc2498b",
          "29f4cb5c0a6d4beb98a4ae923f5ef1f6",
          "72b396a81da142c98cbbf530143b8092",
          "ed466c7c77514ae8851c7161a949a808",
          "bc3994b6e7d34f43804756ebd3510dd9",
          "5d5cc409823b457b9d63cf52f9dc5db2",
          "25af2bf415f6407699cc0a26ae9cf6cb",
          "771300a8f3a5435eb60d3feea498815d",
          "e88fcd2868784fb9a05785bc7ed30faf",
          "c66361feb2654ae1af3e5b3d16f225bd",
          "789089c152134a9fbcd08e993cc8fca4",
          "e20eeaad2632476592189ff1712b21c2",
          "3622b430d2f1439d88a3872de2564769",
          "e860efc5b6274749ba12e715c0d991f7",
          "968ac618108c4c3c9a72002d50b77da3",
          "42fb371573f143699cf492dadac8997a",
          "86fcf2b613094bac963d0c476314ff37",
          "ed1dd2daee03434a9b8a74698fc98d9f",
          "1227d5c26b754ac7ab2520d8f9b074ac",
          "6789a03e2dbb4b51b89e2235e0233fda",
          "bce5f605b8c04590838965d18c31b642",
          "89511309785d40ec9971431296a6208b",
          "486d451ddb024b738b86a0ed3ab3eeb0"
        ],
        "Left": 835.4177707820013,
        "Top": -824.27107800473118,
        "Width": 4133.0676655693242,
        "Height": 1194.9457817838954,
        "FontSize": 96.0,
        "InitialTop": -699.27107800473118,
        "InitialHeight": 1101.4454325707188,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "388ef09b6382486cbd63b7f5dd8ce336",
        "Title": "Family Instance 배치 구간",
        "Nodes": [
          "028e47e931894f288ffcff0ea7c0f285",
          "678f81fb21d1412baadaa61347b0addd",
          "3e774b7803914d5695c35b64b90c499c",
          "23df07ab070f49a2ad543ffb14c5d455",
          "d3e2bfceb5bd4f58a34c541a60e05f5f"
        ],
        "Left": 5084.6806324035861,
        "Top": -837.24191193624426,
        "Width": 1155.948908857903,
        "Height": 636.36385486296206,
        "FontSize": 96.0,
        "InitialTop": -712.24191193624426,
        "InitialHeight": 563.36385486296206,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3828805ec7a44954ac029b88807a7524",
        "Title": "EXCEL IMPORT",
        "Nodes": [
          "1071bc156c7446c09d265b5e910c0c78",
          "5822113072a949df95b2c4159245a7f3",
          "d3677c80f763415ab9c8e44b5697e60d",
          "ade99939808d49c195717913e428f2d4"
        ],
        "Left": 166.05587778652171,
        "Top": 2073.2264202630918,
        "Width": 668.39415590663248,
        "Height": 396.80261491708779,
        "FontSize": 96.0,
        "InitialTop": 2198.2264202630918,
        "InitialHeight": 348.80261491708779,
        "TextblockHeight": 115.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "b4828b0bf91e44a1a978539ad3a10be6",
        "Title": "그리드 좌표별 패밀리 타입 DICTIONARY화-for Pedestal",
        "Nodes": [
          "87ca74d879eb469b95a2121f2fac8964",
          "1a1a0e07997e48e3a37d0b91c3d15a32",
          "6d9ec546d5134350a79d68a312151930",
          "f26e7bdb97c5437e9c489ad2438cebf3",
          "19ef3fd0dfad4a449786400d026d9bca",
          "8506cc01f3804fb58157f89446c21cd9",
          "e398e48a451d49aeada6ba9a05306df3",
          "3bc7af86db7a4bbab4b020b8587c90c2",
          "56a9f84604f74967b20f7b84ca79274c",
          "1cd2bfbb43414ca3ac35136c235dd38a",
          "8fe3d43c185b47ba82f59857c51bc7d3",
          "e3c249cfaa8442e6badfe2109cdc2d17",
          "510a37a387e442fc9beca4e8124d0f0c",
          "bbb480d69c4245f588ec4d40b26cf6c2",
          "99833781fc6444c5a0b07fe9247dae43",
          "d8cd22ec5f2a4b128ad213a633ff084d",
          "b2b17061d6c14c42a56fd92ad2ec70de",
          "4ac0408cdd864470af33d84ef857f8ae",
          "49e342a8eb4a43a4b44692c580d0be53",
          "7a4c2b6b4f1a4c119de399aa511dfbc2",
          "8811ac063e9f44c0a8ab812085e91d8e",
          "ff79032e3c8e46c3a0bc0fcc77adb5cb",
          "491ea189a2c644bf9c9ebc91443a5013",
          "ca93d2ad90b84d45a2755c67aeee268f",
          "a1a0b6f675b244bb97c3497919016784",
          "262f4479c17d464d87e4b3cf3a03a053",
          "ac45ad2016724b259da8fae19f516829"
        ],
        "Left": 851.51602808847292,
        "Top": 1335.693864565412,
        "Width": 4133.0676655693278,
        "Height": 1190.7748387804411,
        "FontSize": 96.0,
        "InitialTop": 1460.693864565412,
        "InitialHeight": 1097.2744895672652,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c6faf815f491416faf6ba2c5013d8c0e",
        "Title": "Family Instance 배치 구간",
        "Nodes": [
          "45a710f9570b41deb75d5f9977aa660a",
          "3b60735a1dd845ce829e4edbaf6d5bef",
          "3709f44a92e2435f9c6f741dd77e31bd",
          "adaa84e3b93c43398236dd5cab788d95",
          "73c945a9fa524d359acdeba94580cf8e"
        ],
        "Left": 5128.8543032058042,
        "Top": 1346.2236127833785,
        "Width": 1155.9489088579003,
        "Height": 636.36385486296217,
        "FontSize": 96.0,
        "InitialTop": 1471.2236127833785,
        "InitialHeight": 563.36385486296217,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e851be286d2b40d7870afb1d0027f336",
        "Title": "EXCEL IMPORT",
        "Nodes": [
          "94b2cdf89da84a17a17762bbc938bf0d",
          "d814e6ebeb004f148c2e63ac7de91c14",
          "a1d9888d9aff4a3f97a3e3f2b30237d9",
          "ef2d57ea61844b6597e88afaca885378"
        ],
        "Left": 184.45983730578428,
        "Top": 4280.593373192065,
        "Width": 668.39415590663157,
        "Height": 396.80261491708916,
        "FontSize": 96.0,
        "InitialTop": 4405.593373192065,
        "InitialHeight": 348.80261491708916,
        "TextblockHeight": 115.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "287c98940ad44b379c0af41330ce5a72",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "94ae163ad6404a9d86842a37a09d9ecc",
          "c6ceb57fccdb4103ac1d2255047262c7",
          "2c56a8a7137d430f8899ba16b7013d00",
          "436f8ddeb9494ae49be731d93dc8e90c",
          "449932a843ce492da2f550938dfed2a8",
          "29f43c5ef7d74b1ab44050c12d93de93",
          "02496919c7be45e6aff2ac66f8fff96b",
          "bac1bd7089ad466dbb9985ab2428764e",
          "4aed288d5dea46e7b47b3db5692212f9",
          "cb72d56e17554705b807f01c8c0ce0e9",
          "0f389faae4024b108f7e1f2a72830442",
          "ae3d8c73306c4403978460429b501a2c"
        ],
        "Left": 3544.7607479264975,
        "Top": 4813.7580887820677,
        "Width": 2552.8098640598514,
        "Height": 590.54397438799424,
        "FontSize": 36.0,
        "InitialTop": 4866.7580887820677,
        "InitialHeight": 589.54397438799424,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ffc74fb1323c4b9c8c0f61ecc89dbaad",
        "Title": "grid/ grid 사이 분류",
        "Nodes": [
          "36c98d1e318142b9ab77c7229584313d",
          "1484bf79953f4ffeb6f50d0e86072d9f",
          "9122013fe57441e5939932c67943f979",
          "0b71b6be803c4e3bba11f39aa2dd8f0b",
          "073d48c9a5ac447285c1189f6cab9534"
        ],
        "Left": 6228.0102526621749,
        "Top": 5167.2655270686009,
        "Width": 1100.0,
        "Height": 255.21333333333314,
        "FontSize": 36.0,
        "InitialTop": 5220.2655270686009,
        "InitialHeight": 254.21333333333314,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e4ed3193ef614675b56bee10950ee5af",
        "Title": "그리드(세로방향)별 패밀리 타입",
        "Nodes": [
          "9502f7d48b0c40ce9a44f9ad636982ad",
          "9756d83a96f24b618b938fae6ca285cd",
          "3a64a31dae714e4d9479a1ae94e14840",
          "20dfb49d8e8a42ffaa5a986d73f4fb56",
          "c11aec17d7814c579439c2fa3ea5810b",
          "7485029b2a9d41eb864ef27ca763d239",
          "2b6adf1bd3e24587b7db05d7d9ffc614",
          "694d5991420f46b09ead6e1d7eaae9ca",
          "dd965f4d137b407a872af5aaae948e2a"
        ],
        "Left": 1933.5706119863489,
        "Top": 4840.5443317614126,
        "Width": 1557.6443882693325,
        "Height": 332.39691016835877,
        "FontSize": 36.0,
        "InitialTop": 4893.5443317614126,
        "InitialHeight": 331.39691016835877,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "95a4f35ed9eb4254a385813c62076ad1",
        "Title": "시점",
        "Nodes": [
          "287e9e4bb5114bd3aa0eb7a47fb381c3",
          "8b6e8ea85e374168a8f2313cfe360770",
          "896400266f3f48339a437effc7268ce7",
          "056f066642c54bdea3c7421d9adcff40",
          "fa19c25853ae4887b66c9fdb7e863cfc",
          "aaa071c53bb44f82abaefc7e7a1cb68f",
          "0650b9e6bc0b45b2a2724e55b62c6d42",
          "d1d5e1ee1c844dfca3c0f7951ec0baf0",
          "ecd48b382628464688b6d2ed7c77f199"
        ],
        "Left": 8425.157714566647,
        "Top": 3866.3780633447896,
        "Width": 1851.0,
        "Height": 322.78666666666686,
        "FontSize": 36.0,
        "InitialTop": 3919.3780633447896,
        "InitialHeight": 321.78666666666686,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "8a6a58e8ca7049cd829e40a3a2eff7e8",
        "Title": "종점",
        "Nodes": [
          "a4589a4c79df435c82296232c60047a9",
          "9f2b6e7f32c34781b0605963f54c9dbc",
          "566959261ad24ef890f146098d1f13d1",
          "ca31dd1db2b048fe8ba2f3629bd51ff6",
          "ff56bb10e8354f08a5e652db78a4f274",
          "58ee5ac75c624ed9a1c983c04b526034",
          "2382302a738144d98c7d20f85b9aaba6",
          "f8aceda9bf894b149133621afeb7593c",
          "d829064239df4922ad4c51b8e1024121"
        ],
        "Left": 8437.1414700999485,
        "Top": 4550.6962885257572,
        "Width": 1851.0,
        "Height": 322.78666666666686,
        "FontSize": 36.0,
        "InitialTop": 4603.6962885257572,
        "InitialHeight": 321.78666666666686,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "725649f931e04bd58730bc294a270a47",
        "Title": "시점",
        "Nodes": [
          "ce4f034051cd421d8476eb74da393753",
          "24f7d10883244119b63775f16146c852",
          "a323d5dcfb1443bb82e1925bf978ab37"
        ],
        "Left": 9959.401623708236,
        "Top": 5098.0322674613844,
        "Width": 435.0,
        "Height": 255.36000000000058,
        "FontSize": 36.0,
        "InitialTop": 5151.0322674613844,
        "InitialHeight": 254.36000000000058,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "69a6ca4d2a74426988aad0b797e738e7",
        "Title": "종점",
        "Nodes": [
          "fd5a8d9e2af0472aafa474ee87d16d52",
          "87577d701c3a49c396e66b3ae494d451",
          "5ac67a17167d4686b9462a48164bdfde"
        ],
        "Left": 9962.96209520728,
        "Top": 5643.8465002508483,
        "Width": 429.0,
        "Height": 255.36000000000058,
        "FontSize": 36.0,
        "InitialTop": 5696.8465002508483,
        "InitialHeight": 254.36000000000058,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "44ed888b43b54b549699ac08e8afc324",
        "Title": "그리드 좌표별 패밀리 타입 DICTIONARY화-for Columns",
        "Nodes": [
          "7607b7205fe34a348092cd0707cfe856",
          "ce5ce443cbd14570bbff77ddd994d0de",
          "7e65e418a7e74c37b751d01597c1a55c",
          "5637a3259569401da164d3afc3407aea",
          "eee6e54586984c48b3148b1238123960",
          "5b0b2fd41cf64169b5fe6c174e0e5042",
          "9a13617f47284e00b963b48cc8478f8b",
          "3ed69d38643f449ea2327f9b7fe4337d",
          "4744622aa2264b0db3fc950c239573df",
          "3bca664e305a4c5b96496dcee704f522",
          "36ebb68d73cb4f84a3c1e04a443c9cc0",
          "b8a5d9a97e58401fa0adf52ff9a5b4c8",
          "7564bb75178547869e910182a4ab0949",
          "279731fcdc074b2aa2c9531a74d36bc4",
          "6a4761cb56794133b7ed19059b9b64b2",
          "9a296e3c196147858d1dc203d2b42ba4",
          "d4f99920acb74f4f942d20df8e31b87a",
          "fbf169f8d23f45369a698194657798f7",
          "01ff51b661214395b3f8c15a8fc521c3",
          "73aa8072ce8544efbaa64ba4b616c11d",
          "94e8da616ac44becacebe3d43e5c33af",
          "ec83ee3844ac48018a10900f1d62d8e5",
          "0df43584ae5743829980ccaa7bfafaa8",
          "2cee4fe7ed3a4799a0b7f1c5d14e7479",
          "e1f3873b48ed4a7793680d9734c4bb0a",
          "28b1da4b28bb42ff896a69481ab8ee71",
          "fe00cee549cb414b85332d93a793f605"
        ],
        "Left": 1354.336365366461,
        "Top": 7930.79293052969,
        "Width": 4133.0676655693287,
        "Height": 1194.9457817838947,
        "FontSize": 96.0,
        "InitialTop": 8055.79293052969,
        "InitialHeight": 1101.4454325707184,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "6a0cbe6784704419bfeb8b8c88c1989f",
        "Title": "Family Instance 배치 구간",
        "Nodes": [
          "88e3a316f6474804ad7e583a7a6f3405",
          "39cd037a20bb4288ba6bb833d9261b32",
          "b117653f433a4edd993b10341a069134",
          "1af9893e3a534985924385ce2a4c6852",
          "6d427be34fc44d18a7c73b50cc5a1839"
        ],
        "Left": 5603.59922698805,
        "Top": 7917.8220965981773,
        "Width": 1155.9489088579003,
        "Height": 636.36385486296149,
        "FontSize": 96.0,
        "InitialTop": 8042.8220965981773,
        "InitialHeight": 563.36385486296149,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c009bb6afbb240f4bb34739acb7a9420",
        "Title": "EXCEL IMPORT",
        "Nodes": [
          "1834a85ca23640a5ba710d4ed9df0e50",
          "1a8083fbf0df492485e905b51e9ec693",
          "a1c0fa1ed80f462f8e76424ab71fd245",
          "de7906458d1a4ea093c1096012671df0"
        ],
        "Left": 663.36848991593615,
        "Top": 8709.8376207379988,
        "Width": 668.394155906632,
        "Height": 396.80261491708734,
        "FontSize": 96.0,
        "InitialTop": 8834.8376207379988,
        "InitialHeight": 348.80261491708734,
        "TextblockHeight": 115.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "4cfbafaefa6849188d7d60403d100b0c",
        "Title": "for T/G",
        "Nodes": [
          "c8e359c1e57c41be969f227e4fa10b3f",
          "88d689d22fa2430f9d044357ecc0cf02"
        ],
        "Left": 942.65536672530379,
        "Top": 3436.9911471625669,
        "Width": 7407.671381157762,
        "Height": 468.01916768139063,
        "FontSize": 96.0,
        "InitialTop": 3561.9911471625669,
        "InitialHeight": 299.53829916703444,
        "TextblockHeight": 115.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c8e359c1e57c41be969f227e4fa10b3f",
        "Title": "New Note",
        "Nodes": [],
        "Left": 952.65536672530379,
        "Top": 3561.9911471625669,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "88d689d22fa2430f9d044357ecc0cf02",
        "Title": "New Note",
        "Nodes": [],
        "Left": 8266.3267478830658,
        "Top": 3856.0103148439575,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 681.551303948833,
    "Y": 186.58883846817054,
    "Zoom": 0.050466225478151626
  }
}