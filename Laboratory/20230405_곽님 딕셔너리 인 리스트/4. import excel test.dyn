{
  "Uuid": "7c7faae8-3642-4896-add7-f5d477cd1a2d",
  "IsCustomNode": false,
  "Description": "",
  "Name": "4. import excel test",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "13ffea58cf844b2f8555681fee8d59a1",
      "Inputs": [
        {
          "Id": "8be4934a6130428cbb8934c39fae6a12",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bad96affeb534f69b019a35763d4c7f5",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d4c79bbf9fab48c58bef69e2def241d5",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "db25860d41714209b932d599dceab5b7",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9190b22b6f4a4f8a89d213c904eeb98b",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\OneDrive - Autodesk\\50.DYN\\91.Help John Rivas\\230404 make schedule\\excel.xlsx",
      "InputValue": "D:\\OneDrive - Autodesk\\50.DYN\\91.Help John Rivas\\230404 make schedule\\excel.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "49176b2661ee4b5798f645a3e01a275c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1d22f9ee1aea43c7917ec43b4f29fb94",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"Doors_IFC\",\"Walls_IFC\",\"Windows_IFC\"];",
      "Id": "2ff838ea0d164f3790ecae50290385ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ab5019dd8d2c4951ac75ec5bbe91865d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "false;",
      "Id": "f742a0d5b6d14eecaaca360c5ce3b27f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "afdbb9c84bc5496ca9ca7ca9ce09bd74",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "20953664d4a74647996fdca0e736b437",
      "Inputs": [
        {
          "Id": "3a808a6dab954f0198fbaf420882b0c0",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e804ab33f7ea48dc99785e3fbb6b511d",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Deconstruct@var[]..[]",
      "Id": "9393d481f93542ccbff30b672be1e907",
      "Inputs": [
        {
          "Id": "d7adf2ff40c240618190968bd9d1d7cc",
          "Name": "list",
          "Description": "List to be split.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2042cb455b0476184d9243a82d05a62",
          "Name": "first",
          "Description": "First item in the list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7de0104923a643dc9989018ad3a461c4",
          "Name": "rest",
          "Description": "Rest of the list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given a list, produces the first item in the list, and a new list containing all items except the first.\n\nList.Deconstruct (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "517187452fa246498458855ca5515211",
      "Inputs": [
        {
          "Id": "505c367b8b7f4c33a52e855f63eedf8e",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f36f0d1455a4a3196e5219e094bb89d",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "862254e8a55645e890f1ed54767ea2cd",
      "Inputs": [
        {
          "Id": "4958185a384e46b99261832bb9bfc7db",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c0ae9d4fea643a1b8124ce191c4b0dc",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport RevitServices\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n\r\ndef Unwrap(item):\r\n    result = []\r\n    if isinstance (item, list):\r\n        for i in item:\r\n            result.append(Unwrap(i))\r\n    else:\r\n        result = UnwrapElement(item)\r\n    return result\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nif isinstance(IN[0], list):\r\n    data = IN[0]\r\nelse:\r\n    data = [IN[0]]\r\noutVal = []\r\nfor subData in data:\r\n    dicList = []\r\n    keys = subData[0]\r\n    valueSet = [d for i, d in enumerate(subData) if i != 0]\r\n    for values in valueSet:\r\n        dic = dict()\r\n        for i, value in enumerate(values):\r\n            dic[keys[i]] = value\r\n        dicList.append(dic)      \r\n    \r\n\r\nOUT = dicList",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "a1f916b4c40e469f885787751a9f5733",
      "Inputs": [
        {
          "Id": "1cfab6a0b064411aa0772bee94f8f96b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1233f48a50c545a78f8dd9d8ed7bc2b3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport RevitServices\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n\r\ndef Unwrap(item):\r\n    result = []\r\n    if isinstance (item, list):\r\n        for i in item:\r\n            result.append(Unwrap(i))\r\n    else:\r\n        result = UnwrapElement(item)\r\n    return result\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nif isinstance(IN[0], list):\r\n    data = IN[0]\r\nelse:\r\n    data = [IN[0]]\r\noutVal = []\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n\r\nfor subData in data:\r\n    dicList = []\r\n    keys = subData[0]\r\n    valueSet = [d for i, d in enumerate(subData) if i != 0]\r\n    for values in valueSet:\r\n        dic = dict()\r\n        for i, value in enumerate(values):\r\n            dic[keys[i]] = value\r\n        dicList.append(dic)\r\n    ###\r\n    for dic in dicList:\r\n        element = doc.GetElement(ElementId(dic[\"ElementId\"]))\r\n        elementType = doc.GetElement(element.GetTypeId())\r\n        parameters = []\r\n        for key in keys:\r\n            if key == \"ElementId\":\r\n                continue\r\n            parameter = element.LookupParameter(key)\r\n            if parameter is None:\r\n                parameter = elementType.LookupParameter(key)\r\n            type = parameter.StorageType\r\n            valueToChange = None\r\n            valueExisting = None\r\n            if type == StorageType.Double:\r\n                valueToChange = float(dic[key])\r\n                valueExisting = parameter.AsDouble()\r\n            elif type == StorageType.Integer:\r\n                if dic[key] == \"No\":\r\n                    valueToChange = 0\r\n                elif dic[key] == \"Yes\":\r\n                    valueToChange = 1\r\n                else:\r\n                    valueToChange = int(dic[key])\r\n                valueExisting = parameter.AsInteger()\r\n            elif type == StorageType.String:\r\n                if dic[key] == None:\r\n                    valueToChange = None\r\n                else:\r\n                    valueToChange = str(dic[key])\r\n                if parameter.AsString() == None:\r\n                    valueExisting = None\r\n                else:\r\n                    valueExisting = parameter.AsString()\r\n            elif type == StorageType.ElementId:\r\n                valueToChange = (dic[key])\r\n                valueExisting = parameter.AsElementId()\r\n                \r\n                \r\n            outVal.append([key, valueToChange, valueExisting])\r\n            \r\n            if(valueToChange != valueExisting):\r\n                #CheckIf dataType is Bool\r\n                if parameter.Definition.GetDataType().TypeId == SpecTypeId.Boolean.YesNo.TypeId:\r\n                    parameter.Set(valueToChange)\r\n                    \"\"\"\r\n                    if valueToChange == \"Yes\" or valueToChange == \"yes\":\r\n                        print(\"I'm here\")\r\n                        parameter.Set(1)\r\n                    elif valueToChange == \"No\" or valueToChange == \"no\":\r\n                        print(\"I'm there\")\r\n                        parameter.Set(0)\r\n                    \"\"\"\r\n                elif type == StorageType.Double or type == StorageType.Integer:\r\n                    convertVal = UnitUtils.ConvertToInternalUnits(valueToChange, parameter.GetUnitTypeId())\r\n                    parameter.Set(convertVal)\r\n                else:\r\n                    parameter.Set(valueToChange)\r\n                \r\n            \r\n \r\n        \r\n        #outVal.append(element)\r\n    \r\nTransactionManager.Instance.TransactionTaskDone()    \r\n    \r\n\r\nOUT = outVal",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "3af9b2c4a6d9491580428ba93c55d0fa",
      "Inputs": [
        {
          "Id": "a04d6abb9ede421ab2f30a5421e9329d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "671659b984694f18897cd09b90051d04",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "9190b22b6f4a4f8a89d213c904eeb98b",
      "End": "d7adf2ff40c240618190968bd9d1d7cc",
      "Id": "b2522cbe05434bc387cb81663d9b940e",
      "IsHidden": "False"
    },
    {
      "Start": "9190b22b6f4a4f8a89d213c904eeb98b",
      "End": "1cfab6a0b064411aa0772bee94f8f96b",
      "Id": "177d342d81f74faeb632c75b084cf722",
      "IsHidden": "False"
    },
    {
      "Start": "9190b22b6f4a4f8a89d213c904eeb98b",
      "End": "a04d6abb9ede421ab2f30a5421e9329d",
      "Id": "5add2a7605e640eeb23bd563be65fe00",
      "IsHidden": "False"
    },
    {
      "Start": "1d22f9ee1aea43c7917ec43b4f29fb94",
      "End": "3a808a6dab954f0198fbaf420882b0c0",
      "Id": "81bb1d2fa8894dcdac879b3ae8dd12f0",
      "IsHidden": "False"
    },
    {
      "Start": "ab5019dd8d2c4951ac75ec5bbe91865d",
      "End": "bad96affeb534f69b019a35763d4c7f5",
      "Id": "dda95d896ddc4d23963c9b8ae43cc0e2",
      "IsHidden": "False"
    },
    {
      "Start": "afdbb9c84bc5496ca9ca7ca9ce09bd74",
      "End": "d4c79bbf9fab48c58bef69e2def241d5",
      "Id": "2c76e37233db4814baff9225ec978b3a",
      "IsHidden": "False"
    },
    {
      "Start": "afdbb9c84bc5496ca9ca7ca9ce09bd74",
      "End": "db25860d41714209b932d599dceab5b7",
      "Id": "5e12360c832d4726b590f8ba47ea7c2e",
      "IsHidden": "False"
    },
    {
      "Start": "e804ab33f7ea48dc99785e3fbb6b511d",
      "End": "8be4934a6130428cbb8934c39fae6a12",
      "Id": "bf4957865cb9403ebd247f443ff87601",
      "IsHidden": "False"
    },
    {
      "Start": "c2042cb455b0476184d9243a82d05a62",
      "End": "505c367b8b7f4c33a52e855f63eedf8e",
      "Id": "f7c3eb2ef4f049f1be7b8e17cc90a710",
      "IsHidden": "False"
    },
    {
      "Start": "7de0104923a643dc9989018ad3a461c4",
      "End": "4958185a384e46b99261832bb9bfc7db",
      "Id": "9b373b5d80c14f8c8a07c16544097f18",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "excel.xlsx",
      "ReferenceType": "External",
      "Nodes": [
        "49176b2661ee4b5798f645a3e01a275c"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.1.2727",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Data.ImportExcel",
        "ShowGeometry": true,
        "Id": "13ffea58cf844b2f8555681fee8d59a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 499.66666666666663,
        "Y": 287.66666666666669
      },
      {
        "Name": "File Path",
        "ShowGeometry": true,
        "Id": "49176b2661ee4b5798f645a3e01a275c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -315.48466864490615,
        "Y": 137.87833827893175
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "2ff838ea0d164f3790ecae50290385ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -237.0137901061654,
        "Y": 319.76393256453508
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f742a0d5b6d14eecaaca360c5ce3b27f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13.844708209693295,
        "Y": 451.70524233432235
      },
      {
        "Name": "File From Path",
        "ShowGeometry": true,
        "Id": "20953664d4a74647996fdca0e736b437",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 239.95450049455962,
        "Y": 138.92185954500496
      },
      {
        "Name": "List.Deconstruct",
        "ShowGeometry": true,
        "Id": "9393d481f93542ccbff30b672be1e907",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1106.6105451576318,
        "Y": 301.87557566609445
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "517187452fa246498458855ca5515211",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 961.512394504092,
        "Y": 787.348760331243
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "862254e8a55645e890f1ed54767ea2cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1253.2294039204103,
        "Y": 785.58726554937334
      },
      {
        "Name": "dictionary",
        "ShowGeometry": true,
        "Id": "a1f916b4c40e469f885787751a9f5733",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 856.397226912374,
        "Y": 314.6097589051592
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "3af9b2c4a6d9491580428ba93c55d0fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 866.56471424290828,
        "Y": 590.279357077382
      }
    ],
    "Annotations": [],
    "X": 512.94058262991416,
    "Y": -26.505380453423584,
    "Zoom": 0.66750340855774926
  }
}